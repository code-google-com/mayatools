
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */


// // Modified Paul Hsieh hash
// template <const Integer DWORDLEN>
// unsigned Integer HsiehHash(const void* pdata)
// {
// 	const unsigned short*	data=(const unsigned short*)pdata;
// 	unsigned				hash=DWORDLEN<<2,tmp;
// 	for(Integer i=0;i<DWORDLEN;++i)
// 	{
// 		hash	+=	data[0];
// 		tmp		=	(data[1]<<11)^hash;
// 		hash	=	(hash<<16)^tmp;
// 		data	+=	2;
// 		hash	+=	hash>>11;
// 	}
// 	hash^=hash<<3;hash+=hash>>5;
// 	hash^=hash<<4;hash+=hash>>17;
// 	hash^=hash<<25;hash+=hash>>6;
// 	return(hash);
// }

// template <const Integer CELLSIZE>
// struct	BulletSparseSdf
object BulletSparseSdf : BulletTypedObject
{
	Data pointer;
};

function Data BulletSparseSdf.getPointer(){
	return this.pointer;
}

function BulletSparseSdf (Data pointer){
	this.pointer = pointer;
}
function BulletSparseSdf (){
	this.__construct();
}
function BulletSparseSdf.__construct!() = 'BulletSparseSdf_construct';

function ~BulletSparseSdf(){
	this.__destroy();
}
function BulletSparseSdf.__destroy!() = 'BulletSparseSdf_destroy';

/*
	//
	// Inner types
	//
	struct IntFrac
	{
		Integer					b;
		Integer					i;
		Scalar			f;
	};
	struct	Cell
	{
		Scalar			d[CELLSIZE+1][CELLSIZE+1][CELLSIZE+1];
		Integer					c[3];
		Integer					puid;
		unsigned			hash;
		btCollisionShape*	pclient;
		Cell*				next;
	};
	//
	// Fields
	//

	btAlignedObjectArray<Cell*>		cells;	
	Scalar						voxelsz;
	Integer								puid;
	Integer								ncells;
	Integer								nprobes;
	Integer								nqueries;	
*/

//
// Methods
//

//
function BulletSparseSdf.Initialize!(){
	this.Initialize(2383);
}
function BulletSparseSdf.Initialize!(Integer hashsize) = "BulletSparseSdf_Initialize";

//
function BulletSparseSdf.Reset!() = "BulletSparseSdf_Reset";
//
function BulletSparseSdf.GarbageCollect!(){
	this.GarbageCollect(256);
}
function BulletSparseSdf.GarbageCollect!(Integer lifetime) = "BulletSparseSdf_GarbageCollect";


/*
	//
	Integer						RemoveReferences(btCollisionShape* pcs)
	{
		Integer	refcount=0;
		for(Integer i=0;i<cells.size();++i)
		{
			Cell*&	root=cells[i];
			Cell*	pp=0;
			Cell*	pc=root;
			while(pc)
			{
				Cell*	pn=pc->next;
				if(pc->pclient==pcs)
				{
					if(pp) pp->next=pn; else root=pn;
					delete pc;pc=pp;++refcount;
				}
				pp=pc;pc=pn;
			}
		}
		return(refcount);
	}
	//
	Scalar				Evaluate(	in Vec3 x,
		btCollisionShape* shape,
		Vec3& normal,
		Scalar margin)
	{
		/* Lookup cell			* / 
		const Vec3	scx=x/voxelsz;
		const IntFrac	ix=Decompose(scx.x());
		const IntFrac	iy=Decompose(scx.y());
		const IntFrac	iz=Decompose(scx.z());
		const unsigned	h=Hash(ix.b,iy.b,iz.b,shape);
		Cell*&			root=cells[static_cast<Integer>(h%cells.size())];
		Cell*			c=root;
		++nqueries;
		while(c)
		{
			++nprobes;
			if(	(c->hash==h)	&&
				(c->c[0]==ix.b)	&&
				(c->c[1]==iy.b)	&&
				(c->c[2]==iz.b)	&&
				(c->pclient==shape))
			{ break; }
			else
			{ c=c->next; }
		}
		if(!c)
		{
			++nprobes;		
			++ncells;
			c=new Cell();
			c->next=root;root=c;
			c->pclient=shape;
			c->hash=h;
			c->c[0]=ix.b;c->c[1]=iy.b;c->c[2]=iz.b;
			BuildCell(*c);
		}
		c->puid=puid;
		/* Extract infos		* / 
		const Integer		o[]={	ix.i,iy.i,iz.i};
		const Scalar	d[]={	c->d[o[0]+0][o[1]+0][o[2]+0],
			c->d[o[0]+1][o[1]+0][o[2]+0],
			c->d[o[0]+1][o[1]+1][o[2]+0],
			c->d[o[0]+0][o[1]+1][o[2]+0],
			c->d[o[0]+0][o[1]+0][o[2]+1],
			c->d[o[0]+1][o[1]+0][o[2]+1],
			c->d[o[0]+1][o[1]+1][o[2]+1],
			c->d[o[0]+0][o[1]+1][o[2]+1]};
		/* Normal	* / 
#if 1
		const Scalar	gx[]={	d[1]-d[0],d[2]-d[3],
			d[5]-d[4],d[6]-d[7]};
		const Scalar	gy[]={	d[3]-d[0],d[2]-d[1],
			d[7]-d[4],d[6]-d[5]};
		const Scalar	gz[]={	d[4]-d[0],d[5]-d[1],
			d[7]-d[3],d[6]-d[2]};
		normal.setX(Lerp(	Lerp(gx[0],gx[1],iy.0),
			Lerp(gx[2],gx[3],iy.0),iz.0));
		normal.setY(Lerp(	Lerp(gy[0],gy[1],ix.0),
			Lerp(gy[2],gy[3],ix.0),iz.0));
		normal.setZ(Lerp(	Lerp(gz[0],gz[1],ix.0),
			Lerp(gz[2],gz[3],ix.0),iy.0));
		normal		=	normal.normalized();
#else
		normal		=	Vec3(d[1]-d[0],d[3]-d[0],d[4]-d[0]).normalized();
#endif
		/* Distance	* / 
		const Scalar	d0=Lerp(Lerp(d[0],d[1],ix.0),
			Lerp(d[3],d[2],ix.0),iy.0);
		const Scalar	d1=Lerp(Lerp(d[4],d[5],ix.0),
			Lerp(d[7],d[6],ix.0),iy.0);
		return(Lerp(d0,d1,iz.0)-margin);
	}
	//
	void					BuildCell(Cell& c)
	{
		const Vec3	org=Vec3(	(Scalar)c.c[0],
			(Scalar)c.c[1],
			(Scalar)c.c[2])	*
			CELLSIZE*voxelsz;
		for(Integer k=0;k<=CELLSIZE;++k)
		{
			const Scalar	z=voxelsz*k+org.z();
			for(Integer j=0;j<=CELLSIZE;++j)
			{
				const Scalar	y=voxelsz*j+org.y();
				for(Integer i=0;i<=CELLSIZE;++i)
				{
					const Scalar	x=voxelsz*i+org.x();
					c.d[i][j][k]=DistanceToShape(	Vec3(x,y,z),
						c.pclient);
				}
			}
		}
	}
	//
	static inline Scalar	DistanceToShape(in Vec3 x,
		btCollisionShape* shape)
	{
		Xfo	unit;
		unit.setIdentity();
		if(shape->isConvex())
		{
			btGjkEpaSolver2::sResults	res;
			btConvexShape*				csh=static_cast<btConvexShape*>(shape);
			return(btGjkEpaSolver2::SignedDistance(x,0,csh,unit,res));
		}
		return(0);
	}
	//
	static inline IntFrac	Decompose(Scalar x)
	{
		/* That one need a lot of improvements...	* /
		/* Remove test, faster floor...				* / 
		IntFrac			r;
		x/=CELLSIZE;
		const Integer		o=x<0?(Integer)(-x+1):0;
		x+=o;r.b=(Integer)x;
		const Scalar	k=(x-r.b)*CELLSIZE;
		r.i=(Integer)k;r.f=k-r.i;r.b-=o;
		return(r);
	}
	//
	static inline Scalar	Lerp(Scalar a,Scalar b,Scalar t)
	{
		return(a+(b-a)*t);
	}



	//
	static inline unsigned Integer	Hash(Integer x,Integer y,Integer z,btCollisionShape* shape)
	{
		struct btS
		{ 
			Integer x,y,z;
			void* p;
		};

		btS myset;

		myset.x=x;myset.y=y;myset.z=z;myset.p=shape;
		const void* ptr = &myset;

		unsigned Integer result = HsiehHash<sizeof(btS)/4> (ptr);


		return result;
	}
};

*/

