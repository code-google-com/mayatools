
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */


// //Don't change any of the existing enum values, so add enum types at the end for serialization compatibility
const UInt32 BULLET_CONSTRAINT_TYPE_POINT2POINT_CONSTRAINT_TYPE=3;
const UInt32 BULLET_CONSTRAINT_TYPE_HINGE_CONSTRAINT_TYPE=4;
const UInt32 BULLET_CONSTRAINT_TYPE_CONETWIST_CONSTRAINT_TYPE=5;
const UInt32 BULLET_CONSTRAINT_TYPE_D6_CONSTRAINT_TYPE=6;
const UInt32 BULLET_CONSTRAINT_TYPE_SLIDER_CONSTRAINT_TYPE=7;
const UInt32 BULLET_CONSTRAINT_TYPE_CONTACT_CONSTRAINT_TYPE=8;
const UInt32 BULLET_CONSTRAINT_TYPE_D6_SPRING_CONSTRAINT_TYPE=9;
const UInt32 BULLET_CONSTRAINT_TYPE_MAX_CONSTRAINT_TYPE=10;


// enum BulletConstraintParams
const UInt32 BT_CONSTRAINT_ERP=1;
const UInt32 BT_CONSTRAINT_STOP_ERP=2;
const UInt32 BT_CONSTRAINT_CFM=3;
const UInt32 BT_CONSTRAINT_STOP_CFM=4;



// struct BulletConstraintInfo1 {
// 	Integer m_numConstraintRows,nub;
// };

// struct BulletConstraintInfo2 {
// 	// integrator parameters: frames per second (1/stepsize), default error
// 	// reduction parameter (0..1).
// 	Scalar fps,erp;

// 	// for the first and second body, pointers to two (linear and angular)
// 	// n*3 jacobian sub matrices, stored by rows. these matrices will have
// 	// been initialized to 0 on entry. if the second body is zero then the
// 	// J2xx pointers may be 0.
// 	Scalar *m_J1linearAxis,*m_J1angularAxis,*m_J2linearAxis,*m_J2angularAxis;

// 	// elements to jump from one row to the next in J's
// 	Integer rowskip;

// 	// right hand sides of the equation J*v = c + cfm * lambda. cfm is the
// 	// "constraint force mixing" vector. c is set to zero on entry, cfm is
// 	// set to a constant value (typically very small or zero) value on entry.
// 	Scalar *m_constraintError,*cfm;

// 	// lo and hi limits for variables (set to -/+ infinity on entry).
// 	Scalar *m_lowerLimit,*m_upperLimit;

// 	// findex vector for variables. see the LCP solver interface for a
// 	// description of what this does. this is set to -1 on entry.
// 	// note that the returned indexes are relative to the first index of
// 	// the constraint.
// 	Integer *findex;
// 	// number of solver iterations
// 	Integer m_numIterations;

// 	//damping of the velocity
// 	Scalar	m_damping;
// };



///TypedConstraint is the baseclass for Bullet constraints and vehicles
interface BulletTypedConstraint //: BulletTypedObject
{
	Data getPointer();
	
	// BulletTypedConstraint(UInt32 type, BulletRigidBody& rbA);
	// BulletTypedConstraint(UInt32 type, BulletRigidBody& rbA,BulletRigidBody& rbB);


	Scalar	getBreakingImpulseThreshold();

	setBreakingImpulseThreshold!(Scalar threshold);

	Boolean	isEnabled();

	setEnabled!(Boolean enabled);

	
	BulletRigidBody getRigidBodyA();
	BulletRigidBody getRigidBodyB();
	

	// Integer getUserConstraintType();

	// setUserConstraintType(Integer userConstraintType);
	// setUserConstraintId(Integer uid);

	// Integer getUserConstraintId();

	// setUserConstraintPtr(Object ptr);

	// Object	getUserConstraintPtr();

	// Integer getUid();

	Boolean	needsFeedback();

	///enableFeedback will allow to read the applied linear and angular impulse
	///use getAppliedImpulse, getAppliedLinearImpulse and getAppliedAngularImpulse to read feedback information
	enableFeedback!(Boolean needsFeedback);

	///getAppliedImpulse is an estimated total applied impulse. 
	///This feedback could be used to determine breaking constraints or playing sounds.
	Scalar	getAppliedImpulse();

	UInt32 getConstraintType ();
	
	// setDbgDrawSize(Scalar dbgDrawSize);
	// Scalar getDbgDrawSize();

	///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5). 
	///If no axis is provided, it uses the default axis for this constraint.
	setParam!(Integer num, Scalar value, Integer axis);

	///return the local value of parameter
	Scalar getParam(Integer num, Integer axis);
	
	// virtual	Integer	calculateSerializeBufferSize() const;

	// ///fills the dataBuffer and returns the struct name (and 0 on failure)
	// virtual	const char*	serialize(void* dataBuffer, BulletSerializer* serializer) const;

};

/*
// returns angle in range [-SIMD_2_PI, SIMD_2_PI], closest to one of the limits 
// all arguments should be normalized angles (i.e. in range [-SIMD_PI, SIMD_PI])
SIMD_FORCE_INLINE Scalar BulletAdjustAngleToLimits(Scalar angleInRadians, Scalar angleLowerLimitInRadians, Scalar angleUpperLimitInRadians)
{
	if(angleLowerLimitInRadians >= angleUpperLimitInRadians)
	{
		return angleInRadians;
	}
	else if(angleInRadians < angleLowerLimitInRadians)
	{
		Scalar diffLo = BulletFabs(BulletNormalizeAngle(angleLowerLimitInRadians - angleInRadians));
		Scalar diffHi = BulletFabs(BulletNormalizeAngle(angleUpperLimitInRadians - angleInRadians));
		return (diffLo < diffHi) ? angleInRadians : (angleInRadians + SIMD_2_PI);
	}
	else if(angleInRadians > angleUpperLimitInRadians)
	{
		Scalar diffHi = BulletFabs(BulletNormalizeAngle(angleInRadians - angleUpperLimitInRadians));
		Scalar diffLo = BulletFabs(BulletNormalizeAngle(angleInRadians - angleLowerLimitInRadians));
		return (diffLo < diffHi) ? (angleInRadians - SIMD_2_PI) : angleInRadians;
	}
	else
	{
		return angleInRadians;
	}
}

///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct	BulletTypedConstraintData
{
	BulletRigidBodyData		*m_rbA;
	BulletRigidBodyData		*m_rbB;
	char	*m_name;

	Integer	m_objectType;
	Integer	m_userConstraintType;
	Integer	m_userConstraintId;
	Integer	m_needsFeedback;

	float	m_appliedImpulse;
	float	m_dbgDrawSize;

	Integer	m_disableCollisionsBetweenLinkedBodies;
	char	m_pad4[4];
	
};

SIMD_FORCE_INLINE	Integer	BulletTypedConstraint::calculateSerializeBufferSize() const
{
	return sizeof(BulletTypedConstraintData);
}



class BulletAngularLimit
{
private:
	Scalar 
		m_center,
		m_halfRange,
		m_softness,
		m_biasFactor,
		m_relaxationFactor,
		m_correction,
		m_sign;

	Boolean
		m_solveLimit;

public:
	/// Default constructor initializes limit as inactive, allowing free constraint movement
	BulletAngularLimit()
		:m_center(0.0f),
		m_halfRange(-1.0f),
		m_softness(0.9f),
		m_biasFactor(0.3f),
		m_relaxationFactor(1.0f),
		m_correction(0.0f),
		m_sign(0.0f),
		m_solveLimit(false)
	{}

	/// Sets all limit's parameters.
	/// When low > high limit becomes inactive.
	/// When high - low > 2PI limit is ineffective too becouse no angle can exceed the limit
	void set(Scalar low, Scalar high, Scalar _softness = 0.9f, Scalar _biasFactor = 0.3f, Scalar _relaxationFactor = 1.0f);

	/// Checks conastaint angle against limit. If limit is active and the angle violates the limit
	/// correction is calculated.
	void test(const Scalar angle);

	/// Returns limit's softness
	inline Scalar getSoftness() const
	{
		return m_softness;
	}

	/// Returns limit's bias factor
	inline Scalar getBiasFactor() const
	{
		return m_biasFactor;
	}

	/// Returns limit's relaxation factor
	inline Scalar getRelaxationFactor() const
	{
		return m_relaxationFactor;
	}

	/// Returns correction value evaluated when test() was invoked 
	inline Scalar getCorrection() const
	{
		return m_correction;
	}

	/// Returns sign value evaluated when test() was invoked 
	inline Scalar getSign() const
	{
		return m_sign;
	}

	/// Gives half of the distance between min and max limit angle
	inline Scalar getHalfRange() const
	{
		return m_halfRange;
	}

	/// Returns true when the last test() invocation recognized limit violation
	inline Boolean isLimit() const
	{
		return m_solveLimit;
	}

	/// Checks given angle against limit. If limit is active and angle doesn't fit it, the angle
	/// returned is modified so it equals to the limit closest to given angle.
	void fit(Scalar& angle) const;

	/// Returns correction value multiplied by sign value
	Scalar getError() const;

	Scalar getLow() const;

	Scalar getHigh() const;

};
*/