
/*
 *  Copyright 2010-2013 Fabric Engine Inc. All rights reserved.
 */

/*SPHINX-description
The Manipulation constants used throughout the manipulation system. Custom manipulators need to check the event types they are recieving to ensure they generate the appropriate response. 


*/


// The IDs cover all of the event types propagated by Qt.
// A given DCC will not support all event types, but the IDs must match between
// all DCC, (and standalone tools built using Qt, PyQt, PySide or toher frameworks).


alias UInt32 EventType;
const EventType Event_None =	0;	//	Not an event.
const EventType Event_ActionAdded =	114;	//	A new action has been added (QActionEvent).
const EventType Event_ActionChanged =	113;	//	An action has been changed (QActionEvent).
const EventType Event_ActionRemoved =	115;	//	An action has been removed (QActionEvent).
const EventType Event_ActivationChange =	99;	//	A widget's top-level window activation state has changed.
const EventType Event_ApplicationActivate =	121;	//	This enum has been deprecated. Use ApplicationStateChange instead.
const EventType Event_ApplicationDeactivate =	122;	//	This enum has been deprecated. Use ApplicationStateChange instead.
const EventType Event_ApplicationFontChange =	36;	//	The default application font has changed.
const EventType Event_ApplicationLayoutDirectionChange =	37;	//	The default application layout direction has changed.
const EventType Event_ApplicationPaletteChange =	38;	//	The default application palette has changed.
const EventType Event_ApplicationStateChange =	214;	//	The state of the application has changed.
const EventType Event_ApplicationWindowIconChange =	35;	//	The application's icon has changed.
const EventType Event_ChildAdded =	68;	//	An object gets a child (QChildEvent).
const EventType Event_ChildPolished =	69;	//	A widget child gets polished (QChildEvent).
const EventType Event_ChildRemoved =	71;	//	An object loses a child (QChildEvent).
const EventType Event_Clipboard =	40;	//	The clipboard contents have changed (QClipboardEvent).
const EventType Event_Close =	19;	//	Widget was closed (QCloseEvent).
const EventType Event_CloseSoftwareInputPanel =	200;	//	A widget wants to close the software input panel (SIP).
const EventType Event_ContentsRectChange =	178;	//	The margins of the widget's content rect changed.
const EventType Event_ContextMenu =	82;	//	Context popup menu (QContextMenuEvent).
const EventType Event_CursorChange =	183;	//	The widget's cursor has changed.
const EventType Event_DeferredDelete =	52;	//	The object will be deleted after it has cleaned up (QDeferredDeleteEvent).
const EventType Event_DragEnter =	60;	//	The cursor enters a widget during a drag and drop operation (QDragEnterEvent).
const EventType Event_DragLeave =	62;	//	The cursor leaves a widget during a drag and drop operation (QDragLeaveEvent).
const EventType Event_DragMove =	61;	//	A drag and drop operation is in progress (QDragMoveEvent).
const EventType Event_Drop =	63;	//	A drag and drop operation is completed (QDropEvent).
const EventType Event_DynamicPropertyChange =	170;	//	A dynamic property was added, changed, or removed from the object.
const EventType Event_EnabledChange =	98;	//	Widget's enabled state has changed.
const EventType Event_Enter =	10;	//	Mouse enters widget's boundaries (QEnterEvent).
const EventType Event_EnterEditFocus =	150;	//	An editor widget gains focus for editing. QT_KEYPAD_NAVIGATION must be defined.
const EventType Event_EnterWhatsThisMode =	124;	//	Send to toplevel widgets when the application enters "What's This?" mode.
const EventType Event_Expose =	206;	//	Sent to a window when its on-screen contents are invalidated and need to be flushed from the backing store.
const EventType Event_FileOpen =	116;	//	File open request (QFileOpenEvent).
const EventType Event_FocusIn =	8;	//	Widget or Window gains keyboard focus (QFocusEvent).
const EventType Event_FocusOut =	9;	//	Widget or Window loses keyboard focus (QFocusEvent).
const EventType Event_FocusAboutToChange =	23;	//	Widget or Window focus is about to change (QFocusEvent)
const EventType Event_FontChange =	97;	//	Widget's font has changed.
const EventType Event_Gesture =	198;	//	A gesture was triggered (QGestureEvent).
const EventType Event_GestureOverride =	202;	//	A gesture override was triggered (QGestureEvent).
const EventType Event_GrabKeyboard =	188;	//	Item gains keyboard grab (QGraphicsItem only).
const EventType Event_GrabMouse =	186;	//	Item gains mouse grab (QGraphicsItem only).
const EventType Event_GraphicsSceneContextMenu =	159;	//	Context popup menu over a graphics scene (QGraphicsSceneContextMenuEvent).
const EventType Event_GraphicsSceneDragEnter =	164;	//	The cursor enters a graphics scene during a drag and drop operation (QGraphicsSceneDragDropEvent).
const EventType Event_GraphicsSceneDragLeave =	166;	//	The cursor leaves a graphics scene during a drag and drop operation (QGraphicsSceneDragDropEvent).
const EventType Event_GraphicsSceneDragMove =	165;	//	A drag and drop operation is in progress over a scene (QGraphicsSceneDragDropEvent).
const EventType Event_GraphicsSceneDrop =	167;	//	A drag and drop operation is completed over a scene (QGraphicsSceneDragDropEvent).
const EventType Event_GraphicsSceneHelp =	163;	//	The user requests help for a graphics scene (QHelpEvent).
const EventType Event_GraphicsSceneHoverEnter =	160;	//	The mouse cursor enters a hover item in a graphics scene (QGraphicsSceneHoverEvent).
const EventType Event_GraphicsSceneHoverLeave =	162;	//	The mouse cursor leaves a hover item in a graphics scene (QGraphicsSceneHoverEvent).
const EventType Event_GraphicsSceneHoverMove =	161;	//	The mouse cursor moves inside a hover item in a graphics scene (QGraphicsSceneHoverEvent).
const EventType Event_GraphicsSceneMouseDoubleClick =	158;	//	Mouse press again (double click) in a graphics scene (QGraphicsSceneMouseEvent).
const EventType Event_GraphicsSceneMouseMove =	155;	//	Move mouse in a graphics scene (QGraphicsSceneMouseEvent).
const EventType Event_GraphicsSceneMousePress =	156;	//	Mouse press in a graphics scene (QGraphicsSceneMouseEvent).
const EventType Event_GraphicsSceneMouseRelease =	157;	//	Mouse release in a graphics scene (QGraphicsSceneMouseEvent).
const EventType Event_GraphicsSceneMove =	182;	//	Widget was moved (QGraphicsSceneMoveEvent).
const EventType Event_GraphicsSceneResize =	181;	//	Widget was resized (QGraphicsSceneResizeEvent).
const EventType Event_GraphicsSceneWheel =	168;	//	Mouse wheel rolled in a graphics scene (QGraphicsSceneWheelEvent).
const EventType Event_Hide =	18;	//	Widget was hidden (QHideEvent).
const EventType Event_HideToParent =	27;	//	A child widget has been hidden.
const EventType Event_HoverEnter =	127;	//	The mouse cursor enters a hover widget (QHoverEvent).
const EventType Event_HoverLeave =	128;	//	The mouse cursor leaves a hover widget (QHoverEvent).
const EventType Event_HoverMove =	129;	//	The mouse cursor moves inside a hover widget (QHoverEvent).
const EventType Event_IconDrag =	96;	//	The main icon of a window has been dragged away (QIconDragEvent).
const EventType Event_IconTextChange =	101;	//	Widget's icon text has been changed.
const EventType Event_InputMethod =	83;	//	An input method is being used (QInputMethodEvent).
const EventType Event_InputMethodQuery =	207;	//	A input method query event (QInputMethodQueryEvent)
const EventType Event_KeyboardLayoutChange =	169;	//	The keyboard layout has changed.
const EventType Event_KeyPress =	6;	//	Key press (QKeyEvent).
const EventType Event_KeyRelease =	7;	//	Key release (QKeyEvent).
const EventType Event_LanguageChange =	89;	//	The application translation changed.
const EventType Event_LayoutDirectionChange =	90;	//	The direction of layouts changed.
const EventType Event_LayoutRequest =	76;	//	Widget layout needs to be redone.
const EventType Event_Leave =	11;	//	Mouse leaves widget's boundaries.
const EventType Event_LeaveEditFocus =	151;	//	An editor widget loses focus for editing. QT_KEYPAD_NAVIGATION must be defined.
const EventType Event_LeaveWhatsThisMode =	125;	//	Send to toplevel widgets when the application leaves "What's This?" mode.
const EventType Event_LocaleChange =	88;	//	The system locale has changed.
const EventType Event_NonClientAreaMouseButtonDblClick =	176;	//	A mouse double click occurred outside the client area.
const EventType Event_NonClientAreaMouseButtonPress =	174;	//	A mouse button press occurred outside the client area.
const EventType Event_NonClientAreaMouseButtonRelease =	175;	//	A mouse button release occurred outside the client area.
const EventType Event_NonClientAreaMouseMove =	173;	//	A mouse move occurred outside the client area.
const EventType Event_MacSizeChange =	177;	//	The user changed his widget sizes (Mac OS X only).
const EventType Event_MetaCall =	43;	//	An asynchronous method invocation via QMetaObject::invokeMethod().
const EventType Event_ModifiedChange =	102;	//	Widgets modification state has been changed.
const EventType Event_MouseButtonDblClick =	4;	//	Mouse press again (QMouseEvent).
const EventType Event_MouseButtonPress =	2;	//	Mouse press (QMouseEvent).
const EventType Event_MouseButtonRelease =	3;	//	Mouse release (QMouseEvent).
const EventType Event_MouseMove =	5;	//	Mouse move (QMouseEvent).
const EventType Event_MouseTrackingChange =	109;	//	The mouse tracking state has changed.
const EventType Event_Move =	13;	//	Widget's position changed (QMoveEvent).
const EventType Event_OrientationChange =	208;	//	The screens orientation has changes (QScreenOrientationChangeEvent)
const EventType Event_Paint =	12;	//	Screen update necessary (QPaintEvent).
const EventType Event_PaletteChange =	39;	//	Palette of the widget changed.
const EventType Event_ParentAboutToChange =	131;	//	The widget parent is about to change.
const EventType Event_ParentChange =	21;	//	The widget parent has changed.
const EventType Event_PlatformPanel =	212;	//	A platform specific panel has been requested.
const EventType Event_Polish =	75;	//	The widget is polished.
const EventType Event_PolishRequest =	74;	//	The widget should be polished.
const EventType Event_QueryWhatsThis =	123;	//	The widget should accept the event if it has "What's This?" help.
const EventType Event_RequestSoftwareInputPanel =	199;	//	A widget wants to open a software input panel (SIP).
const EventType Event_Resize =	14;	//	Widget's size changed (QResizeEvent).
const EventType Event_ScrollPrepare =	204;	//	The object needs to fill in its geometry information (QScrollPrepareEvent).
const EventType Event_Scroll =	205;	//	The object needs to scroll to the supplied position (QScrollEvent).
const EventType Event_Shortcut =	117;	//	Key press in child for shortcut key handling (QShortcutEvent).
const EventType Event_ShortcutOverride =	51;	//	Key press in child, for overriding shortcut key handling (QKeyEvent).
const EventType Event_Show =	17;	//	Widget was shown on screen (QShowEvent).
const EventType Event_ShowToParent =	26;	//	A child widget has been shown.
const EventType Event_SockAct =	50;	//	Socket activated, used to implement QSocketNotifier.
const EventType Event_StateMachineSignal =	192;	//	A signal delivered to a state machine (QStateMachine::SignalEvent).
const EventType Event_StateMachineWrapped =	193;	//	The event is a wrapper for, i.e., contains, another event (QStateMachine::WrappedEvent).
const EventType Event_StatusTip =	112;	//	A status tip is requested (QStatusTipEvent).
const EventType Event_StyleChange =	100;	//	Widget's style has been changed.
const EventType Event_TabletMove =	87;	//	Wacom tablet move (QTabletEvent).
const EventType Event_TabletPress =	92;	//	Wacom tablet press (QTabletEvent).
const EventType Event_TabletRelease =	93;	//	Wacom tablet release (QTabletEvent).
const EventType Event_OkRequest =	94;	//	Ok button in decoration pressed. Supported only for Windows CE.
const EventType Event_TabletEnterProximity =	171;	//	Wacom tablet enter proximity event (QTabletEvent), sent to QApplication.
const EventType Event_TabletLeaveProximity =	172;	//	Wacom tablet leave proximity event (QTabletEvent), sent to QApplication.
const EventType Event_ThreadChange =	22;	//	The object is moved to another thread. This is the last event sent to this object in the previous thread. See QObject::moveToThread().
const EventType Event_Timer =	1;	//	Regular timer events (QTimerEvent).
const EventType Event_ToolBarChange =	120;	//	The toolbar button is toggled on Mac OS X.
const EventType Event_ToolTip =	110;	//	A tooltip was requested (QHelpEvent).
const EventType Event_ToolTipChange =	184;	//	The widget's tooltip has changed.
const EventType Event_TouchBegin =	194;	//	Beginning of a sequence of touch-screen or track-pad events (QTouchEvent).
const EventType Event_TouchCancel =	209;	//	Cancellation of touch-event sequence (QTouchEvent).
const EventType Event_TouchEnd =	196;	//	End of touch-event sequence (QTouchEvent).
const EventType Event_TouchUpdate =	195;	//	Touch-screen event (QTouchEvent).
const EventType Event_UngrabKeyboard =	189;	//	Item loses keyboard grab (QGraphicsItem only).
const EventType Event_UngrabMouse =	187;	//	Item loses mouse grab (QGraphicsItem only).
const EventType Event_UpdateLater =	78;	//	The widget should be queued to be repainted at a later time.
const EventType Event_UpdateRequest =	77;	//	The widget should be repainted.
const EventType Event_WhatsThis =	111;	//	The widget should reveal "What's This?" help (QHelpEvent).
const EventType Event_WhatsThisClicked =	118;	//	A link in a widget's "What's This?" help was clicked.
const EventType Event_Wheel =	31;	//	Mouse wheel rolled (QWheelEvent).
const EventType Event_WinEventAct =	132;	//	A Windows-specific activation event has occurred.
const EventType Event_WindowActivate =	24;	//	Window was activated.
const EventType Event_WindowBlocked =	103;	//	The window is blocked by a modal dialog.
const EventType Event_WindowDeactivate =	25;	//	Window was deactivated.
const EventType Event_WindowIconChange =	34;	//	The window's icon has changed.
const EventType Event_WindowStateChange =	105;	//	The window's state (minimized, maximized or full-screen) has changed (QWindowStateChangeEvent).
const EventType Event_WindowTitleChange =	33;	//	The window title has changed.
const EventType Event_WindowUnblocked =	104;	//	The window is unblocked after a modal dialog exited.
const EventType Event_WinIdChange =	203;	//	The window system identifer for this native widget has changed.
const EventType Event_ZOrderChange =	126;	//	The widget's z-order has changed. This event is never sent to top level windows.


alias UInt32 MouseButton;
const MouseButton MouseButton_NoButton = 0;
const MouseButton MouseButton_LeftButton = 1;
const MouseButton MouseButton_RightButton = 2;
const MouseButton MouseButton_MiddleButton = 4;


alias UInt32 Key;
const Key Key_Escape=0x01000000;
const Key Key_Tab=0x01000001;
const Key Key_Backtab=0x01000002;
const Key Key_Backspace=0x01000003;
const Key Key_Return=0x01000004;
const Key Key_Enter=0x01000005;
const Key Key_Insert=0x01000006;
const Key Key_Delete=0x01000007;
const Key Key_Pause=0x01000008;
const Key Key_Print=0x01000009;
const Key Key_SysReq=0x0100000a;
const Key Key_Clear=0x0100000b;
const Key Key_Home=0x01000010;   
const Key Key_End=0x01000011;   
const Key Key_Left=0x01000012;   
const Key Key_Up=0x01000013;   
const Key Key_Right=0x01000014;   
const Key Key_Down=0x01000015;   
const Key Key_PageUp=0x01000016;   
const Key Key_PageDown=0x01000017;   
const Key Key_Shift=0x01000020;   
const Key Key_Control=0x01000021; // Corresponds to the Command key on Mac OS X.
const Key Key_Meta=0x01000022; // Corresponds to the Control keys on on Mac OS X. Maps to the Windows key on Windows keyboards.
const Key Key_Alt=0x01000023;   
const Key Key_AltGr=0x01001103; // When the KeyDown event for this key is sent on Windows, the Ctrl+Alt modifiers are also set.
const Key Key_CapsLock=0x01000024;   
const Key Key_NumLock=0x01000025;   
const Key Key_ScrollLock=0x01000026;   
const Key Key_F1=0x01000030;   
const Key Key_F2=0x01000031;   
const Key Key_F3=0x01000032;   
const Key Key_F4=0x01000033;   
const Key Key_F5=0x01000034;   
const Key Key_F6=0x01000035;   
const Key Key_F7=0x01000036;   
const Key Key_F8=0x01000037;   
const Key Key_F9=0x01000038;   
const Key Key_F10=0x01000039;   
const Key Key_F11=0x0100003a;   
const Key Key_F12=0x0100003b;   
const Key Key_F13=0x0100003c;   
const Key Key_F14=0x0100003d;   
const Key Key_F15=0x0100003e;   
const Key Key_F16=0x0100003f;   
const Key Key_F17=0x01000040;   
const Key Key_F18=0x01000041;   
const Key Key_F19=0x01000042;   
const Key Key_F20=0x01000043;   
const Key Key_F21=0x01000044;   
const Key Key_F22=0x01000045;   
const Key Key_F23=0x01000046;   
const Key Key_F24=0x01000047;   
const Key Key_F25=0x01000048;   
const Key Key_F26=0x01000049;   
const Key Key_F27=0x0100004a;   
const Key Key_F28=0x0100004b;   
const Key Key_F29=0x0100004c;   
const Key Key_F30=0x0100004d;   
const Key Key_F31=0x0100004e;   
const Key Key_F32=0x0100004f;   
const Key Key_F33=0x01000050;   
const Key Key_F34=0x01000051;   
const Key Key_F35=0x01000052;   
const Key Key_Super_L=0x01000053;   
const Key Key_Super_R=0x01000054;   
const Key Key_Menu=0x01000055;   
const Key Key_Hyper_L=0x01000056;   
const Key Key_Hyper_R=0x01000057;   
const Key Key_Help=0x01000058;   
const Key Key_Direction_L=0x01000059;   
const Key Key_Direction_R=0x01000060;   
const Key Key_Space=0x20;
const Key Key_Exclam=0x21;
const Key Key_QuoteDbl=0x22;
const Key Key_NumberSign=0x23;
const Key Key_Dollar=0x24;
const Key Key_Percent=0x25;
const Key Key_Ampersand=0x26;
const Key Key_Apostrophe=0x27;
const Key Key_ParenLeft=0x28;
const Key Key_ParenRight=0x29;
const Key Key_Asterisk=0x2a;
const Key Key_Plus=0x2b;
const Key Key_Comma=0x2c;
const Key Key_Minus=0x2d;
const Key Key_Period=0x2e;
const Key Key_Slash=0x2f;
const Key Key_Key_0=0x30;
const Key Key_Key_1=0x31;
const Key Key_Key_2=0x32;
const Key Key_Key_3=0x33;
const Key Key_Key_4=0x34;
const Key Key_Key_5=0x35;
const Key Key_Key_6=0x36;
const Key Key_Key_7=0x37;
const Key Key_Key_8=0x38;
const Key Key_Key_9=0x39;
const Key Key_Colon=0x3a;
const Key Key_Semicolon=0x3b;
const Key Key_Less=0x3c;
const Key Key_Equal=0x3d;
const Key Key_Greater=0x3e;
const Key Key_Question=0x3f;
const Key Key_At=0x40;
const Key Key_A=0x41;
const Key Key_B=0x42;
const Key Key_C=0x43;
const Key Key_D=0x44;
const Key Key_E=0x45;
const Key Key_F=0x46;
const Key Key_G=0x47;
const Key Key_H=0x48;
const Key Key_I=0x49;
const Key Key_J=0x4a;
const Key Key_K=0x4b;
const Key Key_L=0x4c;
const Key Key_M=0x4d;
const Key Key_N=0x4e;
const Key Key_O=0x4f;
const Key Key_P=0x50;
const Key Key_Q=0x51;
const Key Key_R=0x52;
const Key Key_S=0x53;
const Key Key_T=0x54;
const Key Key_U=0x55;
const Key Key_V=0x56;
const Key Key_W=0x57;
const Key Key_X=0x58;
const Key Key_Y=0x59;
const Key Key_Z=0x5a;
const Key Key_BracketLeft=0x5b;
const Key Key_Backslash=0x5c;
const Key Key_BracketRight=0x5d;
const Key Key_AsciiCircum=0x5e;
const Key Key_Underscore=0x5f;
const Key Key_QuoteLeft=0x60;
const Key Key_BraceLeft=0x7b;
const Key Key_Bar=0x7c;
const Key Key_BraceRight=0x7d;
const Key Key_AsciiTilde=0x7e;
const Key Key_nobreakspace=0x0a0;  
const Key Key_exclamdown=0x0a1;  
const Key Key_cent=0x0a2;  
const Key Key_sterling=0x0a3;  
const Key Key_currency=0x0a4;  
const Key Key_yen=0x0a5;  
const Key Key_brokenbar=0x0a6;  
const Key Key_section=0x0a7;  
const Key Key_diaeresis=0x0a8;  
const Key Key_copyright=0x0a9;  
const Key Key_ordfeminine=0x0aa;  
const Key Key_guillemotleft=0x0ab;  
const Key Key_notsign=0x0ac;  
const Key Key_hyphen=0x0ad;  
const Key Key_registered=0x0ae;  
const Key Key_macron=0x0af;  
const Key Key_degree=0x0b0;  
const Key Key_plusminus=0x0b1;  
const Key Key_twosuperior=0x0b2;  
const Key Key_threesuperior=0x0b3;  
const Key Key_acute=0x0b4;  
const Key Key_mu=0x0b5;  
const Key Key_paragraph=0x0b6;  
const Key Key_periodcentered=0x0b7;  
const Key Key_cedilla=0x0b8;  
const Key Key_onesuperior=0x0b9;  
const Key Key_masculine=0x0ba;  
const Key Key_guillemotright=0x0bb;  
const Key Key_onequarter=0x0bc;  
const Key Key_onehalf=0x0bd;  
const Key Key_threequarters=0x0be;  
const Key Key_questiondown=0x0bf;  
const Key Key_Agrave=0x0c0;  
const Key Key_Aacute=0x0c1;  
const Key Key_Acircumflex=0x0c2;  
const Key Key_Atilde=0x0c3;  
const Key Key_Adiaeresis=0x0c4;  
const Key Key_Aring=0x0c5;  
const Key Key_AE=0x0c6;  
const Key Key_Ccedilla=0x0c7;  
const Key Key_Egrave=0x0c8;  
const Key Key_Eacute=0x0c9;  
const Key Key_Ecircumflex=0x0ca;  
const Key Key_Ediaeresis=0x0cb;  
const Key Key_Igrave=0x0cc;  
const Key Key_Iacute=0x0cd;  
const Key Key_Icircumflex=0x0ce;  
const Key Key_Idiaeresis=0x0cf;  
const Key Key_ETH=0x0d0;  
const Key Key_Ntilde=0x0d1;  
const Key Key_Ograve=0x0d2;  
const Key Key_Oacute=0x0d3;  
const Key Key_Ocircumflex=0x0d4;  
const Key Key_Otilde=0x0d5;  
const Key Key_Odiaeresis=0x0d6;  
const Key Key_multiply=0x0d7;  
const Key Key_Ooblique=0x0d8;  
const Key Key_Ugrave=0x0d9;  
const Key Key_Uacute=0x0da;  
const Key Key_Ucircumflex=0x0db;  
const Key Key_Udiaeresis=0x0dc;  
const Key Key_Yacute=0x0dd;  
const Key Key_THORN=0x0de;  
const Key Key_ssharp=0x0df;  
const Key Key_division=0x0f7;  
const Key Key_ydiaeresis=0x0ff;  
const Key Key_Multi_key=0x01001120;
const Key Key_Codeinput=0x01001137;
const Key Key_SingleCandidate=0x0100113c;
const Key Key_MultipleCandidate=0x0100113d;
const Key Key_PreviousCandidate=0x0100113e;
const Key Key_Mode_switch=0x0100117e;
const Key Key_Kanji=0x01001121;
const Key Key_Muhenkan=0x01001122;
const Key Key_Henkan=0x01001123;
const Key Key_Romaji=0x01001124;
const Key Key_Hiragana=0x01001125;
const Key Key_Katakana=0x01001126;
const Key Key_Hiragana_Katakana=0x01001127;
const Key Key_Zenkaku=0x01001128;
const Key Key_Hankaku=0x01001129;
const Key Key_Zenkaku_Hankaku=0x0100112a;
const Key Key_Touroku=0x0100112b;
const Key Key_Massyo=0x0100112c;
const Key Key_Kana_Lock=0x0100112d;
const Key Key_Kana_Shift=0x0100112e;
const Key Key_Eisu_Shift=0x0100112f;
const Key Key_Eisu_toggle=0x01001130;
const Key Key_Hangul=0x01001131;
const Key Key_Hangul_Start=0x01001132;
const Key Key_Hangul_End=0x01001133;
const Key Key_Hangul_Hanja=0x01001134;
const Key Key_Hangul_Jamo=0x01001135;
const Key Key_Hangul_Romaja=0x01001136;
const Key Key_Hangul_Jeonja=0x01001138;
const Key Key_Hangul_Banja=0x01001139;
const Key Key_Hangul_PreHanja=0x0100113a;
const Key Key_Hangul_PostHanja=0x0100113b;
const Key Key_Hangul_Special=0x0100113f;
const Key Key_Dead_Grave=0x01001250;
const Key Key_Dead_Acute=0x01001251;
const Key Key_Dead_Circumflex=0x01001252;
const Key Key_Dead_Tilde=0x01001253;
const Key Key_Dead_Macron=0x01001254;
const Key Key_Dead_Breve=0x01001255;
const Key Key_Dead_Abovedot=0x01001256;
const Key Key_Dead_Diaeresis=0x01001257;
const Key Key_Dead_Abovering=0x01001258;
const Key Key_Dead_Doubleacute=0x01001259;
const Key Key_Dead_Caron=0x0100125a;
const Key Key_Dead_Cedilla=0x0100125b;
const Key Key_Dead_Ogonek=0x0100125c;
const Key Key_Dead_Iota=0x0100125d;
const Key Key_Dead_Voiced_Sound=0x0100125e;
const Key Key_Dead_Semivoiced_Sound=0x0100125f;
const Key Key_Dead_Belowdot=0x01001260;
const Key Key_Dead_Hook=0x01001261;
const Key Key_Dead_Horn=0x01001262;
const Key Key_Back=0x01000061;
const Key Key_Forward=0x01000062;
const Key Key_Stop=0x01000063;
const Key Key_Refresh=0x01000064;
const Key Key_VolumeDown=0x01000070;
const Key Key_VolumeMute=0x01000071;
const Key Key_VolumeUp=0x01000072;
const Key Key_BassBoost=0x01000073;
const Key Key_BassUp=0x01000074;
const Key Key_BassDown=0x01000075;
const Key Key_TrebleUp=0x01000076;
const Key Key_TrebleDown=0x01000077;
const Key Key_MediaPlay=0x01000080;
const Key Key_MediaStop=0x01000081;
const Key Key_MediaPrevious=0x01000082;
const Key Key_MediaNext=0x01000083;
const Key Key_MediaRecord=0x01000084;
const Key Key_MediaPause=0x1000085;
const Key Key_MediaTogglePlayPause=0x1000086;
const Key Key_HomePage=0x01000090;
const Key Key_Favorites=0x01000091;
const Key Key_Search=0x01000092;
const Key Key_Standby=0x01000093;
const Key Key_OpenUrl=0x01000094;
const Key Key_LaunchMail=0x010000a0;
const Key Key_LaunchMedia=0x010000a1;
const Key Key_Launch0=0x010000a2; // On X11 this key is mapped to "My Computer" (XF86XK_MyComputer) key for legacy reasons.
const Key Key_Launch1=0x010000a3; // On X11 this key is mapped to "Calculator" (XF86XK_Calculator) key for legacy reasons.
const Key Key_Launch2=0x010000a4; // On X11 this key is mapped to XF86XK_Launch0 key for legacy reasons.
const Key Key_Launch3=0x010000a5; // On X11 this key is mapped to XF86XK_Launch1 key for legacy reasons.
const Key Key_Launch4=0x010000a6; // On X11 this key is mapped to XF86XK_Launch2 key for legacy reasons.
const Key Key_Launch5=0x010000a7; // On X11 this key is mapped to XF86XK_Launch3 key for legacy reasons.
const Key Key_Launch6=0x010000a8; // On X11 this key is mapped to XF86XK_Launch4 key for legacy reasons.
const Key Key_Launch7=0x010000a9; // On X11 this key is mapped to XF86XK_Launch5 key for legacy reasons.
const Key Key_Launch8=0x010000aa; // On X11 this key is mapped to XF86XK_Launch6 key for legacy reasons.
const Key Key_Launch9=0x010000ab; // On X11 this key is mapped to XF86XK_Launch7 key for legacy reasons.
const Key Key_LaunchA=0x010000ac; // On X11 this key is mapped to XF86XK_Launch8 key for legacy reasons.
const Key Key_LaunchB=0x010000ad; // On X11 this key is mapped to XF86XK_Launch9 key for legacy reasons.
const Key Key_LaunchC=0x010000ae; // On X11 this key is mapped to XF86XK_LaunchA key for legacy reasons.
const Key Key_LaunchD=0x010000af; // On X11 this key is mapped to XF86XK_LaunchB key for legacy reasons.
const Key Key_LaunchE=0x010000b0; // On X11 this key is mapped to XF86XK_LaunchC key for legacy reasons.
const Key Key_LaunchF=0x010000b1; // On X11 this key is mapped to XF86XK_LaunchD key for legacy reasons.
const Key Key_LaunchG=0x0100010e; // On X11 this key is mapped to XF86XK_LaunchE key for legacy reasons.
const Key Key_LaunchH=0x0100010f; // On X11 this key is mapped to XF86XK_LaunchF key for legacy reasons.
const Key Key_MonBrightnessUp=0x010000b2;
const Key Key_MonBrightnessDown=0x010000b3;
const Key Key_KeyboardLightOnOff=0x010000b4;
const Key Key_KeyboardBrightnessUp=0x010000b5;
const Key Key_KeyboardBrightnessDown=0x010000b6;
const Key Key_PowerOff=0x010000b7;
const Key Key_WakeUp=0x010000b8;
const Key Key_Eject=0x010000b9;
const Key Key_ScreenSaver=0x010000ba;
const Key Key_WWW=0x010000bb;
const Key Key_Memo=0x010000bc;
const Key Key_LightBulb=0x010000bd;
const Key Key_Shop=0x010000be;
const Key Key_History=0x010000bf;
const Key Key_AddFavorite=0x010000c0;
const Key Key_HotLinks=0x010000c1;
const Key Key_BrightnessAdjust=0x010000c2;
const Key Key_Finance=0x010000c3;
const Key Key_Community=0x010000c4;
const Key Key_AudioRewind=0x010000c5;
const Key Key_BackForward=0x010000c6;
const Key Key_ApplicationLeft=0x010000c7;
const Key Key_ApplicationRight=0x010000c8;
const Key Key_Book=0x010000c9;
const Key Key_CD=0x010000ca;
const Key Key_ToDoList=0x010000cc;   
const Key Key_ClearGrab=0x010000cd;   
const Key Key_Close=0x010000ce;   
const Key Key_Copy=0x010000cf;   
const Key Key_Cut=0x010000d0;   
const Key Key_Display=0x010000d1;   
const Key Key_DOS=0x010000d2;   
const Key Key_Documents=0x010000d3;   
const Key Key_Excel=0x010000d4;   
const Key Key_Explorer=0x010000d5;   
const Key Key_Game=0x010000d6;   
const Key Key_Go=0x010000d7;   
const Key Key_iTouch=0x010000d8;   
const Key Key_LogOff=0x010000d9;   
const Key Key_Market=0x010000da;   
const Key Key_Meeting=0x010000db;   
const Key Key_MenuKB=0x010000dc;   
const Key Key_MenuPB=0x010000dd;   
const Key Key_MySites=0x010000de;   
const Key Key_News=0x010000df;   
const Key Key_OfficeHome=0x010000e0;   
const Key Key_Option=0x010000e1;   
const Key Key_Paste=0x010000e2;   
const Key Key_Phone=0x010000e3;   
const Key Key_Calendar=0x010000e4;   
const Key Key_Reply=0x010000e5;   
const Key Key_Reload=0x010000e6;   
const Key Key_RotateWindows=0x010000e7;   
const Key Key_RotationPB=0x010000e8;   
const Key Key_RotationKB=0x010000e9;   
const Key Key_Save=0x010000ea;   
const Key Key_Send=0x010000eb;   
const Key Key_Spell=0x010000ec;   
const Key Key_SplitScreen=0x010000ed;   
const Key Key_Support=0x010000ee;   
const Key Key_TaskPane=0x010000ef;   
const Key Key_Terminal=0x010000f0;   
const Key Key_Tools=0x010000f1;   
const Key Key_Travel=0x010000f2;   
const Key Key_Video=0x010000f3;   
const Key Key_Word=0x010000f4;   
const Key Key_Xfer=0x010000f5;   
const Key Key_ZoomIn=0x010000f6;   
const Key Key_ZoomOut=0x010000f7;   
const Key Key_Away=0x010000f8;   
const Key Key_Messenger=0x010000f9;   
const Key Key_WebCam=0x010000fa;   
const Key Key_MailForward=0x010000fb;   
const Key Key_Pictures=0x010000fc;   
const Key Key_Music=0x010000fd;   
const Key Key_Battery=0x010000fe;   
const Key Key_Bluetooth=0x010000ff;   
const Key Key_WLAN=0x01000100;   
const Key Key_UWB=0x01000101;   
const Key Key_AudioForward=0x01000102;   
const Key Key_AudioRepeat=0x01000103;   
const Key Key_AudioRandomPlay=0x01000104;   
const Key Key_Subtitle=0x01000105;   
const Key Key_AudioCycleTrack=0x01000106;   
const Key Key_Time=0x01000107;   
const Key Key_Hibernate=0x01000108;   
const Key Key_View=0x01000109;   
const Key Key_TopMenu=0x0100010a;   
const Key Key_PowerDown=0x0100010b;   
const Key Key_Suspend=0x0100010c;   
const Key Key_ContrastAdjust=0x0100010d;   
const Key Key_MediaLast=0x0100ffff;   
const Key Key_unknown=0x01ffffff;   
const Key Key_Camera=0x01100020; // A key to activate the camera shutter
const Key Key_CameraFocus=0x01100021; // A key to focus the camera
const Key Key_Context1=0x01100000;   
const Key Key_Context2=0x01100001;   
const Key Key_Context3=0x01100002;   
const Key Key_Context4=0x01100003;   
const Key Key_Flip=0x01100006;   
const Key Key_No=0x01010002;   
const Key Key_Select=0x01010000;   
const Key Key_Yes=0x01010001;   
const Key Key_Execute=0x01020003;   
const Key Key_Printer=0x01020002;   
const Key Key_Play=0x01020005;   
const Key Key_Sleep=0x01020004;   
const Key Key_Zoom=0x01020006;   
const Key Key_Cancel=0x01020001;   


alias UInt32 ModiferKey;
const ModiferKey ModiferKey_NoModifier = 0x00000000; // No modifier key is pressed.
const ModiferKey ModiferKey_Shift = 0x02000000; // A Shift key on the keyboard is pressed.
const ModiferKey ModiferKey_Ctrl = 0x04000000; // A Ctrl key on the keyboard is pressed.
const ModiferKey ModiferKey_Alt = 0x08000000; // An Alt key on the keyboard is pressed.
const ModiferKey ModiferKey_Meta = 0x10000000; // A Meta key on the keyboard is pressed.
const ModiferKey ModiferKey_Keypad = 0x20000000; // A keypad button is pressed.
const ModiferKey ModiferKey_GroupSwitch = 0x40000000; // X11 only. A Mode_switch key on the keyboard is pressed.


// Manipulation Modes are specific to Gizmo Manipulators, and are used to filter the displayed gizmos. 
alias UInt32 ManipulationMode;
const ManipulationMode ManipulationMode_Position_X = 1<<0;
const ManipulationMode ManipulationMode_Position_Y = 1<<1;
const ManipulationMode ManipulationMode_Position_Z = 1<<2;
const ManipulationMode ManipulationMode_Position = ManipulationMode_Position_X|ManipulationMode_Position_Y|ManipulationMode_Position_Z;

const ManipulationMode ManipulationMode_Orientation_X = 1<<3;
const ManipulationMode ManipulationMode_Orientation_Y = 1<<4;
const ManipulationMode ManipulationMode_Orientation_Z = 1<<5;
const ManipulationMode ManipulationMode_Orientation = ManipulationMode_Orientation_X|ManipulationMode_Orientation_Y|ManipulationMode_Orientation_Z;

const ManipulationMode ManipulationMode_Scale_X = 1<<6;
const ManipulationMode ManipulationMode_Scale_Y = 1<<7;
const ManipulationMode ManipulationMode_Scale_Z = 1<<8;
const ManipulationMode ManipulationMode_Scale = ManipulationMode_Scale_X|ManipulationMode_Scale_Y|ManipulationMode_Scale_Z;
