global proc geNFS14_NFS13NormalTools_UI()
{
	global int $displayNormalSwitch, $displayAllNormalSwitch;
	$displayNormalSwitch = 0; $displayAllNormalSwitch = 0;
	global string $gMainWindow;
	int $widthHeight[] = `window -q -wh $gMainWindow`;
	int $minHeight = 720;
	if (`window -exists NORMALWINDOW`) { deleteUI -window NORMALWINDOW; }
				
		// create a window to hold the controls		
		window -title "Normal Tweakage!" NORMALWINDOW;
		
		if ($widthHeight[1] < $minHeight){
			scrollLayout -width 265 -hst 16 -vst 16 -parent NORMALWINDOW NormalWindowScrollUI;
			columnLayout -width 265 -adjustableColumn true -parent NormalWindowScrollUI NormalWindowUI;
		} else {
			columnLayout -width 265 -adjustableColumn true -parent NORMALWINDOW NormalWindowUI;
		}
		
		

		text -w 160 -align "left" -label "-----------Hold mouse over buttons to get tooltips!------------\n" -parent NormalWindowUI;
		
		// DISPLAY VERTEX NORMALS ------------------------------------------------------------------------------------------------------------------------------------------------
		rowLayout -numberOfColumns 3 -cw3 150 50 50 -cat 1 "left" 0 -parent NormalWindowUI DisplayNormalTextColumnLayout;
			text -w 150 -font "boldLabelFont" -align "left" -label "Display Vertex Normals" -parent DisplayNormalTextColumnLayout;
			floatField -w 50 -v 0.5 -parent DisplayNormalTextColumnLayout normalLengthFloatField;
			text -w 50 -font "boldLabelFont" -align "left" -label " Length" -parent DisplayNormalTextColumnLayout;
					
		rowLayout -numberOfColumns 2 -cw2 125 125 -cat 1 "left" 0 -parent NormalWindowUI DisplayNormalsColumnLayout;
			button -en 1 -label "      Toggle Selected" -width 125 -command "CG_displayNormalsOnSelected();" -p DisplayNormalsColumnLayout -ann "Toggle display of vertex normals on your selected object" DisplaySelectedNormalsButton;
			button -en 1 -label "     Toggle Everything" -width 125 -command "CG_displayAllNormalsOnSelected();" -p DisplayNormalsColumnLayout -ann "Toggle display of vertex normals on all objects in the scene" DisplayAllNormalsButton;
		
		text -font "boldLabelFont" -align "left" -label "---------------------------------------------------------------" -parent NormalWindowUI;
		
		// COPY / PASTE VERTEX NORMALS -------------------------------------------------------------------------------------------------------------------------------------------
		
		rowLayout -numberOfColumns 1 -cw1 250 -cat 1 "left" 0 -parent NormalWindowUI CopyPasteRowLayout;
			text -w 250 -font "boldLabelFont" -align "left" -label "Copy/Paste Vertex Normals" -parent CopyPasteRowLayout;
					
		rowLayout -numberOfColumns 3 -cw3 40 85 125 -cat 1 "left" 0 -parent NormalWindowUI CopyPasteColumnLayout;
			button -en 1 -label " Copy" -width 40 -command "CG_copyVertexNormal" -p CopyPasteColumnLayout -ann "Select a vertex to copy its normal" copyVertexNormalButton;
			button -en 1 -label " Copy Average" -width 85 -command "CG_copyAverageVertexNormal" -p CopyPasteColumnLayout -ann "Select some vertices and copy average normal" copyMultipleVertexNormalButton;
			button -en 1 -label "            Paste Normal(s)" -width 125 -command "CG_pasteVertexNormals(\"x\")" -p CopyPasteColumnLayout -ann "Select some vertices to paste the copied vertex to" pasteVertexNormalButton;
		
		rowLayout -numberOfColumns 1 -cw1 250 -cal 1 "center" -parent NormalWindowUI CopyPasteColumn1Layout;
			button -en 1 -label "               Copy / Average / Paste Normals               " -rs false -p CopyPasteColumn1Layout -command "CG_copyAveragePasteVertexNormal";
		
		rowLayout -numberOfColumns 2 -cw2 125 125 -cat 1 "left" 0 -parent NormalWindowUI CopyPasteColumn2Layout;
			text -label " Paste for opposite side -->" -p CopyPasteColumn2Layout whitespaceText;
			button -en 1 -label "        -X Paste Normal(s)" -width 125 -command "CG_pasteVertexNormals(\"-x\")" -p CopyPasteColumn2Layout -ann "As paste but will paste a normal with a mirrored X.\nUse this when pasting to the other side of the car." pasteXVertexNormalButton;
			
		rowLayout -numberOfColumns 2 -cw2 125 125 -cat 1 "left" 0 -parent NormalWindowUI CopyPasteColumn3Layout;
			text -label "   Also finds -X & pastes -->" -p CopyPasteColumn3Layout whitespace2Text;
			button -en 1 -label "   Mirror Paste Normal(s)" -width 125 -command "CG_pasteVertexNormals(\"-X\")" -p CopyPasteColumn3Layout -ann "As paste but this will find the equivalent vertex on\n the other side of the car and paste to this too." pasteMirrorVertexNormalButton;
				
		text -font "boldLabelFont" -align "left" -label "---------------------------------------------------------------" -parent NormalWindowUI;
		
		// EDIT MULTIPLE VERTEX NORMALS -----------------------------------------------------------------------------------------------------------------------------------------
			
		text -font "boldLabelFont" -align "left" -label "Edit multiple Vertex normals" -parent NormalWindowUI;
		
		rowLayout -numberOfColumns 2 -cw2 125 125 -cat 1 "left" 0 -parent NormalWindowUI alignToPointsColumnLayout;
			button -en 1 -label "  Edit Selected Normals" -width 125 -command "CG_createNormalLocators" -p alignToPointsColumnLayout -ann "Select some normals, and press this button. It will create locators at the end of each vertex normal that you can edit and the normals point to. Click REMOVE TWEAKER when done" alignToPointsButton;
			button -en 0 -label "   REMOVE TWEAKER       " -width 125 -command "CG_killIndividualAimingNormalScriptJob" -p alignToPointsColumnLayout -ann "Press this to remove the locators when you are done!" killAlignToPointsButton;
			
		text -font "boldLabelFont" -align "left" -label "---------------------------------------------------------------" -parent NormalWindowUI;
					
		// EXPAND / PINCH VERTEX NORMALS -----------------------------------------------------------------------------------------------------------------------------------------	
	
		text -font "boldLabelFont" -align "left" -label "Expand/Pinch Normals in X/Y/Z Axis" -parent NormalWindowUI;	
		
		rowLayout -numberOfColumns 5 -cw5 65 70 40 40 40 -cat 1 "left" 0 -parent NormalWindowUI PincheExpandColumnLayout;	
			checkBox -w 65 -label "Expand /" -value 1 -onCommand "global int $eop;$eop=-1;checkBox -e -v 0 pinchCheckBox" -parent PincheExpandColumnLayout expandCheckBox;
			checkBox -w 70 -label "Pinch in" -onCommand "global int $eop;$eop=1;checkBox -e -v 0 expandCheckBox" -parent PincheExpandColumnLayout pinchCheckBox;
			checkBox -w 40 -v 1 -label "X /" -parent PincheExpandColumnLayout pinchXCheckBox;
			checkBox -w 40 -v 1 -label "Y /" -parent PincheExpandColumnLayout pinchYCheckBox;
			checkBox -w 40 -v 1 -label "Z" -parent PincheExpandColumnLayout pinchZCheckBox;		
			
		rowLayout -numberOfColumns 2 -cw2 125 125 -cat 1 "left" 0 -parent NormalWindowUI PinchNormalsColumnLayout;
			button -en 1 -label "  Edit Selected Normals" -width 125 -command "CG_pinchNormalsToAPoint()" -p PinchNormalsColumnLayout -ann "Select some vertices and press this. It will create a locator that the normals will point towards or away from. They can be independently effected in X/Y/Z and expand or pinch toward the locator. Click REMOVE TWEAKER when done" PinchButton;
			button -en 0 -label "   REMOVE TWEAKER" -width 125 -command "CG_killPinchAimingNormalScriptJob()" -p PinchNormalsColumnLayout -ann "Pressing this will remove the locator they all point to." killPinchButton;
			
		text -font "boldLabelFont" -align "left" -label "---------------------------------------------------------------" -parent NormalWindowUI;
		
		// BLEND TO/AWAY VERTEX NORMALS -----------------------------------------------------------------------------------------------------------------------------------------	
	
		text -font "boldLabelFont" -align "left" -label "Tweak verts towards/away average normal" -parent NormalWindowUI;	
		text -font "boldLabelFont" -align "left" -label "Away<-------------------------->Towards | VALUE" -parent NormalWindowUI;	
		
		rowLayout -numberOfColumns 2 -cw2 200 50 -cat 1 "left" 0 -parent NormalWindowUI BlendRowLayout;	
			floatSlider -w 200 -min -10 -max 10 -value 0 -step 0.01 -dc "CG_updateblendLocators" -parent BlendRowLayout blendSlider;
			floatField -w 50 -v `floatSlider -q -v blendSlider` -cc "floatSlider -e -v `floatField -q -v blendFloatField` blendSlider;CG_updateblendLocators();" -parent BlendRowLayout blendFloatField;
						
		rowLayout -numberOfColumns 2 -cw2 125 125 -cat 1 "left" 0 -parent NormalWindowUI BlendColumnLayout;
			button -en 1 -label "  Edit Selected Normals" -width 125 -command "CG_blendNormalsToAPoint()" -p BlendColumnLayout -ann "Select some vertices and click this. Moving the slider will push or pull the normals towards or away from the average normal. Click REMOVE TWEAKER when done" BlendButton;
			button -en 0 -label "   REMOVE TWEAKER" -width 125 -command "CG_killBlendNormals()" -p BlendColumnLayout -ann "This will remove the tool." killBlendButton;
			
		text -font "boldLabelFont" -align "left" -label "---------------------------------------------------------------" -parent NormalWindowUI;
		
		// BLEND TO/AWAY EDGE VERTEX NORMALS -----------------------------------------------------------------------------------------------------------------------------------------	
	
		text -font "boldLabelFont" -align "left" -label "Tweak edges away/toward average normal" -parent NormalWindowUI;	
		text -font "boldLabelFont" -align "left" -label "Away<-------------------------->Towards | VALUE" -parent NormalWindowUI;	
		
		rowLayout -numberOfColumns 2 -cw2 200 50 -cat 1 "left" 0 -parent NormalWindowUI EdgeBlendRowLayout;	
			floatSlider -w 200 -min -5 -max 5 -value 0.0 -step 0.01 -dc "CG_updateEdgeNormals" -parent EdgeBlendRowLayout edgeBlendSlider;
			floatField -w 50 -v `floatSlider -q -v edgeBlendSlider` -cc "floatSlider -e -v `floatField -q -v edgeBlendFloatField` edgeBlendSlider;CG_updateEdgeNormals();" -parent EdgeBlendRowLayout edgeBlendFloatField;
						
		rowLayout -numberOfColumns 2 -cw2 125 125 -cat 1 "left" 0 -parent NormalWindowUI EdgeBlendColumnLayout;
			button -en 1 -label "  Edit Selected Normals" -width 125 -command "CG_createEdgeBlendNormals()" -p EdgeBlendColumnLayout -ann "Select parallel edges e.g. a shut line, a swage line etc and press this button. It will bend the normals in or out to pinch/expand the reflection. Click REMOVE TWEAKER when done" EdgeBlendButton;
			button -en 0 -label "   REMOVE TWEAKER" -width 125 -command "CG_killEdgeBlendNormals()" -p EdgeBlendColumnLayout -ann "This will remove the tool" killEdgeBlendButton;
			
		text -font "boldLabelFont" -align "left" -label "---------------------------------------------------------------" -parent NormalWindowUI;
		
		// TRANSFER VERTEX NORMALS -----------------------------------------------------------------------------------------------------------------------------------------	
					
		text -font "boldLabelFont" -align "left" -label "Transfer Normals e.g. Proxy to LOD" -parent NormalWindowUI;
		
		rowLayout -numberOfColumns 1 -cw1 250 -cat 1 "left" 0 -parent NormalWindowUI TransferNormalsColumnLayout;
			button -en 1 -label "        Transfer - select TARGET then SOURCE" -width 250 -command "CopyNormals()" -p TransferNormalsColumnLayout -ann "Select a mesh or a vertex selection first then shift select a source object. click here to copy the normals from the source object" TransferNormalsButton;
			
		text -font "boldLabelFont" -align "left" -label "---------------------------------------------------------------" -parent NormalWindowUI;
			
		text -font "boldLabelFont" -align "left" -label "Unlocked Normals" -parent NormalWindowUI;
		
		rowLayout -numberOfColumns 2 -cw2 100 150 -cat 1 "left" 0 -parent NormalWindowUI UnlockedNormalsColumnLayout;
			button -en 1 -label "   Lock Unlocked" -width 100 -command "CG_lockUnlockedNormalsOnSelected()" -p UnlockedNormalsColumnLayout -ann "Select an object and this will find and lock any unlocked normals on it." selectUnlockedNormalsButton;
			button -en 1 -label "Lock Unlocked on ALL LODs" -width 150 -command "CG_lockUnlockedNormalsOnAllLODs()" -p UnlockedNormalsColumnLayout -ann "This will lock unlocked normals on all LODs except Proxy" lockSelectedNormalsButton;
			
		showWindow;
		
		if ($widthHeight[1] < $minHeight){ 
			window -e -w 290 -h 500 NORMALWINDOW;
		} else {
			window -e -w 265 -h 632 NORMALWINDOW;
		}
		
		
}

global proc CG_createNormalLocators()
{	
	// Update selection mode
	setObjectPickMask "Surface" false;
	updateObjectSelectionMasks;
	updateComponentSelectionMasks;
		
	// Create Global Selection
	global string $sel[], $aimLoc[];
	clear($sel); clear ($aimLoc);
	
	// Locator Vertex Normal offset factor
	float $lof = 0.075; int $k=0;
	$sel = `ls -sl -fl -l`;
	
	// Set vertex normal display
	polyOptions -ao -displayNormal true -pt -sn 0.2;

	for ($i=0;$i<size($sel);$i++)
	{	
		// Get each vert position & vert normal
		float $vPos[] = `xform -q -ws -t $sel[$i]`;
		float $vNor[] = `polyNormalPerVertex -q -xyz $sel[$i]`;
		
		// create Locator
		string $buf[]; tokenize $sel[$i] "." $buf;
		string $aLoc[] = `spaceLocator -n ($buf[0] + "_aimer#")`;
		setAttr ($aLoc[0] + ".localScale") 0.05 0.05 0.05;
		setAttr ($aLoc[0] + ".translate") ($vPos[0] + ($vNor[0] * $lof)) ($vPos[1] + ($vNor[1] * $lof)) ($vPos[2] + ($vNor[2] * $lof));
		
		// Set global aim locators name
		$aimLoc[$k] = $aLoc[0]; $k++;
		
	}
	
	// Create script Jobs
	CG_createIndividualAimingNormalScriptJob;
	
	// Edit UI
	button -e -en 1 killAlignToPointsButton;
	
	button -e -en 0 alignToPointsButton;
	button -e -en 0 PinchButton;
	button -e -en 0 BlendButton;
	button -e -en 0 EdgeBlendButton;
	
	
	
}


global proc CG_updateNormalsToLocators(string $sl, string $loc)
{	
	constructionHistory -toggle false;
		
	// Discover aim
	float $selPos[] = `xform -q -ws -t $sl`,
	      $locPos[] = `xform -q -ws -t $loc`;
		
	float $vec[] = { ($locPos[0] - $selPos[0]), ($locPos[1] - $selPos[1]), ($locPos[2] - $selPos[2]) };
	normalize($vec); 
		
	// set normal
	polyNormalPerVertex -xyz $vec[0] $vec[1] $vec[2] $sl;
	
	constructionHistory -toggle true;
}

global proc CG_createIndividualAimingNormalScriptJob()
{	
	global string $sel[], $aimLoc[];
	global int $normalJobNo[];
	clear($normalJobNo);
	
	for ($i=0;$i<size($aimLoc);$i++)
	{
		string $watch = ($aimLoc[$i] + ".translate");
		string $command = ("CG_updateNormalsToLocators(\"" + $sel[$i] + "\", \"" + $aimLoc[$i] + "\")");
		$normalJobNo[$i] = `scriptJob -ac $watch $command`;
	}
}

global proc CG_killIndividualAimingNormalScriptJob()
{
	
	setObjectPickMask "Surface" true;
	updateObjectSelectionMasks;
	updateComponentSelectionMasks;
	
	global int $normalJobNo[];
	
	global string $aimLoc[];
	
	for ($i=0;$i<size($normalJobNo);$i++)
	{
		scriptJob -kill $normalJobNo[$i];
		delete $aimLoc[$i];
	}
	
	button -e -en 0 killAlignToPointsButton;
	
	button -e -en 1 alignToPointsButton;
	button -e -en 1 PinchButton;
	button -e -en 1 BlendButton;
	button -e -en 1 EdgeBlendButton;
	
	
}
	
global proc CG_focusNormalsToAPoint()
{

	// Create Global Selection
	global string $aimLoc[], $sel[];
	clear ($aimLoc); clear($sel);
	
	$sel = `ls -sl -l -fl`;
	float $avP[] = { 0.0, 0.0, 0.0 },
		  $avN[] = { 0.0, 0.0, 0.0 },
		  $lof = 0.15;
	
	for ($i=0;$i<size($sel);$i++)
	{
		// get average point
		float $cP[] = `xform -q -ws -t $sel[$i]`;
		$avP[0] = $avP[0] + $cP[0];
		$avP[1] = $avP[1] + $cP[1];
		$avP[2] = $avP[2] + $cP[2];
	}
	
	$avP[0] = $avP[0] / size($sel);
	$avP[1] = $avP[1] / size($sel);
	$avP[2] = $avP[2] / size($sel);
	
	// Get Average normal
	float $allNormals[] = `polyNormalPerVertex -q -xyz $sel`;
	
	for ($i=0;$i<size($allNormals);$i=$i+3)
	{
		// get average point
		$avN[0] = $avN[0] + $allNormals[$i];
		$avN[1] = $avN[1] + $allNormals[$i+1];
		$avN[2] = $avN[2] + $allNormals[$i+2];
	}
	
	$avN[0] = $avN[0] / (size($allNormals) / 3);
	$avN[1] = $avN[1] / (size($allNormals) / 3);
	$avN[2] = $avN[2] / (size($allNormals) / 3);
	
	normalize($avN);
	
	float $locPos[] = { ($avP[0] + ($avN[0] * $lof)), ($avP[1] + ($avN[1] * $lof)), ($avP[2] + ($avN[2] * $lof)) };
	
	// create Locator
	string $aLoc[] = `spaceLocator -n ("focus_aimer#")`;
	setAttr ($aLoc[0] + ".localScale") 0.05 0.05 0.05;
	setAttr ($aLoc[0] + ".translate") $locPos[0] $locPos[1] $locPos[2];
	
	// Set global constant
	$aimLoc[0] = $aLoc[0];

	// Create script Jobs
	CG_createFocusAimingNormalScriptJob();
	
	// Do update for first time
	CG_updateFocusLocators($sel, $aimLoc[0]);
	
	button -e -en 0 focusToPointsButton;
	button -e -en 1 killFocusToPointsButton;
}

global proc CG_createFocusAimingNormalScriptJob()
{
	
	// Create Global Selection
	global string $aimLoc[], $sel[];
	global int $focusNormalJobNo[];
	clear($focusNormalJobNo);
	
	string $watch = ($aimLoc[0] + ".translate");
	string $command = ("CG_updateFocusLocators($sel, $aimLoc[0])");
	
	$focusNormalJobNo[0] = `scriptJob -ac $watch $command`;
	print ($focusNormalJobNo[0] + "\n");
}

global proc CG_killFocusAimingNormalScriptJob()
{
	
	global int $focusNormalJobNo[];
	global string $aimLoc[];
	
	scriptJob -kill $focusNormalJobNo[0];
	delete $aimLoc;
	
	// Cleanup
	polyOptions -global -displayNormal false -pt -sn 0.2;
	
	button -e -en 1 focusToPointsButton;
	button -e -en 0 killFocusToPointsButton;
}

global proc CG_updateFocusLocators(string $sel[], string $loc)
{	
	
	float $locPos[] = `xform -q -ws -t $loc`;
	
	for ($i=0;$i<size($sel);$i++)
	{
		// Discover aim
		float $selPos[] = `xform -q -ws -t $sel[$i]`;
	    	  
		float $vec[] = { ($locPos[0] - $selPos[0]), ($locPos[1] - $selPos[1]), ($locPos[2] - $selPos[2]) };
		normalize($vec); 
		
		// set normal
		polyNormalPerVertex -xyz $vec[0] $vec[1] $vec[2] $sel[$i];
	}
}

global proc CopyNormals()
{
	
	string $sel[] = `ls -sl -l -fl`; select -cl;
	string $closestVert, $vertSel[], $sourceSel[];
	
	// if selection is >2 i.e. verts
	if (size($sel) > 2)
	{
		for ($i=0;$i<(size($sel) - 1);$i++)
		{
			$vertSel[$i] = $sel[$i];
		}
		
		select $sel[size($sel)-1];
		ConvertSelectionToVertices;
		$sourceSel = `ls -sl -fl -l`;
	}		
	
	// if selection is == 2 ie objects
	if (size($sel) == 2)
	{
		select $sel[0];
		ConvertSelectionToVertices;
		$vertSel = `ls -sl -fl -l`;
		
		select $sel[1];
		ConvertSelectionToVertices;
		$sourceSel = `ls -sl -fl -l`;
	}
	
	for ($i=0;$i<size($vertSel);$i++)
	{
		float $shortestDistance = 1000000;
		
		//select $vertSel[$i];
		float $vPos[] = `xform -q -ws -t $vertSel[$i]`;
					
		for ($j=0;$j<size($sourceSel);$j++)
		{
			float $testVert[] = `xform -q -ws -t $sourceSel[$j]`;
			float $testLength = ((($testVert[0] - $vPos[0])*($testVert[0] - $vPos[0])) + (($testVert[1] - $vPos[1])*($testVert[1] - $vPos[1])) + (($testVert[2] - $vPos[2])*($testVert[2] - $vPos[2])));
			
			if ($testLength < $shortestDistance)
			{
				$closestVert = $sourceSel[$j];
				$shortestDistance = $testLength;
			}
			
		}
		print ($closestVert + "\n");
		float $wNormal[] = `polyNormalPerVertex -q -xyz $closestVert`;
		
		for ($k=0;$k<size($wNormal);$k=$k+3)
		{
			polyNormalPerVertex -xyz $wNormal[$k] $wNormal[$k+1] $wNormal[$k+2] $vertSel[$i];
		}
	}
	
	select -cl;
	
}

global proc CG_pinchNormalsToAPoint()
{
	
	// Create Global Selection
	global string $pinchLoc[], $pinchSel[];
	clear ($pinchLoc); clear($pinchSel);
	
	$pinchSel = `ls -sl -l -fl`;
	float $avP[] = { 0.0, 0.0, 0.0 },
		  $avN[] = { 0.0, 0.0, 0.0 },
		  $lof = 0.1;
	
	for ($i=0;$i<size($pinchSel);$i++)
	{
		// get average point
		float $cP[] = `xform -q -ws -t $pinchSel[$i]`;
		$avP[0] = $avP[0] + $cP[0];
		$avP[1] = $avP[1] + $cP[1];
		$avP[2] = $avP[2] + $cP[2];
	}
	
	$avP[0] = $avP[0] / size($pinchSel);
	$avP[1] = $avP[1] / size($pinchSel);
	$avP[2] = $avP[2] / size($pinchSel);
	
	// Get Average normal
	float $allNormals[] = `polyNormalPerVertex -q -xyz $pinchSel`;
	
	for ($i=0;$i<size($allNormals);$i=$i+3)
	{
		// get average point
		$avN[0] = $avN[0] + $allNormals[$i];
		$avN[1] = $avN[1] + $allNormals[$i+1];
		$avN[2] = $avN[2] + $allNormals[$i+2];
	}
	
	$avN[0] = $avN[0] / (size($allNormals) / 3);
	$avN[1] = $avN[1] / (size($allNormals) / 3);
	$avN[2] = $avN[2] / (size($allNormals) / 3);
	
	normalize($avN);
	
	float $locPos[] = { ($avP[0] + ($avN[0] * $lof)), ($avP[1] + ($avN[1] * $lof)), ($avP[2] + ($avN[2] * $lof)) };
	
	// create Locator
	$pinchLoc = `spaceLocator -n ("pinch_aimer#")`;
	setAttr ($pinchLoc[0] + ".localScale") 0.05 0.05 0.05;
	setAttr ($pinchLoc[0] + ".translate") $locPos[0] $locPos[1] $locPos[2];
	
	// Create script Jobs
	CG_createPinchAimingNormalScriptJob();
	
	// Do update for first time
	CG_updatePinchLocators();
	
	// Disable buttons
	button -e -en 1 killPinchButton;
		
	button -e -en 0 alignToPointsButton;
	button -e -en 0 PinchButton;
	button -e -en 0 BlendButton;
	button -e -en 0 EdgeBlendButton;
}

global proc CG_createPinchAimingNormalScriptJob()
{
	
	// Create Global Selection
	global int $PinchNormalJobNo[];	clear($PinchNormalJobNo);
	global string $pinchLoc[];
	
	string $watch = ($pinchLoc[0] + ".translate");
	string $command = ("CG_updatePinchLocators");
	
	$PinchNormalJobNo[0] = `scriptJob -ac $watch $command`;
}

global proc CG_killPinchAimingNormalScriptJob()
{
	
	global int $PinchNormalJobNo[];
	global string $pinchLoc[], $pinchSel[];
	
	scriptJob -kill $PinchNormalJobNo[0];
	delete $pinchLoc;
	
	button -e -en 0 killPinchButton;
	
	button -e -en 1 alignToPointsButton;
	button -e -en 1 PinchButton;
	button -e -en 1 BlendButton;
	button -e -en 1 EdgeBlendButton;
	
	
	
	
	select $pinchSel;
}

global proc CG_updatePinchLocators()
{
	
	int $inX = `checkBox -q -v pinchXCheckBox`;
	int $inY = `checkBox -q -v pinchYCheckBox`;
	int $inZ = `checkBox -q -v pinchZCheckBox`;
	int $pinch = `checkBox -q -v pinchCheckBox`;
	int $expand = `checkBox -q -v expandCheckBox`;
	int $pinchOrExpand = 0;
	
	global string $pinchSel[], $pinchLoc[];
	
	float $locPos[] = `xform -q -ws -t $pinchLoc[0]`;
	
	if ($pinch == 1) { $pinchOrExpand = 1; }
	else {
		$pinchOrExpand = -1;
	}
	
	for ($i=0;$i<size($pinchSel);$i++)
	{
		// Discover aim
		float $pinchSelPos[] = `xform -q -ws -t $pinchSel[$i]`;
	    	  
		float $vec[] = { ($locPos[0] - $pinchSelPos[0]), ($locPos[1] - $pinchSelPos[1]), ($locPos[2] - $pinchSelPos[2]) };
		normalize($vec); 
		
		// Query existing normal
		float $oldNormal[] = `polyNormalPerVertex -q -xyz $pinchSel[$i]`;
		
		if ( ($inX == "0") && ($inY == "0") && ($inZ == "1") ) { polyNormalPerVertex -xyz $oldNormal[0] $oldNormal[1] ($pinchOrExpand * $vec[2]) $pinchSel[$i]; }
		if ( ($inX == "0") && ($inY == "1") && ($inZ == "0") ) { polyNormalPerVertex -xyz $oldNormal[0] ($pinchOrExpand * $vec[1]) $oldNormal[2] $pinchSel[$i]; }
		if ( ($inX == "0") && ($inY == "1") && ($inZ == "1") ) { polyNormalPerVertex -xyz $oldNormal[0] ($pinchOrExpand * $vec[1]) ($pinchOrExpand * $vec[2]) $pinchSel[$i]; }
		if ( ($inX == "1") && ($inY == "0") && ($inZ == "0") ) { polyNormalPerVertex -xyz ($pinchOrExpand * $vec[0]) $oldNormal[1] $oldNormal[2] $pinchSel[$i]; }
		if ( ($inX == "1") && ($inY == "0") && ($inZ == "1") ) { polyNormalPerVertex -xyz ($pinchOrExpand * $vec[0]) $oldNormal[1] ($pinchOrExpand * $vec[2]) $pinchSel[$i]; }
		if ( ($inX == "1") && ($inY == "1") && ($inZ == "0") ) { polyNormalPerVertex -xyz ($pinchOrExpand * $vec[0]) ($pinchOrExpand * $vec[1]) $oldNormal[2] $pinchSel[$i]; }
		if ( ($inX == "1") && ($inY == "1") && ($inZ == "1") ) { polyNormalPerVertex -xyz ($pinchOrExpand * $vec[0]) ($pinchOrExpand * $vec[1]) ($pinchOrExpand * $vec[2]) $pinchSel[$i]; }
	}
}

global proc CG_copyAverageVertexNormal()
{
	
	global float $v2Copy[];
	
	// Get Average normal
	float $allNormals[] = `polyNormalPerVertex -q -xyz`,
		  $averageNormal[];
	
	for ($i=0;$i<size($allNormals);$i=$i+3)
	{
		// get average point
		$averageNormal[0] = $averageNormal[0] + $allNormals[$i];
		$averageNormal[1] = $averageNormal[1] + $allNormals[$i+1];
		$averageNormal[2] = $averageNormal[2] + $allNormals[$i+2];
	}
	
	$averageNormal[0] = $averageNormal[0] / (size($allNormals) / 3);
	$averageNormal[1] = $averageNormal[1] / (size($allNormals) / 3);
	$averageNormal[2] = $averageNormal[2] / (size($allNormals) / 3);
	
	// average normal
	normalize($averageNormal);
		
	
	$v2Copy = $averageNormal;
}

global proc CG_copyAveragePasteVertexNormal(){
	// Copy Normals and Average them
	CG_copyAverageVertexNormal();
	// Paste normals
	CG_pasteVertexNormals("x");
}

global proc CG_copyVertexNormal()
{
	
	global float $v2Copy[];
	$v2Copy = `polyNormalPerVertex -q -xyz`;
}

global proc CG_pasteVertexNormals(string $axis)
{

	global float $v2Copy[];
	string $pasteTo[] = `ls -sl -fl`;
	
	if ($axis == "x") 
	{	
		for($i=0;$i<size($pasteTo);$i++)
		{ 
			polyNormalPerVertex -xyz $v2Copy[0] $v2Copy[1] $v2Copy[2] $pasteTo[$i];
		}
		
		select $pasteTo;
	}
	
	if ($axis == "-x") 
	{	
		for($i=0;$i<size($pasteTo);$i++)
		{ 
			polyNormalPerVertex -xyz (-1 * $v2Copy[0]) $v2Copy[1] $v2Copy[2] $pasteTo[$i];
		}
		
		select $pasteTo;
	}
	
	if ($axis == "-X") 
	{
		string $mirrorPaste[];
		
		int $k=0;
	
		// search for v in -x
		for ($i=0;$i<size($pasteTo);$i++)
		{
			float $cPos[] = `xform -q -ws -t $pasteTo[$i]`;

			string $vP[] = `listRelatives -p -f $pasteTo[$i]`;
			select $vP[0]; ConvertSelectionToVertices;
			string $allVerts[] = `ls -sl -fl -l`;
			
			for ($j=0;$j<size($allVerts);$j++)
			{
				float $oPos[] = `xform -q -ws -t $allVerts[$j]`;
				
				float $dis = sqrt((((-1 * $cPos[0]) - $oPos[0]) * ((-1 * $cPos[0]) - $oPos[0])) + (($cPos[1] - $oPos[1]) * ($cPos[1] - $oPos[1])) + (($cPos[2] - $oPos[2]) * ($cPos[2] - $oPos[2])));
				
				if ($dis < 0.01)
				{
					$mirrorPaste[$k] = $allVerts[$j];
					$k++;
				}
			}
		}
		
		for($i=0;$i<size($pasteTo);$i++)
		{ 
			polyNormalPerVertex -xyz $v2Copy[0] $v2Copy[1] $v2Copy[2] $pasteTo[$i];
		}
		
		for($i=0;$i<size($mirrorPaste);$i++)
		{ 
			polyNormalPerVertex -xyz (-1 * $v2Copy[0]) $v2Copy[1] $v2Copy[2] $mirrorPaste[$i];
		}
				
		string $pObject[] = `listRelatives -p -f $mirrorPaste[0]`;
		print $pObject;
		maintainActiveChangeSelectMode $pObject[0];
		select $pObject[0] $pasteTo $mirrorPaste;
		
	}
		
}


global proc CG_selectUnlockedNormals()
{
	
	SelectAll;
	ConvertSelectionToVertices;
	string $allVertices[] = `ls -sl -l -fl`;
	select -cl;
	string $catch[]; clear($catch);
	int $k=0;
	
	for ($i=0;$i<size($allVertices);$i++)
	{
		int $isLocked[] = `polyNormalPerVertex -q -al $allVertices[$i]`;
		
		if ($isLocked[0] == 0)
		{
			$catch[$k] = $allVertices[$i];
			$k++;
		}
	}
	
	select $catch;
	
	if (size($catch) == 0)
	{
		print ("All vertices are locked.\n");
	}
}

global proc CG_expandNormalsToAPoint(string $axis)
{

	// Create Global Selection
	global string $expandLoc[], $expandSel[], $axis;
	clear ($expandLoc); clear($expandSel);
	
	$expandSel = `ls -sl -l -fl`;
	float $avP[] = { 0.0, 0.0, 0.0 },
		  $avN[] = { 0.0, 0.0, 0.0 },
		  $lof = 0.5;
	
	for ($i=0;$i<size($expandSel);$i++)
	{
		// get average point
		float $cP[] = `xform -q -ws -t $expandSel[$i]`;
		$avP[0] = $avP[0] + $cP[0];
		$avP[1] = $avP[1] + $cP[1];
		$avP[2] = $avP[2] + $cP[2];
	}
	
	$avP[0] = $avP[0] / size($expandSel);
	$avP[1] = $avP[1] / size($expandSel);
	$avP[2] = $avP[2] / size($expandSel);
	
	// Get Average normal
	float $allNormals[] = `polyNormalPerVertex -q -xyz $expandSel`;
	
	for ($i=0;$i<size($allNormals);$i=$i+3)
	{
		// get average point
		$avN[0] = $avN[0] + $allNormals[$i];
		$avN[1] = $avN[1] + $allNormals[$i+1];
		$avN[2] = $avN[2] + $allNormals[$i+2];
	}
	
	$avN[0] = $avN[0] / (size($allNormals) / 3);
	$avN[1] = $avN[1] / (size($allNormals) / 3);
	$avN[2] = $avN[2] / (size($allNormals) / 3);
	
	normalize($avN);
	
	float $locPos[] = { ($avP[0] + ($avN[0] * $lof)), ($avP[1] + ($avN[1] * $lof)), ($avP[2] + ($avN[2] * $lof)) };
	
	// create Locator
	string $aLoc[] = `spaceLocator -n ("expand_aimer#")`;
	setAttr ($aLoc[0] + ".localScale") 0.05 0.05 0.05;
	setAttr ($aLoc[0] + ".translate") $locPos[0] $locPos[1] $locPos[2];
	
	// Set global constant
	$expandLoc[0] = $aLoc[0];

	// Create script Jobs
	CG_createexpandAimingNormalScriptJob($axis);
	
	// Do update for first time
	CG_updateexpandLocators($expandSel, $expandLoc[0], $axis);
	
	// Disable buttons
	button -e -en 0 expandXButton; 	button -e -en 0 expandYButton; 	button -e -en 0 expandZButton; 	button -e -en 1 killexpandButton;
}

global proc CG_createexpandAimingNormalScriptJob(string $axis)
{

	// Create Global Selection
	global string $expandLoc[], $expandSel[], $axis;
	global int $expandNormalJobNo[];
	clear($expandNormalJobNo);
	
	string $watch = ($expandLoc[0] + ".translate");
	string $command = ("CG_updateexpandLocators($expandSel, $expandLoc[0], $axis)");
	
	$expandNormalJobNo[0] = `scriptJob -ac $watch $command`;
	print ($expandNormalJobNo[0] + "\n");
}

global proc CG_killexpandAimingNormalScriptJob()
{
	
	global int $expandNormalJobNo[];
	global string $expandLoc[];
	
	scriptJob -kill $expandNormalJobNo[0];
	delete $expandLoc;
	
	// Cleanup
	polyOptions -global -displayNormal false -pt -sn 0.2;
	
	button -e -en 1 expandXButton;
	button -e -en 1 expandYButton;
	button -e -en 1 expandZButton;
	button -e -en 0 killexpandButton;
}

global proc CG_updateexpandLocators(string $expandSel[], string $loc, string $axis)
{	
	
	float $locPos[] = `xform -q -ws -t $loc`;

	for ($i=0;$i<size($expandSel);$i++)
	{
		// Discover aim
		float $expandSelPos[] = `xform -q -ws -t $expandSel[$i]`;
	    	  
		float $vec[] = { ($locPos[0] - $expandSelPos[0]), ($locPos[1] - $expandSelPos[1]), ($locPos[2] - $expandSelPos[2]) };
		normalize($vec); 
		
		// Query existing normal
		float $oldNormal[] = `polyNormalPerVertex -q -xyz $expandSel[$i]`;
		
		if ($axis == "x") { polyNormalPerVertex -xyz $vec[0] $oldNormal[1] $oldNormal[2] $expandSel[$i]; }		
		if ($axis == "y") { polyNormalPerVertex -xyz $oldNormal[0] $vec[1] $oldNormal[2] $expandSel[$i]; }
		if ($axis == "z") { polyNormalPerVertex -xyz $oldNormal[0] $oldNormal[1] $vec[2] $expandSel[$i]; }
	}
}

global proc CG_displayNormalsOnSelected()
{
	global int $displayNormalSwitch;
	
	float $normalLength = `floatField -q -v normalLengthFloatField`;

	if ($displayNormalSwitch == 0) {
		polyOptions -ao -displayNormal true -pt -sn $normalLength; $displayNormalSwitch = 1; 
	}
	else {
		polyOptions -ao -displayNormal false -pt -sn $normalLength; $displayNormalSwitch = 0;
	}
}

global proc CG_displayAllNormalsOnSelected()
{
	float $normalLength = `floatField -q -v normalLengthFloatField`;
	
	global int $displayAllNormalSwitch;
	
	if ($displayAllNormalSwitch == 0) {
		polyOptions -global -displayNormal true -pt -sn $normalLength; $displayAllNormalSwitch = 1; 
	}
	else {
		polyOptions -global -displayNormal false -pt -sn $normalLength; $displayAllNormalSwitch = 0;
	}
}


global proc CG_createEdgeBlendNormals()
{
	
	global string $edges[], $vertexNormals[];
	clear($edges); clear($vertexNormals);
	global float $oVNs[];
	clear($oVNs);
	global float $avN[];

	// Store edges
	$edges = `ls -sl -fl`;
	
	// Sort selection as maya returns vertex normals out of order
	for ($i=0;$i<size($edges);$i++)
	{
		select $edges[$i];
		
		// Convert to vertex faces
		ConvertSelectionToVertexFaces;

		// Store vertex normals
		string $tempVNormals[] = `ls -sl -fl`;
			
		$vertexNormals = stringArrayCatenate($vertexNormals, $tempVNormals);
	}
	
	select -cl; select $edges;
	
	// Get All original vertex normals
	$oVNs = `polyNormalPerVertex -q -xyz $vertexNormals`;
	int $k=0;

	for ($i=0;$i<size($vertexNormals);$i=$i+2)
	{
		$avN[$k] = (($oVNs[(3 * $i)] + $oVNs[(3 * $i) + 3]) / 2);
		$avN[$k+1] = (($oVNs[(3 * $i) + 1] + $oVNs[(3 * $i) + 4]) / 2);
		$avN[$k+2] = (($oVNs[(3 * $i) + 2] + $oVNs[(3 * $i) + 5]) / 2);
		$k=$k+3;			
	}
	
	// Need to normalize average normal
	for ($i=0;$i<size($avN);$i=$i+3)
	{
		float $tmpVec[] = { $avN[$i], $avN[$i+1], $avN[$i+2] };
		normalize($tmpVec);
		$avN[$i] = $tmpVec[0]; $avN[$i+1] = $tmpVec[1]; $avN[$i+2] = $tmpVec[2];
	}
	
	button -e -en 0 alignToPointsButton;
	button -e -en 0 PinchButton;
	button -e -en 0 BlendButton;
	button -e -en 0 EdgeBlendButton;
	button -e -en 1 killEdgeBlendButton;
}

global proc CG_updateEdgeNormals()
{
	
	global float $avN[];
	global string $vertexNormals[];
	global float $oVNs[];

	float $blValue = `floatSlider -q -v edgeBlendSlider`;
	
	int $k=0;
	
	// for every pair of VNs
	for ($i=0;$i<size($vertexNormals);$i=$i+2)
	{
		float $nVec[], $nVec2[];
		
		// --- if normals are same as average normal
		float $v1[] = `xform -q -ws -t $vertexNormals[$i]`;
		float $v2[] = `xform -q -ws -t $vertexNormals[$i+1]`;
		float $dVec[];
		// ---

		if ( (equivalentTol($oVNs[((3 * $i) + 0)], $avN[$k+0], 0.001) == 1) && (equivalentTol($oVNs[((3 * $i) + 1)], $avN[$k+1], 0.001) == 1) && (equivalentTol($oVNs[((3 * $i) + 2)], $avN[$k+2], 0.001) == 1) )
		{		
			$dVec = { ($v2[0] - $v1[0]), ($v2[1] - $v1[1]), ($v2[2] - $v1[2]) };
			normalize($dVec);

			$nVec = {  ( ( (1 - (0.2*$blValue)) * $oVNs[((3 * $i) + 0)] ) + ((0.2*$blValue) * $dVec[0]) ),
					   ( ( (1 - (0.2*$blValue)) * $oVNs[((3 * $i) + 1)] ) + ((0.2*$blValue) * $dVec[1]) ),
				       ( ( (1 - (0.2*$blValue)) * $oVNs[((3 * $i) + 2)] ) + ((0.2*$blValue) * $dVec[2]) ) };
			
		}
		else {
			$nVec = {  ( ( (1 - $blValue) * $oVNs[((3 * $i) + 0)] ) + ($blValue * $avN[$k+0]) ),
			  		   ( ( (1 - $blValue) * $oVNs[((3 * $i) + 1)] ) + ($blValue * $avN[$k+1]) ),
					   ( ( (1 - $blValue) * $oVNs[((3 * $i) + 2)] ) + ($blValue * $avN[$k+2]) ) };	
		}

		polyNormalPerVertex -xyz $nVec[0] $nVec[1] $nVec[2] $vertexNormals[$i + 0];	

		// Second Vertex
		if ( (equivalentTol($oVNs[((3 * $i) + 3)], $avN[$k+0], 0.001) == 1) && (equivalentTol($oVNs[((3 * $i) + 4)], $avN[$k+1], 0.001) == 1) && (equivalentTol($oVNs[((3 * $i) + 5)], $avN[$k+2], 0.001) == 1) )
		{
			$dVec = { ($v1[0] - $v2[0]), ($v1[1] - $v2[1]), ($v1[2] - $v2[2]) };
			normalize($dVec);
			
			$nVec2 = { ( ( (1 - (0.2*$blValue)) * $oVNs[((3 * $i) + 3)] ) + ((0.2*$blValue) * $dVec[0]) ),
					   ( ( (1 - (0.2*$blValue)) * $oVNs[((3 * $i) + 4)] ) + ((0.2*$blValue) * $dVec[1]) ),
				       ( ( (1 - (0.2*$blValue)) * $oVNs[((3 * $i) + 5)] ) + ((0.2*$blValue) * $dVec[2]) ) };
		}
		else {
			$nVec2 = { ( ( (1 - $blValue) * $oVNs[((3 * $i) + 3)] ) + ($blValue * $avN[$k+0]) ),
					   ( ( (1 - $blValue) * $oVNs[((3 * $i) + 4)] ) + ($blValue * $avN[$k+1]) ),
				       ( ( (1 - $blValue) * $oVNs[((3 * $i) + 5)] ) + ($blValue * $avN[$k+2]) ) };
		}

		polyNormalPerVertex -xyz $nVec2[0] $nVec2[1] $nVec2[2] $vertexNormals[$i + 1];
		$k=$k+3;
	}

	floatField -e -v `floatSlider -q -v edgeBlendSlider` edgeBlendFloatField;
	
}

global proc CG_killEdgeBlendNormals()
{

	global float $avN[];
	global string $vertexNormals[];
	global float $oVNs[];
	
	clear($avN);
	clear($vertexNormals);
	clear($oVNs);
	
	button -e -en 1 alignToPointsButton;
	button -e -en 1 PinchButton;
	button -e -en 1 BlendButton;
	button -e -en 1 EdgeBlendButton;
	button -e -en 0 killEdgeBlendButton;
	
	floatSlider -e -v 0.0 edgeBlendSlider;
	floatField -e -v 0.0 edgeBlendFloatField;
	
}


global proc CG_lockUnlockedNormalsOnSelected()
{
	
	ConvertSelectionToVertices;
	string $allVertices[] = `ls -sl -l -fl`;
	select -cl;
	string $catch[]; clear($catch);
	int $k=0;
	
	for ($i=0;$i<size($allVertices);$i++)
	{
		int $isLocked[] = `polyNormalPerVertex -q -al $allVertices[$i]`;
		
		if ($isLocked[0] == 0)
		{
			$catch[$k] = $allVertices[$i];
			$k++;
		}
	}
	
	if (size($catch) > 0)
	{
		polyNormalPerVertex -fn 1 $catch;
		print ("Found " + size($catch) + " unlocked normals on this object and locked them!\n");
	}
	
	if (size($catch) == 0)
	{
		print ("All vertices are already locked.\n");
	}
}

global proc CG_lockUnlockedNormalsOnAllLODs()
{	
	
	select LOD0 LOD1 LOD2 LOD3 LOD4;
	ConvertSelectionToVertices;

	string $allVertices[] = `ls -sl -l -fl`;
	select -cl;
	string $catch[]; clear($catch);
	int $k=0;
	
	for ($i=0;$i<size($allVertices);$i++)
	{
		int $isLocked[] = `polyNormalPerVertex -q -al $allVertices[$i]`;
		
		if ($isLocked[0] == 0)
		{
			$catch[$k] = $allVertices[$i];
			$k++;
		}
	}
	
	if (size($catch) > 0)
	{
		polyNormalPerVertex -fn 1 $catch;
		print ("Found " + size($catch) + " unlocked normals on this object and locked them!\n");
	}
	
	if (size($catch) == 0)
	{
		print ("All vertices are already locked.\n");
	}
}

global proc CG_blendNormalsToAPoint()
{	

	
	// Original Selection
	string $oSel[] = `ls -sl -l -fl`;
	
	// Create Global Selection
	global string $blendSel[];
	global float $avN[], $avP[];
	global float $allNormals[];
	
	clear ($avN); clear($blendSel); clear($allNormals);
	
	// Convert Selection to Vertex Faces;
	ConvertSelectionToVertexFaces;
	
	$blendSel = `ls -sl -l -fl`;
	$avN = { 0.0, 0.0, 0.0 };
	$avP = { 0.0, 0.0, 0.0 };
	
	// Get Average Position
	for ($i=0;$i<size($blendSel);$i++)
	{
		float $pos[] = `xform -q -ws -t $blendSel[$i]`;
		$avP[0] = $avP[0] + $pos[0];
		$avP[1] = $avP[1] + $pos[1];
		$avP[2] = $avP[2] + $pos[2];
	}
	
	$avP[0] = $avP[0] / (size($blendSel));
	$avP[1] = $avP[1] / (size($blendSel));
	$avP[2] = $avP[2] / (size($blendSel));
	
	// Get Average normal
	$allNormals = `polyNormalPerVertex -q -xyz $blendSel`;
	
	for ($i=0;$i<size($allNormals);$i=$i+3)
	{
		// get average point
		$avN[0] = $avN[0] + $allNormals[$i];
		$avN[1] = $avN[1] + $allNormals[$i+1];
		$avN[2] = $avN[2] + $allNormals[$i+2];
	}
	
	$avN[0] = $avN[0] / (size($allNormals) / 3);
	$avN[1] = $avN[1] / (size($allNormals) / 3);
	$avN[2] = $avN[2] / (size($allNormals) / 3);
	
	// average normal
	normalize($avN);

	// Do update for first time
	CG_updateblendLocators();
	
	// Disable buttons
	button -e -en 1 killBlendButton;
	
	button -e -en 0 alignToPointsButton;
	button -e -en 0 PinchButton;
	button -e -en 0 BlendButton;
	button -e -en 0 EdgeBlendButton;
	
	select -cl; select $oSel;
}

global proc CG_updateblendLocators()
{	
	
	//print $avN
	
	
	float $blValue = `floatSlider -q -v blendSlider`;
	
	global string $blendSel[];		// size($blendSel)
	global float $avN[];			// size($avN)
	global float $avP[];			// size($avP)
	global float $allNormals[];		// size($allNormals)
		
	//print ($blValue + "\n");	print $blendSel;
	
		
	for ($i=0;$i<size($blendSel);$i++)
	{
		float $nVec[];
		
		if ( (equivalentTol($allNormals[$i * 3], $avN[0], 0.001) == 1) && (equivalentTol($allNormals[($i * 3) + 1], $avN[1], 0.001) == 1) && (equivalentTol($allNormals[($i * 3) + 2], $avN[2], 0.001) == 1) )
		{
			float $cPos[] = `xform -q -ws -t $blendSel[$i]`;
			float $dVec[] = { ($cPos[0] - $avP[0]), ($cPos[1] - $avP[1]), ($cPos[2] - $avP[2]) };
			normalize($dVec);
		
			$nVec = {   ( ( (1 - (0.2*$blValue)) * $allNormals[$i * 3]) + ((0.2*$blValue) * $dVec[0]) ),
						( ( (1 - (0.2*$blValue)) * $allNormals[($i * 3) + 1]) + ((0.2*$blValue) * $dVec[1]) ),
						( ( (1 - (0.2*$blValue)) * $allNormals[($i * 3) + 2]) + ((0.2*$blValue) * $dVec[2]) ) };
			
		}
		else {
			$nVec = {   ( ( (1 - $blValue) * $allNormals[$i * 3]) + ($blValue * $avN[0]) ),
						( ( (1 - $blValue) * $allNormals[($i * 3) + 1]) + ($blValue * $avN[1]) ),
						( ( (1 - $blValue) * $allNormals[($i * 3) + 2]) + ($blValue * $avN[2]) ) };
		}
		
		normalize($nVec);
		polyNormalPerVertex -xyz $nVec[0] $nVec[1] $nVec[2] $blendSel[$i];	
	}
	
	floatField -e -v $blValue blendFloatField;
}

global proc CG_killBlendNormals()
{
	
	global string $blendSel[];
	string $tempSel[] = $blendSel;
	clear($blendSel);
	
	
	button -e -en 1 alignToPointsButton;
	button -e -en 1 PinchButton;
	button -e -en 1 BlendButton;
	button -e -en 1 EdgeBlendButton;
		
	button -e -en 0 killBlendButton;
	
	floatSlider -e -v 0.0 blendSlider;
	floatField -e -v 0.0 blendFloatField;
	select $tempSel;
	ConvertSelectionToVertices;
}

