global string $ddoSelect[];
$ddoSelect = `ls -sl`;
global string $ddoVersion = "2.7.1";
global string $ddoRelease = "4 December 2013";
global int $ddoScriptJob; //sets up indicator auto update and permanent values
if ( $ddoScriptJob == 0 ) {
    $ddoScriptJob = `scriptJob -e "SelectionChanged" "ddoUpdateIndicators" -protected`;
    $ddoScriptJob = `scriptJob -e "Undo" "ddoUpdateMainListing(0)" -protected`;
    global string $dDoMatsMain[];
    global string $customMats[];
    global string $leftCol[];
    global string $rightCol[];
    string $dDoMatsArranged[];
    global float $matColor[];
    global float $specColor[];
    global float $cosinePower[];

    // These are stored values of all the dDo presets for Maya material names, RGB info for color and specular color, and cosine power.
    // $matColor and $specColor indices correspond to material names.  Index is three times the index value of the material name, plus two.
    // For example, Metal_Aluminum is in index 3, so the corresponding RGB values would be found in indices 3*3+2, or indices 9, 10, and 11.
    // There is probably an easier/cleaner way to set this up but it's all I know how to do at the moment.
    // Used in ddoPresets().

    $dDoMatsMain = { "Metal_Chrome", "Metal_Steel", "Metal_Plate", "Metal_Aluminum", "Metal_Galvanized", "Metal_Iron", "Metal_Lead", "Metal_Gun", "Plastic_Glossy", "Plastic", "Plastic_Rough", "Rubber", "Rubber_Dry", "Carbon_Fibre", "FiberGlass", "Glass", "Marble", "Porcelain", "Terracotta", "Paper", "Leather", "Skin_Rough", "Skin", "Hair", "Brick", "Asphalt", "Concrete", "Concrete_Rough", "Wood_Raw", "Wood_Varnished", "Wood_Painted", "Wood_Bark", "Grass", "Mud", "Earth", "Rock", "Rock_Rough", "Gravel", "Snow", "Ice", "Soot", "Charcoal", "Metal_Painted", "Fabric_Soft", "Eyeball", "Metal_Rusted", "Fabric_Rough", "Metal_Copper", "Fabric_Synthetic", "Metal_Bronze", "Metal_Brass", "Metal_Gold", "Void" };
    $customMats = { "Custom_1", "Custom_2", "Custom_3", "Custom_4", "Custom_5", "Custom_6", "Custom_7", "Custom_8", "Custom_9", "Custom_10", "Custom_11", "Custom_12", "Custom_13", "Custom_14", "Custom_15" };   
    $dDoMatsArranged = `sort $dDoMatsMain`;
    for ($l=0; $l<34; ++$l) {
        $leftCol[$l] = $dDoMatsArranged[$l];
    }
    for ($r=34; $r<53; ++$r) {
        $rightCol[$r-34] = $dDoMatsArranged[$r];
    }
    $rightCol = stringArrayCatenate($rightCol,$customMats);
    $matColor = { 0.18823529779911041, 0.18823529779911041, 0.18823529779911041, 0.28235295414924622, 0.29803922772407532, 0.34117648005485535, 0.5, 0.5, 0.5, 0.40849927067756653, 0.45387959480285645, 0.47008469700813293, 0.39215686917304993, 0.39215686917304993, 0.47058823704719543, 0.3803921639919281, 0.36078432202339172, 0.34117648005485535, 0.1590295284986496, 0.2057679146528244, 0.24786755442619324, 0.062745101749897003, 0.062745101749897003, 0.062745101749897003, 0.76470589637756348, 0.28824204206466675, 0.20991925895214081, 0.0, 0.22779631614685059, 1.0, 0.098280169069766998, 0.067281812429428101, 0.49019607901573181, 0.12549020349979401, 0.12549020349979401, 0.12549020349979401, 0.39316394925117493, 0.39316394925117493, 0.26767376065254211, 0.086274512112140656, 0.11764705926179886, 0.19607843458652496, 0.96600157022476196, 1.0, 0.47058820724487305, 0.32295271754264832, 0.54901963472366333, 0.47868773341178894, 0.046136099845170975, 0.19607843458652496, 0.046136099845170975, 0.94117647409439087, 0.94117647409439087, 0.94117647409439087, 0.68627452850341797, 0.39729538559913635, 0.2691272497177124, 0.85470360517501831, 0.84220647811889648, 0.78765547275543213, 0.13725490868091583, 0.11315038800239563, 0.099577091634273529, 0.56862747669219971, 0.36139032244682312, 0.25643983483314514, 0.82352942228317261, 0.65990012884140015, 0.51672428846359253, 0.43137255311012268, 0.30691450834274292, 0.23683197796344757, 0.60784316062927246, 0.20000000298023224, 0.15686275064945221, 0.52941179275512695, 0.46983858942985535, 0.4463668167591095, 0.60784316062927246, 0.56414204835891724, 0.51249521970748901, 0.72549021244049072, 0.62702220678329468, 0.54056131839752197, 0.76470589637756348, 0.66474431753158569, 0.46482124924659729, 0.58120089769363403, 0.49080643057823181, 0.38750284910202026, 0.64099997282028198, 0.22691397368907928, 0.34345701336860657, 0.26495766639709473, 0.17569237947463989, 0.14029145240783691, 0.23877318203449249, 0.39316394925117493, 0.16769665479660034, 0.20512703061103821, 0.13595788180828094, 0.10870527476072311, 0.25490197539329529, 0.22352941334247589, 0.21176470816135406, 0.49019607901573181, 0.44983473420143127, 0.40369090437889099, 0.39215686917304993, 0.27942144870758057, 0.2537485659122467, 0.31433597207069397, 0.41711834073066711, 0.60799998044967651, 1.0, 1.0, 1.0, 0.42787823081016541, 0.5250018835067749, 0.58974593877792358, 0.088649377226829529, 0.033633001148700714, 0.10100000351667404, 0.048442903906106949, 0.087633147835731506, 0.17647059261798859, 1.0, 0.59803563356399536, 0.0, 0.093428187072277069, 0.25490197539329529, 0.084967322647571564, 0.89742887020111084, 0.89742887020111084, 0.78204011917114258, 0.31372550129890442, 0.13298207521438599, 0.07381775975227356, 0.50980395078659058, 0.43921568989753723, 0.5058823823928833, 0.47058823704719543, 0.2337280660867691, 0.1937716156244278, 0.19992311298847198, 0.50980395078659058, 0.21268603205680847, 0.72549021244049072, 0.53679406642913818, 0.25605535507202148, 0.70588237047195435, 0.61107891798019409, 0.17993079125881195, 1.0, 0.80580383539199829, 0.12156862020492554, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.50196081399917603, 0.0, 1.0, 1.0, 0.0, 0.90588235855102539, 0.60000002384185791, 1.0, 0.50196081399917603, 1.0, 0.50196081399917603, 0.35294118523597717, 0.64705884456634521, 1.0, 0.27058824896812439, 0.47843137383460999, 0.52941179275512695, 0.54901963472366333, 0.17254902422428131, 0.49411764740943909, 0.3490196168422699, 0.21176470816135406, 1.0, 0.60000002384185791, 0.46274510025978088, 1.0, 1.0, 0.37647059559822083, 0.50196081399917603 };
    $specColor = { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.461539626121521, 0.461539626121521, 0.461539626121521, 0.94016939401626587, 0.94016939401626587, 0.94016939401626587, 0.28204774856567383, 0.28204774856567383, 0.28204774856567383, 0.80341804027557373, 0.80341804027557373, 0.80341804027557373, 0.16238650679588318, 0.16238650679588318, 0.16238650679588318, 0.37607386708259583, 0.37607386708259583, 0.37607386708259583, 0.81196308135986328, 0.81196308135986328, 0.81196308135986328, 0.5, 0.5, 0.5, 0.29913786053657532, 0.29913786053657532, 0.29913786053657532, 0.18803693354129791, 0.18803693354129791, 0.18803693354129791, 0.10257114470005035, 0.10257114470005035, 0.10257114470005035, 0.29913786053657532, 0.29913786053657532, 0.29913786053657532, 0.15384146571159363, 0.15384146571159363, 0.15384146571159363, 0.5, 0.5, 0.5, 0.64957654476165771, 0.64957654476165771, 0.64957654476165771, 0.25641259551048279, 0.25641259551048279, 0.25641259551048279, 0.17949187755584717, 0.11889830231666565, 0.080765999853610992, 0.37607386708259583, 0.37607386708259583, 0.37607386708259583, 0.44444954395294189, 0.44444954395294189, 0.44444954395294189, 0.27435719966888428, 0.3504234254360199, 0.3504234254360199, 0.093385212123394012, 0.20482185482978821, 0.42734417319297791, 0.50196081399917603, 0.50196081399917603, 0.30980393290519714, 0.11966124922037125, 0.11966124922037125, 0.11966124922037125, 0.068375676870346069, 0.068375676870346069, 0.068375676870346069, 0.23076218366622925, 0.23076218366622925, 0.23076218366622925, 0.10257114470005035, 0.10257114470005035, 0.10257114470005035, 0.44444954395294189, 0.38629740476608276, 0.270099937915802, 0.35896849632263184, 0.35896849632263184, 0.35896849632263184, 0.14529640972614288, 0.14529640972614288, 0.14529640972614288, 0.17647059261798859, 0.15661285817623138, 0.1487889289855957, 0.34187838435173035, 0.34187838435173035, 0.34187838435173035, 0.23932249844074249, 0.23932249844074249, 0.23932249844074249, 0.11966124922037125, 0.11966124922037125, 0.11966124922037125, 0.29059281945228577, 0.29059281945228577, 0.29059281945228577, 0.3504234254360199, 0.3504234254360199, 0.3504234254360199, 0.15384146571159363, 0.15384146571159363, 0.15384146571159363, 0.11966124922037125, 0.11966124922037125, 0.11966124922037125, 0.5, 0.5, 0.5, 0.059830624610185623, 0.059830624610185623, 0.059830624610185623, 0.059830624610185623, 0.059830624610185623, 0.059830624610185623, 0.30769819021224976, 0.30769819021224976, 0.30769819021224976, 0.076920732855796814, 0.076920732855796814, 0.076920732855796814, 0.36752879619598389, 0.36752879619598389, 0.36752879619598389, 0.094010837376117706, 0.073746852576732635, 0.073746852576732635, 0.2222171425819397, 0.2222171425819397, 0.2222171425819397, 1.0, 0.80866646766662598, 0.66666662693023682, 0.23932249844074249, 0.23932249844074249, 0.23932249844074249, 1.0, 0.89818739891052246, 0.62745094299316406, 1.0, 0.94901961088180542, 0.46666666865348816, 1.0, 0.70561665296554565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
    $cosinePower = { 4.51282072067, 8.70085430145, 3.67521357536, 2.0, 5.35042715073, 3.67521357536, 3.67521357536, 2.0, 62.3076934814, 6.18803405762, 2.0, 3.67521357536, 2.0, 2.83760690689, 2.0, 26.2905979156, 35.5042724609, 51.4188041687, 2.0, 2.0, 4.51282072067, 3.67521357536, 2.0, 6.18803405762, 2.0, 5.35042715073, 3.67521357536, 2.0, 2.0, 33.8290596008, 3.67521357536, 2.0, 11.213675499, 7.02564096451, 2.0, 7.02564096451, 3.67521357536, 7.8632478714, 2.0, 2.83760690689, 2.0, 2.0, 8.70085430145, 2.0, 65.6581192017, 2.0, 2.0, 8.70085430145, 4.51282072067, 3.67521357536, 3.67521357536, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0 };
}
/////////

global proc dpMenuHelp(int $option) {
    global string $ddoVersion;
    global string $ddoRelease;

    // prevents multiple help boxes from showing up
    if ( `window -exists matListAbout` ) {
        deleteUI matListAbout;
        windowPref -remove matListAbout;
    }
    // for setting up hotkeys
    if ( $option == 1 || $option == 2 ) {
        if ( $option == 2 ) { $alt = "-alt"; }
        else { $alt = " "; }
        $ctrl = " ";
        if (`window -exists bindHotkey`) {
            deleteUI bindHotkey;
            windowPref -remove bindHotkey;
        }

        if ( $option == 1 ) { window -title "Bind Hotkey for dDo Manager" -w 200 bindHotkey; }
        else { window -title "Bind Hotkey for Focus Material" -w 200 bindHotkey; }
            gridLayout -numberOfColumns 1 -cellWidthHeight 300 150;
                gridLayout -numberOfColumns 1 -cellWidthHeight 300 50;
                    gridLayout -numberOfColumns 1 -cellWidthHeight 300 25;
                        text -label "Choose a desired hotkey.  The hotkey is case sensitive!";
                        text -label "";
                    setParent..;
                    gridLayout -numberOfColumns 1 -cellWidthHeight 300 25;
                        if ( $option == 1 ) {
                            text -label "This hotkey will open and update the dDo Manager window";
                            text -label "( Recommended m )";
                        }
                        else {
                            text -label "This hotkey will take you straight to the material of your";
                            text -label "selected object.  ( Recommended ALT + f )";
                        }
                    setParent..;
                    gridLayout -numberOfColumns 1 -cellWidthHeight 300 50;
                        gridLayout -numberOfColumns 3 -cellWidthHeight 100 50;
                            gridLayout -numberOfColumns 1 -cellWidthHeight 75 50;
                                if ( $option == 1) { textFieldGrp -text "m" hotkeyField; }
                                else { textFieldGrp -text "f" hotkeyField; }
                            setParent..;
                            gridLayout -numberOfColumns 2 -cellWidthHeight 50 50;
                                checkBox -label "Alt" -onCommand "$alt = \"-alt\"" -offCommand "$alt = \"\"" altCheck;
                                checkBox -label "Ctrl" -onCommand "$ctrl = \"-ctl\"" -offCommand "$ctrl = \"\"" ctrlCheck;
                            setParent..;
                            gridLayout -numberOfColumns 1 -cellWidthHeight 100 50;
                                if ( $option == 1 ) { button -label "ASSIGN" -command "dpMenuHotkey(1)"; }
                                else { button -label "ASSIGN" -command "dpMenuHotkey(2)"; }
                            setParent..;
        if ( $option == 2 ) { checkBox -e -v 1 altCheck; }
        showWindow bindHotkey;
        setFocus hotkeyField;
    }
////
    else if ( $option == 3 ) {
        $matListAbout = `window -title "Version Info" -minimizeButton 0 -maximizeButton 0 -menuBar false matListAbout`;
        paneLayout -cn "single" -w 500 -h 150;
        scrollField -wordWrap true -text ( "dDo Material Manager - Version " + $ddoVersion + " build for Maya 2013 and 2014, released " + $ddoRelease + ".  Contact dennis.porter.3d@gmail.com with any questions, bugs, or feedback.  Visit www.DennisPorter3D.com/coolStuff.htm to check for updates." );
        showWindow matListAbout;
    }
////
    else if ( $option == 4 ) {
        $matListAbout = `window -title "About dDo Material Manager" -minimizeButton 0 -maximizeButton 0 -menuBar false matListAbout`;
        paneLayout -cn "single" -w 500 -h 150;
        scrollField -wordWrap true -text "The A, S, & R buttons and the trash can icons respectively correspond to commands that will \"Assign Material to Selection,\" \"Select Objects with Matching Material,\" \"Rename Material,\" and \"Delete Material\".  Clicking on a material's name will take you straight to the Attribute Editor for quick access.  Additionally, an arrow will appear adjacent to any materials currently assigned to your selection.  Mouseover any buttons or other elements of the window to view a tooltip.";
        showWindow matListAbout;
    }
////
    else if ( $option == 5 ) {
        $matListAbout = `window -title "About Deleting Unused Objects" -minimizeButton 0 -maximizeButton 0 -menuBar false matListAbout`;
        paneLayout -cn "single" -w 500 -h 150;
        scrollField -wordWrap true -text "Using \"Delete Unused Materials\" will delete any materials which aren't currently assigned to an object.  Using \"Remove Unconnected Nodes\" will remove most Texture, Utility, and Shading Group nodes that are not connected to a material (this also happens when using Delete Unused Materials).   These options are generally used to clean up a scene which may have duplicate nodes from extended scene use and/or asset imports.";
        showWindow matListAbout;
    }
////
    else if ( $option == 6 ) {
        $matListAbout = `window -title "About Clearing the Scene" -minimizeButton 0 -maximizeButton 0 -menuBar false matListAbout`;
        paneLayout -cn "single" -w 500 -h 150;
        scrollField -wordWrap true -text "Clearing the scene effectively deletes all Materials, Textures,  Utilities, and Shading Groups regardless of whether they are assigned to an object or not.";
        showWindow matListAbout;
    }
////
    else if ( $option == 7 ) {
        $matListAbout = `window -title "About Multiple Select Mode" -minimizeButton 1 -maximizeButton 0 -menuBar false matListAbout`;
        paneLayout -cn "single" -w 500 -h 150;
        scrollField -wordWrap true -text "This mode allows you to select multiple materials and either delete the materials or select all objects associated with the checked materials.  While this mode is active, the green select and red delete buttons are located in the row containing lambert1.  Renaming and assigning materials does not work with this mode, but you can still use those buttons individually.";
        showWindow matListAbout;
    }
////
    else if ( $option == 8 ) {
        $matListAbout = `window -title "About Assigning/Deleting Material Channels" -minimizeButton 0 -maximizeButton 0 -menuBar false matListAbout`;
        paneLayout -cn "single" -w 500 -h 150;
        scrollField -wordWrap true -text "These buttons quickly assign and delete channels from a selected material without having to go through all the interfaces associated with manipulating related nodes.  Additionally, these buttons will automatically rename all created nodes (textures, utilities, shading groups, etc.) for organization and quick identification within the Hypershade, Channel Box, and Attribute Editor.";
        showWindow matListAbout;
    }
////
    else if ( $option == 9 ) {
        global string $gShelfTopLevel;
        string $title = ( "dDo Material Manager v" + $ddoVersion );
        string $currentShelf = `tabLayout -q -st $gShelfTopLevel`;
        setParent ($gShelfTopLevel + "|" + $currentShelf);
    
        shelfButton
            -label $title
            -annotation "Launch dDo Material Manager"
            -image1 "ddoMM/button_ddoMM.png" 
            -command "source ddoMaterialManager_2013.mel; ddoManager;";
    }
////
    else if ( $option == 10 ) {
        $matListAbout = `window -title "About the Add Materials Tab" -minimizeButton 0 -maximizeButton 0 -menuBar false matListAbout`;
        paneLayout -cn "single" -w 500 -h 150;
        scrollField -wordWrap true -text "The Add Materials tab contains dDo material presets which can also be found when importing the swatches.fbx file into your scene.  The difference here is that the materials listed in this tab are not loaded into your scene as a material until you click one of the buttons to do so.  This further helps with keeping your materials manageable even when preparing your model for dDo.  Clicking the name of an object will create it instantly; choosing a radio button then Create & Assign will create and apply the chosen material directly to your selection.  If you need a custom material or shader, you can choose one using the New Custom Mat button.  This will also be applied to your selection.";
        showWindow matListAbout;
    }
}

global proc dpMenuCleanup(int $option) {

    global int $lastTab;
    global string $tabs;

////  Delete Utilities
    if ( $option == 1 ) {
        string $filter[];
        string $logic[];
        $utilityNodeNames = { "arrayMapper", "bump2d", "bump3d", "condition", "distanceBetween", "heightField", "lightInfo", "multiplyDivide",  "place2dTexture", "place3dTexture", "plusMinusAverage", "projection", "reverse", "samplerInfo", "setRange", "stencil", "uvChooser",  "vectorProduct" };
        $fileNodes = `ls -tex`; // list all textures
        $count = `size $fileNodes`; // defines for loop
        for ( $n=$count-1; $n>-1; --$n ) { // -1 accounts for index 0
            $destination = `listConnections -d on $fileNodes[$n]`; // gets destination
            $filter = `ls -mat $destination`; // filters material
            if ( $filter[0] == "" ) { // if not connected to a material
                for ( $u=0; $u<18; ++$u ) {//find utilities
                    select $fileNodes[$n];
                    $logic = `listConnections -type $utilityNodeNames[$u]`;
                    if ( $logic[0] != "" ) {
                        delete `listConnections -type $utilityNodeNames[$u]`; 
                    }
                }
                delete $fileNodes[$n];
            }
        }
        $lastTab = `tabLayout -q -sti $tabs`;
        ddoRefreshCheck;
        if ($lastTab == 2) { ddoUpdateMainListing(1); }
    }
//// Delete Unused
    else if ( $option == 2 ) {
        global string $ddoSelect[];
        int $numDel = 0;
        $errorCount = catch( $numDel = MLdeleteUnused() );
        string $fmt = (uiRes("m_cleanUpScene.kRemovedNumUnusedRenderingNodes"));
    
        string $promptA = `confirmDialog
            -title "Invisible Meshes"
            -message "Node deletion may result in invisible models.  You may need to check your scene in wireframe view and apply any remaining materials to invisble meshes."
            -button "OK"
            -defaultButton "OK"`;
    
        warning "All unconnected nodes destroyed. Check for invisible meshes.";
        select lambert1;
        $lastTab = `tabLayout -q -sti $tabs`;
        ddoRefreshCheck;
        if ($lastTab == 2) { ddoUpdateMainListing(1); }
    }    
//// Delete All
    else if ( $option == 3 ) {
        $remove = { "particleCloud1" };
        $mats = `ls -mat`;
        $materials = stringArrayRemoveExact($remove, $mats);
        $count = `size $materials`;
    
        for ( $i=1; $i<$count; ++$i )
        {
            delete $materials[$i];
        }
        dpMenuCleanup(2); // Deletes unused Utilities after clearing materials
    }    
}

global proc dpMenuHotkey(int $option) {
    
    int $keyLength;
    string $namedCmd;

    $key = `textFieldGrp -q -text hotkeyField`;
    $keyLength = `size $key`;
    $alt = `checkBox -q -v "altCheck"`;
    $ctrl = `checkBox -q -v "ctrlCheck"`;

    if ( $keyLength > 1 ) {
        error "Hotkey must be a single character.";
    }
    else if ( $key == " " ) {
        error "Hotkey may not be bound to the space bar.";
    }
    else if ( $key == "" ) {
       error "Hotkey must be a single character.";    
    }
    
    string $rebindConfirm = `confirmDialog
        -title "Confirm hotkey bind"
        -message "Are you sure you want to bind this hotkey?  This is NOT undoable and will remain bound until you change the binding in the Hotkey Editor."
        -button "Bind It"
        -button "Cancel"
        -defaultButton "Cancel"
        -cancelButton "Cancel"
        -dismissString "Cancel"`;
        
    if ( $rebindConfirm == "Bind It" ) {
        if ( $option == 1 ) {
            nameCommand -annotation "Material Manager" -command "source ddoMaterialManager_2013.mel; ddoManager;" materialManagerNamedCommand;
            $namedCmd = "materialManagerNamedCommand";
        }
        if ( $option == 2 ) {
            nameCommand -annotation "FocusMaterial" -command "$matSelect = stringArrayRemoveDuplicates(ls(\"-mat\",listConnections(listConnections(\"-type\",\"shadingEngine\",`ls -sl -o -dag -s`)))); commitAENotes($gAECurrentTab);showEditorExact $matSelect[0];" focusMaterialNamedCommand;
            $namedCmd = "focusMaterialNamedCommand";
        }

        if ( $alt == "0" && $ctrl == "0" ) {
            hotkey -k $key -name $namedCmd;
            warning ( "Hotkey assigned to the " + $key + " key." );
        }
        else if ( $alt == "1" && $ctrl == "0" ) {
            hotkey -k $key -alt -name $namedCmd;
            warning ( "Hotkey assigned to Alt + " + $key + "\"." );
        }
        else if ( $alt == "0" && $ctrl == "1" ) {
            hotkey -k $key -ctl -name $namedCmd;
            warning ( "Hotkey assigned to Ctrl + " + $key + "\"." );
        }
        else if ( $alt == "1" && $ctrl == "1" ) {
            hotkey -k $key -alt -ctl -name $namedCmd;
            warning ( "Hotkey assigned to Alt + Ctrl + " + $key + "\"." );
        }    
    }
    
    deleteUI bindHotkey;
    windowPref -remove bindHotkey;
}

global proc ddoManager() {
    
    int $windowHeight = 300;
    if (`window -exists mmWindow`) {
        $windowHeight = `window -q -h mmWindow`;
        deleteUI mmWindow;
//        windowPref -remove mmWindow;
    }
    global int $smmMode;
    global int $sortMode;
    global string $tabs;
    global string $tab1;
    global string $tab2;
    global string $ddoSelect[];
    global string $ddoVersion;
    string $title = ( "dDo Material Manager v" + $ddoVersion );
    global string $mainListScrollFrame;
    int $width = 300;
    float $mayaVersion = `getApplicationVersionAsFloat`;
    float $compatibleVersion = 2011;
    
    if( $mayaVersion <= $compatibleVersion ) {
        error "Incompatible Version. Must have Maya 2013 or newer.";
    }
    
    $mmWindow = `window -t $title -minimizeButton 1 -maximizeButton 0 -menuBar true -h $windowHeight mmWindow`;
    
    menu -l "      Tools     " -tearOff false;
        menuItem -label "Open Hypershade" -command "HypershadeWindow;";
        menuItem -label "Graph Network" -command "dpAddToGraph;";
        menuItem -divider true;
        menuItem -label "Assign Hotkey: dDo Manager" -command "dpMenuHelp(1)";
        menuItem -label "Assign Hotkey: Focus Material" -command "dpMenuHelp(2)";
        menuItem -divider true;
        menuItem -label "Create Shelf Button" -c "dpMenuHelp(9)";
        menuItem -divider true;
        menuItem -label "Exit" -command "deleteUI mmWindow;";
    menu -l "     Sorting    " -tearOff false;
        menuItem -label "Sort Chronological" -command "$sortMode = 0; $lastTab = 1; ddoUpdateMainListing(0);";
        menuItem -label "Sort Alphabetical" -command "$sortMode = 1; $lastTab = 1; ddoUpdateMainListing(0);";
        menuItem -label "Toggle Multi Select Mode" -command "$smmMode = $smmMode * -1; $lastTab = 1; ddoRefreshCheck;";
        menuItem -label "Clear Check Boxes" -command "$lastTab = 1; ddoRefreshCheck;";
        menuItem -divider true;
        menuItem -label "Force Refresh" -command "ddoManager;";
    menu -l "     Cleanup    " -tearOff false;
        menuItem -label "Remove Unconnected Utilities..." -command "dpMenuCleanup(1)";
        menuItem -label "Delete Unused Materials..." -command "dpMenuCleanup(2)";
        menuItem -label "Clear Scene..." -command "dpMenuCleanup(3)";
    menu -l "       Help     " -tearOff false;
        menuItem -label "Version Information" -command "dpMenuHelp(3);";
        menuItem -label "About Material Manager" -command "dpMenuHelp(4);";
        menuItem -label "About the Add Materials Tab" -command "dpMenuHelp(10);";
        menuItem -label "About Deleting Unused Objects" -command "dpMenuHelp(5);";
        menuItem -label "About Clearing the Scene" -command "dpMenuHelp(6);";
        menuItem -label "About Multiple Select Mode" -command "dpMenuHelp(7);";
        menuItem -label "About Assigning/Deleting Material Channels" -command "dpMenuHelp(8);";
        
    gridLayout -numberOfColumns 1 -cellWidthHeight 300 10 ddoTopSpacer;
        separator -h 10 -w 320;
    setParent $mmWindow;
    gridLayout -numberOfColumns 1 -cellWidthHeight 300 50 ddoTitleBar;
        gridLayout -numberOfColumns 2 -cellWidthHeight 225 50;
            image -image "ddoMM/banner_ddoMM.png" -width $width -height 47;
            gridLayout -numberOfColumns 1 -cellWidthHeight 75 25;
                button -l "Import" -ann "Import a file into the scene" -bgc .2 .2 .2 -c "Import;";
                button -l "Export" -ann "Exports selection" -bgc .2 .2 .2 -c "ExportSelection;";
            setParent..;
        setParent..;
    setParent mmWindow;

    string $tabs = `tabLayout -p mmWindow ddoTabs`;
    $tab1 = `frameLayout -cll false -bv off -bgc .4 .4 .4 -w $width -h 373 -label "Materials in Scene" -p $tabs mainListFrame`;
            scrollLayout -w $width mainListScrollFrame;
                dpPopulateList;
            setParent mainListScrollFrame;
        setParent mainListFrame;
        

        gridLayout -numberOfColumns 1 -cellWidthHeight $width 85 quickMatsContainer;
            frameLayout -cll false -bv off -bgc .4 .4 .4 -w $width -label "Quick Materials" quickMatsFrame;
                dpQuickMatsLayout;
            setParent..;    
            frameLayout  -cll false -bv off -bgc .4 .4 .4 -w $width -label "Assign/Delete Material Channels" channelControlFrame;
                dpEditMatChannelsLayout;
            setParent..;
        setParent quickMatsContainer;
        
        setParent mmWindow;
    setParent..; //tab1 group

    $tab2 = `frameLayout  -cll false -bv off -bgc .4 .4 .4 -w $width -height 100 -label "dDo Material Presets" -p $tabs ddoMatsFrame`;
            scrollLayout -w $width presetListFrame;
                dpGetDdoList;
            setParent..;
        setParent ddoMatsFrame;
    
        gridLayout -numberOfColumns 1 -cellWidthHeight $width 75 tab2bottomBar;
            gridLayout -numberOfColumns 1 -cellWidthHeight $width 25;
                text -l "Materials already in the scene do not appear in preset list";
                gridLayout -numberOfColumns 3 -cellWidthHeight ($width/2) 25;
                    button -l "New Custom Material" -ann "Brings up material tree lister and will assign to selection, if any" -c "dpNewMaterial;" -bgc 0 .65 0;
                setParent..;
                separator -h 10 -w 320;
            setParent..;
            frameLayout  -cll false -bv off -bgc .2 .2 .2 -w $width -label "Contact/Update" contactFrame;
                gridLayout -numberOfColumns 1 -cellWidthHeight 200 25 ;
                    button -l "www.DennisPorter3D.com" -bgc .2 .2 .2 -c "system(\"shell start www.dennisporter3d.com/coolstuff.htm\");"; //filler
                    button -l "www.Quixel.se" -bgc .2 .2 .2 -c "system(\"shell start www.quixel.se\");";
                setParent..;
            setParent..;      
        setParent..;
    setParent..; // close tab2

    tabLayout -edit 
        -tabLabel $tab1 ("           Material List           ")
        -tabLabel $tab2 ("           Add Materials           ")
        -sc "$lastTab = `tabLayout -q -sti $tabs`; ddoRefreshCheck;"
        $tabs;

    showWindow mmWindow;
    window -e -w $width mmWindow;
    
    print ( "dDo Material Manager v" + $ddoVersion );
}

global proc ddoRefreshCheck() {
    
    global string $ddoSelect[];
    global int $lastTab;

    if ($lastTab == 1) {
        $ddoSelect = `ls -sl`;
        ddoUpdateMainListing(0);
    }
}

global proc dpPopulateList() {
    
    global int $smmMode = -1;
    global int $sortMode;
    string $matSelect[]; dpGetMaterial($matSelect);
    float $matColor[];    
    string $materials[];
    $remove = { "particleCloud1" };
    $mats = `ls -mat`;
    $materials = stringArrayRemoveExact($remove, $mats);
    $count = `size $materials`;
    
    if ($sortMode == 1) {
        $materials = `sort($materials)`;
    }
    
    gridLayout -numberOfColumns 1 -cellWidthHeight 275 ($count * 25) -p mainListScrollFrame mainListingLayout;
        gridLayout -numberOfColumns 3 -cellWidthHeight 125 25;
            for ($i=0; $i<$count; ++$i) { // If color channel exists, make button that color
                if (objExists($materials[$i] + ".color") && `objectType -i "rampShader" $materials[$i]` == 0 && `objectType -i "fluidShape" $materials[$i]` == 0) {
                    $matColor = `getAttr ( $materials[$i] + ".color")`;
                    string $selCommand = "select " + $materials[$i] + "; dpFocus " + $materials[$i] + ";";
                    gridLayout -numberOfColumns 2 -cellWidthHeight 125 20;
                        button -label $materials[$i] -ann "Selects material" -bgc $matColor[0] $matColor[1] $matColor[2] -command ( $selCommand );
                    setParent..;
                }
                else if (!objExists($materials[$i] + ".color") || `objectType -i "rampShader" $materials[$i]` == 1 || `objectType -i "fluidShape" $materials[$i]` == 1) { // If material has no color channel, default to pink
                    $matColor = { 1.0, .5, .5 };
                    string $selCommand = "";
                    gridLayout -numberOfColumns 2 -cellWidthHeight 150 20;
                        string $selCommand = "select " + $materials[$i] + "; dpFocus " + $materials[$i] + ";";
                        button -label $materials[$i] -bgc 1 .5 .5 -command ( $selCommand );
                    setParent..;
                }
            gridLayout -numberOfColumns 5 -cellWidthHeight 25 20;
                // Assign
                button -label "A" -bgc $matColor[0] $matColor[1] $matColor[2] -ann "Assign material to selection" -command ( "hyperShade -assign " + $materials[$i] + "; ddoUpdateIndicators;" );
                // Indicator/Mark
                gridLayout -numberOfColumns 1 -cellWidthHeight 25 20;
                    if (stringArrayContains($materials[$i], $matSelect) == 1 ) {
                        iconTextStaticLabel -st "iconOnly" -i "left.png" -vis 1 ( "indicator" + $i ); 
                    }
                    else { iconTextStaticLabel -st "iconOnly" -i "left.png" -vis 0 ( "indicator" + $i ); }
                setParent..;
                // Check Box
                gridLayout -numberOfColumns 1 -cellWidthHeight 25 20;
                    if ( $smmMode == 1 ) {
                        checkBox -w 25 -h 25 -label "" ( "ddoCkBx_" + $materials[$i]);
                    }
                setParent..;
                // Select
                if ( $smmMode != 1 ) {
                    button -label "S" -bgc .65 .65 .65 -ann "Select objects with assigned material" -command ( "hyperShade -objects " + $materials[$i] );
                }
                else { 
                    if ($smmMode == 1 && $materials[$i] != "lambert1") { text -label ""; }
                    else if ($smmMode == 1 && $materials[$i] == "lambert1") { iconTextButton -st "textOnly" -label "S" -ann "Select all objects of checked materials" -bgc .2 .7 .2 -command "dpSelCheckBoxes; $lastTab = 1; ddoUpdateMainListing(0);"; }
                }
                // Rename
                if ( $materials[$i] != "lambert1" ) {
                    string $renameCommand = "select " + $materials[$i] + "; dpRenameMat";
                    button -label "R" -bgc .25 .25 .25 -ann "Rename material" -command ( $renameCommand );
                }
                else {
                    iconTextButton -style "iconOnly" -image1 "checkboxOn.png" -ann "Toggle Multiple Select Mode" -command "$smmMode = $smmMode * -1; ddoUpdateMainListing(0);";
                }
            setParent..;
            // Delete
            gridLayout -numberOfColumns 1 -cellWidthHeight 25 25;
                if ( $materials[$i] != "lambert1" ) {
                    if ( $smmMode != 1 ) {                         
                        string $delCommand = "select " + $materials[$i] + "; dpDelSingle";
                        iconTextButton -st "iconOnly" -i1 "removeRenderable.png" -ann "Delete material" -command ( $delCommand );
                    }
                    else { text -label ""; }
                }
                else { 
                    if ($smmMode == 1 && $materials[$i] == "lambert1") { 
                        gridLayout -numberOfColumns 1 -cellWidthHeight 25 20;
                            iconTextButton -st "iconOnly" -i1 "removeRenderable.png" -ann "Delete all checked materials" -bgc .7 .2 .2 -command "dpDelCheckBoxes; $lastTab = 1; ddoUpdateMainListing(0);"; 
                        setParent..;
                    }
                    else {
                        iconTextButton -style "iconAndTextHorizontal" -image1 "hsGraphMaterial.png" -label "" -ann "Graphs network of selected object to the Hypershade Work Area" -command "dpAddToGraph;"; 
                    }
                }
            setParent..;
            }
        setParent..;
    setParent mainListingLayout;
}

global proc dpGetDdoList() {
    
    global string $dDoMatsMain[];
    global string $customMats[];
    global float $matColor[];
    global float $specColor[];
    global float $cosinePower[];
    global string $leftCol[];
    global string $rightCol[];
    string $unloadedLeft[];
    string $unloadedRight[];
    string $dDoMatsMaster[];
    $dDoMatsMaster = stringArrayCatenate($dDoMatsMain, $customMats);
    int $loc;
    int $colLength;
    string $materials[];
    $remove = { "particleCloud1" };
    $mats = `ls -mat`;
    $materials = stringArrayRemoveExact($remove, $mats); //list all existing mats
    $unloadedLeft = stringArrayRemoveExact($materials, $leftCol); //gets list for tab2
    $unloadedRight = stringArrayRemoveExact($materials, $rightCol); //gets list for tab2
    gridLayout -numberOfColumns 2 -cellWidthHeight 137 (`size $leftCol` * 25) -p presetListFrame presetGrid;
        gridLayout -numberOfColumns 1 -cellWidthHeight 137 25;
            if ($unloadedLeft[0] != "") { //if a preset still exists
                for ($l=0; $l<`size $unloadedLeft`; ++$l) {
                    int $loc = stringArrayFind($unloadedLeft[$l], 0, $dDoMatsMaster); //checks for array index
                    int $colorLoc = ($loc * 3); //for RGB values
                    gridLayout -numberOfColumns 2 -cellWidthHeight 102 25;
                        string $buttonCommand = "ddoPresets(\"" + $unloadedLeft[$l] + "\");";
                        button -l $unloadedLeft[$l] -ann ( "Creates the " + $unloadedLeft[$l] + " material preset" ) -bgc $matColor[$colorLoc] $matColor[$colorLoc+1] $matColor[$colorLoc+2] -c ( $buttonCommand );
                        gridLayout -numberOfColumns 1 -cellWidthHeight 25 25;
                            string $buttonCommand = "dpCreateAssign(\"" + $unloadedLeft[$l] + "\");";
                            button -l "A" -ann "Creates and assigns this material preset to your selection" -bgc $matColor[$colorLoc] $matColor[$colorLoc+1] $matColor[$colorLoc+2] -c ( $buttonCommand ) ($unloadedLeft[$l]);
                        setParent..;
                    setParent..;
                }
            }
            else if ($unloadedLeft[0] == "" && $unloadedRight[0] == "") { text -l "All dDo presets loaded."; }
        setParent..;
        gridLayout -numberOfColumns 1 -cellWidthHeight 137 25;
            if ($unloadedRight[0] != "") { //if a preset still exists
                for ($r=0; $r<`size $unloadedRight`; ++$r) {
                    int $loc = stringArrayFind($unloadedRight[$r], 0, $dDoMatsMaster);
                    int $colorLoc = ($loc * 3);
                    gridLayout -numberOfColumns 2 -cellWidthHeight 112 25;
                        string $buttonCommand = "ddoPresets(\"" + $unloadedRight[$r] + "\");";
                        button -l $unloadedRight[$r] -ann ( "Creates the " + $unloadedRight[$r] + " material preset" ) -bgc $matColor[$colorLoc] $matColor[$colorLoc+1] $matColor[$colorLoc+2] -c ( $buttonCommand );
                        gridLayout -numberOfColumns 1 -cellWidthHeight 25 25;
                            string $buttonCommand = "dpCreateAssign(\"" + $unloadedRight[$r] + "\");";
                            button -l "A" -ann "Creates and assigns this material preset to your selection" -bgc $matColor[$colorLoc] $matColor[$colorLoc+1] $matColor[$colorLoc+2] -c ( $buttonCommand ) ($unloadedRight[$r]);                            
                        setParent..;
                    setParent..;
                }
            }
        setParent..;
    setParent..;
}

global proc dpQuickMatsLayout(){
    
    gridLayout -numberOfColumns 4 -cellWidthHeight 75 60;
        gridLayout -numberOfColumns 1 -cellWidthHeight 75 34;
            iconTextButton -style "iconOnly" -bgc .5 .5 .35 -image1 "render_blinn.png" -ann "Quickly create and/or assign a Blinn material" -command "dpQuickMats(1)";
            text -label "Blinn" -bgc .5 .5 .35;
        setParent..;
        gridLayout -numberOfColumns 1 -cellWidthHeight 75 34;
            iconTextButton -style "iconOnly" -bgc .5 .5 .35 -image1 "render_phong.png" -ann "Quickly create and/or assign a Phong material" -command "dpQuickMats(2)";
            text -label "Phong" -bgc .5 .5 .35 ;
        setParent..;
        gridLayout -numberOfColumns 1 -cellWidthHeight 75 34;
            iconTextButton -style "iconOnly" -bgc .5 .5 .35 -image1 "render_lambert.png" -ann "Quickly create and/or assign a Lambert material" -command "dpQuickMats(3)";
            text -label "Lambert" -bgc .5 .5 .35 ;
        setParent..;
        gridLayout -numberOfColumns 1 -cellWidthHeight 75 34;
            iconTextButton -style "iconOnly" -bgc .5 .5 .35 -image1 "polyCreateUVSet.png" -ann "Quickly create and/or assign a checkered material, useful for UV mapping" -command "dpQuickMats(4)";
            text -label "Checker" -bgc .5 .5 .35 ;
        setParent..;
    setParent..;
}

global proc dpQuickMats(int $option) {
    
    global string $ddoSelect[];
    string $object[];
    string $matName;
    string $matRename[];

    $object = `ls -sl`;
    if ($option != 4) {
        string $promptA = `promptDialog
            -title "Name Your Material"
            -message "Material Name:"
            -button "OK" -button "Cancel"
            -defaultButton "OK" -cancelButton "Cancel"
            -dismissString "Cancel"`;
        
        if ($promptA == "OK") {
            $matName = `promptDialog -query -text`;
            if ($matName != "") {
                if ( $option == 1 ) { //Blinn
                    createRenderNodeCB -asShader "surfaceShader" blinn "";
                }
                else if ( $option == 2 ) { //Phong
                    createRenderNodeCB -asShader "surfaceShader" phong "";
                }
                else if ( $option == 3 ) { //Lambert
                    createRenderNodeCB -asShader "surfaceShader" lambert "";
                }
                rename $matName;
                $matRename = `ls -sl`;
                $se = `listConnections -type shadingEngine`;
                rename $se ( $matRename[0] + "_SG" );
                if ( $object[0] != "" ) {
                    select $object[0];
                    hyperShade -assign $matRename;
                }
                select $matRename;
                dpFocus $matRename[0];
                ddoUpdateMainListing(0);
            }
            else { error "Material name cannot be blank."; }
        }
    }        
    else if ( $option == 4 ) { //Checker
        string $currentPanel;
        string $ckrFile[];
        string $ckrMat[];
        string $select[];
        $select = `ls -sl`;
        
        if ( !objExists("Checker")) {
            createRenderNodeCB -asShader "surfaceShader" lambert "";
            rename "Checker";
            $se = `listConnections -type shadingEngine`;
            rename $se "Checker_SG";
            $ckrMat = `ls -sl`;
            createRenderNodeCB -as2DTexture "" checker "";
            rename ( $ckrMat[0] + "_Texture" );
            $ckrFile = `ls -sl`;
            select `listConnections -t "place2dTexture" $ckrFile`;
            rename ( $ckrMat[0] + "_2D" );
            defaultNavigation -connectToExisting -source $ckrFile -destination ( $ckrMat[0] + ".color" );
            select "Checker_2D";
            setAttr "Checker_2D.repeatU" 8;
            setAttr "Checker_2D.repeatV" 8;
            showEditor $ckrFile[0];
            select "Checker";
        }
        else { error "Checker material already exists."; }
        if ( $select[0] != "" ) {
            select $select;
            hyperShade -assign "Checker";
            $currentPanel = `getPanel -withFocus`; 
            modelEditor -e -displayAppearance smoothShaded -displayTextures true $currentPanel;
        }
    }
    $ddoSelect = `ls -sl`;
    ddoUpdateMainListing(0);
}

global proc dpEditMatChannelsLayout(){
    
    gridLayout -numberOfColumns 6 -cellWidthHeight 50 60;
        gridLayout -numberOfColumns 1 -cellWidthHeight 50 34;
            iconTextButton -st "iconAndTextHorizontal" -ann "Quickly assign a diffuse map to material's Color channel" -bgc .2 .5 .2 -i1 "smearColor.png" -l "D" -c "dpCheckMatCount(1)";
            iconTextButton -st "iconOnly" -i1 "removeRenderable.png" -ann "Deletes a material's Color channel" -bgc .2 .5 .2 -c "dpCheckMatCount(11)";
        setParent..;
        gridLayout -numberOfColumns 1 -cellWidthHeight 50 34;
            iconTextButton -st "iconAndTextHorizontal" -ann "Quickly assign a tangent-space normal map to material's Bump Mapping channel" -bgc .5 .5 1 -i1 "nClothDisplayCurrent.png" -l "N" -c "dpCheckMatCount(2)";
            iconTextButton -st "iconOnly" -i1 "removeRenderable.png" -ann "Deletes a material's Bump Mapping channel" -bgc .5 .5 1 -c "dpCheckMatCount(22)";
        setParent..;
        gridLayout -numberOfColumns 1 -cellWidthHeight 50 34;
            iconTextButton -st "iconAndTextHorizontal" -ann "Quickly assign a specular map to material's Specular Color channel" -bgc .5 .5 .5 -i1 "render_anisotropic.png" -l "S" -c "dpCheckMatCount(3)";
            iconTextButton -st "iconOnly" -i1 "removeRenderable.png" -ann "Deletes a material's Specular Color channel" -bgc .5 .5 .5 -c "dpCheckMatCount(33)";
        setParent..;
        gridLayout -numberOfColumns 1 -cellWidthHeight 50 34;
            iconTextButton -st "iconAndTextHorizontal" -ann "Quickly assign an emissive map to material's Incandescence channel" -bgc 1 1 .5 -i1 "light.png" -l "I" -c "dpCheckMatCount(4)";
            iconTextButton -st "iconOnly" -i1 "removeRenderable.png" -ann "Deletes a material's Incandescence channel" -bgc 1 1 .5 -c "dpCheckMatCount(44)";
        setParent..;
        gridLayout -numberOfColumns 1 -cellWidthHeight 50 34;
            iconTextButton -st "iconAndTextHorizontal" -ann "Quickly assign a transparency map to material's Transparency channel" -bgc .1 .1 .1 -i1 "menuIconCartoon.png" -l "T" -c "dpCheckMatCount(5)";
            gridLayout -numberOfColumns 2 -cellWidthHeight 25 34;            
                iconTextButton -st "iconOnly" -i1 "removeRenderable.png" -ann "Deletes a material's Transparency channel" -bgc .1 .1 .1 -c "dpCheckMatCount(55)";
                iconTextButton -st "iconOnly" -i1 "nodeGrapherDisplayNone.png" -ann "Disconnects an undesired transparency input caused by the alpha channel of a diffuse map." -bgc .1 .1 .1 -c "dpCheckMatCount(-2);";
            setParent..;
        setParent..;
        gridLayout -numberOfColumns 1 -cellWidthHeight 50 34;
            iconTextButton -st "iconOnly" -i1 "fire.png" -ann "Clears all channels of the selected material" -c "dpCheckMatCount(-1)";
            text -label "Del All";
        setParent..;
    setParent..;
}

global proc dpEditMatChannels(int $option) {
    //1 = Assign Diffuse, 11 = Delete Diffuse
    //2 = Assign Normals, 22 = Delete Normals
    //3 = Assign Spec, 33 = Delete Spec
    //4 = Assign Incandescence, 44 = Delete Incandescence
    //5 = Assign Transparency, 55 = Delete Transparency
    //-1 = Delete All
    global string $ddoSelect[];
    global string $gAECurrentTab;
    global string $dFile[];
    global string $nFile[];
    global string $tFile[];
    global string $sFile[];
    global string $iFile[];
    global string $aFile[];
    string $occupiedCheck[] = { "" };
    string $matSelect[] = `ls -sl`;
    dpGetMaterial($matSelect);
    string $delFile[];
    string $delFile2d[];
    
    if ($option == 1) {
        if ( $matSelect[0] != "" ) {
//// Create, rename, & store file node, select and rename place2dTexture node
        $occupiedCheck = `listConnections ( $matSelect[0] + ".color" )`;
            if ( $occupiedCheck[0] == "" && `objExists ($matSelect[0] + ".color")`) {
                createRenderNodeCB -as2DTexture "" file "";
                rename ( $matSelect[0] + "_D" );
                $dFile = `ls -sl`;
                select `listConnections -t "place2dTexture" $dFile[0]`;
                rename ( $matSelect[0] + "_D_2D" );
                defaultNavigation -connectToExisting -source $dFile[0] -destination ( $matSelect[0] + ".color" );
                showEditor $dFile[0];
                AEfileTextureBrowser "AEassignTextureCB ( $dFile[0] + \".fileTextureName\" )" image;
                ddoUpdateMainListing(0);
            }
            else if ( $occupiedCheck[0] == "") { warning "Material already has the color channel asssigned."; }
            else if ( `objExists ($matSelect[0] + ".color")` == 0) { warning "Material has no color channel."; }
        }
    }
    else if ($option == 11) {
        if (`objExists ($matSelect[0] + ".color")`) {
            $occupiedCheck = `listConnections ( $matSelect[0] + ".color" )`;
            if ( $occupiedCheck[0] != "" ) {
                select `listConnections ( $matSelect[0] + ".color" )`;
                $delFile = `ls -sl`;
                if ( $delFile[0] != "" ) {
                    select `listConnections -t "place2dTexture" $delFile[0]`;
                    $delFile2d = `ls -sl`;
                    delete $delFile2d;
                    delete $delFile;
                }
            }
            ddoUpdateMainListing(0);
        }
//        else if ($matSelect[0] == "") { warning "Channel is already clear."; }
        else if (`objExists ($matSelect[0] + ".color")`) { warning "Material does not have a Color channel."; }
    }
    else if ($option == 2) {
//// Create, rename, & store file node, select and rename place2dTexture node
        if ( $matSelect[0] != "" ) {
        $occupiedCheck = `listConnections ( $matSelect[0] + ".normalCamera" )`;
            if ( $occupiedCheck[0] == "" ) {
                createRenderNodeCB -as2DTexture "" file "";
                rename ( $matSelect[0] + "_N" );
                $nFile = `ls -sl`;
                select `listConnections -t "place2dTexture" $nFile[0]`;
                rename ( $matSelect[0] + "_N_2D" );
                defaultNavigation -connectToExisting -source $nFile[0] -destination ( $matSelect[0] + ".normalCamera" );
//// Creates, renames, & stores bump2d
                select `listConnections -t "bump2d" $nFile[0]`;
                rename ( $matSelect[0] + "_Tangent" );
                $tFile = `ls -sl`;
//// Sets bump2d to Tangent Space Normals & attaches to file node
                setAttr ( $tFile[0] + ".bumpInterp" ) 1;
                defaultNavigation -connectToExisting -source $nFile[0] -destination $tFile[0];
                showEditor $nFile[0];
                AEfileTextureBrowser "AEassignTextureCB ( $nFile[0] + \".fileTextureName\" )" image;
            }
            else {
                warning "Material already has the bump channel assigned.";
            }
        }
    }
////
    else if ($option == 22) {
        if (`objExists ($matSelect[0] + ".normalCamera")`) {
            $occupiedCheck = `listConnections ( $matSelect[0] + ".normalCamera" )`;
            if ( $occupiedCheck[0] != "" ) {
                select `listConnections -t "bump2d" ( $matSelect[0] + ".normalCamera" )`;
                $delBump2d = `ls -sl`;
                select `listConnections -t "file" $delBump2d[0]`;
                $delFile = `ls -sl`;
                select `listConnections -t "place2dTexture" $delFile[0]`;
                $delFile2d = `ls -sl`;
                delete $delFile2d;
                delete $delFile;
                delete $delBump2d;
            }
        }
//        else if ( $matSelect[0] == "" ) { warning "Channel is already clear."; }
        else if ( `objExists ($matSelect[0] + ".normalCamera")` == 0 ) { warning "Material does not have a Bump Mapping channel."; }
    }
////
    else if ($option == 3) {
        if ( objExists($matSelect[0] + ".specularColor")) {
            $occupiedCheck = `listConnections ( $matSelect[0] + ".specularColor" )`;            
            if ( $occupiedCheck[0] == "" ) {
                createRenderNodeCB -as2DTexture "" file "";
                rename ( $matSelect[0] + "_S" );
                $sFile = `ls -sl`;
                select `listConnections -t "place2dTexture" $sFile[0]`;
                rename ( $matSelect[0] + "_S_2D" );
                defaultNavigation -connectToExisting -source $sFile[0] -destination ( $matSelect[0] + ".specularColor" );
                showEditor $sFile[0];
                AEfileTextureBrowser "AEassignTextureCB ( $sFile[0] + \".fileTextureName\" )" image;
            }
            else { error "Material already has the specular color channel assigned."; }
        }
        else { error "Material does not have a Specular Color channel.";
        }
    }
////
    else if ($option == 33) {
        if ( objExists($matSelect[0] + ".specularColor")) {
            $occupiedCheck = `listConnections ( $matSelect[0] + ".specularColor" )`;            
            if ( $occupiedCheck[0] != "" ) {
                select `listConnections ( $matSelect[0] + ".specularColor" )`;
                $delFile = `ls -sl`;
                select `listConnections -t "place2dTexture" $delFile[0]`;
                $delFile2d = `ls -sl`;
                delete $delFile2d;
                delete $delFile;
            }
//            else { warning "Channel is already clear."; }
        }
//        else { warning "Material does not have a Specular Color channel."; }
    }
////
    else if ($option == 4) {
//// Create, rename, & store file node, select and rename place2dTexture node
        if ( $matSelect[0] != "" ) {
            $occupiedCheck = `listConnections ( $matSelect[0] + ".incandescence" )`;
            if ( $occupiedCheck[0] == "" ) {
                createRenderNodeCB -as2DTexture "" file "";
                rename ( $matSelect[0] + "_I" );
                $iFile = `ls -sl`;
                select `listConnections -t "place2dTexture" $iFile[0]`;
                rename ( $matSelect[0] + "_I_2D" );
                defaultNavigation -connectToExisting -source $iFile[0] -destination ( $matSelect[0] + ".incandescence" );
                showEditor $iFile[0];
                AEfileTextureBrowser "AEassignTextureCB ( $iFile[0] + \".fileTextureName\" )" image;
            }
//            else { warning "Material already has the incandescence channel assigned."; }
        }
    }
////
    else if ($option == 44) {
        if (`objExists ($matSelect[0] + ".incandescence")`) {
            $occupiedCheck = `listConnections ( $matSelect[0] + ".incandescence" )`;
            if ( $occupiedCheck[0] != "" ) {
                select `listConnections ( $matSelect[0] + ".incandescence" )`;
                $delFile = `ls -sl`;
                select `listConnections -t "place2dTexture" $delFile[0]`;
                $delFile2d = `ls -sl`;
                delete $delFile2d;
                delete $delFile;
            }
        }
//        else if ( $occupiedCheck[0] == "" ) { warning "Channel is already clear."; }
        else if ( `objExists ($matSelect[0] + ".incandescence")` == 0 ) { warning "Material has no incandescence channel."; }
    }
////
    else if ($option == 5) {
//// Create, rename, & store file node, select and rename place2dTexture node
        if ( $matSelect[0] != "" ) {
            $occupiedCheck = `listConnections ( $matSelect[0] + ".transparency" )`;
            if ( $occupiedCheck[0] == "" ) {
                createRenderNodeCB -as2DTexture "" file "";
                rename ( $matSelect[0] + "_T" );
                $aFile = `ls -sl`;
                select `listConnections -t "place2dTexture" $aFile[0]`;
                rename ( $matSelect[0] + "_T_2D" );
                defaultNavigation -connectToExisting -source $aFile[0] -destination ( $matSelect[0] + ".transparency" );
                showEditor $aFile[0];
                AEfileTextureBrowser "AEassignTextureCB ( $aFile[0] + \".fileTextureName\" )" image;
            }
            else { warning "Material already has the transparency channel assigned."; }
        }
    }
////
    else if ($option == 55) {
        if (`objExists ($matSelect[0] + ".transparency")`) {
            $occupiedCheck = `listConnections ( $matSelect[0] + ".transparency" )`; 
            if ( $occupiedCheck[0] != "") {
                select `listConnections ( $matSelect[0] + ".transparency" )`;
                $delFile = `ls -sl`;
                select `listConnections -t "place2dTexture" $delFile[0]`;
                $delFile2d = `ls -sl`;
                delete $delFile2d;
                delete $delFile;
            }
        }
//        else if ( $occupiedCheck[0] == "") { warning "Channel is already clear."; }
        else if ( `objExists ($matSelect[0] + ".color")` == 0) { warning "Material has no transparency channel."; }
    }
////
    else if ($option == -1) {
        dpEditMatChannels(55);
        dpEditMatChannels(44);
        dpEditMatChannels(33);
        dpEditMatChannels(22);
        dpEditMatChannels(11);
    }
    select $matSelect;
    dpFocus $matSelect[0];
}

global proc dpCheckMatCount(int $option) {

    global string $ddoSelect[];
    string $matSelect[];
    int $count;
    dpGetMaterial($matSelect);
    $count = `size($matSelect)`;
    $ddoSelect = `ls -sl`;

    if ( `size($matSelect)` > 1 ) {
        if ( `window -ex multipleMatsWindow` ) {
            deleteUI multipleMatsWindow;
        }
        $multipleMatsWindow = `window -title "Multiple Materials Found" multipleMatsWindow`;
        columnLayout -width 300 -height ( 130 + ($count * 25));
            gridLayout -numberOfColumns 1 -cellWidthHeight 300 15;
                text -l "This object has multiple materials assigned.";
                text -l "Choose which material you want to modify:";
            setParent..;
        gridLayout -numberOfColumns 1 -cellWidthHeight 300 25;
            text -l "";
            if ($option != -2) { //standard use
                for ( $i=0; $i < $count; ++$i ) {
                    string $cmd = "select \"" + $matSelect[$i] + "\"; deleteUI multipleMatsWindow; dpEditMatChannels(" + $option + ");";
                    button -l $matSelect[$i] -c ( $cmd );
                }
            }
            else { // for detaching the transparency channel only
                for ( $i=0; $i < $count; ++$i ) {
                    string $cmd = "select \"" + $matSelect[$i] + "\"; deleteUI multipleMatsWindow; dpDetachAlpha;";
                    button -l $matSelect[$i] -c ( $cmd );
                }
            }
            text -l "";
            setParent..;
        setParent..;
        gridLayout -numberOfColumns 2 -cellWidthHeight 150 50;
            text -l "";
            button -l "Cancel" -c "deleteUI multipleMatsWindow";
        setParent..;
        showWindow $multipleMatsWindow;
    }
    else {
        select $matSelect;
        if ($option != -2) { //standard use
            dpEditMatChannels($option); 
        }
        else { dpDetachAlpha; }
    }
    select $ddoSelect;
}

global proc dpUtilities() {
    
    gridLayout -numberOfColumns 1 -cellWidthHeight 300 184;
        gridLayout -numberOfColumns 2 -cellWidthHeight 175 46;
            iconTextButton -st "iconAndTextHorizontal" -i1 "render_place2dTexture.png" -l "Delete Unused Utilities" -c "dpMenuCleanup(1);";
            iconTextButton -st "iconAndTextHorizontal" -i1 "materialEditor.png" -l "Open Hypershade" -c "HypershadeWindow;";
            iconTextButton -st "iconAndTextHorizontal" -i1 "deleteActive.png" -l "Delete Unused Materials" -c "dpMenuCleanup(2);";
            iconTextButton -st "iconAndTextHorizontal" -i1 "hsGraphMaterial.png" -label "Graph Network" -ann "Graphs network of selected object to the Hypershade Work Area" -command "dpAddToGraph;";
            iconTextButton -st "iconAndTextHorizontal" -i1 "flameCurly.png" -l "Clear Scene" -c "dpMenuCleanup(3);";
            text -l "";
            iconTextButton -st "iconAndTextHorizontal" -i1 "textureEditorDisplayAlpha.png" -l "    Detach Transparency" -ann "Disconnects the undesired transparency input caused by the alpha channel of a diffuse map." -c "dpCheckMatCount(-2);";
            iconTextButton -st "iconAndTextHorizontal" -i1 "newShelf.png" -l " Create Shelf Button" -c "dpMenuHelp(9)";
        setParent..;
    setParent..;
}

global proc dpGetMaterial(string $matSelect[]) {
    
    string $select[];
    string $mySGs[];
    string $surfaceShader[];
    string $matSelect[];
    string $myShapeNode[];
    
    $select = `ls -sl`;
    if ($select[0] != "") {
        for ($e=0; $e<`size $select`; ++$e) {
            $myShapeNode = `listRelatives -children -shapes $select[$e]`;
            if ($myShapeNode[0] == "") { //checks if selection is a component
                $myShapeNode = `listRelatives -parent -shapes $select[$e]`;
            }
            if ($myShapeNode[0] != "" ) {
                $mySGs = `listConnections -type shadingEngine $myShapeNode[0]`;
                $mySGs = stringArrayRemoveDuplicates($mySGs);
                for ($i=0; $i<`size $mySGs`; ++$i) {
                    $surfaceShader = `listConnections ($mySGs[$i] + ".surfaceShader")`;
                    $matSelect = stringArrayCatenate($matSelect, $surfaceShader);
                }
            }
//            else if (objExists ( $select[$e] + ".color" )) {
            else {
                $matSelect[$e] = $select[$e];
            }
        }
    }
}

global proc dpFocus(string $name) {

    showEditorExact $name;
    global string $gAETabLayoutName;
    string $tabs[] = `tabLayout -q -tabLabelIndex $gAETabLayoutName`;
    for ($i=0;$i<size($tabs);$i++){
       if ($tabs[$i]==$name)
          tabLayout -e -selectTabIndex ($i+1) $gAETabLayoutName; 
    }
}

global proc dpRenameMat() {

    string $newName;
    string $select[] = `ls -sl`;
    string $promptA = `promptDialog
        -title "Rename Material"
        -message "Rename Your Material:"
        -button "OK" -button "Cancel"
        -defaultButton "OK" -cancelButton "Cancel"
        -dismissString "Cancel"`;
        
    if ($promptA == "OK") {
        $newName = `promptDialog -query -text`;
        if ($newName != "") {
            rename $newName;
            ddoUpdateMainListing(0);
        }
        else error "Name field cannot be blank.";
    }
    
}

global proc dpFindChecked(string $checked[]) {
    
    global string $checked[]; clear $checked;
    $remove = { "particleCloud1" };
    $mats = `ls -mat`;
    $materials = stringArrayRemoveExact($remove, $mats);

    for ( $a=0; $a<`size $materials`; ++$a) {
        if ( `checkBox -q -v ( "ddoCkBx_" + $materials[$a] )` == 1 ) { //if checkbox is checked
            stringArrayInsertAtIndex(1, $checked, $materials[$a]); // stores all materials
        }
    }
}

global proc dpSelCheckBoxes() {
    
    string $checked[];
    dpFindChecked($checked);
    select -cl;
    for ( $i=0; $i<`size $checked`; ++$i ) {
        select -tgl `listConnections -type shadingEngine $checked[$i]`;
    }        
}

global proc dpDelCheckBoxes() {

    string $select[]; $select = `ls -sl`;
    string $allSG[];
    string $checked[];
    string $removeLambert[] = { "lambert1" };
    dpFindChecked($checked);
    $checked = stringArrayRemoveExact($removeLambert, $checked);
    if ( `size $checked` > 0 ) {
        for ( $i=0; $i<`size $checked`; ++$i ) {
            select $checked[$i]; 
            dpStoreMaterials($allSG);
        }
        if ($allSG[0] == "") {
            select $allSG;
            hyperShade -assign "lambert1";
            delete $allSG;
        }
        delete $checked;
    }
    select $select;
}

global proc dpDelSingle() {
    
    global string $ddoSelect[];
    string $select[] = `ls -sl`;
    string $allSG[];

    dpEditMatChannels(-1); //clears out any channels and attached utilities
    dpStoreMaterials($allSG);
    if (`size $select` > 0 ) {
        select $allSG;
        string $sgSelect[] = `ls -sl`;
        if ($sgSelect[0] != "") {
            hyperShade -assign "lambert1";
            delete $allSG;
        }
        delete $select;
        select lambert1;
        ddoUpdateMainListing(0);
    }
}

global proc dpStoreMaterials(string $allSG[]) {
    
    string $allSG[];
    $sg = `listConnections -type shadingEngine`; //store associated SG
    $allSG = stringArrayCatenate($allSG, $sg); //stores all SG
    select `listConnections -type shadingEngine`; //select associated SG
}

global proc dpNewMaterial() {
    
    source doCreateAssignNewMaterialTreeLister.mel;
    string $select[] = `ls -sl`;
    if ( $select[0] == "" ) {
        createAssignNewMaterialTreeLister "lambert1";  
    }
    else { createAssignNewMaterialTreeLister $select[0]; }
}

global proc ddoPresets(string $selectedButton) {

    global string $dDoMatsMain[];
    global string $customMats[];
    global float $matColor[];
    global float $specColor[];
    global float $cosinePower[];
    global string $tabs;
    string $rb = $selectedButton;
    string $dDoMatsMaster[];
    $dDoMatsMaster = stringArrayCatenate($dDoMatsMain, $customMats);
    int $loc = stringArrayFind($rb, 0, $dDoMatsMaster);
    int $matSpecLoc = ( $loc * 3 );

    if (`objExists $selectedButton`) {
        error "Material already exists.";
    }

    createRenderNodeCB -asShader "surfaceShader" phong "";
    rename $rb;
    $se = `listConnections -type shadingEngine`;
    rename $se ( $rb + "_SG" );
    setAttr ($rb + ".color" ) -type double3 $matColor[$matSpecLoc] $matColor[$matSpecLoc+1] $matColor[$matSpecLoc+2];
    setAttr ($rb + ".cosinePower" ) $cosinePower[$loc];
    setAttr ($rb + ".specularColor" ) -type double3 $specColor[$matSpecLoc] $specColor[$matSpecLoc+1] $specColor[$matSpecLoc+2];
    select $rb;
    print ( $rb + " material created." );

    ddoUpdateMainListing(1); //this redraws the Add Materials tab which instantly removes a selection from the list
    tabLayout -e -sti 2 $tabs;
}

global proc dpCreateAssign(string $selection) {

    string $matSelect[];
    string $select[] = `ls -sl`;
    ddoPresets($selection);
    select $select;
    hyperShade -assign $selection;
    select $selection;
    dpFocus($matSelect[0]);
}

global proc dpAddToGraph() {

    if (`window -exists hyperShadePanel1Window`) {
        string $select[] = `ls -sl`;
        hyperShadePanelGraphNodeNetwork hyperShadePanel1 collection1HyperShadeEd ( $select[0] );
    }
    else { error "Open the Hypershade first."; }
}

global proc dpDetachAlpha() {

    global string $ddoSelect[];
    string $select[];
    string $occupiedCheck[] = { };

    $select = `ls -sl`;
    for ($i=0; $i<`size $select`; ++$i) {
        $fileNode = `listConnections -t "file" ( $select[$i] + ".color" )`;
        $occupiedCheck = `listConnections ( $select[$i] + ".transparency" )`;
        if (`size $occupiedCheck` > 0) {
            disconnectCallback graph1HyperShadeEd ( $fileNode[0] + ".outTransparency" ) ( $select[$i] + ".transparency" );
        }
        else { error "No transparency channel detected."; }
    }
    select $ddoSelect;
}

global proc ddoUpdateMainListing(int $number) {
    global string $tab1;
    global string $tab2;
    global string $tabs;
    int $width = 300;

    if (`window -ex mmWindow` == 1) {
        if ($number == 0) { 
            deleteUI mainListingLayout; 
        }
        else {
            deleteUI presetGrid;

        }
    }

    if (`window -ex mmWindow` == 1 && $number == 0) {

                dpPopulateList;
            setParent mainListScrollFrame;
        setParent mainListFrame;
    }
    
    if ( `window -ex mmWindow` && $number == 1) {

                dpGetDdoList;
            setParent..;
        setParent ddoMatsFrame;
    }    
}

global proc ddoUpdateIndicators() {
    
    global int $sortMode;
    string $matSelect[]; dpGetMaterial($matSelect);
    
    $remove = { "particleCloud1" };
    $mats = `ls -mat`;
    $materials = stringArrayRemoveExact($remove, $mats);

    if ($sortMode == 1) {
        $materials = `sort($materials)`;
    }

    if (`window -ex mmWindow`) { //only executes if dDo Material Manager window is open
        for ($i=0; $i<`size $materials`; ++$i) {
            if (stringArrayContains($materials[$i], $matSelect) == 1 && `iconTextStaticLabel -ex ("indicator" + $i)` == 1) {
                iconTextStaticLabel -e -vis 1 ( "indicator" + $i ); 
            }
            else if ( `iconTextStaticLabel -ex ("indicator" + $i)` == 1) { iconTextStaticLabel -e -vis 0 ( "indicator" + $i ); }
        }
    }
}

ddoManager();