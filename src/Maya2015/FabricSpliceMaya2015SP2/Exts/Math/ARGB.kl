/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

/*SPHINX-description
The :ref:`argb` type represents a byte pixel color, storing the components ordered as alpha, red, green and blue.

Example
---------

.. code-block:: js

    ARGB color(255, 255, 0, 0);
*/

struct ARGB
{
  Byte a;
  Byte r;
  Byte g;
  Byte b;
};

// default constructor
inline ARGB(Byte a, Byte r, Byte g, Byte b) {
  this.a = a;
  this.r = r;
  this.g = g;
  this.b = b;
}

// constructor from component wise integers.
// Note: Automatic casting would mean that the defualt constructor
// above would be called, but would also generate warnings due to the loss of precision
inline ARGB(Integer a, Integer r, Integer g, Integer b) {
  this.a = Byte(a);
  this.r = Byte(r);
  this.g = Byte(g);
  this.b = Byte(b);
}

// returns true if both colors are the same
inline Boolean ARGB.equal(ARGB other) {
  return this.a == other.a && this.r == other.r && this.g == other.g && this.b == other.b;
}

// equal operator
inline Boolean == (ARGB a, ARGB b) {
  return a.r == b.r && a.g == b.g && a.b == b.b && a.a == b.a;
}

// not equal operator
inline Boolean != (ARGB a, ARGB b) {
  return a.r != b.r || a.g != b.g || a.b != b.b || a.a != b.a;
}

// add operator. adds two colors per component.
inline ARGB + (ARGB a, ARGB b) {
  return ARGB(
    Integer(a.a) + Integer(b.a),
    Integer(a.r) + Integer(b.r),
    Integer(a.g) + Integer(b.g),
    Integer(a.b) + Integer(b.b)
    );
}

// add-assign operator. adds another color to this one.
inline ARGB. += (ARGB other) {
  this = this + other;
}

// subtract operator. subtracts two colors per component.
inline ARGB - (ARGB a, ARGB b) {
  Integer aval = Integer(a.a) - Integer(b.a);
  Integer rval = Integer(a.r) - Integer(b.r);
  Integer gval = Integer(a.g) - Integer(b.g);
  Integer bval = Integer(a.b) - Integer(b.b);
  if(aval < 0) aval = 0;
  if(rval < 0) rval = 0;
  if(gval < 0) gval = 0;
  if(bval < 0) bval = 0;
  return ARGB(aval, rval, gval, bval);
}

// subtract-assign operator. subtracts a color from this one.
inline ARGB. -= (ARGB other) {
  this = this - other;
}

// multiply operator. multiplies a Scalar with an ARGB
inline ARGB * (Scalar a, ARGB b) {
  return ARGB(
    Integer(Scalar(Integer(b.a)) * a),
    Integer(Scalar(Integer(b.r)) * a),
    Integer(Scalar(Integer(b.g)) * a),
    Integer(Scalar(Integer(b.b)) * a)
  );
}

// multiply operator. multiplies an ARGB with a Scalar
inline ARGB * (ARGB a, Scalar b) {
  // Note: castring Byte -> Scalar generated incorrect results.
  return ARGB(
    Integer(Scalar(Integer(a.a)) * b),
    Integer(Scalar(Integer(a.r)) * b),
    Integer(Scalar(Integer(a.g)) * b),
    Integer(Scalar(Integer(a.b)) * b)
  );
}

// multiply operator. multiplies two ARGB colors.
inline ARGB * (ARGB a, ARGB b) {
  return ARGB(
    Integer(Scalar(Integer(a.a)) * Scalar(Integer(b.a))), 
    Integer(Scalar(Integer(a.r)) * Scalar(Integer(b.r))), 
    Integer(Scalar(Integer(a.g)) * Scalar(Integer(b.g))), 
    Integer(Scalar(Integer(a.b)) * Scalar(Integer(b.b)))
    );
}

// multiply-assign operator. multiplies this color with a Scalar.
inline ARGB. *= (Scalar other) {
  this = this * other;
}

// multiply-assign operator. multiplies this color with another one.
inline ARGB. *= (ARGB other) {
  this = this * other;
}

// overload method for the add operator.
inline ARGB ARGB.add(ARGB other) {
  return this + other;
}

// overload method for the subtract operator.
inline ARGB ARGB.subtract(ARGB other) {
  return this - other;
}

// overload method for the multiply operator.
inline ARGB ARGB.multiply(ARGB other) {
  return this * other;
}

// overload method for the multiply operator.
inline ARGB ARGB.multiplyScalar(Scalar other) {
  return this * other;
}

// linearly interpolates two colors given t (0.0 to 1.0)
inline ARGB ARGB.linearInterpolate(in ARGB other, in Scalar t) {
  // Byte values cannot be negative, so here we have inlined the sbutraction function so that we can interpollate down towards zero
  return ARGB( 
    Integer(this.a) + Integer((Scalar(Integer(other.a) - Integer(this.a)) * t)),
    Integer(this.r) + Integer((Scalar(Integer(other.r) - Integer(this.r)) * t)),
    Integer(this.g) + Integer((Scalar(Integer(other.g) - Integer(this.g)) * t)),
    Integer(this.b) + Integer((Scalar(Integer(other.b) - Integer(this.b)) * t))
    );
}


