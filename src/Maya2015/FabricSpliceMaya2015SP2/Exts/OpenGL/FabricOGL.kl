require Math;
const Size GL_INDEX_CLEAR_VALUE = 0x0C20;
const Size GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
const Size GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
const Size GL_TEXCOORD2_BIT_PGI = 0x20000000;
const Size GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT = 0x8408;
const Size GL_CURRENT_RASTER_NORMAL_EXT = 0x8406;
const Size GL_OML_interlace = 1;
const Size GL_SOURCE1_ALPHA = 0x8589;
const Size GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
const Size GL_DITHER = 0x0BD0;
const Size GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
const Size GL_SAMPLER_2D_ARB = 0x8B5E;
const Size GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
const Size GL_SOURCE0_ALPHA = 0x8588;
const Size GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
const Size GL_IMAGE_2D_ARRAY_EXT = 0x9053;
const Size GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
const Size GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
const Size GL_HISTOGRAM_FORMAT_EXT = 0x8027;
const Size GL_ALPHA_TEST_FUNC = 0x0BC1;
const Size GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
const Size GL_PROVOKING_VERTEX_EXT = 0x8E4F;
const Size GL_TEXTURE_MAX_LOD = 0x813B;
const Size GL_LINE_STRIP_ADJACENCY_ARB = 0xB;
const Size GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
const Size GL_RGBA_INTEGER_EXT = 0x8D99;
const Size GL_SRGB8_EXT = 0x8C41;
const Size GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
const Size GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
const Size GL_SAMPLER_2D_RECT = 0x8B63;
const Size GL_RGB9_E5 = 0x8C3D;
const Size GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
const Size GL_ALPHA16F_ARB = 0x881C;
const Size GL_TEXTURE_COMPRESSED = 0x86A1;
const Size GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
const Size GL_TEXTURE18_ARB = 0x84D2;
const Size GL_IMAGE_1D_EXT = 0x904C;
const Size GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
const Size GL_T2F_C4UB_V3F = 0x2A29;
const Size GL_SOURCE2_ALPHA_EXT = 0x858A;
const Size GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
const Size GL_TEXTURE_MIN_LOD = 0x813A;
const Size GL_LOG_WARNING_REGAL = 0x931A;
const Size GL_SOURCE0_RGB_EXT = 0x8580;
const Size GL_PROXY_TEXTURE_RECTANGLE_EXT = 0x84F7;
const Size GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
const Size GL_IMAGE_CLASS_4_X_32 = 0x82B9;
const Size GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
const Size GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
const Size GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
const Size GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
const Size GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
const Size GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
const Size GL_BYTE = 0x1400;
const Size GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
const Size GL_TEXTURE21_ARB = 0x84D5;
const Size GL_TEXCOORD4_BIT_PGI = 0x80000000;
const Size GL_RGBA8UI_EXT = 0x8D7C;
const Size GL_VIEW_CLASS_96_BITS = 0x82C5;
const Size GL_PACK_RESAMPLE_OML = 0x8984;
const Size GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0;
const Size GL_PGI_misc_hints = 1;
const Size GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
const Size GL_DEPTH_BIAS = 0x0D1F;
const Size GL_BLEND_DST_ALPHA_EXT = 0x80CA;
const Size GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
const Size GL_COLOR_CLEAR_VALUE = 0x0C22;
const Size GL_BLUE_INTEGER_EXT = 0x8D96;
const Size GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
const Size GL_DEPTH_WRITEMASK = 0x0B72;
const Size GL_TEXTURE_GEN_MODE = 0x2500;
const Size GL_3D_COLOR_TEXTURE = 0x0603;
const Size GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
const Size GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
const Size GL_PIXEL_MAP_G_TO_G = 0x0C77;
const Size GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
const Size GL_RENDER = 0x1C00;
const Size GL_MAX_TEXTURE_COORDS = 0x8871;
const Size GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
const Size GL_RGBA2_EXT = 0x8055;
const Size GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
const Size GL_MATRIX_PALETTE_ARB = 0x8840;
const Size GL_PROGRAM_FORMAT_ARB = 0x8876;
const Size GL_PROGRAM_STRING_ARB = 0x8628;
const Size GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
const Size GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
const Size GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
const Size GL_BGRA_EXT = 0x80E1;
const Size GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
const Size GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
const Size GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020;
const Size GL_PROVOKING_VERTEX = 0x8E4F;
const Size GL_RGB16I_EXT = 0x8D89;
const Size GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
const Size GL_SIGNED_NORMALIZED = 0x8F9C;
const Size GL_ALLOW_DRAW_FRG_HINT_PGI = 107024;
const Size GL_RG_SNORM = 0x8F91;
const Size GL_EXP = 0x0800;
const Size GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
const Size GL_LINE_STRIP_ADJACENCY = 0x000B;
const Size GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
const Size GL_POINT_SIZE = 0x0B11;
const Size GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
const Size GL_SHADER_IMAGE_STORE = 0x82A5;
const Size GL_TEXTURE_COMPARE_FUNC = 0x884D;
const Size GL_CMYK_EXT = 0x800C;
const Size GL_RGB12 = 0x8053;
const Size GL_TIME_ELAPSED_EXT = 0x88BF;
const Size GL_RGB10 = 0x8052;
const Size GL_RGB16 = 0x8054;
const Size GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
const Size GL_POLYGON_OFFSET_FILL = 0x8037;
const Size GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
const Size GL_EXT_422_pixels = 1;
const Size GL_DOUBLEBUFFER = 0x0C32;
const Size GL_MINMAX_FORMAT = 0x802F;
const Size GL_MAX_CLIP_PLANES = 0x0D32;
const Size GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
const Size GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
const Size GL_FRAGMENT_SHADER_BIT = 0x00000002;
const Size GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
const Size GL_EXT_packed_float = 1;
const Size GL_RGB9_E5_EXT = 0x8C3D;
const Size GL_OML_subsample = 1;
const Size GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43;
const Size GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
const Size GL_DOUBLE_MAT4 = 0x8F48;
const Size GL_DOUBLE_MAT2 = 0x8F46;
const Size GL_DOUBLE_MAT3 = 0x8F47;
const Size GL_COMPILE_AND_EXECUTE = 0x1301;
const Size GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
const Size GL_MATRIX9_ARB = 0x88C9;
const Size GL_GREEN_BITS = 0x0D53;
const Size GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
const Size GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
const Size GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
const Size GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
const Size GL_COMBINE_ALPHA_EXT = 0x8572;
const Size GL_RGB5_A1_EXT = 0x8057;
const Size GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
const Size GL_LUMINANCE_ALPHA32I_EXT = 0x8D87;
const Size GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
const Size GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
const Size GL_INDEX_ARRAY_TYPE = 0x8085;
const Size GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
const Size GL_TEXTURE_DEPTH = 0x8071;
const Size GL_EXT_separate_shader_objects = 1;
const Size GL_EXT_texture_compression_latc = 1;
const Size GL_NORMAL_MAP_ARB = 0x8511;
const Size GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
const Size GL_DRAW_BUFFER6 = 0x882B;
const Size GL_DRAW_BUFFER7 = 0x882C;
const Size GL_DRAW_BUFFER4 = 0x8829;
const Size GL_DRAW_BUFFER5 = 0x882A;
const Size GL_DRAW_BUFFER2 = 0x8827;
const Size GL_DRAW_BUFFER3 = 0x8828;
const Size GL_DRAW_BUFFER0 = 0x8825;
const Size GL_DRAW_BUFFER1 = 0x8826;
const Size GL_LIGHT1 = 0x4001;
const Size GL_LIGHT0 = 0x4000;
const Size GL_LIGHT3 = 0x4003;
const Size GL_LIGHT2 = 0x4002;
const Size GL_COPY = 0x1503;
const Size GL_LIGHT4 = 0x4004;
const Size GL_DRAW_BUFFER8 = 0x882D;
const Size GL_LIGHT6 = 0x4006;
const Size GL_MAP_STENCIL = 0x0D11;
const Size GL_QUADRATIC_ATTENUATION = 0x1209;
const Size GL_MANUAL_GENERATE_MIPMAP = 0x8294;
const Size GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
const Size GL_IMAGE_PIXEL_FORMAT = 0x82A9;
const Size GL_LAST_VERTEX_CONVENTION = 0x8E4E;
const Size GL_TEXTURE_RECTANGLE = 0x84F5;
const Size GL_VERTEX_PROGRAM_ARB = 0x8620;
const Size GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
const Size GL_FILL = 0x1B02;
const Size GL_GREEN_SCALE = 0x0D18;
const Size GL_DEPTH_BUFFER = 0x8223;
const Size GL_INT_IMAGE_1D = 0x9057;
const Size GL_SRC_COLOR = 0x0300;
const Size GL_IMAGE_BINDING_LAYER = 0x8F3D;
const Size GL_SAMPLER_BINDING = 0x8919;
const Size GL_ARB_robustness = 1;
const Size GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
const Size GL_EXT_framebuffer_blit = 1;
const Size GL_SAMPLE_BUFFERS = 0x80A8;
const Size GL_RGBA_INTEGER = 0x8D99;
const Size GL_ARB_gpu_shader_fp64 = 1;
const Size GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
const Size GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
const Size GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
const Size GL_EXTENSIONS = 0x1F03;
const Size GL_COLOR_MATRIX = 0x80B1;
const Size GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
const Size GL_PASS_THROUGH_TOKEN = 0x0700;
const Size GL_EXT_bindable_uniform = 1;
const Size GL_UPPER_LEFT = 0x8CA2;
const Size GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E;
const Size GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
const Size GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
const Size GL_MAX_DEPTH = 0x8280;
const Size GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
const Size GL_DEPTH_BUFFER_BIT = 0x00000100;
const Size GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
const Size GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
const Size GL_UNIFORM_BUFFER = 0x8A11;
const Size GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
const Size GL_SAMPLE_MASK = 0x8E51;
const Size GL_MULTISAMPLE_ARB = 0x809D;
const Size GL_CCW = 0x0901;
const Size GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
const Size GL_DEPTH_COMPONENT24 = 0x81A6;
const Size GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
const Size GL_MODELVIEW18_ARB = 0x8732;
const Size GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
const Size GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
const Size GL_R32I = 0x8235;
const Size GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
const Size GL_R32F = 0x822E;
const Size GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
const Size GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
const Size GL_OR_REVERSE = 0x150B;
const Size GL_LUMINANCE12_ALPHA4 = 0x8046;
const Size GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
const Size GL_PIXEL_MAP_R_TO_R = 0x0C76;
const Size GL_FOG_COORDINATE_SOURCE = 0x8450;
const Size GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
const Size GL_TEXTURE_BORDER = 0x1005;
const Size GL_REPLICATE_BORDER = 0x8153;
const Size GL_DEPTH_COMPONENTS = 0x8284;
const Size GL_BLEND_EQUATION_EXT = 0x8009;
const Size GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
const Size GL_PROXY_TEXTURE_2D_EXT = 0x8064;
const Size GL_MATRIX20_ARB = 0x88D4;
const Size GL_FALSE = 0;
const Size GL_FLOAT_MAT2 = 0x8B5A;
const Size GL_FLOAT_MAT3 = 0x8B5B;
const Size GL_DEPTH = 0x1801;
const Size GL_FLOAT_MAT4 = 0x8B5C;
const Size GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0xD;
const Size GL_OPERAND1_RGB = 0x8591;
const Size GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
const Size GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
const Size GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
const Size GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
const Size GL_MAX_VERTEX_HINT_PGI = 107053;
const Size GL_RGBA32UI = 0x8D70;
const Size GL_422_EXT = 0x80CC;
const Size GL_RG8I = 0x8237;
const Size GL_RGBA8I = 0x8D8E;
const Size GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
const Size GL_ARB_cl_event = 1;
const Size GL_RG32F = 0x8230;
const Size GL_MODELVIEW30_ARB = 0x873E;
const Size GL_STENCIL_TAG_BITS_EXT = 0x88F2;
const Size GL_TEXTURE8_ARB = 0x84C8;
const Size GL_ALPHA_BIAS = 0x0D1D;
const Size GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
const Size GL_CURRENT_TANGENT_EXT = 0x843B;
const Size GL_ABGR_EXT = 0x8000;
const Size GL_INT_IMAGE_CUBE_EXT = 0x905B;
const Size GL_MULTISAMPLE_EXT = 0x809D;
const Size GL_FOG_COORDINATE_ARRAY = 0x8457;
const Size GL_RASTERIZER_DISCARD_EXT = 0x8C89;
const Size GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
const Size GL_DEBUG_SEVERITY_HIGH = 0x9146;
const Size GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
const Size GL_TEXTURE_BINDING_3D = 0x806A;
const Size GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
const Size GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
const Size GL_OP_CLAMP_EXT = 0x878E;
const Size GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
const Size GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
const Size GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
const Size GL_OBJECT_TYPE_ARB = 0x8B4E;
const Size GL_TEXTURE = 0x1702;
const Size GL_DOUBLE_MAT4x2_EXT = 0x8F4D;
const Size GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
const Size GL_ARB_explicit_uniform_location = 1;
const Size GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
const Size GL_PACK_SKIP_IMAGES_EXT = 0x806B;
const Size GL_4PASS_1_EXT = 0x80A5;
const Size GL_ARB_depth_buffer_float = 1;
const Size GL_DEBUG_LOGGED_MESSAGES = 0x9145;
const Size GL_PROGRAM_INPUT = 0x92E3;
const Size GL_MODELVIEW6_ARB = 0x8726;
const Size GL_ACTIVE_UNIFORMS = 0x8B86;
const Size GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080;
const Size GL_RECLAIM_MEMORY_HINT_PGI = 107006;
const Size GL_EXT_subtexture = 1;
const Size GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
const Size GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
const Size GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
const Size GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
const Size GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
const Size GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
const Size GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA;
const Size GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
const Size GL_4PASS_2_EXT = 0x80A6;
const Size GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
const Size GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
const Size GL_TEXTURE_ENV_MODE_ALPHA_EXT = 0;
const Size GL_TEXTURE_MAX_LEVEL = 0x813D;
const Size GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
const Size GL_OPERAND0_RGB_EXT = 0x8590;
const Size GL_ACCUM_RED_BITS = 0x0D58;
const Size GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
const Size GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
const Size GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
const Size GL_MAX_IMAGE_UNITS = 0x8F38;
const Size GL_NORMAL_MAP = 0x8511;
const Size GL_STENCIL_BUFFER = 0x8224;
const Size GL_ALPHA8 = 0x803C;
const Size GL_BLEND_EQUATION = 0x8009;
const Size GL_FRAGMENT_COLOR_EXT = 0x834C;
const Size GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
const Size GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
const Size GL_INT_IMAGE_BUFFER = 0x905C;
const Size GL_DOUBLE_MAT2x4_EXT = 0x8F4A;
const Size GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
const Size GL_MODELVIEW28_ARB = 0x873C;
const Size GL_ALPHA4 = 0x803B;
const Size GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
const Size GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
const Size GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062;
const Size GL_LINE = 0x1B01;
const Size GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
const Size GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
const Size GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
const Size GL_DYNAMIC_COPY_ARB = 0x88EA;
const Size GL_STENCIL_BITS = 0x0D57;
const Size GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
const Size GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
const Size GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
const Size GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
const Size GL_RGBA32UI_EXT = 0x8D70;
const Size GL_CONVOLUTION_FILTER_SCALE = 0x8014;
const Size GL_BLUE_INTEGER = 0x8D96;
const Size GL_DYNAMIC_COPY = 0x88EA;
const Size GL_PREVIOUS_ARB = 0x8578;
const Size GL_SYNC_FLAGS = 0x9115;
const Size GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
const Size GL_DOUBLE_MAT2x3_EXT = 0x8F49;
const Size GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
const Size GL_RG32I = 0x823B;
const Size GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
const Size GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
const Size GL_EXT_stencil_two_side = 1;
const Size GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
const Size GL_BOOL_VEC2_ARB = 0x8B57;
const Size GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
const Size GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
const Size GL_LUMINANCE16_EXT = 0x8042;
const Size GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
const Size GL_BUFFER_MAPPED_ARB = 0x88BC;
const Size GL_OPERAND2_ALPHA = 0x859A;
const Size GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
const Size GL_FOG_DENSITY = 0x0B62;
const Size GL_ARB_shader_texture_lod = 1;
const Size GL_CONSTANT_ATTENUATION = 0x1207;
const Size GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
const Size GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
const Size GL_ARB_arrays_of_arrays = 1;
const Size GL_ARB_tessellation_shader = 1;
const Size GL_EXT_draw_buffers2 = 1;
const Size GL_INT_IMAGE_2D = 0x9058;
const Size GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
const Size GL_ARB_vertex_attrib_64bit = 1;
const Size GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
const Size GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D;
const Size GL_ARB_window_pos = 1;
const Size GL_INVALID_OPERATION = 0x0502;
const Size GL_CLAMP_READ_COLOR = 0x891C;
const Size GL_RED_INTEGER = 0x8D94;
const Size GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
const Size GL_COLOR_ATTACHMENT5 = 0x8CE5;
const Size GL_COLOR_ATTACHMENT4 = 0x8CE4;
const Size GL_COLOR_ATTACHMENT7 = 0x8CE7;
const Size GL_COLOR_ATTACHMENT6 = 0x8CE6;
const Size GL_COLOR_ATTACHMENT1 = 0x8CE1;
const Size GL_COLOR_ATTACHMENT0 = 0x8CE0;
const Size GL_COLOR_ATTACHMENT3 = 0x8CE3;
const Size GL_COLOR_ATTACHMENT2 = 0x8CE2;
const Size GL_ARB_shadow_ambient = 1;
const Size GL_COLOR_ATTACHMENT9 = 0x8CE9;
const Size GL_COLOR_ATTACHMENT8 = 0x8CE8;
const Size GL_SOURCE1_RGB_ARB = 0x8581;
const Size GL_COMPRESSED_RG11_EAC = 0x9272;
const Size GL_PACK_IMAGE_HEIGHT = 0x806C;
const Size GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
const Size GL_BUFFER_USAGE = 0x8765;
const Size GL_PATCH_VERTICES = 0x8E72;
const Size GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
const Size GL_CULL_FACE_MODE = 0x0B45;
const Size GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
const Size GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
const Size GL_LUMINANCE4_EXT = 0x803F;
const Size GL_FRAGMENT_COLOR_MATERIAL_EXT = 0x8401;
const Size GL_BOOL = 0x8B56;
const Size GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
const Size GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
const Size GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
const Size GL_EXT_index_texture = 1;
const Size GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
const Size GL_DOT3_RGB_EXT = 0x8740;
const Size GL_COMBINE_RGB_EXT = 0x8571;
const Size GL_T2F_V3F = 0x2A27;
const Size GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B;
const Size GL_RGB_SNORM = 0x8F92;
const Size GL_OPERAND0_ALPHA = 0x8598;
const Size GL_ALWAYS = 0x0207;
const Size GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056;
const Size GL_EXT_texture_integer = 1;
const Size GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
const Size GL_MODELVIEW1_EXT = 0x850A;
const Size GL_FLOAT_MAT3_ARB = 0x8B5B;
const Size GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
const Size GL_POINT_SIZE_RANGE = 0x0B12;
const Size GL_HISTOGRAM_WIDTH = 0x8026;
const Size GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
const Size GL_ARB_invalidate_subdata = 1;
const Size GL_GREEN_BIAS = 0x0D19;
const Size GL_MAX_WIDTH = 0x827E;
const Size GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
const Size GL_DRAW_BUFFER10_ARB = 0x882F;
const Size GL_DOUBLE_MAT4_EXT = 0x8F48;
const Size GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
const Size GL_FRAMEBUFFER_EXT = 0x8D40;
const Size GL_RGBA32I_EXT = 0x8D82;
const Size GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
const Size GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
const Size GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
const Size GL_FOG_COLOR = 0x0B66;
const Size GL_MAX_VERTEX_STREAMS = 0x8E71;
const Size GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
const Size GL_RG16UI = 0x823A;
const Size GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D;
const Size GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
const Size GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT = 0x84F8;
const Size GL_FRAGMENT_LIGHTING_EXT = 0x8400;
const Size GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
const Size GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
const Size GL_STENCIL_BACK_REF = 0x8CA3;
const Size GL_TEXTURE9_ARB = 0x84C9;
const Size GL_LINE_RESET_TOKEN = 0x0707;
const Size GL_COMBINE_RGB = 0x8571;
const Size GL_TEXTURE0_ARB = 0x84C0;
const Size GL_STEREO = 0x0C33;
const Size GL_ALREADY_SIGNALED = 0x911A;
const Size GL_STATIC_COPY_ARB = 0x88E6;
const Size GL_ARB_explicit_attrib_location = 1;
const Size GL_EXT_blend_color = 1;
const Size GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
const Size GL_SAMPLER_3D_ARB = 0x8B5F;
const Size GL_MEDIUM_INT = 0x8DF4;
const Size GL_TEXTURE_CUBE_MAP = 0x8513;
const Size GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
const Size GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
const Size GL_CLIP_PLANE1 = 0x3001;
const Size GL_CLIP_PLANE0 = 0x3000;
const Size GL_CLIP_PLANE3 = 0x3003;
const Size GL_CLIP_PLANE2 = 0x3002;
const Size GL_CLIP_PLANE5 = 0x3005;
const Size GL_CLIP_PLANE4 = 0x3004;
const Size GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
const Size GL_2_BYTES = 0x1407;
const Size GL_COLOR_INDEX16_EXT = 0x80E7;
const Size GL_NORMAL_ARRAY_TYPE = 0x807E;
const Size GL_TEXTURE_BUFFER = 0x8C2A;
const Size GL_ENV_REVERSE_BLEND_EXT = 0;
const Size GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
const Size GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
const Size GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
const Size GL_LINE_STIPPLE_REPEAT = 0x0B26;
const Size GL_POINTS = 0x0000;
const Size GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
const Size GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
const Size GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
const Size GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
const Size GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
const Size GL_UNIFORM_NAME_LENGTH = 0x8A39;
const Size GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
const Size GL_POLYGON = 0x0009;
const Size GL_MAP1_INDEX = 0x0D91;
const Size GL_LINE_WIDTH_GRANULARITY = 0x0B23;
const Size GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
const Size GL_SAMPLES_PASSED_ARB = 0x8914;
const Size GL_OP_MUL_EXT = 0x8786;
const Size GL_ADD_SIGNED = 0x8574;
const Size GL_MAX_3D_TEXTURE_SIZE = 0x8073;
const Size GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
const Size GL_READ_PIXELS = 0x828C;
const Size GL_DONT_CARE = 0x1100;
const Size GL_MODELVIEW17_ARB = 0x8731;
const Size GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
const Size GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
const Size GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
const Size GL_MATRIX19_ARB = 0x88D3;
const Size GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
const Size GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
const Size GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7;
const Size GL_MAX_EXT = 0x8008;
const Size GL_TEXTURE13_ARB = 0x84CD;
const Size GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
const Size GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
const Size GL_Z_EXT = 0x87D7;
const Size GL_LINE_WIDTH = 0x0B21;
const Size GL_ALPHA16_SNORM = 0x9018;
const Size GL_DYNAMIC_READ_ARB = 0x88E9;
const Size GL_LEQUAL = 0x0203;
const Size GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
const Size GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
const Size GL_ARB_transform_feedback2 = 1;
const Size GL_ARB_transform_feedback3 = 1;
const Size GL_COMBINE_ARB = 0x8570;
const Size GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
const Size GL_RGBA_S3TC = 0x83A2;
const Size GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
const Size GL_MAP_COLOR = 0x0D10;
const Size GL_INTERPOLATE_ARB = 0x8575;
const Size GL_EXT_bgra = 1;
const Size GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
const Size GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3E;
const Size GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
const Size GL_ALWAYS_FAST_HINT_PGI = 107020;
const Size GL_VIEW_CLASS_8_BITS = 0x82CB;
const Size GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
const Size GL_CURRENT_VERTEX_ATTRIB = 0x8626;
const Size GL_OP_FRAC_EXT = 0x8789;
const Size GL_LUMINANCE6_ALPHA2 = 0x8044;
const Size GL_MATRIX10_ARB = 0x88CA;
const Size GL_PRIMARY_COLOR = 0x8577;
const Size GL_C3F_V3F = 0x2A24;
const Size GL_OP_EXP_BASE_2_EXT = 0x8791;
const Size GL_MODELVIEW20_ARB = 0x8734;
const Size GL_AUX_BUFFERS = 0x0C00;
const Size GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
const Size GL_OPERAND2_RGB_ARB = 0x8592;
const Size GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
const Size GL_OP_CROSS_PRODUCT_EXT = 0x8797;
const Size GL_IMAGE_3D_EXT = 0x904E;
const Size GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
const Size GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
const Size GL_INT_SAMPLER_2D_EXT = 0x8DCA;
const Size GL_SMOOTH = 0x1D01;
const Size GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
const Size GL_MODELVIEW27_ARB = 0x873B;
const Size GL_IMAGE_CLASS_4_X_16 = 0x82BC;
const Size GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
const Size GL_CURRENT_TEXTURE_COORDS = 0x0B03;
const Size GL_ARB_depth_texture = 1;
const Size GL_LUMINANCE8I_EXT = 0x8D92;
const Size GL_SAMPLER_1D_ARB = 0x8B5D;
const Size GL_VERSION_2_1 = 1;
const Size GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B;
const Size GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
const Size GL_BOOL_VEC3_ARB = 0x8B58;
const Size GL_MATRIX25_ARB = 0x88D9;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
const Size GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
const Size GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
const Size GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
const Size GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
const Size GL_MAX_HEIGHT = 0x827F;
const Size GL_LUMINANCE_ALPHA = 0x190A;
const Size GL_MAX_CONVOLUTION_WIDTH = 0x801A;
const Size GL_TEXTURE_WRAP_R_EXT = 0x8072;
const Size GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
const Size GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
const Size GL_COMPRESSED_INTENSITY = 0x84EC;
const Size GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
const Size GL_ARB_texture_query_lod = 1;
const Size GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
const Size GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
const Size GL_ALPHA = 0x1906;
const Size GL_ALPHA_INTEGER_EXT = 0x8D97;
const Size GL_MAX_ELEMENTS_VERTICES = 0x80E8;
const Size GL_INT_VEC2_ARB = 0x8B53;
const Size GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
const Size GL_CURRENT_COLOR = 0x0B00;
const Size GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
const Size GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
const Size GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
const Size GL_RGB_INTEGER_EXT = 0x8D98;
const Size GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
const Size GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
const Size GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
const Size GL_DEPTH32F_STENCIL8 = 0x8CAD;
const Size GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
const Size GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
const Size GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
const Size GL_EXT_texture_sRGB_decode = 1;
const Size GL_IMAGE_BINDING_NAME = 0x8F3A;
const Size GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
const Size GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
const Size GL_SRGB_EXT = 0x8C40;
const Size GL_NOR = 0x1508;
const Size GL_EXT_texture_snorm = 1;
const Size GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
const Size GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = 0x80DE;
const Size GL_FLAT = 0x1D00;
const Size GL_INT_VEC4_ARB = 0x8B55;
const Size GL_PACK_ALIGNMENT = 0x0D05;
const Size GL_PIXEL_MAP_S_TO_S = 0x0C71;
const Size GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
const Size GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
const Size GL_IMAGE_CLASS_2_X_16 = 0x82BD;
const Size GL_RGB2_EXT = 0x804E;
const Size GL_UNPACK_LSB_FIRST = 0x0CF1;
const Size GL_ARB_texture_env_crossbar = 1;
const Size GL_SAMPLE_MASK_VALUE = 0x8E52;
const Size GL_SOURCE1_RGB = 0x8581;
const Size GL_CONSTANT_BORDER = 0x8151;
const Size GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8;
const Size GL_TRIANGLES_ADJACENCY_ARB = 0xC;
const Size GL_ACTIVE_TEXTURE = 0x84E0;
const Size GL_TEXTURE_BASE_LEVEL = 0x813C;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
const Size GL_ALPHA_INTEGER = 0x8D97;
const Size GL_ARB_color_buffer_float = 1;
const Size GL_LOCATION = 0x930E;
const Size GL_MATRIX17_ARB = 0x88D1;
const Size GL_PROJECTION = 0x1701;
const Size GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
const Size GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
const Size GL_RESAMPLE_DECIMATE_OML = 0x8989;
const Size GL_EXT_shader_image_load_store = 1;
const Size GL_COLOR_INDEX4_EXT = 0x80E4;
const Size GL_INT_VEC3 = 0x8B54;
const Size GL_INT_VEC2 = 0x8B53;
const Size GL_STENCIL_FAIL = 0x0B94;
const Size GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
const Size GL_VERSION_4_2 = 1;
const Size GL_VERSION_4_3 = 1;
const Size GL_VERSION_4_0 = 1;
const Size GL_VERSION_4_1 = 1;
const Size GL_COLOR_TABLE = 0x80D0;
const Size GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
const Size GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
const Size GL_OP_NEGATE_EXT = 0x8783;
const Size GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
const Size GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
const Size GL_RED_BIAS = 0x0D15;
const Size GL_READ_PIXELS_TYPE = 0x828E;
const Size GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
const Size GL_KTX_FRONT_REGION = 0x0;
const Size GL_BLEND_EQUATION_RGB_EXT = 0x8009;
const Size GL_PROGRAM_LENGTH_ARB = 0x8627;
const Size GL_R8 = 0x8229;
const Size GL_RENDER_MODE = 0x0C40;
const Size GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
const Size GL_ARB_viewport_array = 1;
const Size GL_ARB_separate_shader_objects = 1;
const Size GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
const Size GL_CONSTANT_COLOR_EXT = 0x8001;
const Size GL_RENDERBUFFER_WIDTH = 0x8D42;
const Size GL_1PASS_EXT = 0x80A1;
const Size GL_GREEN_INTEGER_EXT = 0x8D95;
const Size GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
const Size GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
const Size GL_ARB_texture_env_add = 1;
const Size GL_TEXTURE_BLUE_SIZE = 0x805E;
const Size GL_HISTOGRAM_GREEN_SIZE = 0x8029;
const Size GL_TEXTURE24_ARB = 0x84D8;
const Size GL_ARB_matrix_palette = 1;
const Size GL_DRAW_BUFFER10 = 0x882F;
const Size GL_DRAW_BUFFER11 = 0x8830;
const Size GL_DRAW_BUFFER12 = 0x8831;
const Size GL_DRAW_BUFFER13 = 0x8832;
const Size GL_DRAW_BUFFER14 = 0x8833;
const Size GL_DRAW_BUFFER15 = 0x8834;
const Size GL_INT_IMAGE_3D = 0x9059;
const Size GL_ARB_texture_compression = 1;
const Size GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
const Size GL_SKIP_DECODE_EXT = 0x8A4A;
const Size GL_EDGEFLAG_BIT_PGI = 0x00040000;
const Size GL_KTX_Z_REGION = 0x2;
const Size GL_SRC_ALPHA_SATURATE = 0x0308;
const Size GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
const Size GL_CONSTANT_ALPHA = 0x8003;
const Size GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
const Size GL_R16I = 0x8233;
const Size GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
const Size GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT = 0x8402;
const Size GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
const Size GL_FRAGMENT_PROGRAM_ARB = 0x8804;
const Size GL_CONVOLUTION_BORDER_MODE = 0x8013;
const Size GL_TEXTURE_RED_SIZE_EXT = 0x805C;
const Size GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
const Size GL_COMPARE_R_TO_TEXTURE = 0x884E;
const Size GL_DEPTH_BOUNDS_EXT = 0x8891;
const Size GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
const Size GL_PREVIOUS = 0x8578;
const Size GL_ALPHA_SNORM = 0x9010;
const Size GL_MAX_IMAGE_SAMPLES_EXT = 0x906D;
const Size GL_PROXY_COLOR_TABLE = 0x80D3;
const Size GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
const Size GL_STENCIL = 0x1802;
const Size GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
const Size GL_DOT3_RGB_ARB = 0x86AE;
const Size GL_DIFFUSE = 0x1201;
const Size GL_ENV_REVERSE_SUBTRACT_EXT = 0;
const Size GL_SOURCE2_RGB = 0x8582;
const Size GL_SHADER_STORAGE_BARRIER_BIT = 0x2000;
const Size GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
const Size GL_TEXTURE_3D_EXT = 0x806F;
const Size GL_MODELVIEW31_ARB = 0x873F;
const Size GL_IMAGE_CLASS_1_X_32 = 0x82BB;
const Size GL_TEXTURE_GEN_S = 0x0C60;
const Size GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
const Size GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
const Size GL_INCR_WRAP = 0x8507;
const Size GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
const Size GL_HIGH_INT = 0x8DF5;
const Size GL_MODELVIEW15_ARB = 0x872F;
const Size GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
const Size GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
const Size GL_DECR_WRAP = 0x8508;
const Size GL_OP_SET_LT_EXT = 0x878D;
const Size GL_ARB_texture_border_clamp = 1;
const Size GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
const Size GL_COMPILE = 0x1300;
const Size GL_SAMPLE_POSITION = 0x8E50;
const Size GL_EXT_provoking_vertex = 1;
const Size GL_ARB_point_parameters = 1;
const Size GL_ARB_shader_image_load_store = 1;
const Size GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
const Size GL_INCR = 0x1E02;
const Size GL_EXT_texture_compression_dxt1 = 1;
const Size GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
const Size GL_ALPHA_TEST_REF = 0x0BC2;
const Size GL_UNPACK_SKIP_ROWS = 0x0CF3;
const Size GL_EXT_transform_feedback = 1;
const Size GL_SHADER_IMAGE_LOAD = 0x82A4;
const Size GL_VERTEX_BINDING_OFFSET = 0x82D7;
const Size GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
const Size GL_DEPTH_CLAMP = 0x864F;
const Size GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
const Size GL_BLEND_DST_ALPHA = 0x80CA;
const Size GL_INT_SAMPLER_CUBE = 0x8DCC;
const Size GL_CURRENT_QUERY = 0x8865;
const Size GL_MODELVIEW1_MATRIX_EXT = 0x8506;
const Size GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
const Size GL_VERTEX_SHADER = 0x8B31;
const Size GL_VIEW_CLASS_24_BITS = 0x82C9;
const Size GL_RGB16UI = 0x8D77;
const Size GL_COPY_INVERTED = 0x150C;
const Size GL_TEXTURE_PRIORITY = 0x8066;
const Size GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
const Size GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
const Size GL_SHADER_BINARY_FORMATS = 0x8DF8;
const Size GL_ARB_geometry_shader4 = 1;
const Size GL_INDEX_ARRAY_EXT = 0x8077;
const Size GL_DEBUG_SOURCE_API = 0x8246;
const Size GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
const Size GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
const Size GL_PIXEL_MIN_FILTER_EXT = 0x8332;
const Size GL_TEXTURE_BINDING_1D = 0x8068;
const Size GL_AUX1 = 0x040A;
const Size GL_NATIVE_GRAPHICS_HANDLE_PGI = 107010;
const Size GL_MATRIX1_ARB = 0x88C1;
const Size GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
const Size GL_PIXEL_UNPACK_BUFFER = 0x88EC;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
const Size GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
const Size GL_POINT_DISTANCE_ATTENUATION = 0x8129;
const Size GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
const Size GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
const Size GL_OPERAND0_ALPHA_ARB = 0x8598;
const Size GL_READ_WRITE_ARB = 0x88BA;
const Size GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
const Size GL_AMBIENT_AND_DIFFUSE = 0x1602;
const Size GL_TEXTURE_1D_BINDING_EXT = 0x8068;
const Size GL_MATRIX7_ARB = 0x88C7;
const Size GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
const Size GL_VERTEX_SHADER_BIT = 0x00000001;
const Size GL_ZERO = 0;
const Size GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
const Size GL_ELEMENT_ARRAY_BUFFER = 0x8893;
const Size GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
const Size GL_IMAGE_CLASS_11_11_10 = 0x82C2;
const Size GL_SCISSOR_BIT = 0x00080000;
const Size GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
const Size GL_READ_ONLY = 0x88B8;
const Size GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
const Size GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
const Size GL_MAP1_GRID_DOMAIN = 0x0DD0;
const Size GL_EXT_texture_sRGB = 1;
const Size GL_INVARIANT_EXT = 0x87C2;
const Size GL_FIXED = 0x140C;
const Size GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
const Size GL_TEXTURE_BUFFER_SIZE = 0x919E;
const Size GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
const Size GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
const Size GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
const Size GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
const Size GL_OPERAND1_ALPHA_ARB = 0x8599;
const Size GL_T2F_C3F_V3F = 0x2A2A;
const Size GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
const Size GL_COMPRESSED_RED = 0x8225;
const Size GL_BGR = 0x80E0;
const Size GL_DEBUG_TYPE_MARKER = 0x8268;
const Size GL_MAX_LIGHTS = 0x0D31;
const Size GL_RGBA16_SNORM = 0x8F9B;
const Size GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
const Size GL_RGB16F_ARB = 0x881B;
const Size GL_MAX_VIEWPORT_DIMS = 0x0D3A;
const Size GL_LIST_INDEX = 0x0B33;
const Size GL_OP_RECIP_EXT = 0x8794;
const Size GL_STREAM_DRAW_ARB = 0x88E0;
const Size GL_FRAGMENT_NORMAL_EXT = 0x834A;
const Size GL_TEXTURE_BORDER_COLOR = 0x1004;
const Size GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
const Size GL_PROXY_TEXTURE_1D_EXT = 0x8063;
const Size GL_MATRIX31_ARB = 0x88DF;
const Size GL_MAX_ACTIVE_LIGHTS_EXT = 0x8405;
const Size GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
const Size GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
const Size GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
const Size GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E;
const Size GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
const Size GL_LUMINANCE16_ALPHA16 = 0x8048;
const Size GL_ARB_shader_stencil_export = 1;
const Size GL_COMPILE_STATUS = 0x8B81;
const Size GL_LOGIC_OP_MODE = 0x0BF0;
const Size GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
const Size GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
const Size GL_INTENSITY16 = 0x804D;
const Size GL_MATRIX16_ARB = 0x88D0;
const Size GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
const Size GL_UNSIGNED_INT_24_8 = 0x84FA;
const Size GL_UNSIGNED_BYTE = 0x1401;
const Size GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0;
const Size GL_CONSERVE_MEMORY_HINT_PGI = 107005;
const Size GL_QUADS = 0x0007;
const Size GL_COMPUTE_SUBROUTINE = 0x92ED;
const Size GL_EXT_texture_rectangle = 1;
const Size GL_PIXEL_PACK_BUFFER = 0x88EB;
const Size GL_VERSION_1_5 = 1;
const Size GL_VERSION_1_4 = 1;
const Size GL_VERSION_1_3 = 1;
const Size GL_VERSION_1_2 = 1;
const Size GL_VERSION_1_1 = 1;
const Size GL_OUTPUT_FOG_EXT = 0x87BD;
const Size GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
const Size GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
const Size GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
const Size GL_422_REV_AVERAGE_EXT = 0x80CF;
const Size GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
const Size GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
const Size GL_DRAW_BUFFER = 0x0C01;
const Size GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
const Size GL_VERSION_3_1 = 1;
const Size GL_VERSION_3_0 = 1;
const Size GL_VERSION_3_3 = 1;
const Size GL_VERSION_3_2 = 1;
const Size GL_STENCIL_INDEX4 = 0x8D47;
const Size GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
const Size GL_TEXTURE_GREEN_TYPE = 0x8C11;
const Size GL_STENCIL_INDEX8 = 0x8D48;
const Size GL_DEPTH_BITS = 0x0D56;
const Size GL_RGB8UI = 0x8D7D;
const Size GL_TEXTURE27_ARB = 0x84DB;
const Size GL_STENCIL_INDEX16 = 0x8D49;
const Size GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
const Size GL_DRAW_BUFFER7_ARB = 0x882C;
const Size GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
const Size GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
const Size GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
const Size GL_TEXTURE26_ARB = 0x84DA;
const Size GL_EXT_framebuffer_multisample = 1;
const Size GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
const Size GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
const Size GL_BLEND_DST_RGB = 0x80C8;
const Size GL_CG_FRAGMENT_SHADER_EXT = 0x890F;
const Size GL_LIGHT5 = 0x4005;
const Size GL_MAP1_VERTEX_3 = 0x0D97;
const Size GL_SAMPLE_PATTERN_EXT = 0x80AC;
const Size GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
const Size GL_CLEAR = 0x1500;
const Size GL_LIGHT7 = 0x4007;
const Size GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
const Size GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
const Size GL_MATRIX_MODE = 0x0BA0;
const Size GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
const Size GL_DRAW_BUFFER9 = 0x882E;
const Size GL_ADD_SIGNED_ARB = 0x8574;
const Size GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
const Size GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
const Size GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
const Size GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D;
const Size GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
const Size GL_POINT_SIZE_MAX_ARB = 0x8127;
const Size GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063;
const Size GL_IMAGE_BINDING_FORMAT_EXT = 0x906E;
const Size GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
const Size GL_SELECTION_BUFFER_SIZE = 0x0DF4;
const Size GL_NUM_ACTIVE_VARIABLES = 0x9304;
const Size GL_RGBA16_EXT = 0x805B;
const Size GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
const Size GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
const Size GL_CURRENT_RASTER_POSITION = 0x0B07;
const Size GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
const Size GL_EXP2 = 0x0801;
const Size GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
const Size GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
const Size GL_TEXTURE28_ARB = 0x84DC;
const Size GL_ARB_texture_view = 1;
const Size GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
const Size GL_CURRENT_WEIGHT_ARB = 0x86A8;
const Size GL_SHADOW_ATTENUATION_EXT = 0x834E;
const Size GL_EXT_texture_buffer_object = 1;
const Size GL_FLOAT_VEC2 = 0x8B50;
const Size GL_FOG_INDEX = 0x0B61;
const Size GL_FLOAT_VEC4 = 0x8B52;
const Size GL_R11F_G11F_B10F_EXT = 0x8C3A;
const Size GL_COEFF = 0x0A00;
const Size GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
const Size GL_SOURCE2_ALPHA = 0x858A;
const Size GL_BUFFER_MAP_OFFSET = 0x9121;
const Size GL_ARB_program_interface_query = 1;
const Size GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
const Size GL_BUFFER_SIZE = 0x8764;
const Size GL_BUFFER = 0x82E0;
const Size GL_BUFFER_SIZE_ARB = 0x8764;
const Size GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
const Size GL_UNIFORM_BUFFER_START = 0x8A29;
const Size GL_INT_VEC4 = 0x8B55;
const Size GL_CLAMP_READ_COLOR_ARB = 0x891C;
const Size GL_LOWER_LEFT = 0x8CA1;
const Size GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
const Size GL_COLOR_MATERIAL = 0x0B57;
const Size GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
const Size GL_TEXTURE_FILTER_CONTROL = 0x8500;
const Size GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
const Size GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
const Size GL_LUMINANCE_ALPHA8I_EXT = 0x8D93;
const Size GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
const Size GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
const Size GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
const Size GL_Q = 0x2003;
const Size GL_R = 0x2002;
const Size GL_S = 0x2000;
const Size GL_T = 0x2001;
const Size GL_DOUBLE = 0x140A;
const Size GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
const Size GL_LOG_INTERNAL_REGAL = 0x931E;
const Size GL_VERTEX_SUBROUTINE = 0x92E8;
const Size GL_MATRIX26_ARB = 0x88DA;
const Size GL_4PASS_3_EXT = 0x80A7;
const Size GL_UNIFORM = 0x92E1;
const Size GL_OP_RECIP_SQRT_EXT = 0x8795;
const Size GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
const Size GL_FRAMEBUFFER_BLEND = 0x828B;
const Size GL_MAX_SAMPLES = 0x8D57;
const Size GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
const Size GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
const Size GL_NOOP = 0x1505;
const Size GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
const Size GL_CONTEXT_FLAGS = 0x821E;
const Size GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
const Size GL_TEXCOORD3_BIT_PGI = 0x40000000;
const Size GL_BLEND_DST_RGB_EXT = 0x80C8;
const Size GL_INTENSITY16_SNORM = 0x901B;
const Size GL_MATRIX24_ARB = 0x88D8;
const Size GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88;
const Size GL_ALL_SHADER_BITS = 0xFFFFFFFF;
const Size GL_DRAW_BUFFER14_ARB = 0x8833;
const Size GL_ARB_map_buffer_range = 1;
const Size GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000;
const Size GL_PROJECTION_MATRIX = 0x0BA7;
const Size GL_POINT_SIZE_MAX = 0x8127;
const Size GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
const Size GL_MODELVIEW_MATRIX = 0x0BA6;
const Size GL_QUERY_WAIT = 0x8E13;
const Size GL_RED_SCALE = 0x0D14;
const Size GL_TEXTURE15_ARB = 0x84CF;
const Size GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
const Size GL_STENCIL_RENDERABLE = 0x8288;
const Size GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
const Size GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
const Size GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
const Size GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
const Size GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
const Size GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
const Size GL_EXT_light_texture = 1;
const Size GL_ARB_point_sprite = 1;
const Size GL_FRAGMENT_MATERIAL_EXT = 0x8349;
const Size GL_HISTOGRAM_EXT = 0x8024;
const Size GL_VERSION_1_2_1 = 1;
const Size GL_DEBUG_TYPE_POP_GROUP = 0x826A;
const Size GL_BGRA = 0x80E1;
const Size GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
const Size GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
const Size GL_MATRIX2_ARB = 0x88C2;
const Size GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
const Size GL_CURRENT_MATRIX_ARB = 0x8641;
const Size GL_STREAM_READ_ARB = 0x88E1;
const Size GL_POINT = 0x1B00;
const Size GL_ALPHA16UI_EXT = 0x8D78;
const Size GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
const Size GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
const Size GL_POLYGON_TOKEN = 0x0703;
const Size GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
const Size GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
const Size GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200;
const Size GL_SRGB = 0x8C40;
const Size GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
const Size GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
const Size GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F;
const Size GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
const Size GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
const Size GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB;
const Size GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
const Size GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
const Size GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
const Size GL_3DFX_tbuffer = 1;
const Size GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
const Size GL_LOG_INFO_REGAL = 0x931B;
const Size GL_POINT_SIZE_MIN_ARB = 0x8126;
const Size GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
const Size GL_BLEND_SRC_ALPHA = 0x80CB;
const Size GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
const Size GL_INTERPOLATE_EXT = 0x8575;
const Size GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
const Size GL_AND_REVERSE = 0x1502;
const Size GL_MAX_INTEGER_SAMPLES = 0x9110;
const Size GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
const Size GL_CLAMP_FRAGMENT_COLOR = 0x891B;
const Size GL_QUERY_RESULT_AVAILABLE = 0x8867;
const Size GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
const Size GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
const Size GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
const Size GL_FOG_MODE = 0x0B65;
const Size GL_RGBA8_SNORM = 0x8F97;
const Size GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
const Size GL_COLOR3_BIT_PGI = 0x00010000;
const Size GL_INT_SAMPLER_3D = 0x8DCB;
const Size GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
const Size GL_RGBA_DXT5_S3TC = 0x83A4;
const Size GL_MODELVIEW2_ARB = 0x8722;
const Size GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39;
const Size GL_AND = 0x1501;
const Size GL_ACTIVE_PROGRAM_EXT = 0x8B8D;
const Size GL_INDEX_MODE = 0x0C30;
const Size GL_ACCUM_GREEN_BITS = 0x0D59;
const Size GL_LINE_STRIP_ADJACENCY_EXT = 0xB;
const Size GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
const Size GL_STATIC_COPY = 0x88E6;
const Size GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
const Size GL_3_BYTES = 0x1408;
const Size GL_COORD_REPLACE_ARB = 0x8862;
const Size GL_EXT_blend_logic_op = 1;
const Size GL_ARB_texture_compression_bptc = 1;
const Size GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
const Size GL_NAME_LENGTH = 0x92F9;
const Size GL_ONE_MINUS_DST_ALPHA = 0x0305;
const Size GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
const Size GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
const Size GL_EXT_texture_compression_rgtc = 1;
const Size GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
const Size GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
const Size GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
const Size GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004;
const Size GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
const Size GL_COMPRESSED_SRGB_EXT = 0x8C48;
const Size GL_EXT_fragment_lighting = 1;
const Size GL_NEGATIVE_X_EXT = 0x87D9;
const Size GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
const Size GL_BUFFER_MAP_LENGTH = 0x9120;
const Size GL_ARB_vertex_buffer_object = 1;
const Size GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
const Size GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
const Size GL_ARB_stencil_texturing = 1;
const Size GL_MATRIX15_ARB = 0x88CF;
const Size GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
const Size GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
const Size GL_MAX_NAME_LENGTH = 0x92F6;
const Size GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
const Size GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
const Size GL_PERTURB_EXT = 0x85AE;
const Size GL_TEXTURE1_ARB = 0x84C1;
const Size GL_TANGENT_ARRAY_EXT = 0x8439;
const Size GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
const Size GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
const Size GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
const Size GL_COLOR_TABLE_BIAS = 0x80D7;
const Size GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
const Size GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
const Size GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
const Size GL_IMAGE_PIXEL_TYPE = 0x82AA;
const Size GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
const Size GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
const Size GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
const Size GL_IMAGE_CLASS_2_X_32 = 0x82BA;
const Size GL_DEPTH_COMPONENT24_ARB = 0x81A6;
const Size GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
const Size GL_PRIMITIVES_GENERATED_EXT = 0x8C87;
const Size GL_ARB_compatibility = 1;
const Size GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
const Size GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
const Size GL_STENCIL_INDEX1_EXT = 0x8D46;
const Size GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
const Size GL_POINT_TOKEN = 0x0701;
const Size GL_T4F_C4F_N3F_V4F = 0x2A2D;
const Size GL_TEXTURE30 = 0x84DE;
const Size GL_TEXTURE31 = 0x84DF;
const Size GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75;
const Size GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
const Size GL_CONVOLUTION_HEIGHT = 0x8019;
const Size GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
const Size GL_EXT_texture_compression_s3tc = 1;
const Size GL_BACK_LEFT = 0x0402;
const Size GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
const Size GL_TEXTURE_ENV_COLOR = 0x2201;
const Size GL_BUFFER_MAP_POINTER = 0x88BD;
const Size GL_LINE_SMOOTH = 0x0B20;
const Size GL_MODELVIEW23_ARB = 0x8737;
const Size GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42;
const Size GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
const Size GL_ARB_provoking_vertex = 1;
const Size GL_STENCIL_REF = 0x0B97;
const Size GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81;
const Size GL_NORMAL_MAP_EXT = 0x8511;
const Size GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
const Size GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
const Size GL_DOUBLE_MAT4x2 = 0x8F4D;
const Size GL_DOUBLE_MAT4x3 = 0x8F4E;
const Size GL_COPY_WRITE_BUFFER = 0x8F37;
const Size GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
const Size GL_OPERAND0_RGB = 0x8590;
const Size GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B;
const Size GL_EXT_texture_object = 1;
const Size GL_SRGB_READ = 0x8297;
const Size GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
const Size GL_FEEDBACK = 0x1C01;
const Size GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
const Size GL_TEXCOORD1_BIT_PGI = 0x10000000;
const Size GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
const Size GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
const Size GL_RGBA4_DXT5_S3TC = 0x83A5;
const Size GL_MODELVIEW13_ARB = 0x872D;
const Size GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
const Size GL_PIXEL_MAP_I_TO_G = 0x0C73;
const Size GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C;
const Size GL_TEXTURE29_ARB = 0x84DD;
const Size GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
const Size GL_PIXEL_MAP_I_TO_B = 0x0C74;
const Size GL_PIXEL_MAP_I_TO_A = 0x0C75;
const Size GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
const Size GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
const Size GL_FULL_SUPPORT = 0x82B7;
const Size GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
const Size GL_PIXEL_MAP_I_TO_I = 0x0C70;
const Size GL_STATIC_DRAW_ARB = 0x88E4;
const Size GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
const Size GL_PROGRAM_SEPARABLE = 0x8258;
const Size GL_PIXEL_MAP_I_TO_R = 0x0C72;
const Size GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
const Size GL_LINEAR_ATTENUATION = 0x1208;
const Size GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
const Size GL_ARB_texture_multisample = 1;
const Size GL_OP_LOG_BASE_2_EXT = 0x8792;
const Size GL_SOURCE2_ALPHA_ARB = 0x858A;
const Size GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
const Size GL_TEXTURE_MAG_FILTER = 0x2800;
const Size GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
const Size GL_CONVOLUTION_FILTER_BIAS = 0x8015;
const Size GL_CAVEAT_SUPPORT = 0x82B8;
const Size GL_COLOR_MATERIAL_FACE = 0x0B55;
const Size GL_TEXTURE_LIGHT_EXT = 0x8350;
const Size GL_TEXTURE_RECTANGLE_EXT = 0x84F5;
const Size GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
const Size GL_TESS_GEN_SPACING = 0x8E77;
const Size GL_SAMPLER_CUBE = 0x8B60;
const Size GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
const Size GL_RGB_S3TC = 0x83A0;
const Size GL_PROGRAM_OUTPUT = 0x92E4;
const Size GL_INT_2_10_10_10_REV = 0x8D9F;
const Size GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
const Size GL_LEFT = 0x0406;
const Size GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
const Size GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
const Size GL_DEPTH24_STENCIL8_EXT = 0x88F0;
const Size GL_INT_IMAGE_2D_RECT_EXT = 0x905A;
const Size GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
const Size GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
const Size GL_PROXY_TEXTURE_3D_EXT = 0x8070;
const Size GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
const Size GL_MATRIX4_ARB = 0x88C4;
const Size GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
const Size GL_EXT_texture_env_combine = 1;
const Size GL_KHR_debug = 1;
const Size GL_MINMAX = 0x802E;
const Size GL_MAX_TEXTURE_SIZE = 0x0D33;
const Size GL_ALPHA8_SNORM = 0x9014;
const Size GL_ALPHA32F_ARB = 0x8816;
const Size GL_STRICT_DEPTHFUNC_HINT_PGI = 107030;
const Size GL_ARRAY_BUFFER = 0x8892;
const Size GL_COMPRESSED_ALPHA = 0x84E9;
const Size GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
const Size GL_IMAGE_2D = 0x904D;
const Size GL_IGNORE_BORDER = 0x8150;
const Size GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
const Size GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
const Size GL_TEXTURE_1D = 0x0DE0;
const Size GL_NAME_STACK_DEPTH = 0x0D70;
const Size GL_BLEND_SRC_RGB = 0x80C9;
const Size GL_MATRIX14_ARB = 0x88CE;
const Size GL_ALPHA8I_EXT = 0x8D90;
const Size GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
const Size GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
const Size GL_BUFFER_BINDING = 0x9302;
const Size GL_CLEAR_BUFFER = 0x82B4;
const Size GL_MATRIX12_ARB = 0x88CC;
const Size GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
const Size GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
const Size GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
const Size GL_ALPHA_TEST = 0x0BC0;
const Size GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
const Size GL_BACK_NORMALS_HINT_PGI = 107043;
const Size GL_EXT_clip_volume_hint = 1;
const Size GL_EXT_packed_pixels = 1;
const Size GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
const Size GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB = 0x884F;
const Size GL_DRAW_BUFFER13_ARB = 0x8832;
const Size GL_INT_SAMPLER_2D = 0x8DCA;
const Size GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
const Size GL_IMAGE_CLASS_1_X_16 = 0x82BE;
const Size GL_DOUBLE_MAT3x2 = 0x8F4B;
const Size GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
const Size GL_DRAW_BUFFER3_ARB = 0x8828;
const Size GL_PIXEL_MAP_A_TO_A = 0x0C79;
const Size GL_DOUBLE_MAT3x4 = 0x8F4C;
const Size GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
const Size GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069;
const Size GL_IMAGE_2D_MULTISAMPLE = 0x9055;
const Size GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
const Size GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
const Size GL_LUMINANCE8_SNORM = 0x9015;
const Size GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
const Size GL_ARB_fragment_program = 1;
const Size GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
const Size GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
const Size GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B;
const Size GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
const Size GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
const Size GL_FIXED_ONLY = 0x891D;
const Size GL_OP_MAX_EXT = 0x878A;
const Size GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
const Size GL_NONE = 0;
const Size GL_POLYGON_MODE = 0x0B40;
const Size GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
const Size GL_HALF_FLOAT = 0x140B;
const Size GL_RGBA_SNORM = 0x8F93;
const Size GL_V2F = 0x2A20;
const Size GL_LIGHTING_BIT = 0x00000040;
const Size GL_ARB_copy_image = 1;
const Size GL_SCISSOR_BOX = 0x0C10;
const Size GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
const Size GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
const Size GL_LOG_APP_REGAL = 0x931C;
const Size GL_INVERTED_SCREEN_W_REND = 0x8491;
const Size GL_STRICT_SCISSOR_HINT_PGI = 107032;
const Size GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
const Size GL_TEXTURE_IMAGE_FORMAT = 0x828F;
const Size GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
const Size GL_INDEX_ARRAY = 0x8077;
const Size GL_CONVOLUTION_1D_EXT = 0x8010;
const Size GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
const Size GL_LIST_BASE = 0x0B32;
const Size GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
const Size GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
const Size GL_COLOR_WRITEMASK = 0x0C23;
const Size GL_MATRIX23_ARB = 0x88D7;
const Size GL_EXT_texture_edge_clamp = 1;
const Size GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
const Size GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
const Size GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
const Size GL_LIGHT_ENV_MODE_EXT = 0x8407;
const Size GL_LOG_STATUS_REGAL = 0x9320;
const Size GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
const Size GL_TEXTURE_WRAP_R = 0x8072;
const Size GL_TEXTURE_WRAP_S = 0x2802;
const Size GL_TEXTURE_WRAP_T = 0x2803;
const Size GL_ACTIVE_RESOURCES = 0x92F5;
const Size GL_DST_ALPHA = 0x0304;
const Size GL_INT_SAMPLER_3D_EXT = 0x8DCB;
const Size GL_PROGRAM_BINARY_LENGTH = 0x8741;
const Size GL_EVAL_BIT = 0x00010000;
const Size GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
const Size GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
const Size GL_COMPRESSED_RGB = 0x84ED;
const Size GL_TIME_ELAPSED = 0x88BF;
const Size GL_SRC1_COLOR = 0x88F9;
const Size GL_LOG_ERROR_REGAL = 0x9319;
const Size GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
const Size GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
const Size GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
const Size GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
const Size GL_TEXTURE12_ARB = 0x84CC;
const Size GL_SHADER = 0x82E1;
const Size GL_BLUE_BITS = 0x0D54;
const Size GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
const Size GL_OUTPUT_COLOR1_EXT = 0x879C;
const Size GL_TEXTURE_SWIZZLE_R = 0x8E42;
const Size GL_PACK_SWAP_BYTES = 0x0D00;
const Size GL_EQUAL = 0x0202;
const Size GL_TEXTURE_SWIZZLE_G = 0x8E43;
const Size GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
const Size GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
const Size GL_TEXTURE_SWIZZLE_B = 0x8E44;
const Size GL_TEXTURE_SWIZZLE_A = 0x8E45;
const Size GL_FUNC_ADD = 0x8006;
const Size GL_LOW_FLOAT = 0x8DF0;
const Size GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
const Size GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C;
const Size GL_EXT_pixel_transform = 1;
const Size GL_EXT_polygon_offset = 1;
const Size GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
const Size GL_INT_SAMPLER_BUFFER = 0x8DD0;
const Size GL_INT_SAMPLER_1D_EXT = 0x8DC9;
const Size GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
const Size GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
const Size GL_EXT_rescale_normal = 1;
const Size GL_ARB_pixel_buffer_object = 1;
const Size GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
const Size GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
const Size GL_LINE_STRIP = 0x0003;
const Size GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
const Size GL_PACK_ROW_LENGTH = 0x0D02;
const Size GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
const Size GL_DRAW_BUFFER0_ARB = 0x8825;
const Size GL_ARB_instanced_arrays = 1;
const Size GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
const Size GL_COLOR = 0x1800;
const Size GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
const Size GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
const Size GL_BITMAP = 0x1A00;
const Size GL_DYNAMIC_READ = 0x88E9;
const Size GL_COMPRESSED_LUMINANCE = 0x84EA;
const Size GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
const Size GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
const Size GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
const Size GL_DEPTH_STENCIL = 0x84F9;
const Size GL_CONSTANT_EXT = 0x8576;
const Size GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
const Size GL_TEXTURE_INTENSITY_SIZE = 0x8061;
const Size GL_REDUCE_EXT = 0x8016;
const Size GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
const Size GL_ARB_shader_precision = 1;
const Size GL_SYNC_CONDITION = 0x9113;
const Size GL_TEXTURE_2D = 0x0DE1;
const Size GL_HISTOGRAM_SINK = 0x802D;
const Size GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
const Size GL_TEXTURE23 = 0x84D7;
const Size GL_TEXTURE22 = 0x84D6;
const Size GL_TEXTURE21 = 0x84D5;
const Size GL_TEXTURE20 = 0x84D4;
const Size GL_TEXTURE27 = 0x84DB;
const Size GL_TEXTURE26 = 0x84DA;
const Size GL_TEXTURE25 = 0x84D9;
const Size GL_TEXTURE24 = 0x84D8;
const Size GL_DOUBLE_MAT2_EXT = 0x8F46;
const Size GL_R8_SNORM = 0x8F94;
const Size GL_TEXTURE29 = 0x84DD;
const Size GL_TEXTURE28 = 0x84DC;
const Size GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
const Size GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
const Size GL_TRIANGLES_ADJACENCY = 0x000C;
const Size GL_PIXEL_MODE_BIT = 0x00000020;
const Size GL_IMAGE_2D_ARRAY = 0x9053;
const Size GL_INT_VEC3_ARB = 0x8B54;
const Size GL_CONVOLUTION_2D_EXT = 0x8011;
const Size GL_ALPHA_SCALE = 0x0D1C;
const Size GL_READ_BUFFER = 0x0C02;
const Size GL_PACK_SKIP_PIXELS = 0x0D04;
const Size GL_EXT_vertex_array = 1;
const Size GL_ARB_half_float_vertex = 1;
const Size GL_TESS_CONTROL_SHADER = 0x8E88;
const Size GL_DEBUG_SOURCE_APPLICATION = 0x824A;
const Size GL_INVARIANT_VALUE_EXT = 0x87EA;
const Size GL_FIXED_ONLY_ARB = 0x891D;
const Size GL_GEQUAL = 0x0206;
const Size GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
const Size GL_MODELVIEW8_ARB = 0x8728;
const Size GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
const Size GL_RGBA8UI = 0x8D7C;
const Size GL_R16F = 0x822D;
const Size GL_INTENSITY32UI_EXT = 0x8D73;
const Size GL_TRANSFORM_FEEDBACK = 0x8E22;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
const Size GL_VARIANT_EXT = 0x87C1;
const Size GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C;
const Size GL_SUBTRACT = 0x84E7;
const Size GL_EXT_debug_marker = 1;
const Size GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
const Size GL_EXT_index_array_formats = 1;
const Size GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
const Size GL_READ_WRITE = 0x88BA;
const Size GL_ARB_conservative_depth = 1;
const Size GL_LUMINANCE16_ALPHA16_SNORM = 0x901A;
const Size GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
const Size GL_ARRAY_BUFFER_BINDING = 0x8894;
const Size GL_INDEX_WRITEMASK = 0x0C21;
const Size GL_INTERPOLATE = 0x8575;
const Size GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
const Size GL_DYNAMIC_DRAW = 0x88E8;
const Size GL_RGB8_EXT = 0x8051;
const Size GL_4D_COLOR_TEXTURE = 0x0604;
const Size GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
const Size GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
const Size GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
const Size GL_UNPACK_ROW_LENGTH = 0x0CF2;
const Size GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
const Size GL_CURRENT_PROGRAM = 0x8B8D;
const Size GL_BUFFER_MAPPED = 0x88BC;
const Size GL_EYE_LINEAR = 0x2400;
const Size GL_IMAGE_1D_ARRAY_EXT = 0x9052;
const Size GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
const Size GL_INTENSITY8I_EXT = 0x8D91;
const Size GL_STREAM_DRAW = 0x88E0;
const Size GL_ALPHA4_EXT = 0x803B;
const Size GL_ARB_ES2_compatibility = 1;
const Size GL_DOT3_RGBA_ARB = 0x86AF;
const Size GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
const Size GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
const Size GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
const Size GL_SIGNALED = 0x9119;
const Size GL_BOOL_VEC4_ARB = 0x8B59;
const Size GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067;
const Size GL_FRAMEBUFFER = 0x8D40;
const Size GL_SPECULAR = 0x1202;
const Size GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
const Size GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
const Size GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
const Size GL_HALF_FLOAT_ARB = 0x140B;
const Size GL_RGB32I_EXT = 0x8D83;
const Size GL_R16 = 0x822A;
const Size GL_OPERAND1_RGB_ARB = 0x8591;
const Size GL_GENERATE_MIPMAP = 0x8191;
const Size GL_OP_INDEX_EXT = 0x8782;
const Size GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
const Size GL_ARB_shader_bit_encoding = 1;
const Size GL_COLOR_ARRAY_SIZE = 0x8081;
const Size GL_STENCIL_BACK_FAIL = 0x8801;
const Size GL_POLYGON_OFFSET_FACTOR = 0x8038;
const Size GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
const Size GL_LOCATION_INDEX = 0x930F;
const Size GL_INTENSITY8UI_EXT = 0x8D7F;
const Size GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
const Size GL_NORMAL_ARRAY_EXT = 0x8075;
const Size GL_EXT_x11_sync_object = 1;
const Size GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
const Size GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
const Size GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
const Size GL_EDGE_FLAG = 0x0B43;
const Size GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800;
const Size GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
const Size GL_PACK_LSB_FIRST = 0x0D01;
const Size GL_MULTISAMPLE_3DFX = 0x86B2;
const Size GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
const Size GL_RGBA16I_EXT = 0x8D88;
const Size GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
const Size GL_TEXTURE_BIT = 0x00040000;
const Size GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
const Size GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
const Size GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
const Size GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
const Size GL_QUERY_BY_REGION_WAIT = 0x8E15;
const Size GL_TEXTURE_RESIDENT = 0x8067;
const Size GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
const Size GL_EXT_abgr = 1;
const Size GL_OP_MOV_EXT = 0x8799;
const Size GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
const Size GL_FOG = 0x0B60;
const Size GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
const Size GL_PACK_CMYK_HINT_EXT = 0x800E;
const Size GL_POSITION = 0x1203;
const Size GL_STATIC_READ_ARB = 0x88E5;
const Size GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
const Size GL_INT_IMAGE_3D_EXT = 0x9059;
const Size GL_RG = 0x8227;
const Size GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
const Size GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
const Size GL_LINE_STIPPLE_PATTERN = 0x0B25;
const Size GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
const Size GL_VARIANT_ARRAY_EXT = 0x87E8;
const Size GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
const Size GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E;
const Size GL_STENCIL_INDEX4_EXT = 0x8D47;
const Size GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
const Size GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
const Size GL_SAMPLE_BUFFERS_ARB = 0x80A8;
const Size GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
const Size GL_ARB_shadow = 1;
const Size GL_ARB_texture_mirrored_repeat = 1;
const Size GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
const Size GL_COLOR_INDEX8_EXT = 0x80E5;
const Size GL_ENABLE_BIT = 0x00002000;
const Size GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
const Size GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE;
const Size GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
const Size GL_OPERAND0_RGB_ARB = 0x8590;
const Size GL_EXT_vertex_attrib_64bit = 1;
const Size GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
const Size GL_MAX_VERTEX_ATTRIBS = 0x8869;
const Size GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
const Size GL_CONSTANT = 0x8576;
const Size GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
const Size GL_LINE_WIDTH_RANGE = 0x0B22;
const Size GL_XOR = 0x1506;
const Size GL_EXT_draw_instanced = 1;
const Size GL_LESS = 0x0201;
const Size GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
const Size GL_COPY_PIXEL_TOKEN = 0x0706;
const Size GL_FRAMEBUFFER_UNDEFINED = 0x8219;
const Size GL_COMBINE_EXT = 0x8570;
const Size GL_TEXTURE_STENCIL_SIZE = 0x88F1;
const Size GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
const Size GL_EXT_depth_bounds_test = 1;
const Size GL_EMISSION = 0x1600;
const Size GL_GEOMETRY_TEXTURE = 0x829E;
const Size GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
const Size GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
const Size GL_INT_SAMPLER_1D = 0x8DC9;
const Size GL_TEXTURE14_ARB = 0x84CE;
const Size GL_DOUBLE_MAT3x4_EXT = 0x8F4C;
const Size GL_INTERNALFORMAT_RED_SIZE = 0x8271;
const Size GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
const Size GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001;
const Size GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
const Size GL_ADD_SIGNED_EXT = 0x8574;
const Size GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
const Size GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
const Size GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
const Size GL_STENCIL_INDEX16_EXT = 0x8D49;
const Size GL_ENV_COPY_EXT = 0;
const Size GL_REPEAT = 0x2901;
const Size GL_T2F_C4F_N3F_V3F = 0x2A2C;
const Size GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
const Size GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
const Size GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
const Size GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
const Size GL_VERTEX_SHADER_EXT = 0x8780;
const Size GL_CLIENT_ALL_ATTRIB_BITS = 0xffffffff;
const Size GL_VALIDATE_STATUS = 0x8B83;
const Size GL_RG16 = 0x822C;
const Size GL_EXT_Cg_shader = 1;
const Size GL_SCISSOR_TEST = 0x0C11;
const Size GL_UNPACK_SKIP_IMAGES = 0x806D;
const Size GL_RGB_SCALE_ARB = 0x8573;
const Size GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
const Size GL_PIXEL_MAG_FILTER_EXT = 0x8331;
const Size GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
const Size GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
const Size GL_DRAW_BUFFER12_ARB = 0x8831;
const Size GL_INT_IMAGE_2D_RECT = 0x905A;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
const Size GL_RGB16UI_EXT = 0x8D77;
const Size GL_COLOR_TABLE_BLUE_SIZE_EXT = 0x80DC;
const Size GL_BLEND_EQUATION_ALPHA = 0x883D;
const Size GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
const Size GL_RGB10_A2_EXT = 0x8059;
const Size GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
const Size GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
const Size GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
const Size GL_MODELVIEW11_ARB = 0x872B;
const Size GL_ARB_fragment_coord_conventions = 1;
const Size GL_CONVOLUTION_WIDTH_EXT = 0x8018;
const Size GL_IMAGE_CUBE_EXT = 0x9050;
const Size GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
const Size GL_ATTACHED_SHADERS = 0x8B85;
const Size GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
const Size GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
const Size GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
const Size GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
const Size GL_LINES = 0x0001;
const Size GL_TEXTURE18 = 0x84D2;
const Size GL_TEXTURE19 = 0x84D3;
const Size GL_TEXTURE16 = 0x84D0;
const Size GL_TEXTURE17 = 0x84D1;
const Size GL_ARB_ES3_compatibility = 1;
const Size GL_TEXTURE15 = 0x84CF;
const Size GL_TEXTURE12 = 0x84CC;
const Size GL_TEXTURE13 = 0x84CD;
const Size GL_TEXTURE10 = 0x84CA;
const Size GL_TEXTURE11 = 0x84CB;
const Size GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
const Size GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45;
const Size GL_NEGATIVE_W_EXT = 0x87DC;
const Size GL_3DFX_multisample = 1;
const Size GL_VIEW_CLASS_16_BITS = 0x82CA;
const Size GL_RGB = 0x1907;
const Size GL_LOG_DEBUG_REGAL = 0x931F;
const Size GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
const Size GL_ARB_framebuffer_sRGB = 1;
const Size GL_HISTOGRAM = 0x8024;
const Size GL_OUTPUT_COLOR0_EXT = 0x879B;
const Size GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
const Size GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
const Size GL_STACK_OVERFLOW = 0x0503;
const Size GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
const Size GL_MAP1_VERTEX_4 = 0x0D98;
const Size GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
const Size GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
const Size GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
const Size GL_RGBA32F = 0x8814;
const Size GL_RGBA32I = 0x8D82;
const Size GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E;
const Size GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
const Size GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
const Size GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
const Size GL_STENCIL_WRITEMASK = 0x0B98;
const Size GL_IMAGE_CLASS_2_X_8 = 0x82C0;
const Size GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
const Size GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
const Size GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
const Size GL_STENCIL_INDEX8_EXT = 0x8D48;
const Size GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
const Size GL_RED_INTEGER_EXT = 0x8D94;
const Size GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
const Size GL_VARIANT_VALUE_EXT = 0x87E4;
const Size GL_RGB10_EXT = 0x8052;
const Size GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
const Size GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
const Size GL_EXT_vertex_weighting = 1;
const Size GL_MODELVIEW0_ARB = 0x1700;
const Size GL_PRIMITIVE_RESTART = 0x8F9D;
const Size GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
const Size GL_ARB_draw_buffers = 1;
const Size GL_Y_EXT = 0x87D6;
const Size GL_VIEW_CLASS_64_BITS = 0x82C6;
const Size GL_RGBA4_S3TC = 0x83A3;
const Size GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
const Size GL_SRC_ALPHA = 0x0302;
const Size GL_TEXTURE_3D = 0x806F;
const Size GL_INTENSITY_EXT = 0x8049;
const Size GL_INDEX_ARRAY_POINTER = 0x8091;
const Size GL_DRAW_BUFFER5_ARB = 0x882A;
const Size GL_BLEND_SRC_RGB_EXT = 0x80C9;
const Size GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44;
const Size GL_DOUBLE_EXT = 0x140A;
const Size GL_ARB_compressed_texture_pixel_storage = 1;
const Size GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
const Size GL_MIN_EXT = 0x8007;
const Size GL_SYNC_X11_FENCE_EXT = 0x90E1;
const Size GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
const Size GL_SAMPLE_SHADING = 0x8C36;
const Size GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
const Size GL_RG32UI = 0x823C;
const Size GL_NORMALIZE = 0x0BA1;
const Size GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
const Size GL_SRGB_DECODE_ARB = 0x8299;
const Size GL_BLUE_SCALE = 0x0D1A;
const Size GL_MODELVIEW16_ARB = 0x8730;
const Size GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
const Size GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
const Size GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
const Size GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
const Size GL_COPY_READ_BUFFER = 0x8F36;
const Size GL_MODELVIEW19_ARB = 0x8733;
const Size GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
const Size GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
const Size GL_ARB_occlusion_query2 = 1;
const Size GL_MATRIX11_ARB = 0x88CB;
const Size GL_CURRENT_VERTEX_EXT = 0x87E2;
const Size GL_SUBPIXEL_BITS = 0x0D50;
const Size GL_NORMAL_ARRAY = 0x8075;
const Size GL_SEPARATE_ATTRIBS = 0x8C8D;
const Size GL_MAX_PATCH_VERTICES = 0x8E7D;
const Size GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
const Size GL_NICEST = 0x1102;
const Size GL_LUMINANCE16F_ARB = 0x881E;
const Size GL_ARB_draw_indirect = 1;
const Size GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
const Size GL_EXT_direct_state_access = 1;
const Size GL_MODELVIEW = 0x1700;
const Size GL_INT_IMAGE_CUBE = 0x905B;
const Size GL_C4UB_V3F = 0x2A23;
const Size GL_COLOR4_BIT_PGI = 0x00020000;
const Size GL_PACK_SKIP_IMAGES = 0x806B;
const Size GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
const Size GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
const Size GL_FLOAT_MAT2x3 = 0x8B65;
const Size GL_CLAMP_TO_BORDER_ARB = 0x812D;
const Size GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
const Size GL_COMBINE = 0x8570;
const Size GL_FLOAT_MAT2x4 = 0x8B66;
const Size GL_INDEX_LOGIC_OP = 0x0BF1;
const Size GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C;
const Size GL_PRIMITIVES_GENERATED = 0x8C87;
const Size GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
const Size GL_RED_SNORM = 0x8F90;
const Size GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
const Size GL_SHADER_INCLUDE_ARB = 0x8DAE;
const Size GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
const Size GL_DOUBLE_MAT3x2_EXT = 0x8F4B;
const Size GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
const Size GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
const Size GL_LUMINANCE32F_ARB = 0x8818;
const Size GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
const Size GL_COLOR_ARRAY_EXT = 0x8076;
const Size GL_EXT_multisample = 1;
const Size GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
const Size GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
const Size GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
const Size GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
const Size GL_INTENSITY16UI_EXT = 0x8D79;
const Size GL_FRAGMENT_LIGHT7_EXT = 0x8413;
const Size GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
const Size GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
const Size GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
const Size GL_NORMALIZED_RANGE_EXT = 0x87E0;
const Size GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
const Size GL_CONVOLUTION_FORMAT_EXT = 0x8017;
const Size GL_TEXTURE_ENV_SHIFT_EXT = 0;
const Size GL_BGR_EXT = 0x80E0;
const Size GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
const Size GL_SLUMINANCE_EXT = 0x8C46;
const Size GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
const Size GL_EXT_draw_range_elements = 1;
const Size GL_TEXTURE_LOD_BIAS = 0x8501;
const Size GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
const Size GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
const Size GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
const Size GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
const Size GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
const Size GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
const Size GL_EXT_blend_subtract = 1;
const Size GL_SINGLE_COLOR_EXT = 0x81F9;
const Size GL_CONTEXT_PROFILE_MASK = 0x9126;
const Size GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
const Size GL_TEXTURE_1D_ARRAY_EXT = 0x8C18;
const Size GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
const Size GL_ARRAY_SIZE = 0x92FB;
const Size GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CC;
const Size GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
const Size GL_QUERY_RESULT = 0x8866;
const Size GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
const Size GL_TEXTURE_SAMPLES = 0x9106;
const Size GL_R16_SNORM = 0x8F98;
const Size GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
const Size GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
const Size GL_RGB12_EXT = 0x8053;
const Size GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
const Size GL_FLOAT = 0x1406;
const Size GL_EXT_shadow_funcs = 1;
const Size GL_SOURCE2_RGB_ARB = 0x8582;
const Size GL_TEXTURE10_ARB = 0x84CA;
const Size GL_OP_SUB_EXT = 0x8796;
const Size GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
const Size GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
const Size GL_TEXTURE_IMAGE_TYPE = 0x8290;
const Size GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
const Size GL_RGB16_SNORM = 0x8F9A;
const Size GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
const Size GL_DRAW_BUFFER15_ARB = 0x8834;
const Size GL_MODELVIEW26_ARB = 0x873A;
const Size GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
const Size GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
const Size GL_COLOR_TABLE_FORMAT = 0x80D8;
const Size GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
const Size GL_EXT_index_func = 1;
const Size GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A;
const Size GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
const Size GL_WIDE_LINE_HINT_PGI = 107042;
const Size GL_MINMAX_EXT = 0x802E;
const Size GL_LOG_HTTP_REGAL = 0x9321;
const Size GL_MAX_LIST_NESTING = 0x0B31;
const Size GL_POINT_SIZE_MIN_EXT = 0x8126;
const Size GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
const Size GL_MAX_IMAGE_SAMPLES = 0x906D;
const Size GL_SUBTRACT_ARB = 0x84E7;
const Size GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
const Size GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
const Size GL_EXT_color_subtable = 1;
const Size GL_DRAW_BUFFER2_ARB = 0x8827;
const Size GL_BUFFER_VARIABLE = 0x92E5;
const Size GL_COLOR_ARRAY = 0x8076;
const Size GL_CONVOLUTION_2D = 0x8011;
const Size GL_ZOOM_Y = 0x0D17;
const Size GL_ZOOM_X = 0x0D16;
const Size GL_ATTENUATION_EXT = 0x834D;
const Size GL_RENDERBUFFER_SAMPLES = 0x8CAB;
const Size GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D;
const Size GL_HINT_BIT = 0x00008000;
const Size GL_OP_ROUND_EXT = 0x8790;
const Size GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
const Size GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
const Size GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
const Size GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
const Size GL_GREEN_INTEGER = 0x8D95;
const Size GL_COLOR_ARRAY_POINTER = 0x8090;
const Size GL_TEXTURE_DEPTH_SIZE = 0x884A;
const Size GL_FLOAT_MAT3x2 = 0x8B67;
const Size GL_TESS_CONTROL_TEXTURE = 0x829C;
const Size GL_DECODE_EXT = 0x8A49;
const Size GL_FLOAT_MAT3x4 = 0x8B68;
const Size GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100;
const Size GL_OP_FLOOR_EXT = 0x878F;
const Size GL_ARB_texture_env_combine = 1;
const Size GL_COMPRESSED_RGBA = 0x84EE;
const Size GL_MATRIX6_ARB = 0x88C6;
const Size GL_TEXTURE22_ARB = 0x84D6;
const Size GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
const Size GL_INTENSITY32F_ARB = 0x8817;
const Size GL_COMPUTE_TEXTURE = 0x82A0;
const Size GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
const Size GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85;
const Size GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
const Size GL_EXT_paletted_texture = 1;
const Size GL_TEXTURE_COMPONENTS = 0x1003;
const Size GL_QUERY_NO_WAIT = 0x8E14;
const Size GL_ARB_texture_buffer_object = 1;
const Size GL_VIEW_CLASS_48_BITS = 0x82C7;
const Size GL_GEOMETRY_SHADER_EXT = 0x8DD9;
const Size GL_UNPACK_SWAP_BYTES = 0x0CF0;
const Size GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
const Size GL_SAMPLE_BUFFERS_EXT = 0x80A8;
const Size GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
const Size GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
const Size GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
const Size GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
const Size GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
const Size GL_BITMAP_TOKEN = 0x0704;
const Size GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060;
const Size GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
const Size GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
const Size GL_LINE_TOKEN = 0x0702;
const Size GL_PRIMARY_COLOR_EXT = 0x8577;
const Size GL_CURRENT_FOG_COORDINATE = 0x8453;
const Size GL_IMAGE_BINDING_LEVEL = 0x8F3B;
const Size GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
const Size GL_REND_screen_coordinates = 1;
const Size GL_FLOAT_VEC3 = 0x8B51;
const Size GL_MULTISAMPLE_BIT_ARB = 0x20000000;
const Size GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84;
const Size GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
const Size GL_RGB_INTEGER = 0x8D98;
const Size GL_MULT = 0x0103;
const Size GL_STENCIL_CLEAR_VALUE = 0x0B91;
const Size GL_VIEW_CLASS_128_BITS = 0x82C4;
const Size GL_POINT_SPRITE_ARB = 0x8861;
const Size GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
const Size GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
const Size GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
const Size GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
const Size GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
const Size GL_MODELVIEW24_ARB = 0x8738;
const Size GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A;
const Size GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
const Size GL_ARB_vertex_type_2_10_10_10_rev = 1;
const Size GL_FRAGMENT_SHADER = 0x8B30;
const Size GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
const Size GL_MAX_IMAGE_UNITS_EXT = 0x8F38;
const Size GL_ALPHA8_EXT = 0x803C;
const Size GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
const Size GL_DEBUG_OUTPUT = 0x92E0;
const Size GL_VIEWPORT = 0x0BA2;
const Size GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
const Size GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
const Size GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
const Size GL_RGB8I = 0x8D8F;
const Size GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
const Size GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
const Size GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
const Size GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
const Size GL_BLEND_SRC = 0x0BE1;
const Size GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
const Size GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
const Size GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
const Size GL_INT_SAMPLER_2D_RECT = 0x8DCD;
const Size GL_SHADER_STORAGE_BLOCK = 0x92E6;
const Size GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
const Size GL_ONE_EXT = 0x87DE;
const Size GL_DEPTH24_STENCIL8 = 0x88F0;
const Size GL_MODELVIEW7_ARB = 0x8727;
const Size GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
const Size GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
const Size GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
const Size GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
const Size GL_FUNC_ADD_EXT = 0x8006;
const Size GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
const Size GL_TEXTURE16_ARB = 0x84D0;
const Size GL_COLOR_INDEX = 0x1900;
const Size GL_MAP2_NORMAL = 0x0DB2;
const Size GL_NORMAL_ARRAY_POINTER = 0x808F;
const Size GL_MAX_EVAL_ORDER = 0x0D30;
const Size GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
const Size GL_TEXTURE_COMPARE_MODE = 0x884C;
const Size GL_ANY_SAMPLES_PASSED = 0x8C2F;
const Size GL_WEIGHT_ARRAY_ARB = 0x86AD;
const Size GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
const Size GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
const Size GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
const Size GL_MAP_WRITE_BIT = 0x0002;
const Size GL_SHADE_MODEL = 0x0B54;
const Size GL_COMPRESSED_SLUMINANCE = 0x8C4A;
const Size GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
const Size GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 107011;
const Size GL_EXT_stencil_clear_tag = 1;
const Size GL_RGBA16F_ARB = 0x881A;
const Size GL_HISTOGRAM_SINK_EXT = 0x802D;
const Size GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
const Size GL_INDEX_SHIFT = 0x0D12;
const Size GL_ARB_texture_compression_rgtc = 1;
const Size GL_LUMINANCE_ALPHA_SNORM = 0x9012;
const Size GL_COLOR_SUM_EXT = 0x8458;
const Size GL_TRIANGLES_ADJACENCY_EXT = 0xC;
const Size GL_LIST_BIT = 0x00020000;
const Size GL_VIEW_CLASS_32_BITS = 0x82C8;
const Size GL_IMAGE_BINDING_ACCESS = 0x8F3E;
const Size GL_BGRA_INTEGER_EXT = 0x8D9B;
const Size GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
const Size GL_STREAM_READ = 0x88E1;
const Size GL_LINEAR = 0x2601;
const Size GL_MINMAX_SINK = 0x8030;
const Size GL_VERTEX_ARRAY = 0x8074;
const Size GL_ARB_draw_elements_base_vertex = 1;
const Size GL_TEXTURE31_ARB = 0x84DF;
const Size GL_STENCIL_INDEX = 0x1901;
const Size GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
const Size GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
const Size GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
const Size GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
const Size GL_HIGH_FLOAT = 0x8DF2;
const Size GL_GREATER = 0x0204;
const Size GL_PROXY_HISTOGRAM_EXT = 0x8025;
const Size GL_BLOCK_INDEX = 0x92FD;
const Size GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
const Size GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
const Size GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
const Size GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
const Size GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
const Size GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
const Size GL_FRONT_FACE = 0x0B46;
const Size GL_SYNC_STATUS = 0x9114;
const Size GL_REPLACE = 0x1E01;
const Size GL_QUERY_RESULT_ARB = 0x8866;
const Size GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
const Size GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
const Size GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
const Size GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
const Size GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
const Size GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
const Size GL_VERTEX_TEXTURE = 0x829B;
const Size GL_MINMAX_SINK_EXT = 0x8030;
const Size GL_OPERAND2_ALPHA_ARB = 0x859A;
const Size GL_DYNAMIC_DRAW_ARB = 0x88E8;
const Size GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
const Size GL_REPLACE_EXT = 0x8062;
const Size GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
const Size GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
const Size GL_IS_ROW_MAJOR = 0x9300;
const Size GL_ACCUM_CLEAR_VALUE = 0x0B80;
const Size GL_ARB_framebuffer_no_attachments = 1;
const Size GL_RGB_SCALE_EXT = 0x8573;
const Size GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
const Size GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
const Size GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
const Size GL_RENDERBUFFER_BINDING = 0x8CA7;
const Size GL_TESS_EVALUATION_SHADER = 0x8E87;
const Size GL_TEXTURE_STACK_DEPTH = 0x0BA5;
const Size GL_RGB5_EXT = 0x8050;
const Size GL_AVERAGE_EXT = 0x8335;
const Size GL_R16UI = 0x8234;
const Size GL_CONVOLUTION_1D = 0x8010;
const Size GL_BLEND = 0x0BE2;
const Size GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
const Size GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
const Size GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
const Size GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
const Size GL_UNSIGNED_SHORT = 0x1403;
const Size GL_INTENSITY_SNORM = 0x9013;
const Size GL_POLYGON_OFFSET_EXT = 0x8037;
const Size GL_MIN = 0x8007;
const Size GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
const Size GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
const Size GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
const Size GL_ONE_MINUS_SRC_COLOR = 0x0301;
const Size GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
const Size GL_ARB_multitexture = 1;
const Size GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061;
const Size GL_INTENSITY12 = 0x804C;
const Size GL_FUNC_SUBTRACT_EXT = 0x800A;
const Size GL_C4UB_V2F = 0x2A22;
const Size GL_MAP2_TANGENT_EXT = 0x8445;
const Size GL_SAMPLE_MASK_EXT = 0x80A0;
const Size GL_PATCHES = 0xE;
const Size GL_LIST_MODE = 0x0B30;
const Size GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
const Size GL_TIMESTAMP = 0x8E28;
const Size GL_IMAGE_2D_EXT = 0x904D;
const Size GL_ARB_texture_cube_map = 1;
const Size GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
const Size GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064;
const Size GL_OPERAND2_RGB = 0x8592;
const Size GL_EXT_texture_env_dot3 = 1;
const Size GL_SRGB_ALPHA = 0x8C42;
const Size GL_DRAW_BUFFER9_ARB = 0x882E;
const Size GL_DOUBLE_MAT2x4 = 0x8F4A;
const Size GL_ARB_map_buffer_alignment = 1;
const Size GL_EXT_texture_shared_exponent = 1;
const Size GL_PACK_SKIP_ROWS = 0x0D03;
const Size GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
const Size GL_MAX_TEXTURE_UNITS = 0x84E2;
const Size GL_SLUMINANCE8 = 0x8C47;
const Size GL_LOGIC_OP = 0x0BF1;
const Size GL_DRAW_BUFFER6_ARB = 0x882B;
const Size GL_MAP1_COLOR_4 = 0x0D90;
const Size GL_GEOMETRY_SHADER = 0x8DD9;
const Size GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
const Size GL_LUMINANCE8_EXT = 0x8040;
const Size GL_SYNC_CL_EVENT_ARB = 0x8240;
const Size GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
const Size GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
const Size GL_BLEND_COLOR = 0x8005;
const Size GL_ALPHA_BITS = 0x0D55;
const Size GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
const Size GL_LINE_STIPPLE = 0x0B24;
const Size GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
const Size GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
const Size GL_NEAREST_MIPMAP_LINEAR = 0x2702;
const Size GL_MULTISAMPLE_BIT_EXT = 0x20000000;
const Size GL_MODELVIEW14_ARB = 0x872E;
const Size GL_FRACTIONAL_EVEN = 0x8E7C;
const Size GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
const Size GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
const Size GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
const Size GL_TEXTURE3_ARB = 0x84C3;
const Size GL_ZERO_EXT = 0x87DD;
const Size GL_ALLOW_DRAW_MEM_HINT_PGI = 107025;
const Size GL_HISTOGRAM_WIDTH_EXT = 0x8026;
const Size GL_SOURCE0_RGB_ARB = 0x8580;
const Size GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008;
const Size GL_MODELVIEW10_ARB = 0x872A;
const Size GL_EXT_geometry_shader4 = 1;
const Size GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
const Size GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
const Size GL_SAMPLES_PASSED = 0x8914;
const Size GL_ARB_texture_cube_map_array = 1;
const Size GL_RENDERBUFFER_RED_SIZE = 0x8D50;
const Size GL_CG_VERTEX_SHADER_EXT = 0x890E;
const Size GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
const Size GL_ARB_fragment_program_shadow = 1;
const Size GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
const Size GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
const Size GL_IMAGE_3D = 0x904E;
const Size GL_CONVOLUTION_FORMAT = 0x8017;
const Size GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
const Size GL_FRAGMENT_DEPTH_EXT = 0x8452;
const Size GL_TEXTURE_HEIGHT = 0x1001;
const Size GL_DOUBLE_MAT2x3 = 0x8F49;
const Size GL_DEPTH_COMPONENT16_ARB = 0x81A5;
const Size GL_CULL_VERTEX_EXT = 0x81AA;
const Size GL_RGBA16I = 0x8D88;
const Size GL_RGBA16F = 0x881A;
const Size GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
const Size GL_SAMPLER_1D = 0x8B5D;
const Size GL_CLAMP_TO_EDGE_EXT = 0x812F;
const Size GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
const Size GL_ARB_vertex_shader = 1;
const Size GL_RGBA_FLOAT_MODE_ARB = 0x8820;
const Size GL_INCR_WRAP_EXT = 0x8507;
const Size GL_RED = 0x1903;
const Size GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
const Size GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
const Size GL_DEPTH_STENCIL_EXT = 0x84F9;
const Size GL_POLYGON_OFFSET_LINE = 0x2A02;
const Size GL_FUNC_REVERSE_SUBTRACT = 0x800B;
const Size GL_NO_RESET_NOTIFICATION_ARB = 0x8261;
const Size GL_NEGATIVE_Y_EXT = 0x87DA;
const Size GL_COLOR_TABLE_ALPHA_SIZE_EXT = 0x80DD;
const Size GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
const Size GL_GREEN = 0x1904;
const Size GL_OP_MADD_EXT = 0x8788;
const Size GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
const Size GL_RGB4_S3TC = 0x83A1;
const Size GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
const Size GL_OPERAND1_ALPHA_EXT = 0x8599;
const Size GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
const Size GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
const Size GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
const Size GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
const Size GL_VERTEX_DATA_HINT_PGI = 107050;
const Size GL_4_BYTES = 0x1409;
const Size GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
const Size GL_ARB_texture_storage = 1;
const Size GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
const Size GL_CONVOLUTION_WIDTH = 0x8018;
const Size GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1;
const Size GL_DEBUG_SEVERITY_LOW = 0x9148;
const Size GL_MATRIX29_ARB = 0x88DD;
const Size GL_ARB_fragment_layer_viewport = 1;
const Size GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
const Size GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
const Size GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
const Size GL_TEXTURE_BINDING_RECTANGLE_EXT = 0x84F6;
const Size GL_IMAGE_BINDING_FORMAT = 0x906E;
const Size GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
const Size GL_TEXTURE_ENV_MODE = 0x2200;
const Size GL_ARB_base_instance = 1;
const Size GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
const Size GL_DST_COLOR = 0x0306;
const Size GL_MAX_SAMPLES_EXT = 0x8D57;
const Size GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
const Size GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
const Size GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
const Size GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
const Size GL_V3F = 0x2A21;
const Size GL_DOUBLE_MAT3_EXT = 0x8F47;
const Size GL_S3_s3tc = 1;
const Size GL_DOT3_RGB = 0x86AE;
const Size GL_REFLECTION_MAP_EXT = 0x8512;
const Size GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
const Size GL_LUMINANCE16 = 0x8042;
const Size GL_VERTEX4_BIT_PGI = 0x00000008;
const Size GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
const Size GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
const Size GL_LUMINANCE12 = 0x8041;
const Size GL_RG16_SNORM = 0x8F99;
const Size GL_EXT_index_material = 1;
const Size GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
const Size GL_CURRENT_RASTER_COLOR = 0x0B04;
const Size GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
const Size GL_QUERY_COUNTER_BITS = 0x8864;
const Size GL_MODULATE = 0x2100;
const Size GL_RG_INTEGER = 0x8228;
const Size GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
const Size GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
const Size GL_SOURCE0_ALPHA_EXT = 0x8588;
const Size GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
const Size GL_RENDERBUFFER_HEIGHT = 0x8D43;
const Size GL_DISTANCE_ATTENUATION_EXT = 0x8129;
const Size GL_INTERLEAVED_ATTRIBS = 0x8C8C;
const Size GL_TEXTURE_ALPHA_TYPE = 0x8C13;
const Size GL_EXT_texture_mirror_clamp = 1;
const Size GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
const Size GL_BLUE = 0x1905;
const Size GL_RGBA4_EXT = 0x8056;
const Size GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
const Size GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
const Size GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
const Size GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
const Size GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
const Size GL_TEXTURE_BLUE_TYPE = 0x8C12;
const Size GL_C4F_N3F_V3F = 0x2A26;
const Size GL_CURRENT_BINORMAL_EXT = 0x843C;
const Size GL_T4F_V4F = 0x2A28;
const Size GL_STREAM_COPY = 0x88E2;
const Size GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
const Size GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
const Size GL_SOURCE0_RGB = 0x8580;
const Size GL_BUFFER_DATA_SIZE = 0x9303;
const Size GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
const Size GL_EYE_PLANE = 0x2502;
const Size GL_SAMPLER_2D_RECT_ARB = 0x8B63;
const Size GL_MATRIX18_ARB = 0x88D2;
const Size GL_SAMPLER_BUFFER_EXT = 0x8DC2;
const Size GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
const Size GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
const Size GL_POINT_SMOOTH_HINT = 0x0C51;
const Size GL_EXT_histogram = 1;
const Size GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054;
const Size GL_RGB8UI_EXT = 0x8D7D;
const Size GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
const Size GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F;
const Size GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
const Size GL_ORDER = 0x0A01;
const Size GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
const Size GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
const Size GL_REFLECTION_MAP_ARB = 0x8512;
const Size GL_SHADER_IMAGE_ATOMIC = 0x82A6;
const Size GL_VERTEX23_BIT_PGI = 0x00000004;
const Size GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
const Size GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
const Size GL_LAYER_PROVOKING_VERTEX = 0x825E;
const Size GL_TEXTURE11_ARB = 0x84CB;
const Size GL_FASTEST = 0x1101;
const Size GL_EXT_vertex_shader = 1;
const Size GL_LUMINANCE8 = 0x8040;
const Size GL_LUMINANCE4 = 0x803F;
const Size GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
const Size GL_EXT_texture_env = 1;
const Size GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
const Size GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
const Size GL_INDEX_BIT_PGI = 0x00080000;
const Size GL_ARB_transpose_matrix = 1;
const Size GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
const Size GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
const Size GL_DEBUG_SOURCE_API_ARB = 0x8246;
const Size GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
const Size GL_POLYGON_BIT = 0x00000008;
const Size GL_EXT_fog_coord = 1;
const Size GL_IMAGE_BINDING_LAYERED = 0x8F3C;
const Size GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
const Size GL_INDEX_BITS = 0x0D51;
const Size GL_INTENSITY8_EXT = 0x804B;
const Size GL_SAMPLER_CUBE_ARB = 0x8B60;
const Size GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
const Size GL_CURRENT_NORMAL = 0x0B02;
const Size GL_PROGRAM_OBJECT_ARB = 0x8B40;
const Size GL_ARB_multi_draw_indirect = 1;
const Size GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
const Size GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
const Size GL_NATIVE_GRAPHICS_END_HINT_PGI = 107012;
const Size GL_TEXTURE5_ARB = 0x84C5;
const Size GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
const Size GL_TEXTURE_WIDTH = 0x1000;
const Size GL_UNIFORM_SIZE = 0x8A38;
const Size GL_READ_ONLY_ARB = 0x88B8;
const Size GL_POINT_SPRITE = 0x8861;
const Size GL_FLOAT_MAT4x2 = 0x8B69;
const Size GL_SHADER_SOURCE_LENGTH = 0x8B88;
const Size GL_DOT3_RGBA = 0x86AF;
const Size GL_DRAW_BUFFER4_ARB = 0x8829;
const Size GL_ARB_vertex_array_object = 1;
const Size GL_TEXTURE2_ARB = 0x84C2;
const Size GL_COMPRESSED_RG = 0x8226;
const Size GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
const Size GL_TEXTURE_NORMAL_EXT = 0x85AF;
const Size GL_POLYGON_OFFSET_UNITS = 0x2A00;
const Size GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
const Size GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
const Size GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
const Size GL_OUT_OF_MEMORY = 0x0505;
const Size GL_EXT_texture_env_add = 1;
const Size GL_TEXTURE30_ARB = 0x84DE;
const Size GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
const Size GL_NORMAL_ARRAY_STRIDE = 0x807F;
const Size GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
const Size GL_ARB_transform_feedback_instanced = 1;
const Size GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
const Size GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
const Size GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
const Size GL_RASTERIZER_DISCARD = 0x8C89;
const Size GL_TEXTURE_RESIDENT_EXT = 0x8067;
const Size GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
const Size GL_COLOR_INDEX1_EXT = 0x80E2;
const Size GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
const Size GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
const Size GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
const Size GL_MODELVIEW12_ARB = 0x872C;
const Size GL_LINES_ADJACENCY_EXT = 0xA;
const Size GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
const Size GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
const Size GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
const Size GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83;
const Size GL_EDGE_FLAG_ARRAY = 0x8079;
const Size GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
const Size GL_RETURN = 0x0102;
const Size GL_STENCIL_TEST = 0x0B90;
const Size GL_ALPHA32UI_EXT = 0x8D72;
const Size GL_COLOR_COMPONENTS = 0x8283;
const Size GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
const Size GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
const Size GL_R11F_G11F_B10F = 0x8C3A;
const Size GL_W_EXT = 0x87D8;
const Size GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
const Size GL_INVERT = 0x150A;
const Size GL_PROXY_TEXTURE_1D = 0x8063;
const Size GL_UNIFORM_BUFFER_EXT = 0x8DEE;
const Size GL_DEPTH_COMPONENT32F = 0x8CAC;
const Size GL_DRAW_BUFFER11_ARB = 0x8830;
const Size GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
const Size GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
const Size GL_TABLE_TOO_LARGE = 0x8031;
const Size GL_NORMAL_BIT_PGI = 0x08000000;
const Size GL_FILTER = 0x829A;
const Size GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
const Size GL_FRAGMENT_LIGHT0_EXT = 0x840C;
const Size GL_MATRIX30_ARB = 0x88DE;
const Size GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
const Size GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
const Size GL_BUFFER_ACCESS_FLAGS = 0x911F;
const Size GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
const Size GL_PREVIOUS_EXT = 0x8578;
const Size GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
const Size GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
const Size GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
const Size GL_RED_BITS = 0x0D52;
const Size GL_OFFSET = 0x92FC;
const Size GL_TEXTURE17_ARB = 0x84D1;
const Size GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
const Size GL_ARB_shading_language_420pack = 1;
const Size GL_MIPMAP = 0x8293;
const Size GL_TEXTURE_BUFFER_FORMAT = 0x8C2E;
const Size GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
const Size GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
const Size GL_MAX_SUBROUTINES = 0x8DE7;
const Size GL_CMYKA_EXT = 0x800D;
const Size GL_ARB_multisample = 1;
const Size GL_REGAL_extension_query = 1;
const Size GL_ARB_sample_shading = 1;
const Size GL_DOT3_RGBA_EXT = 0x8741;
const Size GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
const Size GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
const Size GL_VARIANT_DATATYPE_EXT = 0x87E5;
const Size GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
const Size GL_GEOMETRY_SHADER_ARB = 0x8DD9;
const Size GL_SHADER_OBJECT_ARB = 0x8B48;
const Size GL_422_REV_EXT = 0x80CD;
const Size GL_ARB_half_float_pixel = 1;
const Size GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
const Size GL_RGB16I = 0x8D89;
const Size GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
const Size GL_ARB_blend_func_extended = 1;
const Size GL_RGB16F = 0x881B;
const Size GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065;
const Size GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
const Size GL_UNSIGNED_INT = 0x1405;
const Size GL_FOG_BIT = 0x00000080;
const Size GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
const Size GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
const Size GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
const Size GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
const Size GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
const Size GL_ALL_ATTRIB_BITS = 0x000fffff;
const Size GL_MATRIX8_ARB = 0x88C8;
const Size GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
const Size GL_CONDITION_SATISFIED = 0x911C;
const Size GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x0001;
const Size GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
const Size GL_SAMPLES_ARB = 0x80A9;
const Size GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
const Size GL_BGR_INTEGER_EXT = 0x8D9A;
const Size GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
const Size GL_CLIP_NEAR_HINT_PGI = 107040;
const Size GL_INTERLACE_READ_OML = 0x8981;
const Size GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
const Size GL_RGB565 = 0x8D62;
const Size GL_TEXTURE_1D_ARRAY = 0x8C18;
const Size GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
const Size GL_EXT_point_parameters = 1;
const Size GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
const Size GL_VERTEX_SHADER_ARB = 0x8B31;
const Size GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
const Size GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
const Size GL_COORD_REPLACE = 0x8862;
const Size GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
const Size GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
const Size GL_VERTEX_CONSISTENT_HINT_PGI = 107051;
const Size GL_ARB_sampler_objects = 1;
const Size GL_RGBA2 = 0x8055;
const Size GL_RGBA4 = 0x8056;
const Size GL_MULTISAMPLE_BIT = 0x20000000;
const Size GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
const Size GL_ARB_occlusion_query = 1;
const Size GL_RGBA8 = 0x8058;
const Size GL_INFO_LOG_LENGTH = 0x8B84;
const Size GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
const Size GL_SHADER_STORAGE_BUFFER = 0x90D2;
const Size GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
const Size GL_ARB_shader_subroutine = 1;
const Size GL_EXT_framebuffer_sRGB = 1;
const Size GL_ARB_texture_storage_multisample = 1;
const Size GL_COMBINE_RGB_ARB = 0x8571;
const Size GL_SRGB8 = 0x8C41;
const Size GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
const Size GL_SRGB_ALPHA_EXT = 0x8C42;
const Size GL_INT_IMAGE_2D_ARRAY = 0x905E;
const Size GL_RESCALE_NORMAL = 0x803A;
const Size GL_READ_PIXELS_FORMAT = 0x828D;
const Size GL_ALWAYS_SOFT_HINT_PGI = 107021;
const Size GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
const Size GL_POINT_SIZE_GRANULARITY = 0x0B13;
const Size GL_LOCAL_CONSTANT_EXT = 0x87C3;
const Size GL_STATIC_READ = 0x88E5;
const Size GL_VERSION_2_0 = 1;
const Size GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
const Size GL_GEOMETRY_SHADER_BIT = 0x00000004;
const Size GL_PGI_vertex_hints = 1;
const Size GL_MAP_READ_BIT = 0x0001;
const Size GL_SPOT_DIRECTION = 0x1204;
const Size GL_COMPUTE_SHADER_BIT = 0x00000020;
const Size GL_ACTIVE_ATTRIBUTES = 0x8B89;
const Size GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
const Size GL_STRICT_LIGHTING_HINT_PGI = 107031;
const Size GL_LINE_BIT = 0x00000004;
const Size GL_TEXTURE20_ARB = 0x84D4;
const Size GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
const Size GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
const Size GL_T2F_N3F_V3F = 0x2A2B;
const Size GL_TRANSFORM_BIT = 0x00001000;
const Size GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
const Size GL_INTENSITY16I_EXT = 0x8D8B;
const Size GL_MODELVIEW9_ARB = 0x8729;
const Size GL_EXT_framebuffer_multisample_blit_scaled = 1;
const Size GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
const Size GL_STENCIL_INDEX1 = 0x8D46;
const Size GL_EXT_gpu_shader4 = 1;
const Size GL_3D_COLOR = 0x0602;
const Size GL_TEXTURE_GEN_T = 0x0C61;
const Size GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
const Size GL_TEXTURE_GEN_R = 0x0C62;
const Size GL_TEXTURE_GEN_Q = 0x0C63;
const Size GL_SAMPLE_SHADING_ARB = 0x8C36;
const Size GL_SHADER_TYPE = 0x8B4F;
const Size GL_ALPHA12 = 0x803D;
const Size GL_ALPHA16 = 0x803E;
const Size GL_POLYGON_SMOOTH = 0x0B41;
const Size GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
const Size GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
const Size GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
const Size GL_TEXTURE_DEPTH_EXT = 0x8071;
const Size GL_POINT_SIZE_MIN = 0x8126;
const Size GL_ARB_robustness_share_group_isolation = 1;
const Size GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
const Size GL_RGBA12 = 0x805A;
const Size GL_GENERATE_MIPMAP_HINT = 0x8192;
const Size GL_ARB_texture_buffer_object_rgb32 = 1;
const Size GL_RGBA16 = 0x805B;
const Size GL_MAP1_NORMAL = 0x0D92;
const Size GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
const Size GL_COLOR_ARRAY_TYPE = 0x8082;
const Size GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
const Size GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
const Size GL_LUMINANCE32I_EXT = 0x8D86;
const Size GL_RGB5_A1 = 0x8057;
const Size GL_DEPTH_ATTACHMENT = 0x8D00;
const Size GL_TEXTURE_ALPHA_SIZE = 0x805F;
const Size GL_SOURCE1_ALPHA_EXT = 0x8589;
const Size GL_OPERAND1_RGB_EXT = 0x8591;
const Size GL_FOG_HINT = 0x0C54;
const Size GL_MATRIX_STRIDE = 0x92FF;
const Size GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
const Size GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
const Size GL_FLOAT_MAT2_ARB = 0x8B5A;
const Size GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
const Size GL_LINEAR_MIPMAP_NEAREST = 0x2701;
const Size GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
const Size GL_RGB10_A2 = 0x8059;
const Size GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
const Size GL_EXT_copy_texture = 1;
const Size GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
const Size GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
const Size GL_ARB_vertex_array_bgra = 1;
const Size GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
const Size GL_RESAMPLE_REPLICATE_OML = 0x8986;
const Size GL_VERTEX_BINDING_DIVISOR = 0x82D6;
const Size GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
const Size GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
const Size GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
const Size GL_OML_resample = 1;
const Size GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
const Size GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
const Size GL_UNSIGNED_NORMALIZED = 0x8C17;
const Size GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
const Size GL_CLAMP_VERTEX_COLOR = 0x891A;
const Size GL_DOUBLE_VEC2 = 0x8FFC;
const Size GL_INVARIANT_DATATYPE_EXT = 0x87EB;
const Size GL_MAP2_INDEX = 0x0DB1;
const Size GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
const Size GL_MODELVIEW25_ARB = 0x8739;
const Size GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D;
const Size GL_NOTEQUAL = 0x0205;
const Size GL_TEXTURE_COORD_ARRAY = 0x8078;
const Size GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
const Size GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
const Size GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
const Size GL_COMPRESSED_ALPHA_ARB = 0x84E9;
const Size GL_MAP2_GRID_DOMAIN = 0x0DD2;
const Size GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
const Size GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
const Size GL_TEXTURE_RED_SIZE = 0x805C;
const Size GL_ARB_draw_instanced = 1;
const Size GL_STENCIL_COMPONENTS = 0x8285;
const Size GL_OBJECT_LINEAR = 0x2401;
const Size GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
const Size GL_FRAMEBUFFER_RENDERABLE = 0x8289;
const Size GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
const Size GL_CURRENT_QUERY_ARB = 0x8865;
const Size GL_TEXTURE14 = 0x84CE;
const Size GL_RGBA12_EXT = 0x805A;
const Size GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
const Size GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
const Size GL_OPERAND2_ALPHA_EXT = 0x859A;
const Size GL_IMAGE_TEXEL_SIZE = 0x82A7;
const Size GL_CONVOLUTION_BORDER_COLOR = 0x8154;
const Size GL_FRAGMENT_SHADER_ARB = 0x8B30;
const Size GL_EXT_cmyka = 1;
const Size GL_TEXTURE_SHARED_SIZE = 0x8C3F;
const Size GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
const Size GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
const Size GL_ARB_seamless_cube_map = 1;
const Size GL_LUMINANCE8_ALPHA8 = 0x8045;
const Size GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
const Size GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
const Size GL_SLUMINANCE_ALPHA = 0x8C44;
const Size GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
const Size GL_DOUBLE_VEC4_EXT = 0x8FFE;
const Size GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
const Size GL_SPOT_EXPONENT = 0x1205;
const Size GL_SHORT = 0x1402;
const Size GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
const Size GL_CW = 0x0900;
const Size GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
const Size GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
const Size GL_IMAGE_1D = 0x904C;
const Size GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
const Size GL_VERTEX_ARRAY_EXT = 0x8074;
const Size GL_DEPTH_TEXTURE_MODE = 0x884B;
const Size GL_ARB_shader_objects = 1;
const Size GL_TEXTURE_ENV0_EXT = 0;
const Size GL_ACTIVE_VARIABLES = 0x9305;
const Size GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
const Size GL_LUMINANCE16_SNORM = 0x9019;
const Size GL_KTX_STENCIL_REGION = 0x3;
const Size GL_STATIC_DRAW = 0x88E4;
const Size GL_ARB_sync = 1;
const Size GL_RENDERBUFFER = 0x8D41;
const Size GL_INT_IMAGE_2D_EXT = 0x9058;
const Size GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
const Size GL_INTENSITY16_EXT = 0x804D;
const Size GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
const Size GL_SOURCE0_ALPHA_ARB = 0x8588;
const Size GL_SAMPLER_3D = 0x8B5F;
const Size GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
const Size GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
const Size GL_OR_INVERTED = 0x150D;
const Size GL_TEXTURE_GREEN_SIZE = 0x805D;
const Size GL_COLOR_TABLE_INTENSITY_SIZE_EXT = 0x80DF;
const Size GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
const Size GL_BUFFER_USAGE_ARB = 0x8765;
const Size GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
const Size GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
const Size GL_FULL_STIPPLE_HINT_PGI = 107033;
const Size GL_FRAGMENT_SUBROUTINE = 0x92EC;
const Size GL_INTENSITY4 = 0x804A;
const Size GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
const Size GL_INTENSITY8 = 0x804B;
const Size GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
const Size GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
const Size GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
const Size GL_TEXTURE_SHADOW = 0x82A1;
const Size GL_COLOR_SUM_ARB = 0x8458;
const Size GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
const Size GL_SAMPLE_COVERAGE_ARB = 0x80A0;
const Size GL_DECAL = 0x2101;
const Size GL_2PASS_1_EXT = 0x80A3;
const Size GL_2D = 0x0600;
const Size GL_SELECTION_BUFFER_POINTER = 0x0DF3;
const Size GL_INT_IMAGE_BUFFER_EXT = 0x905C;
const Size GL_COLOR_TABLE_RED_SIZE_EXT = 0x80DA;
const Size GL_IMAGE_2D_RECT = 0x904F;
const Size GL_SAMPLER = 0x82E6;
const Size GL_SAMPLES = 0x80A9;
const Size GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
const Size GL_ARB_vertex_attrib_binding = 1;
const Size GL_MAX_FRAGMENT_LIGHTS_EXT = 0x8404;
const Size GL_UNSIGNED_INT_VEC2 = 0x8DC6;
const Size GL_UNSIGNED_INT_VEC3 = 0x8DC7;
const Size GL_UNSIGNED_INT_VEC4 = 0x8DC8;
const Size GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
const Size GL_RGBA16UI_EXT = 0x8D76;
const Size GL_MATRIX21_ARB = 0x88D5;
const Size GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
const Size GL_LUMINANCE_INTEGER_EXT = 0x8D9C;
const Size GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
const Size GL_RGBA_MODE = 0x0C31;
const Size GL_TEXTURE_BUFFER_OFFSET = 0x919D;
const Size GL_ARB_vertex_blend = 1;
const Size GL_NEGATIVE_Z_EXT = 0x87DB;
const Size GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
const Size GL_4PASS_0_EXT = 0x80A4;
const Size GL_DEPTH_RENDERABLE = 0x8287;
const Size GL_RGB32UI = 0x8D71;
const Size GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
const Size GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
const Size GL_TEXTURE4_ARB = 0x84C4;
const Size GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
const Size GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
const Size GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
const Size GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
const Size GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
const Size GL_COMPRESSED_R11_EAC = 0x9270;
const Size GL_ARB_shading_language_packing = 1;
const Size GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
const Size GL_EXT_texture_cube_map = 1;
const Size GL_CONSTANT_COLOR = 0x8001;
const Size GL_RG8UI = 0x8238;
const Size GL_TEXTURE8 = 0x84C8;
const Size GL_TEXTURE9 = 0x84C9;
const Size GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
const Size GL_TEXTURE4 = 0x84C4;
const Size GL_TEXTURE5 = 0x84C5;
const Size GL_TEXTURE6 = 0x84C6;
const Size GL_TEXTURE7 = 0x84C7;
const Size GL_TEXTURE0 = 0x84C0;
const Size GL_LINEAR_MIPMAP_LINEAR = 0x2703;
const Size GL_TEXTURE2 = 0x84C2;
const Size GL_TEXTURE3 = 0x84C3;
const Size GL_FLOAT_VEC2_ARB = 0x8B50;
const Size GL_BOOL_VEC4 = 0x8B59;
const Size GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
const Size GL_ARB_texture_query_levels = 1;
const Size GL_BOOL_VEC3 = 0x8B58;
const Size GL_BOOL_VEC2 = 0x8B57;
const Size GL_PREFER_DOUBLEBUFFER_HINT_PGI = 107000;
const Size GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
const Size GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
const Size GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
const Size GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055;
const Size GL_MAX_VARYING_VECTORS = 0x8DFC;
const Size GL_EXT_multi_draw_arrays = 1;
const Size GL_ONE = 1;
const Size GL_EXT_misc_attribute = 1;
const Size GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
const Size GL_SRGB8_ALPHA8_EXT = 0x8C43;
const Size GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
const Size GL_VECTOR_EXT = 0x87BF;
const Size GL_UNPACK_IMAGE_HEIGHT = 0x806E;
const Size GL_OUTPUT_VERTEX_EXT = 0x879A;
const Size GL_TRIANGLE_STRIP = 0x0005;
const Size GL_N3F_V3F = 0x2A25;
const Size GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
const Size GL_FRONT_LEFT = 0x0400;
const Size GL_CLAMP = 0x2900;
const Size GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
const Size GL_NUM_SAMPLE_COUNTS = 0x9380;
const Size GL_RESCALE_NORMAL_EXT = 0x803A;
const Size GL_INDEX_OFFSET = 0x0D13;
const Size GL_INTENSITY = 0x8049;
const Size GL_EXT_convolution = 1;
const Size GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
const Size GL_FRAGMENT_TEXTURE = 0x829F;
const Size GL_VERTEX_ARRAY_BINDING = 0x85B5;
const Size GL_ARB_robustness_application_isolation = 1;
const Size GL_TIMEOUT_EXPIRED = 0x911B;
const Size GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
const Size GL_COMPRESSED_RGB8_ETC2 = 0x9274;
const Size GL_CLIP_FAR_HINT_PGI = 107041;
const Size GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
const Size GL_STENCIL_FUNC = 0x0B92;
const Size GL_TEXTURE_ENV = 0x2300;
const Size GL_MAX_LAYERS = 0x8281;
const Size GL_DRAW_BUFFER8_ARB = 0x882D;
const Size GL_DECR = 0x1E03;
const Size GL_BACK = 0x0405;
const Size GL_VIEWPORT_BIT = 0x00000800;
const Size GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
const Size GL_VERTEX_BLEND_ARB = 0x86A7;
const Size GL_INT = 0x1404;
const Size GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
const Size GL_ENV_MODULATE_EXT = 0;
const Size GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
const Size GL_MINOR_VERSION = 0x821C;
const Size GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
const Size GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
const Size GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
const Size GL_FRONT_AND_BACK = 0x0408;
const Size GL_MAX_COMBINED_DIMENSIONS = 0x8282;
const Size GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
const Size GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
const Size GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
const Size GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
const Size GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
const Size GL_SYNC_FENCE = 0x9116;
const Size GL_MODELVIEW0_EXT = 0x1700;
const Size GL_EXT_shared_texture_palette = 1;
const Size GL_RG8 = 0x822B;
const Size GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
const Size GL_RGB8_SNORM = 0x8F96;
const Size GL_FOG_END = 0x0B64;
const Size GL_UNPACK_SKIP_PIXELS = 0x0CF4;
const Size GL_SRGB_WRITE = 0x8298;
const Size GL_ARB_texture_rg = 1;
const Size GL_DOUBLE_VEC4 = 0x8FFE;
const Size GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
const Size GL_DEPTH_COMPONENT32_ARB = 0x81A7;
const Size GL_DOUBLE_VEC3 = 0x8FFD;
const Size GL_ARB_fragment_shader = 1;
const Size GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
const Size GL_NO_ERROR = 0;
const Size GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
const Size GL_CURRENT_SECONDARY_COLOR = 0x8459;
const Size GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
const Size GL_ARB_framebuffer_object = 1;
const Size GL_RGBA16UI = 0x8D76;
const Size GL_ARB_texture_non_power_of_two = 1;
const Size GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
const Size GL_INTENSITY12_EXT = 0x804C;
const Size GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
const Size GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
const Size GL_EXT_secondary_color = 1;
const Size GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
const Size GL_ARB_robust_buffer_access_behavior = 1;
const Size GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
const Size GL_MAX_DRAW_BUFFERS = 0x8824;
const Size GL_MODELVIEW21_ARB = 0x8735;
const Size GL_DELETE_STATUS = 0x8B80;
const Size GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
const Size GL_R32UI = 0x8236;
const Size GL_SECONDARY_COLOR_ARRAY = 0x845E;
const Size GL_RGBA8_EXT = 0x8058;
const Size GL_CURRENT_INDEX = 0x0B01;
const Size GL_ARB_texture_rectangle = 1;
const Size GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
const Size GL_ENV_SUBTRACT_EXT = 0;
const Size GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
const Size GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
const Size GL_IS_PER_PATCH = 0x92E7;
const Size GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
const Size GL_MAJOR_VERSION = 0x821B;
const Size GL_REFLECTION_MAP = 0x8512;
const Size GL_ARB_shader_atomic_counters = 1;
const Size GL_LUMINANCE32UI_EXT = 0x8D74;
const Size GL_BGR_INTEGER = 0x8D9A;
const Size GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
const Size GL_PROXY_TEXTURE_3D = 0x8070;
const Size GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF;
const Size GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
const Size GL_UNIFORM_BUFFER_BINDING = 0x8A28;
const Size GL_UNIFORM_TYPE = 0x8A37;
const Size GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
const Size GL_EXT_pixel_transform_color_table = 1;
const Size GL_DEBUG_TYPE_ERROR = 0x824C;
const Size GL_COMMAND_BARRIER_BIT_EXT = 0x00000040;
const Size GL_POINT_BIT = 0x00000002;
const Size GL_LUMINANCE8_ALPHA8_SNORM = 0x9016;
const Size GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
const Size GL_EXT_gpu_program_parameters = 1;
const Size GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
const Size GL_COMMAND_BARRIER_BIT = 0x00000040;
const Size GL_3D = 0x0601;
const Size GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
const Size GL_MODELVIEW4_ARB = 0x8724;
const Size GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
const Size GL_DEPTH_TEST = 0x0B71;
const Size GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
const Size GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
const Size GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C;
const Size GL_MULTISAMPLE = 0x809D;
const Size GL_COLOR_TABLE_WIDTH = 0x80D9;
const Size GL_TEXTURE_RED_TYPE = 0x8C10;
const Size GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
const Size GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
const Size GL_CONSTANT_ALPHA_EXT = 0x8003;
const Size GL_FUNC_SUBTRACT = 0x800A;
const Size GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
const Size GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
const Size GL_SAMPLER_BUFFER = 0x8DC2;
const Size GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
const Size GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
const Size GL_BUFFER_ACCESS_ARB = 0x88BB;
const Size GL_CLAMP_TO_BORDER = 0x812D;
const Size GL_COLOR_ATTACHMENT15 = 0x8CEF;
const Size GL_COLOR_ATTACHMENT14 = 0x8CEE;
const Size GL_DEPTH_RANGE = 0x0B70;
const Size GL_COLOR_ATTACHMENT11 = 0x8CEB;
const Size GL_CLAMP_TO_EDGE = 0x812F;
const Size GL_COLOR_ATTACHMENT13 = 0x8CED;
const Size GL_COLOR_ATTACHMENT12 = 0x8CEC;
const Size GL_NEAREST = 0x2600;
const Size GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
const Size GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
const Size GL_UNIFORM_BLOCK = 0x92E2;
const Size GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
const Size GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
const Size GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
const Size GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
const Size GL_FRONT_RIGHT = 0x0401;
const Size GL_INTERNALFORMAT_PREFERRED = 0x8270;
const Size GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
const Size GL_RENDERBUFFER_EXT = 0x8D41;
const Size GL_ARB_texture_buffer_range = 1;
const Size GL_POINT_SMOOTH = 0x0B10;
const Size GL_DEPTH_CLEAR_VALUE = 0x0B73;
const Size GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
const Size GL_GEOMETRY_INPUT_TYPE = 0x8917;
const Size GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
const Size GL_COMPUTE_SHADER = 0x91B9;
const Size GL_FRACTIONAL_ODD = 0x8E7B;
const Size GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
const Size GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
const Size GL_QUERY = 0x82E3;
const Size GL_CURRENT_BIT = 0x00000001;
const Size GL_RGBA32F_ARB = 0x8814;
const Size GL_BLEND_COLOR_EXT = 0x8005;
const Size GL_MIRRORED_REPEAT = 0x8370;
const Size GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
const Size GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
const Size GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
const Size GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
const Size GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
const Size GL_MAX_UNIFORM_LOCATIONS = 0x826E;
const Size GL_ONE_MINUS_DST_COLOR = 0x0307;
const Size GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
const Size GL_KTX_BACK_REGION = 0x1;
const Size GL_ACCUM_ALPHA_BITS = 0x0D5B;
const Size GL_TEXTURE19_ARB = 0x84D3;
const Size GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
const Size GL_COLOR_BUFFER_BIT = 0x00004000;
const Size GL_INTERNALFORMAT_SUPPORTED = 0x826F;
const Size GL_SPOT_CUTOFF = 0x1206;
const Size GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
const Size GL_SAMPLER_2D = 0x8B5E;
const Size GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
const Size GL_INVALID_VALUE = 0x0501;
const Size GL_COLOR_TABLE_FORMAT_EXT = 0x80D8;
const Size GL_NEAREST_MIPMAP_NEAREST = 0x2700;
const Size GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
const Size GL_SLUMINANCE8_EXT = 0x8C47;
const Size GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
const Size GL_REDUCE = 0x8016;
const Size GL_R8I = 0x8231;
const Size GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
const Size GL_REGAL_log = 1;
const Size GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
const Size GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
const Size GL_SINGLE_COLOR = 0x81F9;
const Size GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
const Size GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
const Size GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
const Size GL_FLOAT_VEC3_ARB = 0x8B51;
const Size GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
const Size GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
const Size GL_TYPE = 0x92FA;
const Size GL_TEXTURE_VIEW = 0x82B5;
const Size GL_RGBA8I_EXT = 0x8D8E;
const Size GL_MATRIX3_ARB = 0x88C3;
const Size GL_MAT_SHININESS_BIT_PGI = 0x02000000;
const Size GL_EXT_scene_marker = 1;
const Size GL_MODELVIEW29_ARB = 0x873D;
const Size GL_AND_INVERTED = 0x1504;
const Size GL_ACCUM_BLUE_BITS = 0x0D5A;
const Size GL_CULL_FACE = 0x0B44;
const Size GL_FRAMEBUFFER_SRGB = 0x8DB9;
const Size GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
const Size GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
const Size GL_VERTEX_ATTRIB_BINDING = 0x82D4;
const Size GL_EXT_timer_query = 1;
const Size GL_POLYGON_OFFSET_POINT = 0x2A01;
const Size GL_TEXTURE_GATHER = 0x82A2;
const Size GL_LUMINANCE12_EXT = 0x8041;
const Size GL_COMBINE_ALPHA = 0x8572;
const Size GL_RIGHT = 0x0407;
const Size GL_IMAGE_CLASS_4_X_8 = 0x82BF;
const Size GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
const Size GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
const Size GL_2PASS_0_EXT = 0x80A2;
const Size GL_ALPHA8UI_EXT = 0x8D7E;
const Size GL_DEPTH_COMPONENT16 = 0x81A5;
const Size GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
const Size GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
const Size GL_UNSIGNALED = 0x9118;
const Size GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
const Size GL_RGB32I = 0x8D83;
const Size GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
const Size GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
const Size GL_MATRIX13_ARB = 0x88CD;
const Size GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
const Size GL_BGRA_INTEGER = 0x8D9B;
const Size GL_ALPHA12_EXT = 0x803D;
const Size GL_RGB32F = 0x8815;
const Size GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
const Size GL_MODELVIEW1_ARB = 0x850A;
const Size GL_ONE_MINUS_SRC_ALPHA = 0x0303;
const Size GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
const Size GL_PROGRAM_BINDING_ARB = 0x8677;
const Size GL_SOURCE2_RGB_EXT = 0x8582;
const Size GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
const Size GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
const Size GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
const Size GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS = 0x8F9F;
const Size GL_EXT_texture_swizzle = 1;
const Size GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
const Size GL_MAP2_GRID_SEGMENTS = 0x0DD3;
const Size GL_PROGRAM_POINT_SIZE = 0x8642;
const Size GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
const Size GL_EXT_texture_perturb_normal = 1;
const Size GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
const Size GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6;
const Size GL_RGB4_EXT = 0x804F;
const Size GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
const Size GL_ARB_depth_clamp = 1;
const Size GL_ALPHA16_EXT = 0x803E;
const Size GL_MAX_ELEMENT_INDEX = 0x8D6B;
const Size GL_MAP1_GRID_SEGMENTS = 0x0DD1;
const Size GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
const Size GL_ATTRIB_STACK_DEPTH = 0x0BB0;
const Size GL_FLOAT_MAT4_ARB = 0x8B5C;
const Size GL_DOUBLE_VEC3_EXT = 0x8FFD;
const Size GL_PROGRAM_PIPELINE_BINDING = 0x825A;
const Size GL_MAP2_BINORMAL_EXT = 0x8447;
const Size GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
const Size GL_BLUE_BIAS = 0x0D1B;
const Size GL_NEGATIVE_ONE_EXT = 0x87DF;
const Size GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
const Size GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
const Size GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
const Size GL_FRAMEBUFFER_DEFAULT = 0x8218;
const Size GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
const Size GL_EXT_pixel_buffer_object = 1;
const Size GL_ARB_texture_env_dot3 = 1;
const Size GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
const Size GL_LINE_SMOOTH_HINT = 0x0C52;
const Size GL_COLOR_ATTACHMENT10 = 0x8CEA;
const Size GL_FRONT = 0x0404;
const Size GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
const Size GL_SELECT = 0x1C02;
const Size GL_AMBIENT = 0x1200;
const Size GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
const Size GL_ARB_shader_storage_buffer_object = 1;
const Size GL_EXT_blend_minmax = 1;
const Size GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
const Size GL_INTENSITY16F_ARB = 0x881D;
const Size GL_NUM_EXTENSIONS = 0x821D;
const Size GL_ALLOW_DRAW_OBJ_HINT_PGI = 107022;
const Size GL_FRAMEBUFFER_BINDING = 0x8CA6;
const Size GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
const Size GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
const Size GL_COLOR_RENDERABLE = 0x8286;
const Size GL_SET = 0x150F;
const Size GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
const Size GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
const Size GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
const Size GL_DEPTH_FUNC = 0x0B74;
const Size GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT = 0x8409;
const Size GL_INVALID_ENUM = 0x0500;
const Size GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
const Size GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
const Size GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
const Size GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
const Size GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066;
const Size GL_MATRIX5_ARB = 0x88C5;
const Size GL_LIGHT_MODEL_AMBIENT = 0x0B53;
const Size GL_DEPTH_COMPONENT = 0x1902;
const Size GL_TESS_EVALUATION_TEXTURE = 0x829D;
const Size GL_FOG_START = 0x0B63;
const Size GL_WAIT_FAILED = 0x911D;
const Size GL_DECR_WRAP_EXT = 0x8508;
const Size GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
const Size GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
const Size GL_PROJECTION_STACK_DEPTH = 0x0BA4;
const Size GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
const Size GL_TRUE = 1;
const Size GL_TEXTURE_MIN_FILTER = 0x2801;
const Size GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
const Size GL_STACK_UNDERFLOW = 0x0504;
const Size GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
const Size GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
const Size GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
const Size GL_AUX0 = 0x0409;
const Size GL_AUX3 = 0x040C;
const Size GL_AUX2 = 0x040B;
const Size GL_MAP1_TANGENT_EXT = 0x8444;
const Size GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
const Size GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
const Size GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
const Size GL_PRIMARY_COLOR_ARB = 0x8577;
const Size GL_ADD = 0x0104;
const Size GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
const Size GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
const Size GL_FLOAT_MAT4x3 = 0x8B6A;
const Size GL_OP_MIN_EXT = 0x878B;
const Size GL_ARB_timer_query = 1;
const Size GL_MIRRORED_REPEAT_ARB = 0x8370;
const Size GL_IMAGE_1D_ARRAY = 0x9052;
const Size GL_UNPACK_ALIGNMENT = 0x0CF5;
const Size GL_ARB_uniform_buffer_object = 1;
const Size GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
const Size GL_ARB_texture_swizzle = 1;
const Size GL_PROGRAM = 0x82E2;
const Size GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
const Size GL_EXT_stencil_wrap = 1;
const Size GL_RGB32F_ARB = 0x8815;
const Size GL_RG8_SNORM = 0x8F95;
const Size GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT = 0x840B;
const Size GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
const Size GL_MATRIX28_ARB = 0x88DC;
const Size GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
const Size GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002;
const Size GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
const Size GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
const Size GL_POLYGON_STIPPLE = 0x0B42;
const Size GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
const Size GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
const Size GL_MATERIAL_SIDE_HINT_PGI = 107052;
const Size GL_OP_DOT3_EXT = 0x8784;
const Size GL_PROGRAM_BINARY_FORMATS = 0x87FF;
const Size GL_LUMINANCE12_ALPHA12 = 0x8047;
const Size GL_LOW_INT = 0x8DF3;
const Size GL_LOCAL_EXT = 0x87C4;
const Size GL_LUMINANCE16UI_EXT = 0x8D7A;
const Size GL_ARRAY_STRIDE = 0x92FE;
const Size GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
const Size GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
const Size GL_KEEP = 0x1E00;
const Size GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
const Size GL_PROXY_TEXTURE_2D = 0x8064;
const Size GL_RESAMPLE_AVERAGE_OML = 0x8988;
const Size GL_ENV_BLEND_EXT = 0;
const Size GL_CONSTANT_ARB = 0x8576;
const Size GL_OPERAND2_RGB_EXT = 0x8592;
const Size GL_MATRIX_EXT = 0x87C0;
const Size GL_OR = 0x1507;
const Size GL_VERTEX_ARRAY_TYPE = 0x807B;
const Size GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
const Size GL_WRAP_BORDER = 0x8152;
const Size GL_MAP2_VERTEX_4 = 0x0DB8;
const Size GL_SAMPLER_1D_ARRAY = 0x8DC0;
const Size GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
const Size GL_EXT_vertex_array_bgra = 1;
const Size GL_ACTIVE_SUBROUTINES = 0x8DE5;
const Size GL_LINE_LOOP = 0x0002;
const Size GL_TEXTURE6_ARB = 0x84C6;
const Size GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
const Size GL_COLOR_TABLE_SCALE = 0x80D6;
const Size GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
const Size GL_COLOR_INDEX2_EXT = 0x80E3;
const Size GL_BACK_RIGHT = 0x0403;
const Size GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
const Size GL_INT_SAMPLER_CUBE_EXT = 0x8DCC;
const Size GL_EXT_blend_equation_separate = 1;
const Size GL_COLOR_ENCODING = 0x8296;
const Size GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
const Size GL_R3_G3_B2 = 0x2A10;
const Size GL_SLUMINANCE8_ALPHA8 = 0x8C45;
const Size GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
const Size GL_LUMINANCE4_ALPHA4 = 0x8043;
const Size GL_UNIFORM_OFFSET = 0x8A3B;
const Size GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
const Size GL_TEXTURE1 = 0x84C1;
const Size GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
const Size GL_OBJECT_PLANE = 0x2501;
const Size GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
const Size GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76;
const Size GL_HISTOGRAM_BLUE_SIZE = 0x802A;
const Size GL_SAMPLES_3DFX = 0x86B4;
const Size GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
const Size GL_COLOR_SUM = 0x8458;
const Size GL_IMAGE_2D_RECT_EXT = 0x904F;
const Size GL_COMBINE_ALPHA_ARB = 0x8572;
const Size GL_BUFFER_ACCESS = 0x88BB;
const Size GL_DOUBLE_MAT4x3_EXT = 0x8F4E;
const Size GL_LINES_ADJACENCY = 0x000A;
const Size GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
const Size GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
const Size GL_MVP_MATRIX_EXT = 0x87E3;
const Size GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
const Size GL_SHADER_COMPILER = 0x8DFA;
const Size GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
const Size GL_VERTEX_ARRAY_STRIDE = 0x807C;
const Size GL_REGAL_error_string = 1;
const Size GL_EXT_packed_depth_stencil = 1;
const Size GL_TEXTURE_BUFFER_ARB = 0x8C2A;
const Size GL_MATRIX27_ARB = 0x88DB;
const Size GL_UNPACK_CMYK_HINT_EXT = 0x800F;
const Size GL_422_AVERAGE_EXT = 0x80CE;
const Size GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
const Size GL_HISTOGRAM_RED_SIZE = 0x8028;
const Size GL_UNIFORM_BARRIER_BIT = 0x00000004;
const Size GL_ARB_shading_language_100 = 1;
const Size GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
const Size GL_STENCIL_BACK_FUNC = 0x8800;
const Size GL_POLYGON_SMOOTH_HINT = 0x0C53;
const Size GL_INDEX = 0x8222;
const Size GL_EXT_texture_array = 1;
const Size GL_MEDIUM_FLOAT = 0x8DF1;
const Size GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
const Size GL_SEPARABLE_2D = 0x8012;
const Size GL_INTERLACE_OML = 0x8980;
const Size GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
const Size GL_IMAGE_CLASS_1_X_8 = 0x82C1;
const Size GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
const Size GL_OBJECT_TYPE = 0x9112;
const Size GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
const Size GL_MATRIX0_ARB = 0x88C0;
const Size GL_EXT_blend_func_separate = 1;
const Size GL_DOMAIN = 0x0A02;
const Size GL_TEXTURE_PRIORITY_EXT = 0x8066;
const Size GL_MAT_EMISSION_BIT_PGI = 0x00800000;
const Size GL_EXT_compiled_vertex_array = 1;
const Size GL_MAX_LABEL_LENGTH = 0x82E8;
const Size GL_DEBUG_TYPE_PORTABILITY = 0x824F;
const Size GL_LUMINANCE_SNORM = 0x9011;
const Size GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
const Size GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
const Size GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
const Size GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
const Size GL_ARB_imaging = 1;
const Size GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80;
const Size GL_BOOL_ARB = 0x8B56;
const Size GL_MATRIX22_ARB = 0x88D6;
const Size GL_LUMINANCE8UI_EXT = 0x8D80;
const Size GL_PROGRAM_MATRIX_EXT = 0x8E2D;
const Size GL_TRIANGLES = 0x0004;
const Size GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
const Size GL_AUTO_GENERATE_MIPMAP = 0x8295;
const Size GL_IMAGE_BINDING_NAME_EXT = 0x8F3A;
const Size GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
const Size GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT = 0x8403;
const Size GL_CUBIC_EXT = 0x8334;
const Size GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
const Size GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
const Size GL_SLUMINANCE = 0x8C46;
const Size GL_SRGB8_ALPHA8 = 0x8C43;
const Size GL_ARB_clear_buffer_object = 1;
const Size GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
const Size GL_WRITE_ONLY_ARB = 0x88B9;
const Size GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
const Size GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
const Size GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
const Size GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
const Size GL_SAMPLER_2D_ARRAY = 0x8DC1;
const Size GL_RENDERER = 0x1F01;
const Size GL_MAX_VARYING_FLOATS = 0x8B4B;
const Size GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
const Size GL_PIXEL_MAP_B_TO_B = 0x0C78;
const Size GL_PROGRAM_PIPELINE = 0x82E4;
const Size GL_TEXTURE_BUFFER_EXT = 0x8C2A;
const Size GL_ARB_compute_shader = 1;
const Size GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
const Size GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
const Size GL_QUERY_COUNTER_BITS_ARB = 0x8864;
const Size GL_COLOR_TABLE_RED_SIZE = 0x80DA;
const Size GL_COLOR_LOGIC_OP = 0x0BF2;
const Size GL_ARB_internalformat_query = 1;
const Size GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
const Size GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
const Size GL_DOUBLE_VEC2_EXT = 0x8FFC;
const Size GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
const Size GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
const Size GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
const Size GL_IMAGE_CUBE = 0x9050;
const Size GL_UNDEFINED_VERTEX = 0x8260;
const Size GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CD;
const Size GL_ENV_ADD_EXT = 0;
const Size GL_SPHERE_MAP = 0x2402;
const Size GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
const Size GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
const Size GL_ARRAY_BUFFER_ARB = 0x8892;
const Size GL_X_EXT = 0x87D5;
const Size GL_OPERAND0_ALPHA_EXT = 0x8598;
const Size GL_RGB_SCALE = 0x8573;
const Size GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
const Size GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
const Size GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
const Size GL_BINORMAL_ARRAY_EXT = 0x843A;
const Size GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
const Size GL_RGBA_INTEGER_MODE_EXT = 0x8D9E;
const Size GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
const Size GL_OP_SET_GE_EXT = 0x878C;
const Size GL_INTENSITY32I_EXT = 0x8D85;
const Size GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
const Size GL_INTERNALFORMAT_RED_TYPE = 0x8278;
const Size GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
const Size GL_EXT_cull_vertex = 1;
const Size GL_EXT_texture = 1;
const Size GL_NAND = 0x150E;
const Size GL_CURRENT_RASTER_INDEX = 0x0B05;
const Size GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
const Size GL_COMPRESSED_SRGB = 0x8C48;
const Size GL_TEXTURE_DEPTH_TYPE = 0x8C16;
const Size GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
const Size GL_EQUIV = 0x1509;
const Size GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
const Size GL_EXT_coordinate_frame = 1;
const Size GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
const Size GL_LUMINANCE = 0x1909;
const Size GL_HISTOGRAM_FORMAT = 0x8027;
const Size GL_TEXTURE23_ARB = 0x84D7;
const Size GL_INT_IMAGE_1D_EXT = 0x9057;
const Size GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
const Size GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
const Size GL_UNPACK_RESAMPLE_OML = 0x8985;
const Size GL_QUAD_STRIP = 0x0008;
const Size GL_LUMINANCE16I_EXT = 0x8D8C;
const Size GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
const Size GL_ACCUM = 0x0100;
const Size GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT = 0x840A;
const Size GL_SOURCE1_RGB_EXT = 0x8581;
const Size GL_MINMAX_FORMAT_EXT = 0x802F;
const Size GL_KTX_buffer_region = 1;
const Size GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
const Size GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
const Size GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
const Size GL_VERTEX_ARRAY_SIZE = 0x807A;
const Size GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
const Size GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
const Size GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
const Size GL_DEBUG_SOURCE_OTHER = 0x824B;
const Size GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
const Size GL_INVALID_INDEX = 0xFFFFFFFF;
const Size GL_INT_IMAGE_1D_ARRAY = 0x905D;
const Size GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
const Size GL_STENCIL_BUFFER_BIT = 0x00000400;
const Size GL_ALPHA16I_EXT = 0x8D8A;
const Size GL_MIRROR_CLAMP_EXT = 0x8742;
const Size GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
const Size GL_MODELVIEW5_ARB = 0x8725;
const Size GL_SEPARATE_ATTRIBS_EXT = 0x8C8D;
const Size GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
const Size GL_ARB_copy_buffer = 1;
const Size GL_ARB_shader_image_size = 1;
const Size GL_PROXY_HISTOGRAM = 0x8025;
const Size GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
const Size GL_DEPTH_SCALE = 0x0D1E;
const Size GL_LIGHTING = 0x0B50;
const Size GL_OP_ADD_EXT = 0x8787;
const Size GL_RGB32UI_EXT = 0x8D71;
const Size GL_CURRENT_RASTER_DISTANCE = 0x0B09;
const Size GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
const Size GL_POINT_SIZE_MAX_EXT = 0x8127;
const Size GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
const Size GL_VERTEX_ARRAY_POINTER = 0x808E;
const Size GL_MAX_VIEWPORTS = 0x825B;
const Size GL_TEXTURE7_ARB = 0x84C7;
const Size GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
const Size GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
const Size GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
const Size GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
const Size GL_DRAW_PIXEL_TOKEN = 0x0705;
const Size GL_LOG_DRIVER_REGAL = 0x931D;
const Size GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
const Size GL_INTENSITY4_EXT = 0x804A;
const Size GL_POLYGON_STIPPLE_BIT = 0x00000010;
const Size GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
const Size GL_RGB8I_EXT = 0x8D8F;
const Size GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
const Size GL_KHR_texture_compression_astc_ldr = 1;
const Size GL_ENV_REPLACE_EXT = 0;
const Size GL_COMPRESSED_RGB_ARB = 0x84ED;
const Size GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
const Size GL_DEBUG_TYPE_OTHER = 0x8251;
const Size GL_INTENSITY8_SNORM = 0x9017;
const Size GL_FRAGMENT_DEPTH = 0x8452;
const Size GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
const Size GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068;
const Size GL_OP_POWER_EXT = 0x8793;
const Size GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
const Size GL_FOG_COORDINATE = 0x8451;
const Size GL_RGB16_EXT = 0x8054;
const Size GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
const Size GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
const Size GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
const Size GL_COLOR_TABLE_GREEN_SIZE_EXT = 0x80DB;
const Size GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0xD;
const Size GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
const Size GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
const Size GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
const Size GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
const Size GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
const Size GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
const Size GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
const Size GL_TEXTURE_2D_BINDING_EXT = 0x8069;
const Size GL_ARB_get_program_binary = 1;
const Size GL_SCREEN_COORDINATES_REND = 0x8490;
const Size GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
const Size GL_SAMPLES_EXT = 0x80A9;
const Size GL_EXT_framebuffer_object = 1;
const Size GL_ARB_gpu_shader5 = 1;
const Size GL_IMAGE_BUFFER = 0x9051;
const Size GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
const Size GL_EXT_separate_specular_color = 1;
const Size GL_VERSION = 0x1F02;
const Size GL_COLOR_ARRAY_STRIDE = 0x8083;
const Size GL_TRIANGLE_FAN = 0x0006;
const Size GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
const Size GL_ARB_debug_output = 1;
const Size GL_MAX_ELEMENTS_INDICES = 0x80E9;
const Size GL_SCALAR_EXT = 0x87BE;
const Size GL_GEOMETRY_VERTICES_OUT = 0x8916;
const Size GL_RGB8 = 0x8051;
const Size GL_VERTEX_BINDING_STRIDE = 0x82D8;
const Size GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
const Size GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
const Size GL_MODELVIEW3_ARB = 0x8723;
const Size GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
const Size GL_GEOMETRY_SUBROUTINE = 0x92EB;
const Size GL_RGB4 = 0x804F;
const Size GL_RGB5 = 0x8050;
const Size GL_3DFX_texture_compression_FXT1 = 1;
const Size GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
const Size GL_OP_DOT4_EXT = 0x8785;
const Size GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
const Size GL_ARB_texture_float = 1;
const Size GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
const Size GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
const Size GL_ARB_texture_gather = 1;
const Size GL_ARB_shading_language_include = 1;
const Size GL_COLOR_INDEXES = 0x1603;
const Size GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
const Size GL_OPERAND1_ALPHA = 0x8599;
const Size GL_NEVER = 0x0200;
const Size GL_STENCIL_VALUE_MASK = 0x0B93;
const Size GL_BLEND_DST = 0x0BE0;
const Size GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
const Size GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
const Size GL_COLOR_INDEX12_EXT = 0x80E6;
const Size GL_EXT_texture_lod_bias = 1;
const Size GL_LOAD = 0x0101;
const Size GL_STREAM_COPY_ARB = 0x88E2;
const Size GL_TEXTURE25_ARB = 0x84D9;
const Size GL_INDEX_ARRAY_STRIDE = 0x8086;
const Size GL_COMPRESSED_RGBA_ARB = 0x84EE;
const Size GL_MAP2_VERTEX_3 = 0x0DB7;
const Size GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
const Size GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
const Size GL_ARB_internalformat_query2 = 1;
const Size GL_DEPTH_COMPONENT32 = 0x81A7;
const Size GL_RGBA = 0x1908;
const Size GL_DISPLAY_LIST = 0x82E7;
const Size GL_READ_FRAMEBUFFER = 0x8CA8;
const Size GL_EXT_texture_filter_anisotropic = 1;
const Size GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400;
const Size GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
const Size GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
const Size GL_FOG_COORDINATE_EXT = 0x8451;
const Size GL_MAP2_COLOR_4 = 0x0DB0;
const Size GL_VENDOR = 0x1F00;
const Size GL_FLOAT_VEC4_ARB = 0x8B52;
const Size GL_TEXTURE_2D_ARRAY = 0x8C1A;
const Size GL_ACCUM_BUFFER_BIT = 0x00000200;
const Size GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
const Size GL_TEXTURE_BINDING_2D = 0x8069;
const Size GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
const Size GL_ISOLINES = 0x8E7A;
const Size GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F;
const Size GL_ACTIVE_PROGRAM = 0x8259;
const Size GL_R8UI = 0x8232;
const Size GL_LINK_STATUS = 0x8B82;
const Size GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
const Size GL_MODELVIEW22_ARB = 0x8736;
const Size GL_ARB_draw_buffers_blend = 1;
const Size GL_TESS_GEN_POINT_MODE = 0x8E79;
const Size GL_TESS_GEN_MODE = 0x8E76;
const Size GL_DRAW_BUFFER1_ARB = 0x8826;
const Size GL_ARB_vertex_program = 1;
const Size GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
const Size GL_ACTIVE_TEXTURE_ARB = 0x84E0;
const Size GL_MAX = 0x8008;
const Size GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
const Size GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
const Size GL_IMAGE_BUFFER_EXT = 0x9051;
const Size GL_SEPARABLE_2D_EXT = 0x8012;
const Size GL_FULL_RANGE_EXT = 0x87E1;
const Size GL_TEXTURE_GATHER_SHADOW = 0x82A3;
const Size GL_AUTO_NORMAL = 0x0D80;
const Size GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
const Size GL_VERTEX_WEIGHTING_EXT = 0x8509;
const Size GL_SAMPLER_1D_SHADOW = 0x8B61;
const Size GL_EXT_texture3D = 1;
const Size GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
const Size GL_SAMPLER_2D_SHADOW = 0x8B62;
const Size GL_SOURCE1_ALPHA_ARB = 0x8589;
const Size GL_TEXTURE_MATRIX = 0x0BA8;
const Size GL_RG16F = 0x822F;
const Size GL_ARB_texture_rgb10_a2ui = 1;
const Size GL_MAX_NAME_STACK_DEPTH = 0x0D37;
const Size GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
const Size GL_LINES_ADJACENCY_ARB = 0xA;
const Size GL_RG16I = 0x8239;
const Size GL_WRITE_ONLY = 0x88B9;
const Size GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
const Size GL_ALPHA32I_EXT = 0x8D84;
const Size GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
const Size GL_STENCIL_ATTACHMENT = 0x8D20;
const Size GL_MAP1_BINORMAL_EXT = 0x8446;
const Size GL_SAMPLE_COVERAGE = 0x80A0;
const Size GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
const Size GL_TEXTURE_3D_BINDING_EXT = 0x806A;
const Size GL_SHININESS = 0x1601;
const Size GL_DRAW_FRAMEBUFFER = 0x8CA9;
const Size GL_COLOR_TABLE_WIDTH_EXT = 0x80D9;
const Size GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
const Size GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
const Size GL_RGB10_A2UI = 0x906F;
require Math;
function cpglSetDebugTrace( Boolean enable )= "cpglSetDebugTrace";
function cpglSetAlwaysValidateContext( Boolean enable )= "cpglSetAlwaysValidateContext";
function cpglSetCheckErrors( Boolean enable )= "cpglSetCheckErrors";
function glGetVersion(io String version) = "glGetVersion_wrapper";
function glewIsSupported(io String token, io Boolean supported) = "glewIsSupported_wrapper";
alias Data CPGLContext;
function CPGLContext cpglGetCurrentContext() = "cpglGetCurrentContext_wrapper";
function Boolean cpglHaveContext() { return !!cpglGetCurrentContext(); }
function glAccum( in UInt32 op, in Float32 value ) = 'glAccum_wrapper';
function glAlphaFunc( in UInt32 func, in Float32 ref ) = 'glAlphaFunc_wrapper';
function Boolean glAreTexturesResident( in UInt32 n, in UInt32 textures[], io Boolean residences[] ) = 'glAreTexturesResident_wrapper';
function glArrayElement( in SInt32 i ) = 'glArrayElement_wrapper';
function glBegin( in UInt32 mode ) = 'glBegin_wrapper';
function glBindTexture( in UInt32 target, in UInt32 texture ) = 'glBindTexture_wrapper';
function glBitmap( in UInt32 width, in UInt32 height, in Float32 xorig, in Float32 yorig, in Float32 xmove, in Float32 ymove, in Byte bitmap[] ) = 'glBitmap_wrapper';
function glBlendFunc( in UInt32 sfactor, in UInt32 dfactor ) = 'glBlendFunc_wrapper';
function glCallList( in UInt32 list ) = 'glCallList_wrapper';
function glCallLists( in UInt32 n, in UInt32 type, in Data lists ) = 'glCallLists_wrapper';
function glClear( in UInt32 mask ) = 'glClear_wrapper';
function glClearAccum( in Float32 red, in Float32 green, in Float32 blue, in Float32 alpha ) = 'glClearAccum_wrapper';
function glClearColor( in Float32 red, in Float32 green, in Float32 blue, in Float32 alpha ) = 'glClearColor_wrapper';
function glClearDepth( in Float64 depth ) = 'glClearDepth_wrapper';
function glClearIndex( in Float32 c ) = 'glClearIndex_wrapper';
function glClearStencil( in SInt32 s ) = 'glClearStencil_wrapper';
function glClipPlane( in UInt32 plane, in Float64 equation[] ) = 'glClipPlane_wrapper';
function glColor3b( in Byte red, in Byte green, in Byte blue ) = 'glColor3b_wrapper';
function glColor3bv( in Byte v[3] ) = 'glColor3bv_wrapper';
function glColor3d( in Float64 red, in Float64 green, in Float64 blue ) = 'glColor3d_wrapper';
function glColor3dv( in Float64 v[3] ) = 'glColor3dv_wrapper';
function glColor3f( in Float32 red, in Float32 green, in Float32 blue ) = 'glColor3f_wrapper';
function glColor3fv( in Float32 v[3] ) = 'glColor3fv_wrapper';
function glColor3i( in SInt32 red, in SInt32 green, in SInt32 blue ) = 'glColor3i_wrapper';
function glColor3iv( in SInt32 v[3] ) = 'glColor3iv_wrapper';
function glColor3s( in SInt16 red, in SInt16 green, in SInt16 blue ) = 'glColor3s_wrapper';
function glColor3sv( in SInt16 v[3] ) = 'glColor3sv_wrapper';
function glColor3ub( in Byte red, in Byte green, in Byte blue ) = 'glColor3ub_wrapper';
function glColor3ubv( in Byte v[3] ) = 'glColor3ubv_wrapper';
function glColor3ui( in UInt32 red, in UInt32 green, in UInt32 blue ) = 'glColor3ui_wrapper';
function glColor3uiv( in UInt32 v[3] ) = 'glColor3uiv_wrapper';
function glColor3us( in UInt16 red, in UInt16 green, in UInt16 blue ) = 'glColor3us_wrapper';
function glColor3usv( in UInt16 v[3] ) = 'glColor3usv_wrapper';
function glColor4b( in Byte red, in Byte green, in Byte blue, in Byte alpha ) = 'glColor4b_wrapper';
function glColor4bv( in Byte v[4] ) = 'glColor4bv_wrapper';
function glColor4d( in Float64 red, in Float64 green, in Float64 blue, in Float64 alpha ) = 'glColor4d_wrapper';
function glColor4dv( in Float64 v[4] ) = 'glColor4dv_wrapper';
function glColor4f( in Float32 red, in Float32 green, in Float32 blue, in Float32 alpha ) = 'glColor4f_wrapper';
function glColor4fv( in Float32 v[4] ) = 'glColor4fv_wrapper';
function glColor4i( in SInt32 red, in SInt32 green, in SInt32 blue, in SInt32 alpha ) = 'glColor4i_wrapper';
function glColor4iv( in SInt32 v[4] ) = 'glColor4iv_wrapper';
function glColor4s( in SInt16 red, in SInt16 green, in SInt16 blue, in SInt16 alpha ) = 'glColor4s_wrapper';
function glColor4sv( in SInt16 v[4] ) = 'glColor4sv_wrapper';
function glColor4ub( in Byte red, in Byte green, in Byte blue, in Byte alpha ) = 'glColor4ub_wrapper';
function glColor4ubv( in Byte v[4] ) = 'glColor4ubv_wrapper';
function glColor4ui( in UInt32 red, in UInt32 green, in UInt32 blue, in UInt32 alpha ) = 'glColor4ui_wrapper';
function glColor4uiv( in UInt32 v[4] ) = 'glColor4uiv_wrapper';
function glColor4us( in UInt16 red, in UInt16 green, in UInt16 blue, in UInt16 alpha ) = 'glColor4us_wrapper';
function glColor4usv( in UInt16 v[4] ) = 'glColor4usv_wrapper';
function glColorMask( in Boolean red, in Boolean green, in Boolean blue, in Boolean alpha ) = 'glColorMask_wrapper';
function glColorMaterial( in UInt32 face, in UInt32 mode ) = 'glColorMaterial_wrapper';
function glColorPointer( in SInt32 size, in UInt32 type, in UInt32 stride, in Data pointer ) = 'glColorPointer_wrapper';
function glCopyPixels( in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height, in UInt32 type ) = 'glCopyPixels_wrapper';
function glCopyTexImage1D( in UInt32 target, in SInt32 level, in UInt32 internalFormat, in SInt32 x, in SInt32 y, in UInt32 width, in SInt32 border ) = 'glCopyTexImage1D_wrapper';
function glCopyTexImage2D( in UInt32 target, in SInt32 level, in UInt32 internalFormat, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height, in SInt32 border ) = 'glCopyTexImage2D_wrapper';
function glCopyTexSubImage1D( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 x, in SInt32 y, in UInt32 width ) = 'glCopyTexSubImage1D_wrapper';
function glCopyTexSubImage2D( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glCopyTexSubImage2D_wrapper';
function glCullFace( in UInt32 mode ) = 'glCullFace_wrapper';
function glDeleteLists( in UInt32 list, in UInt32 range ) = 'glDeleteLists_wrapper';
function glDeleteTextures( in UInt32 n, in UInt32 textures[] ) = 'glDeleteTextures_wrapper';
function glDepthFunc( in UInt32 func ) = 'glDepthFunc_wrapper';
function glDepthMask( in Boolean flag ) = 'glDepthMask_wrapper';
function glDepthRange( in Float64 zNear, in Float64 zFar ) = 'glDepthRange_wrapper';
function glDisable( in UInt32 cap ) = 'glDisable_wrapper';
function glDisableClientState( in UInt32 array ) = 'glDisableClientState_wrapper';
function glDrawArrays( in UInt32 mode, in SInt32 first, in UInt32 count ) = 'glDrawArrays_wrapper';
function glDrawBuffer( in UInt32 mode ) = 'glDrawBuffer_wrapper';
function glDrawElements( in UInt32 mode, in UInt32 count, in UInt32 type, in Data indices ) = 'glDrawElements_wrapper';
function glDrawPixels( in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 type, in Data pixels ) = 'glDrawPixels_wrapper';
function glEdgeFlag( in Boolean flag ) = 'glEdgeFlag_wrapper';
function glEdgeFlagPointer( in UInt32 stride, in Data pointer ) = 'glEdgeFlagPointer_wrapper';
function glEdgeFlagv( in Boolean flag[] ) = 'glEdgeFlagv_wrapper';
function glEnable( in UInt32 cap ) = 'glEnable_wrapper';
function glEnableClientState( in UInt32 array ) = 'glEnableClientState_wrapper';
function glEnd(  ) = 'glEnd_wrapper';
function glEndList(  ) = 'glEndList_wrapper';
function glEvalCoord1d( in Float64 u ) = 'glEvalCoord1d_wrapper';
function glEvalCoord1dv( in Float64 u[1] ) = 'glEvalCoord1dv_wrapper';
function glEvalCoord1f( in Float32 u ) = 'glEvalCoord1f_wrapper';
function glEvalCoord1fv( in Float32 u[1] ) = 'glEvalCoord1fv_wrapper';
function glEvalCoord2d( in Float64 u, in Float64 v ) = 'glEvalCoord2d_wrapper';
function glEvalCoord2dv( in Float64 u[2] ) = 'glEvalCoord2dv_wrapper';
function glEvalCoord2f( in Float32 u, in Float32 v ) = 'glEvalCoord2f_wrapper';
function glEvalCoord2fv( in Float32 u[2] ) = 'glEvalCoord2fv_wrapper';
function glEvalMesh1( in UInt32 mode, in SInt32 i1, in SInt32 i2 ) = 'glEvalMesh1_wrapper';
function glEvalMesh2( in UInt32 mode, in SInt32 i1, in SInt32 i2, in SInt32 j1, in SInt32 j2 ) = 'glEvalMesh2_wrapper';
function glEvalPoint1( in SInt32 i ) = 'glEvalPoint1_wrapper';
function glEvalPoint2( in SInt32 i, in SInt32 j ) = 'glEvalPoint2_wrapper';
function glFeedbackBuffer( in UInt32 size, in UInt32 type, io Float32 buffer[] ) = 'glFeedbackBuffer_wrapper';
function glFinish(  ) = 'glFinish_wrapper';
function glFlush(  ) = 'glFlush_wrapper';
function glFogf( in UInt32 pname, in Float32 param ) = 'glFogf_wrapper';
function glFogfv( in UInt32 pname, in Float32 params[] ) = 'glFogfv_wrapper';
function glFogi( in UInt32 pname, in SInt32 param ) = 'glFogi_wrapper';
function glFogiv( in UInt32 pname, in SInt32 params[] ) = 'glFogiv_wrapper';
function glFrontFace( in UInt32 mode ) = 'glFrontFace_wrapper';
function glFrustum( in Float64 left, in Float64 right, in Float64 bottom, in Float64 top, in Float64 zNear, in Float64 zFar ) = 'glFrustum_wrapper';
function UInt32 glGenLists( in UInt32 range ) = 'glGenLists_wrapper';
function glGenTextures( in UInt32 n, io UInt32 textures[] ) = 'glGenTextures_wrapper';
function glGetBooleanv( in UInt32 pname, io Boolean params[] ) = 'glGetBooleanv_wrapper';
function glGetClipPlane( in UInt32 plane, io Float64 equation[] ) = 'glGetClipPlane_wrapper';
function glGetDoublev( in UInt32 pname, io Float64 params[] ) = 'glGetDoublev_wrapper';
function UInt32 glGetError(  ) = 'glGetError_wrapper';
function glGetFloatv( in UInt32 pname, io Float32 params[] ) = 'glGetFloatv_wrapper';
function glGetIntegerv( in UInt32 pname, io SInt32 params[] ) = 'glGetIntegerv_wrapper';
function glGetLightfv( in UInt32 light, in UInt32 pname, io Float32 params[] ) = 'glGetLightfv_wrapper';
function glGetLightiv( in UInt32 light, in UInt32 pname, io SInt32 params[] ) = 'glGetLightiv_wrapper';
function glGetMapdv( in UInt32 target, in UInt32 query, io Float64 v[] ) = 'glGetMapdv_wrapper';
function glGetMapfv( in UInt32 target, in UInt32 query, io Float32 v[] ) = 'glGetMapfv_wrapper';
function glGetMapiv( in UInt32 target, in UInt32 query, io SInt32 v[] ) = 'glGetMapiv_wrapper';
function glGetMaterialfv( in UInt32 face, in UInt32 pname, io Float32 params[] ) = 'glGetMaterialfv_wrapper';
function glGetMaterialiv( in UInt32 face, in UInt32 pname, io SInt32 params[] ) = 'glGetMaterialiv_wrapper';
function glGetPixelMapfv( in UInt32 map, io Float32 values[] ) = 'glGetPixelMapfv_wrapper';
function glGetPixelMapuiv( in UInt32 map, io UInt32 values[] ) = 'glGetPixelMapuiv_wrapper';
function glGetPixelMapusv( in UInt32 map, io UInt16 values[] ) = 'glGetPixelMapusv_wrapper';
function glGetPolygonStipple( io Byte mask[] ) = 'glGetPolygonStipple_wrapper';
function String glGetString( in UInt32 name ) = 'glGetString_wrapper';
function glGetTexEnvfv( in UInt32 target, in UInt32 pname, io Float32 params[] ) = 'glGetTexEnvfv_wrapper';
function glGetTexEnviv( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetTexEnviv_wrapper';
function glGetTexGendv( in UInt32 coord, in UInt32 pname, io Float64 params[] ) = 'glGetTexGendv_wrapper';
function glGetTexGenfv( in UInt32 coord, in UInt32 pname, io Float32 params[] ) = 'glGetTexGenfv_wrapper';
function glGetTexGeniv( in UInt32 coord, in UInt32 pname, io SInt32 params[] ) = 'glGetTexGeniv_wrapper';
function glGetTexImage( in UInt32 target, in SInt32 level, in UInt32 format, in UInt32 type, in Data pixels ) = 'glGetTexImage_wrapper';
function glGetTexLevelParameterfv( in UInt32 target, in SInt32 level, in UInt32 pname, io Float32 params[] ) = 'glGetTexLevelParameterfv_wrapper';
function glGetTexLevelParameteriv( in UInt32 target, in SInt32 level, in UInt32 pname, io SInt32 params[] ) = 'glGetTexLevelParameteriv_wrapper';
function glGetTexParameterfv( in UInt32 target, in UInt32 pname, io Float32 params[] ) = 'glGetTexParameterfv_wrapper';
function glGetTexParameteriv( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetTexParameteriv_wrapper';
function glHint( in UInt32 target, in UInt32 mode ) = 'glHint_wrapper';
function glIndexMask( in UInt32 mask ) = 'glIndexMask_wrapper';
function glIndexPointer( in UInt32 type, in UInt32 stride, in Data pointer ) = 'glIndexPointer_wrapper';
function glIndexd( in Float64 c ) = 'glIndexd_wrapper';
function glIndexdv( in Float64 c[] ) = 'glIndexdv_wrapper';
function glIndexf( in Float32 c ) = 'glIndexf_wrapper';
function glIndexfv( in Float32 c[] ) = 'glIndexfv_wrapper';
function glIndexi( in SInt32 c ) = 'glIndexi_wrapper';
function glIndexiv( in SInt32 c[] ) = 'glIndexiv_wrapper';
function glIndexs( in SInt16 c ) = 'glIndexs_wrapper';
function glIndexsv( in SInt16 c[] ) = 'glIndexsv_wrapper';
function glIndexub( in Byte c ) = 'glIndexub_wrapper';
function glIndexubv( in Byte c[] ) = 'glIndexubv_wrapper';
function glInitNames(  ) = 'glInitNames_wrapper';
function glInterleavedArrays( in UInt32 format, in UInt32 stride, in Data pointer ) = 'glInterleavedArrays_wrapper';
function Boolean glIsEnabled( in UInt32 cap ) = 'glIsEnabled_wrapper';
function Boolean glIsList( in UInt32 list ) = 'glIsList_wrapper';
function Boolean glIsTexture( in UInt32 texture ) = 'glIsTexture_wrapper';
function glLightModelf( in UInt32 pname, in Float32 param ) = 'glLightModelf_wrapper';
function glLightModelfv( in UInt32 pname, in Float32 params[] ) = 'glLightModelfv_wrapper';
function glLightModeli( in UInt32 pname, in SInt32 param ) = 'glLightModeli_wrapper';
function glLightModeliv( in UInt32 pname, in SInt32 params[] ) = 'glLightModeliv_wrapper';
function glLightf( in UInt32 light, in UInt32 pname, in Float32 param ) = 'glLightf_wrapper';
function glLightfv( in UInt32 light, in UInt32 pname, in Float32 params[] ) = 'glLightfv_wrapper';
function glLighti( in UInt32 light, in UInt32 pname, in SInt32 param ) = 'glLighti_wrapper';
function glLightiv( in UInt32 light, in UInt32 pname, in SInt32 params[] ) = 'glLightiv_wrapper';
function glLineStipple( in SInt32 factor, in UInt16 pattern ) = 'glLineStipple_wrapper';
function glLineWidth( in Float32 width ) = 'glLineWidth_wrapper';
function glListBase( in UInt32 base ) = 'glListBase_wrapper';
function glLoadIdentity(  ) = 'glLoadIdentity_wrapper';
function glLoadMatrixd( in Float64 m[] ) = 'glLoadMatrixd_wrapper';
function glLoadMatrixf( in Float32 m[] ) = 'glLoadMatrixf_wrapper';
function glLoadName( in UInt32 name ) = 'glLoadName_wrapper';
function glLogicOp( in UInt32 opcode ) = 'glLogicOp_wrapper';
function glMap1d( in UInt32 target, in Float64 u1, in Float64 u2, in SInt32 stride, in SInt32 order, in Float64 points[1] ) = 'glMap1d_wrapper';
function glMap1f( in UInt32 target, in Float32 u1, in Float32 u2, in SInt32 stride, in SInt32 order, in Float32 points[1] ) = 'glMap1f_wrapper';
function glMap2d( in UInt32 target, in Float64 u1, in Float64 u2, in SInt32 ustride, in SInt32 uorder, in Float64 v1, in Float64 v2, in SInt32 vstride, in SInt32 vorder, in Float64 points[2] ) = 'glMap2d_wrapper';
function glMap2f( in UInt32 target, in Float32 u1, in Float32 u2, in SInt32 ustride, in SInt32 uorder, in Float32 v1, in Float32 v2, in SInt32 vstride, in SInt32 vorder, in Float32 points[2] ) = 'glMap2f_wrapper';
function glMapGrid1d( in SInt32 un, in Float64 u1, in Float64 u2 ) = 'glMapGrid1d_wrapper';
function glMapGrid1f( in SInt32 un, in Float32 u1, in Float32 u2 ) = 'glMapGrid1f_wrapper';
function glMapGrid2d( in SInt32 un, in Float64 u1, in Float64 u2, in SInt32 vn, in Float64 v1, in Float64 v2 ) = 'glMapGrid2d_wrapper';
function glMapGrid2f( in SInt32 un, in Float32 u1, in Float32 u2, in SInt32 vn, in Float32 v1, in Float32 v2 ) = 'glMapGrid2f_wrapper';
function glMaterialf( in UInt32 face, in UInt32 pname, in Float32 param ) = 'glMaterialf_wrapper';
function glMaterialfv( in UInt32 face, in UInt32 pname, in Float32 params[] ) = 'glMaterialfv_wrapper';
function glMateriali( in UInt32 face, in UInt32 pname, in SInt32 param ) = 'glMateriali_wrapper';
function glMaterialiv( in UInt32 face, in UInt32 pname, in SInt32 params[] ) = 'glMaterialiv_wrapper';
function glMatrixMode( in UInt32 mode ) = 'glMatrixMode_wrapper';
function glMultMatrixd( in Float64 m[] ) = 'glMultMatrixd_wrapper';
function glMultMatrixf( in Float32 m[] ) = 'glMultMatrixf_wrapper';
function glNewList( in UInt32 list, in UInt32 mode ) = 'glNewList_wrapper';
function glNormal3b( in Byte nx, in Byte ny, in Byte nz ) = 'glNormal3b_wrapper';
function glNormal3bv( in Byte v[3] ) = 'glNormal3bv_wrapper';
function glNormal3d( in Float64 nx, in Float64 ny, in Float64 nz ) = 'glNormal3d_wrapper';
function glNormal3dv( in Float64 v[3] ) = 'glNormal3dv_wrapper';
function glNormal3f( in Float32 nx, in Float32 ny, in Float32 nz ) = 'glNormal3f_wrapper';
function glNormal3fv( in Float32 v[3] ) = 'glNormal3fv_wrapper';
function glNormal3i( in SInt32 nx, in SInt32 ny, in SInt32 nz ) = 'glNormal3i_wrapper';
function glNormal3iv( in SInt32 v[3] ) = 'glNormal3iv_wrapper';
function glNormal3s( in SInt16 nx, in SInt16 ny, in SInt16 nz ) = 'glNormal3s_wrapper';
function glNormal3sv( in SInt16 v[3] ) = 'glNormal3sv_wrapper';
function glNormalPointer( in UInt32 type, in UInt32 stride, in Data pointer ) = 'glNormalPointer_wrapper';
function glOrtho( in Float64 left, in Float64 right, in Float64 bottom, in Float64 top, in Float64 zNear, in Float64 zFar ) = 'glOrtho_wrapper';
function glPassThrough( in Float32 token ) = 'glPassThrough_wrapper';
function glPixelMapfv( in UInt32 map, in UInt32 mapsize, in Float32 values[] ) = 'glPixelMapfv_wrapper';
function glPixelMapuiv( in UInt32 map, in UInt32 mapsize, in UInt32 values[] ) = 'glPixelMapuiv_wrapper';
function glPixelMapusv( in UInt32 map, in UInt32 mapsize, in UInt16 values[] ) = 'glPixelMapusv_wrapper';
function glPixelStoref( in UInt32 pname, in Float32 param ) = 'glPixelStoref_wrapper';
function glPixelStorei( in UInt32 pname, in SInt32 param ) = 'glPixelStorei_wrapper';
function glPixelTransferf( in UInt32 pname, in Float32 param ) = 'glPixelTransferf_wrapper';
function glPixelTransferi( in UInt32 pname, in SInt32 param ) = 'glPixelTransferi_wrapper';
function glPixelZoom( in Float32 xfactor, in Float32 yfactor ) = 'glPixelZoom_wrapper';
function glPointSize( in Float32 size ) = 'glPointSize_wrapper';
function glPolygonMode( in UInt32 face, in UInt32 mode ) = 'glPolygonMode_wrapper';
function glPolygonOffset( in Float32 factor, in Float32 units ) = 'glPolygonOffset_wrapper';
function glPolygonStipple( in Byte mask[] ) = 'glPolygonStipple_wrapper';
function glPopAttrib(  ) = 'glPopAttrib_wrapper';
function glPopClientAttrib(  ) = 'glPopClientAttrib_wrapper';
function glPopMatrix(  ) = 'glPopMatrix_wrapper';
function glPopName(  ) = 'glPopName_wrapper';
function glPrioritizeTextures( in UInt32 n, in UInt32 textures[], in Float32 priorities[] ) = 'glPrioritizeTextures_wrapper';
function glPushAttrib( in UInt32 mask ) = 'glPushAttrib_wrapper';
function glPushClientAttrib( in UInt32 mask ) = 'glPushClientAttrib_wrapper';
function glPushMatrix(  ) = 'glPushMatrix_wrapper';
function glPushName( in UInt32 name ) = 'glPushName_wrapper';
function glRasterPos2d( in Float64 x, in Float64 y ) = 'glRasterPos2d_wrapper';
function glRasterPos2dv( in Float64 v[2] ) = 'glRasterPos2dv_wrapper';
function glRasterPos2f( in Float32 x, in Float32 y ) = 'glRasterPos2f_wrapper';
function glRasterPos2fv( in Float32 v[2] ) = 'glRasterPos2fv_wrapper';
function glRasterPos2i( in SInt32 x, in SInt32 y ) = 'glRasterPos2i_wrapper';
function glRasterPos2iv( in SInt32 v[2] ) = 'glRasterPos2iv_wrapper';
function glRasterPos2s( in SInt16 x, in SInt16 y ) = 'glRasterPos2s_wrapper';
function glRasterPos2sv( in SInt16 v[2] ) = 'glRasterPos2sv_wrapper';
function glRasterPos3d( in Float64 x, in Float64 y, in Float64 z ) = 'glRasterPos3d_wrapper';
function glRasterPos3dv( in Float64 v[3] ) = 'glRasterPos3dv_wrapper';
function glRasterPos3f( in Float32 x, in Float32 y, in Float32 z ) = 'glRasterPos3f_wrapper';
function glRasterPos3fv( in Float32 v[3] ) = 'glRasterPos3fv_wrapper';
function glRasterPos3i( in SInt32 x, in SInt32 y, in SInt32 z ) = 'glRasterPos3i_wrapper';
function glRasterPos3iv( in SInt32 v[3] ) = 'glRasterPos3iv_wrapper';
function glRasterPos3s( in SInt16 x, in SInt16 y, in SInt16 z ) = 'glRasterPos3s_wrapper';
function glRasterPos3sv( in SInt16 v[3] ) = 'glRasterPos3sv_wrapper';
function glRasterPos4d( in Float64 x, in Float64 y, in Float64 z, in Float64 w ) = 'glRasterPos4d_wrapper';
function glRasterPos4dv( in Float64 v[4] ) = 'glRasterPos4dv_wrapper';
function glRasterPos4f( in Float32 x, in Float32 y, in Float32 z, in Float32 w ) = 'glRasterPos4f_wrapper';
function glRasterPos4fv( in Float32 v[4] ) = 'glRasterPos4fv_wrapper';
function glRasterPos4i( in SInt32 x, in SInt32 y, in SInt32 z, in SInt32 w ) = 'glRasterPos4i_wrapper';
function glRasterPos4iv( in SInt32 v[4] ) = 'glRasterPos4iv_wrapper';
function glRasterPos4s( in SInt16 x, in SInt16 y, in SInt16 z, in SInt16 w ) = 'glRasterPos4s_wrapper';
function glRasterPos4sv( in SInt16 v[4] ) = 'glRasterPos4sv_wrapper';
function glReadBuffer( in UInt32 mode ) = 'glReadBuffer_wrapper';
function glReadPixels( in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 type, in Data pixels ) = 'glReadPixels_wrapper';
function glRectd( in Float64 x1, in Float64 y1, in Float64 x2, in Float64 y2 ) = 'glRectd_wrapper';
function glRectdv( in Float64 v1[], in Float64 v2[] ) = 'glRectdv_wrapper';
function glRectf( in Float32 x1, in Float32 y1, in Float32 x2, in Float32 y2 ) = 'glRectf_wrapper';
function glRectfv( in Float32 v1[], in Float32 v2[] ) = 'glRectfv_wrapper';
function glRecti( in SInt32 x1, in SInt32 y1, in SInt32 x2, in SInt32 y2 ) = 'glRecti_wrapper';
function glRectiv( in SInt32 v1[], in SInt32 v2[] ) = 'glRectiv_wrapper';
function glRects( in SInt16 x1, in SInt16 y1, in SInt16 x2, in SInt16 y2 ) = 'glRects_wrapper';
function glRectsv( in SInt16 v1[], in SInt16 v2[] ) = 'glRectsv_wrapper';
function SInt32 glRenderMode( in UInt32 mode ) = 'glRenderMode_wrapper';
function glRotated( in Float64 angle, in Float64 x, in Float64 y, in Float64 z ) = 'glRotated_wrapper';
function glRotatef( in Float32 angle, in Float32 x, in Float32 y, in Float32 z ) = 'glRotatef_wrapper';
function glScaled( in Float64 x, in Float64 y, in Float64 z ) = 'glScaled_wrapper';
function glScalef( in Float32 x, in Float32 y, in Float32 z ) = 'glScalef_wrapper';
function glScissor( in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glScissor_wrapper';
function glSelectBuffer( in UInt32 size, io UInt32 buffer[] ) = 'glSelectBuffer_wrapper';
function glShadeModel( in UInt32 mode ) = 'glShadeModel_wrapper';
function glStencilFunc( in UInt32 func, in SInt32 ref, in UInt32 mask ) = 'glStencilFunc_wrapper';
function glStencilMask( in UInt32 mask ) = 'glStencilMask_wrapper';
function glStencilOp( in UInt32 fail, in UInt32 zfail, in UInt32 zpass ) = 'glStencilOp_wrapper';
function glTexCoord1d( in Float64 s ) = 'glTexCoord1d_wrapper';
function glTexCoord1dv( in Float64 v[1] ) = 'glTexCoord1dv_wrapper';
function glTexCoord1f( in Float32 s ) = 'glTexCoord1f_wrapper';
function glTexCoord1fv( in Float32 v[1] ) = 'glTexCoord1fv_wrapper';
function glTexCoord1i( in SInt32 s ) = 'glTexCoord1i_wrapper';
function glTexCoord1iv( in SInt32 v[1] ) = 'glTexCoord1iv_wrapper';
function glTexCoord1s( in SInt16 s ) = 'glTexCoord1s_wrapper';
function glTexCoord1sv( in SInt16 v[1] ) = 'glTexCoord1sv_wrapper';
function glTexCoord2d( in Float64 s, in Float64 t ) = 'glTexCoord2d_wrapper';
function glTexCoord2dv( in Float64 v[2] ) = 'glTexCoord2dv_wrapper';
function glTexCoord2f( in Float32 s, in Float32 t ) = 'glTexCoord2f_wrapper';
function glTexCoord2fv( in Float32 v[2] ) = 'glTexCoord2fv_wrapper';
function glTexCoord2i( in SInt32 s, in SInt32 t ) = 'glTexCoord2i_wrapper';
function glTexCoord2iv( in SInt32 v[2] ) = 'glTexCoord2iv_wrapper';
function glTexCoord2s( in SInt16 s, in SInt16 t ) = 'glTexCoord2s_wrapper';
function glTexCoord2sv( in SInt16 v[2] ) = 'glTexCoord2sv_wrapper';
function glTexCoord3d( in Float64 s, in Float64 t, in Float64 r ) = 'glTexCoord3d_wrapper';
function glTexCoord3dv( in Float64 v[3] ) = 'glTexCoord3dv_wrapper';
function glTexCoord3f( in Float32 s, in Float32 t, in Float32 r ) = 'glTexCoord3f_wrapper';
function glTexCoord3fv( in Float32 v[3] ) = 'glTexCoord3fv_wrapper';
function glTexCoord3i( in SInt32 s, in SInt32 t, in SInt32 r ) = 'glTexCoord3i_wrapper';
function glTexCoord3iv( in SInt32 v[3] ) = 'glTexCoord3iv_wrapper';
function glTexCoord3s( in SInt16 s, in SInt16 t, in SInt16 r ) = 'glTexCoord3s_wrapper';
function glTexCoord3sv( in SInt16 v[3] ) = 'glTexCoord3sv_wrapper';
function glTexCoord4d( in Float64 s, in Float64 t, in Float64 r, in Float64 q ) = 'glTexCoord4d_wrapper';
function glTexCoord4dv( in Float64 v[4] ) = 'glTexCoord4dv_wrapper';
function glTexCoord4f( in Float32 s, in Float32 t, in Float32 r, in Float32 q ) = 'glTexCoord4f_wrapper';
function glTexCoord4fv( in Float32 v[4] ) = 'glTexCoord4fv_wrapper';
function glTexCoord4i( in SInt32 s, in SInt32 t, in SInt32 r, in SInt32 q ) = 'glTexCoord4i_wrapper';
function glTexCoord4iv( in SInt32 v[4] ) = 'glTexCoord4iv_wrapper';
function glTexCoord4s( in SInt16 s, in SInt16 t, in SInt16 r, in SInt16 q ) = 'glTexCoord4s_wrapper';
function glTexCoord4sv( in SInt16 v[4] ) = 'glTexCoord4sv_wrapper';
function glTexCoordPointer( in SInt32 size, in UInt32 type, in UInt32 stride, in Data pointer ) = 'glTexCoordPointer_wrapper';
function glTexEnvf( in UInt32 target, in UInt32 pname, in Float32 param ) = 'glTexEnvf_wrapper';
function glTexEnvfv( in UInt32 target, in UInt32 pname, in Float32 params[] ) = 'glTexEnvfv_wrapper';
function glTexEnvi( in UInt32 target, in UInt32 pname, in SInt32 param ) = 'glTexEnvi_wrapper';
function glTexEnviv( in UInt32 target, in UInt32 pname, in SInt32 params[] ) = 'glTexEnviv_wrapper';
function glTexGend( in UInt32 coord, in UInt32 pname, in Float64 param ) = 'glTexGend_wrapper';
function glTexGendv( in UInt32 coord, in UInt32 pname, in Float64 params[] ) = 'glTexGendv_wrapper';
function glTexGenf( in UInt32 coord, in UInt32 pname, in Float32 param ) = 'glTexGenf_wrapper';
function glTexGenfv( in UInt32 coord, in UInt32 pname, in Float32 params[] ) = 'glTexGenfv_wrapper';
function glTexGeni( in UInt32 coord, in UInt32 pname, in SInt32 param ) = 'glTexGeni_wrapper';
function glTexGeniv( in UInt32 coord, in UInt32 pname, in SInt32 params[] ) = 'glTexGeniv_wrapper';
function glTexImage1D( in UInt32 target, in SInt32 level, in SInt32 internalformat, in UInt32 width, in SInt32 border, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTexImage1D_wrapper';
function glTexImage2D( in UInt32 target, in SInt32 level, in SInt32 internalformat, in UInt32 width, in UInt32 height, in SInt32 border, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTexImage2D_wrapper';
function glTexParameterf( in UInt32 target, in UInt32 pname, in Float32 param ) = 'glTexParameterf_wrapper';
function glTexParameterfv( in UInt32 target, in UInt32 pname, in Float32 params[] ) = 'glTexParameterfv_wrapper';
function glTexParameteri( in UInt32 target, in UInt32 pname, in SInt32 param ) = 'glTexParameteri_wrapper';
function glTexParameteriv( in UInt32 target, in UInt32 pname, in SInt32 params[] ) = 'glTexParameteriv_wrapper';
function glTexSubImage1D( in UInt32 target, in SInt32 level, in SInt32 xoffset, in UInt32 width, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTexSubImage1D_wrapper';
function glTexSubImage2D( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTexSubImage2D_wrapper';
function glTranslated( in Float64 x, in Float64 y, in Float64 z ) = 'glTranslated_wrapper';
function glTranslatef( in Float32 x, in Float32 y, in Float32 z ) = 'glTranslatef_wrapper';
function glVertex2d( in Float64 x, in Float64 y ) = 'glVertex2d_wrapper';
function glVertex2dv( in Float64 v[2] ) = 'glVertex2dv_wrapper';
function glVertex2f( in Float32 x, in Float32 y ) = 'glVertex2f_wrapper';
function glVertex2fv( in Float32 v[2] ) = 'glVertex2fv_wrapper';
function glVertex2i( in SInt32 x, in SInt32 y ) = 'glVertex2i_wrapper';
function glVertex2iv( in SInt32 v[2] ) = 'glVertex2iv_wrapper';
function glVertex2s( in SInt16 x, in SInt16 y ) = 'glVertex2s_wrapper';
function glVertex2sv( in SInt16 v[2] ) = 'glVertex2sv_wrapper';
function glVertex3d( in Float64 x, in Float64 y, in Float64 z ) = 'glVertex3d_wrapper';
function glVertex3dv( in Float64 v[3] ) = 'glVertex3dv_wrapper';
function glVertex3f( in Float32 x, in Float32 y, in Float32 z ) = 'glVertex3f_wrapper';
function glVertex3fv( in Float32 v[3] ) = 'glVertex3fv_wrapper';
function glVertex3i( in SInt32 x, in SInt32 y, in SInt32 z ) = 'glVertex3i_wrapper';
function glVertex3iv( in SInt32 v[3] ) = 'glVertex3iv_wrapper';
function glVertex3s( in SInt16 x, in SInt16 y, in SInt16 z ) = 'glVertex3s_wrapper';
function glVertex3sv( in SInt16 v[3] ) = 'glVertex3sv_wrapper';
function glVertex4d( in Float64 x, in Float64 y, in Float64 z, in Float64 w ) = 'glVertex4d_wrapper';
function glVertex4dv( in Float64 v[4] ) = 'glVertex4dv_wrapper';
function glVertex4f( in Float32 x, in Float32 y, in Float32 z, in Float32 w ) = 'glVertex4f_wrapper';
function glVertex4fv( in Float32 v[4] ) = 'glVertex4fv_wrapper';
function glVertex4i( in SInt32 x, in SInt32 y, in SInt32 z, in SInt32 w ) = 'glVertex4i_wrapper';
function glVertex4iv( in SInt32 v[4] ) = 'glVertex4iv_wrapper';
function glVertex4s( in SInt16 x, in SInt16 y, in SInt16 z, in SInt16 w ) = 'glVertex4s_wrapper';
function glVertex4sv( in SInt16 v[4] ) = 'glVertex4sv_wrapper';
function glVertexPointer( in SInt32 size, in UInt32 type, in UInt32 stride, in Data pointer ) = 'glVertexPointer_wrapper';
function glViewport( in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glViewport_wrapper';
function glCopyTexSubImage3D( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 zoffset, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glCopyTexSubImage3D_wrapper';
function glDrawRangeElements( in UInt32 mode, in UInt32 start, in UInt32 end, in UInt32 count, in UInt32 type, in Data indices ) = 'glDrawRangeElements_wrapper';
function glTexImage3D( in UInt32 target, in SInt32 level, in SInt32 internalFormat, in UInt32 width, in UInt32 height, in UInt32 depth, in SInt32 border, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTexImage3D_wrapper';
function glTexSubImage3D( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 zoffset, in UInt32 width, in UInt32 height, in UInt32 depth, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTexSubImage3D_wrapper';
function glActiveTexture( in UInt32 texture ) = 'glActiveTexture_wrapper';
function glClientActiveTexture( in UInt32 texture ) = 'glClientActiveTexture_wrapper';
function glCompressedTexImage1D( in UInt32 target, in SInt32 level, in UInt32 internalformat, in UInt32 width, in SInt32 border, in UInt32 imageSize, in Data data ) = 'glCompressedTexImage1D_wrapper';
function glCompressedTexImage2D( in UInt32 target, in SInt32 level, in UInt32 internalformat, in UInt32 width, in UInt32 height, in SInt32 border, in UInt32 imageSize, in Data data ) = 'glCompressedTexImage2D_wrapper';
function glCompressedTexImage3D( in UInt32 target, in SInt32 level, in UInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 depth, in SInt32 border, in UInt32 imageSize, in Data data ) = 'glCompressedTexImage3D_wrapper';
function glCompressedTexSubImage1D( in UInt32 target, in SInt32 level, in SInt32 xoffset, in UInt32 width, in UInt32 format, in UInt32 imageSize, in Data data ) = 'glCompressedTexSubImage1D_wrapper';
function glCompressedTexSubImage2D( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 imageSize, in Data data ) = 'glCompressedTexSubImage2D_wrapper';
function glCompressedTexSubImage3D( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 zoffset, in UInt32 width, in UInt32 height, in UInt32 depth, in UInt32 format, in UInt32 imageSize, in Data data ) = 'glCompressedTexSubImage3D_wrapper';
function glGetCompressedTexImage( in UInt32 target, in SInt32 lod, in Data img ) = 'glGetCompressedTexImage_wrapper';
function glMultiTexCoord1d( in UInt32 target, in Float64 s ) = 'glMultiTexCoord1d_wrapper';
function glMultiTexCoord1dv( in UInt32 target, in Float64 v[1] ) = 'glMultiTexCoord1dv_wrapper';
function glMultiTexCoord1f( in UInt32 target, in Float32 s ) = 'glMultiTexCoord1f_wrapper';
function glMultiTexCoord1fv( in UInt32 target, in Float32 v[1] ) = 'glMultiTexCoord1fv_wrapper';
function glMultiTexCoord1i( in UInt32 target, in SInt32 s ) = 'glMultiTexCoord1i_wrapper';
function glMultiTexCoord1iv( in UInt32 target, in SInt32 v[1] ) = 'glMultiTexCoord1iv_wrapper';
function glMultiTexCoord1s( in UInt32 target, in SInt16 s ) = 'glMultiTexCoord1s_wrapper';
function glMultiTexCoord1sv( in UInt32 target, in SInt16 v[1] ) = 'glMultiTexCoord1sv_wrapper';
function glMultiTexCoord2d( in UInt32 target, in Float64 s, in Float64 t ) = 'glMultiTexCoord2d_wrapper';
function glMultiTexCoord2dv( in UInt32 target, in Float64 v[2] ) = 'glMultiTexCoord2dv_wrapper';
function glMultiTexCoord2f( in UInt32 target, in Float32 s, in Float32 t ) = 'glMultiTexCoord2f_wrapper';
function glMultiTexCoord2fv( in UInt32 target, in Float32 v[2] ) = 'glMultiTexCoord2fv_wrapper';
function glMultiTexCoord2i( in UInt32 target, in SInt32 s, in SInt32 t ) = 'glMultiTexCoord2i_wrapper';
function glMultiTexCoord2iv( in UInt32 target, in SInt32 v[2] ) = 'glMultiTexCoord2iv_wrapper';
function glMultiTexCoord2s( in UInt32 target, in SInt16 s, in SInt16 t ) = 'glMultiTexCoord2s_wrapper';
function glMultiTexCoord2sv( in UInt32 target, in SInt16 v[2] ) = 'glMultiTexCoord2sv_wrapper';
function glMultiTexCoord3d( in UInt32 target, in Float64 s, in Float64 t, in Float64 r ) = 'glMultiTexCoord3d_wrapper';
function glMultiTexCoord3dv( in UInt32 target, in Float64 v[3] ) = 'glMultiTexCoord3dv_wrapper';
function glMultiTexCoord3f( in UInt32 target, in Float32 s, in Float32 t, in Float32 r ) = 'glMultiTexCoord3f_wrapper';
function glMultiTexCoord3fv( in UInt32 target, in Float32 v[3] ) = 'glMultiTexCoord3fv_wrapper';
function glMultiTexCoord3i( in UInt32 target, in SInt32 s, in SInt32 t, in SInt32 r ) = 'glMultiTexCoord3i_wrapper';
function glMultiTexCoord3iv( in UInt32 target, in SInt32 v[3] ) = 'glMultiTexCoord3iv_wrapper';
function glMultiTexCoord3s( in UInt32 target, in SInt16 s, in SInt16 t, in SInt16 r ) = 'glMultiTexCoord3s_wrapper';
function glMultiTexCoord3sv( in UInt32 target, in SInt16 v[3] ) = 'glMultiTexCoord3sv_wrapper';
function glMultiTexCoord4d( in UInt32 target, in Float64 s, in Float64 t, in Float64 r, in Float64 q ) = 'glMultiTexCoord4d_wrapper';
function glMultiTexCoord4dv( in UInt32 target, in Float64 v[4] ) = 'glMultiTexCoord4dv_wrapper';
function glMultiTexCoord4f( in UInt32 target, in Float32 s, in Float32 t, in Float32 r, in Float32 q ) = 'glMultiTexCoord4f_wrapper';
function glMultiTexCoord4fv( in UInt32 target, in Float32 v[4] ) = 'glMultiTexCoord4fv_wrapper';
function glMultiTexCoord4i( in UInt32 target, in SInt32 s, in SInt32 t, in SInt32 r, in SInt32 q ) = 'glMultiTexCoord4i_wrapper';
function glMultiTexCoord4iv( in UInt32 target, in SInt32 v[4] ) = 'glMultiTexCoord4iv_wrapper';
function glMultiTexCoord4s( in UInt32 target, in SInt16 s, in SInt16 t, in SInt16 r, in SInt16 q ) = 'glMultiTexCoord4s_wrapper';
function glMultiTexCoord4sv( in UInt32 target, in SInt16 v[4] ) = 'glMultiTexCoord4sv_wrapper';
function glSampleCoverage( in Float32 value, in Boolean invert ) = 'glSampleCoverage_wrapper';
function glBlendColor( in Float32 red, in Float32 green, in Float32 blue, in Float32 alpha ) = 'glBlendColor_wrapper';
function glBlendEquation( in UInt32 mode ) = 'glBlendEquation_wrapper';
function glBlendFuncSeparate( in UInt32 sfactorRGB, in UInt32 dfactorRGB, in UInt32 sfactorAlpha, in UInt32 dfactorAlpha ) = 'glBlendFuncSeparate_wrapper';
function glFogCoordPointer( in UInt32 type, in UInt32 stride, in Data pointer ) = 'glFogCoordPointer_wrapper';
function glFogCoordd( in Float64 coord ) = 'glFogCoordd_wrapper';
function glFogCoorddv( in Float64 coord[] ) = 'glFogCoorddv_wrapper';
function glFogCoordf( in Float32 coord ) = 'glFogCoordf_wrapper';
function glFogCoordfv( in Float32 coord[] ) = 'glFogCoordfv_wrapper';
function glMultiDrawArrays( in UInt32 mode, in SInt32 first[], in UInt32 count[], in UInt32 drawcount ) = 'glMultiDrawArrays_wrapper';
function glPointParameterf( in UInt32 pname, in Float32 param ) = 'glPointParameterf_wrapper';
function glPointParameterfv( in UInt32 pname, in Float32 params[] ) = 'glPointParameterfv_wrapper';
function glPointParameteri( in UInt32 pname, in SInt32 param ) = 'glPointParameteri_wrapper';
function glPointParameteriv( in UInt32 pname, in SInt32 params[] ) = 'glPointParameteriv_wrapper';
function glSecondaryColor3b( in Byte red, in Byte green, in Byte blue ) = 'glSecondaryColor3b_wrapper';
function glSecondaryColor3bv( in Byte v[3] ) = 'glSecondaryColor3bv_wrapper';
function glSecondaryColor3d( in Float64 red, in Float64 green, in Float64 blue ) = 'glSecondaryColor3d_wrapper';
function glSecondaryColor3dv( in Float64 v[3] ) = 'glSecondaryColor3dv_wrapper';
function glSecondaryColor3f( in Float32 red, in Float32 green, in Float32 blue ) = 'glSecondaryColor3f_wrapper';
function glSecondaryColor3fv( in Float32 v[3] ) = 'glSecondaryColor3fv_wrapper';
function glSecondaryColor3i( in SInt32 red, in SInt32 green, in SInt32 blue ) = 'glSecondaryColor3i_wrapper';
function glSecondaryColor3iv( in SInt32 v[3] ) = 'glSecondaryColor3iv_wrapper';
function glSecondaryColor3s( in SInt16 red, in SInt16 green, in SInt16 blue ) = 'glSecondaryColor3s_wrapper';
function glSecondaryColor3sv( in SInt16 v[3] ) = 'glSecondaryColor3sv_wrapper';
function glSecondaryColor3ub( in Byte red, in Byte green, in Byte blue ) = 'glSecondaryColor3ub_wrapper';
function glSecondaryColor3ubv( in Byte v[3] ) = 'glSecondaryColor3ubv_wrapper';
function glSecondaryColor3ui( in UInt32 red, in UInt32 green, in UInt32 blue ) = 'glSecondaryColor3ui_wrapper';
function glSecondaryColor3uiv( in UInt32 v[3] ) = 'glSecondaryColor3uiv_wrapper';
function glSecondaryColor3us( in UInt16 red, in UInt16 green, in UInt16 blue ) = 'glSecondaryColor3us_wrapper';
function glSecondaryColor3usv( in UInt16 v[3] ) = 'glSecondaryColor3usv_wrapper';
function glSecondaryColorPointer( in SInt32 size, in UInt32 type, in UInt32 stride, in Data pointer ) = 'glSecondaryColorPointer_wrapper';
function glWindowPos2d( in Float64 x, in Float64 y ) = 'glWindowPos2d_wrapper';
function glWindowPos2dv( in Float64 p[2] ) = 'glWindowPos2dv_wrapper';
function glWindowPos2f( in Float32 x, in Float32 y ) = 'glWindowPos2f_wrapper';
function glWindowPos2fv( in Float32 p[2] ) = 'glWindowPos2fv_wrapper';
function glWindowPos2i( in SInt32 x, in SInt32 y ) = 'glWindowPos2i_wrapper';
function glWindowPos2iv( in SInt32 p[2] ) = 'glWindowPos2iv_wrapper';
function glWindowPos2s( in SInt16 x, in SInt16 y ) = 'glWindowPos2s_wrapper';
function glWindowPos2sv( in SInt16 p[2] ) = 'glWindowPos2sv_wrapper';
function glWindowPos3d( in Float64 x, in Float64 y, in Float64 z ) = 'glWindowPos3d_wrapper';
function glWindowPos3dv( in Float64 p[3] ) = 'glWindowPos3dv_wrapper';
function glWindowPos3f( in Float32 x, in Float32 y, in Float32 z ) = 'glWindowPos3f_wrapper';
function glWindowPos3fv( in Float32 p[3] ) = 'glWindowPos3fv_wrapper';
function glWindowPos3i( in SInt32 x, in SInt32 y, in SInt32 z ) = 'glWindowPos3i_wrapper';
function glWindowPos3iv( in SInt32 p[3] ) = 'glWindowPos3iv_wrapper';
function glWindowPos3s( in SInt16 x, in SInt16 y, in SInt16 z ) = 'glWindowPos3s_wrapper';
function glWindowPos3sv( in SInt16 p[3] ) = 'glWindowPos3sv_wrapper';
function glBeginQuery( in UInt32 target, in UInt32 id ) = 'glBeginQuery_wrapper';
function glBindBuffer( in UInt32 target, in UInt32 buffer ) = 'glBindBuffer_wrapper';
function glBufferData( in UInt32 target, in Size size, in Data data, in UInt32 usage ) = 'glBufferData_wrapper';
function glBufferSubData( in UInt32 target, in Size offset, in Size size, in Data data ) = 'glBufferSubData_wrapper';
function glDeleteBuffers( in UInt32 n, in UInt32 buffers[] ) = 'glDeleteBuffers_wrapper';
function glDeleteQueries( in UInt32 n, in UInt32 ids[] ) = 'glDeleteQueries_wrapper';
function glEndQuery( in UInt32 target ) = 'glEndQuery_wrapper';
function glGenBuffers( in UInt32 n, io UInt32 buffers[] ) = 'glGenBuffers_wrapper';
function glGenQueries( in UInt32 n, io UInt32 ids[] ) = 'glGenQueries_wrapper';
function glGetBufferParameteriv( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetBufferParameteriv_wrapper';
function glGetBufferSubData( in UInt32 target, in Size offset, in Size size, in Data data ) = 'glGetBufferSubData_wrapper';
function glGetQueryObjectiv( in UInt32 id, in UInt32 pname, io SInt32 params[] ) = 'glGetQueryObjectiv_wrapper';
function glGetQueryObjectuiv( in UInt32 id, in UInt32 pname, io UInt32 params[] ) = 'glGetQueryObjectuiv_wrapper';
function glGetQueryiv( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetQueryiv_wrapper';
function Boolean glIsBuffer( in UInt32 buffer ) = 'glIsBuffer_wrapper';
function Boolean glIsQuery( in UInt32 id ) = 'glIsQuery_wrapper';
function Data glMapBuffer( in UInt32 target, in UInt32 access ) = 'glMapBuffer_wrapper';
function Boolean glUnmapBuffer( in UInt32 target ) = 'glUnmapBuffer_wrapper';
function glAttachShader( in UInt32 program, in UInt32 shader ) = 'glAttachShader_wrapper';
function glBindAttribLocation( in UInt32 program, in UInt32 index, in String name ) = 'glBindAttribLocation_wrapper';
function glBlendEquationSeparate( in UInt32 var0, in UInt32 var1 ) = 'glBlendEquationSeparate_wrapper';
function glCompileShader( in UInt32 shader ) = 'glCompileShader_wrapper';
function UInt32 glCreateProgram(  ) = 'glCreateProgram_wrapper';
function UInt32 glCreateShader( in UInt32 type ) = 'glCreateShader_wrapper';
function glDeleteProgram( in UInt32 program ) = 'glDeleteProgram_wrapper';
function glDeleteShader( in UInt32 shader ) = 'glDeleteShader_wrapper';
function glDetachShader( in UInt32 program, in UInt32 shader ) = 'glDetachShader_wrapper';
function glDisableVertexAttribArray( in UInt32 var0 ) = 'glDisableVertexAttribArray_wrapper';
function glDrawBuffers( in UInt32 n, in UInt32 bufs[] ) = 'glDrawBuffers_wrapper';
function glEnableVertexAttribArray( in UInt32 var0 ) = 'glEnableVertexAttribArray_wrapper';
function glGetActiveAttrib( in UInt32 program, in UInt32 index, in UInt32 maxLength, io UInt32 length[], io SInt32 size[], io UInt32 type[], io String name ) = 'glGetActiveAttrib_wrapper';
function glGetActiveUniform( in UInt32 program, in UInt32 index, in UInt32 maxLength, io UInt32 length[], io SInt32 size[], io UInt32 type[], io String name ) = 'glGetActiveUniform_wrapper';
function glGetAttachedShaders( in UInt32 program, in UInt32 maxCount, io UInt32 count[], io UInt32 shaders[] ) = 'glGetAttachedShaders_wrapper';
function SInt32 glGetAttribLocation( in UInt32 program, in String name ) = 'glGetAttribLocation_wrapper';
function glGetProgramInfoLog( in UInt32 program, in UInt32 bufSize, io UInt32 length[], io String infoLog ) = 'glGetProgramInfoLog_wrapper';
function glGetProgramiv( in UInt32 program, in UInt32 pname, io SInt32 param[] ) = 'glGetProgramiv_wrapper';
function glGetShaderInfoLog( in UInt32 shader, in UInt32 bufSize, io UInt32 length[], io String infoLog ) = 'glGetShaderInfoLog_wrapper';
function glGetShaderSource( in UInt32 obj, in UInt32 maxLength, io UInt32 length[], io String source ) = 'glGetShaderSource_wrapper';
function glGetShaderiv( in UInt32 shader, in UInt32 pname, io SInt32 param[] ) = 'glGetShaderiv_wrapper';
function SInt32 glGetUniformLocation( in UInt32 program, in String name ) = 'glGetUniformLocation_wrapper';
function glGetUniformfv( in UInt32 program, in SInt32 location, io Float32 params[] ) = 'glGetUniformfv_wrapper';
function glGetUniformiv( in UInt32 program, in SInt32 location, io SInt32 params[] ) = 'glGetUniformiv_wrapper';
function glGetVertexAttribdv( in UInt32 var0, in UInt32 var1, io Float64 var2[] ) = 'glGetVertexAttribdv_wrapper';
function glGetVertexAttribfv( in UInt32 var0, in UInt32 var1, io Float32 var2[] ) = 'glGetVertexAttribfv_wrapper';
function glGetVertexAttribiv( in UInt32 var0, in UInt32 var1, io SInt32 var2[] ) = 'glGetVertexAttribiv_wrapper';
function Boolean glIsProgram( in UInt32 program ) = 'glIsProgram_wrapper';
function Boolean glIsShader( in UInt32 shader ) = 'glIsShader_wrapper';
function glLinkProgram( in UInt32 program ) = 'glLinkProgram_wrapper';
function glShaderSource( in UInt32 shader, in UInt32 count, in String strings[], in SInt32 lengths[] ) = 'glShaderSource_wrapper';
function glStencilFuncSeparate( in UInt32 frontfunc, in UInt32 backfunc, in SInt32 ref, in UInt32 mask ) = 'glStencilFuncSeparate_wrapper';
function glStencilMaskSeparate( in UInt32 var0, in UInt32 var1 ) = 'glStencilMaskSeparate_wrapper';
function glStencilOpSeparate( in UInt32 face, in UInt32 sfail, in UInt32 dpfail, in UInt32 dppass ) = 'glStencilOpSeparate_wrapper';
function glUniform1f( in SInt32 location, in Float32 v0 ) = 'glUniform1f_wrapper';
function glUniform1fv( in SInt32 location, in UInt32 count, in Float32 value[1] ) = 'glUniform1fv_wrapper';
function glUniform1i( in SInt32 location, in SInt32 v0 ) = 'glUniform1i_wrapper';
function glUniform1iv( in SInt32 location, in UInt32 count, in SInt32 value[1] ) = 'glUniform1iv_wrapper';
function glUniform2f( in SInt32 location, in Float32 v0, in Float32 v1 ) = 'glUniform2f_wrapper';
function glUniform2fv( in SInt32 location, in UInt32 count, in Float32 value[2] ) = 'glUniform2fv_wrapper';
function glUniform2i( in SInt32 location, in SInt32 v0, in SInt32 v1 ) = 'glUniform2i_wrapper';
function glUniform2iv( in SInt32 location, in UInt32 count, in SInt32 value[2] ) = 'glUniform2iv_wrapper';
function glUniform3f( in SInt32 location, in Float32 v0, in Float32 v1, in Float32 v2 ) = 'glUniform3f_wrapper';
function glUniform3fv( in SInt32 location, in UInt32 count, in Float32 value[3] ) = 'glUniform3fv_wrapper';
function glUniform3i( in SInt32 location, in SInt32 v0, in SInt32 v1, in SInt32 v2 ) = 'glUniform3i_wrapper';
function glUniform3iv( in SInt32 location, in UInt32 count, in SInt32 value[3] ) = 'glUniform3iv_wrapper';
function glUniform4f( in SInt32 location, in Float32 v0, in Float32 v1, in Float32 v2, in Float32 v3 ) = 'glUniform4f_wrapper';
function glUniform4fv( in SInt32 location, in UInt32 count, in Float32 value[4] ) = 'glUniform4fv_wrapper';
function glUniform4i( in SInt32 location, in SInt32 v0, in SInt32 v1, in SInt32 v2, in SInt32 v3 ) = 'glUniform4i_wrapper';
function glUniform4iv( in SInt32 location, in UInt32 count, in SInt32 value[4] ) = 'glUniform4iv_wrapper';
function glUniformMatrix2fv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glUniformMatrix2fv_wrapper';
function glUniformMatrix3fv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glUniformMatrix3fv_wrapper';
function glUniformMatrix4fv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glUniformMatrix4fv_wrapper';
function glUseProgram( in UInt32 program ) = 'glUseProgram_wrapper';
function glValidateProgram( in UInt32 program ) = 'glValidateProgram_wrapper';
function glVertexAttrib1d( in UInt32 index, in Float64 x ) = 'glVertexAttrib1d_wrapper';
function glVertexAttrib1dv( in UInt32 index, in Float64 v[1] ) = 'glVertexAttrib1dv_wrapper';
function glVertexAttrib1f( in UInt32 index, in Float32 x ) = 'glVertexAttrib1f_wrapper';
function glVertexAttrib1fv( in UInt32 index, in Float32 v[1] ) = 'glVertexAttrib1fv_wrapper';
function glVertexAttrib1s( in UInt32 index, in SInt16 x ) = 'glVertexAttrib1s_wrapper';
function glVertexAttrib1sv( in UInt32 index, in SInt16 v[1] ) = 'glVertexAttrib1sv_wrapper';
function glVertexAttrib2d( in UInt32 index, in Float64 x, in Float64 y ) = 'glVertexAttrib2d_wrapper';
function glVertexAttrib2dv( in UInt32 index, in Float64 v[2] ) = 'glVertexAttrib2dv_wrapper';
function glVertexAttrib2f( in UInt32 index, in Float32 x, in Float32 y ) = 'glVertexAttrib2f_wrapper';
function glVertexAttrib2fv( in UInt32 index, in Float32 v[2] ) = 'glVertexAttrib2fv_wrapper';
function glVertexAttrib2s( in UInt32 index, in SInt16 x, in SInt16 y ) = 'glVertexAttrib2s_wrapper';
function glVertexAttrib2sv( in UInt32 index, in SInt16 v[2] ) = 'glVertexAttrib2sv_wrapper';
function glVertexAttrib3d( in UInt32 index, in Float64 x, in Float64 y, in Float64 z ) = 'glVertexAttrib3d_wrapper';
function glVertexAttrib3dv( in UInt32 index, in Float64 v[3] ) = 'glVertexAttrib3dv_wrapper';
function glVertexAttrib3f( in UInt32 index, in Float32 x, in Float32 y, in Float32 z ) = 'glVertexAttrib3f_wrapper';
function glVertexAttrib3fv( in UInt32 index, in Float32 v[3] ) = 'glVertexAttrib3fv_wrapper';
function glVertexAttrib3s( in UInt32 index, in SInt16 x, in SInt16 y, in SInt16 z ) = 'glVertexAttrib3s_wrapper';
function glVertexAttrib3sv( in UInt32 index, in SInt16 v[3] ) = 'glVertexAttrib3sv_wrapper';
function glVertexAttrib4Nbv( in UInt32 index, in Byte v[4] ) = 'glVertexAttrib4Nbv_wrapper';
function glVertexAttrib4Niv( in UInt32 index, in SInt32 v[4] ) = 'glVertexAttrib4Niv_wrapper';
function glVertexAttrib4Nsv( in UInt32 index, in SInt16 v[4] ) = 'glVertexAttrib4Nsv_wrapper';
function glVertexAttrib4Nub( in UInt32 index, in Byte x, in Byte y, in Byte z, in Byte w ) = 'glVertexAttrib4Nub_wrapper';
function glVertexAttrib4Nubv( in UInt32 index, in Byte v[4] ) = 'glVertexAttrib4Nubv_wrapper';
function glVertexAttrib4Nuiv( in UInt32 index, in UInt32 v[4] ) = 'glVertexAttrib4Nuiv_wrapper';
function glVertexAttrib4Nusv( in UInt32 index, in UInt16 v[4] ) = 'glVertexAttrib4Nusv_wrapper';
function glVertexAttrib4bv( in UInt32 index, in Byte v[4] ) = 'glVertexAttrib4bv_wrapper';
function glVertexAttrib4d( in UInt32 index, in Float64 x, in Float64 y, in Float64 z, in Float64 w ) = 'glVertexAttrib4d_wrapper';
function glVertexAttrib4dv( in UInt32 index, in Float64 v[4] ) = 'glVertexAttrib4dv_wrapper';
function glVertexAttrib4f( in UInt32 index, in Float32 x, in Float32 y, in Float32 z, in Float32 w ) = 'glVertexAttrib4f_wrapper';
function glVertexAttrib4fv( in UInt32 index, in Float32 v[4] ) = 'glVertexAttrib4fv_wrapper';
function glVertexAttrib4iv( in UInt32 index, in SInt32 v[4] ) = 'glVertexAttrib4iv_wrapper';
function glVertexAttrib4s( in UInt32 index, in SInt16 x, in SInt16 y, in SInt16 z, in SInt16 w ) = 'glVertexAttrib4s_wrapper';
function glVertexAttrib4sv( in UInt32 index, in SInt16 v[4] ) = 'glVertexAttrib4sv_wrapper';
function glVertexAttrib4ubv( in UInt32 index, in Byte v[4] ) = 'glVertexAttrib4ubv_wrapper';
function glVertexAttrib4uiv( in UInt32 index, in UInt32 v[4] ) = 'glVertexAttrib4uiv_wrapper';
function glVertexAttrib4usv( in UInt32 index, in UInt16 v[4] ) = 'glVertexAttrib4usv_wrapper';
function glVertexAttribPointer( in UInt32 index, in SInt32 size, in UInt32 type, in Boolean normalized, in UInt32 stride, in Data pointer ) = 'glVertexAttribPointer_wrapper';
function glUniformMatrix2x3fv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glUniformMatrix2x3fv_wrapper';
function glUniformMatrix2x4fv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glUniformMatrix2x4fv_wrapper';
function glUniformMatrix3x2fv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glUniformMatrix3x2fv_wrapper';
function glUniformMatrix3x4fv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glUniformMatrix3x4fv_wrapper';
function glUniformMatrix4x2fv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glUniformMatrix4x2fv_wrapper';
function glUniformMatrix4x3fv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glUniformMatrix4x3fv_wrapper';
function glBeginConditionalRender( in UInt32 var0, in UInt32 var1 ) = 'glBeginConditionalRender_wrapper';
function glBeginTransformFeedback( in UInt32 var0 ) = 'glBeginTransformFeedback_wrapper';
function glBindFragDataLocation( in UInt32 var0, in UInt32 var1, in String var2 ) = 'glBindFragDataLocation_wrapper';
function glClampColor( in UInt32 var0, in UInt32 var1 ) = 'glClampColor_wrapper';
function glClearBufferfi( in UInt32 var0, in SInt32 var1, in Float32 var2, in SInt32 var3 ) = 'glClearBufferfi_wrapper';
function glClearBufferfv( in UInt32 var0, in SInt32 var1, in Float32 var2[] ) = 'glClearBufferfv_wrapper';
function glClearBufferiv( in UInt32 var0, in SInt32 var1, in SInt32 var2[] ) = 'glClearBufferiv_wrapper';
function glClearBufferuiv( in UInt32 var0, in SInt32 var1, in UInt32 var2[] ) = 'glClearBufferuiv_wrapper';
function glColorMaski( in UInt32 var0, in Boolean var1, in Boolean var2, in Boolean var3, in Boolean var4 ) = 'glColorMaski_wrapper';
function glDisablei( in UInt32 var0, in UInt32 var1 ) = 'glDisablei_wrapper';
function glEnablei( in UInt32 var0, in UInt32 var1 ) = 'glEnablei_wrapper';
function glEndConditionalRender(  ) = 'glEndConditionalRender_wrapper';
function glEndTransformFeedback(  ) = 'glEndTransformFeedback_wrapper';
function glGetBooleani_v( in UInt32 var0, in UInt32 var1, io Boolean var2[] ) = 'glGetBooleani_v_wrapper';
function SInt32 glGetFragDataLocation( in UInt32 var0, in String var1 ) = 'glGetFragDataLocation_wrapper';
function glGetTexParameterIiv( in UInt32 var0, in UInt32 var1, io SInt32 var2[] ) = 'glGetTexParameterIiv_wrapper';
function glGetTexParameterIuiv( in UInt32 var0, in UInt32 var1, io UInt32 var2[] ) = 'glGetTexParameterIuiv_wrapper';
function glGetTransformFeedbackVarying( in UInt32 var0, in UInt32 var1, in UInt32 var2, io UInt32 var3[], io UInt32 var4[], io UInt32 var5[], io String var6 ) = 'glGetTransformFeedbackVarying_wrapper';
function glGetUniformuiv( in UInt32 var0, in SInt32 var1, io UInt32 var2[] ) = 'glGetUniformuiv_wrapper';
function glGetVertexAttribIiv( in UInt32 var0, in UInt32 var1, io SInt32 var2[] ) = 'glGetVertexAttribIiv_wrapper';
function glGetVertexAttribIuiv( in UInt32 var0, in UInt32 var1, io UInt32 var2[] ) = 'glGetVertexAttribIuiv_wrapper';
function Boolean glIsEnabledi( in UInt32 var0, in UInt32 var1 ) = 'glIsEnabledi_wrapper';
function glTexParameterIiv( in UInt32 var0, in UInt32 var1, in SInt32 var2[] ) = 'glTexParameterIiv_wrapper';
function glTexParameterIuiv( in UInt32 var0, in UInt32 var1, in UInt32 var2[] ) = 'glTexParameterIuiv_wrapper';
function glTransformFeedbackVaryings( in UInt32 var0, in UInt32 var1, in String var2[], in UInt32 var3 ) = 'glTransformFeedbackVaryings_wrapper';
function glUniform1ui( in SInt32 var0, in UInt32 var1 ) = 'glUniform1ui_wrapper';
function glUniform1uiv( in SInt32 var0, in UInt32 var1, in UInt32 var2[1] ) = 'glUniform1uiv_wrapper';
function glUniform2ui( in SInt32 var0, in UInt32 var1, in UInt32 var2 ) = 'glUniform2ui_wrapper';
function glUniform2uiv( in SInt32 var0, in UInt32 var1, in UInt32 var2[2] ) = 'glUniform2uiv_wrapper';
function glUniform3ui( in SInt32 var0, in UInt32 var1, in UInt32 var2, in UInt32 var3 ) = 'glUniform3ui_wrapper';
function glUniform3uiv( in SInt32 var0, in UInt32 var1, in UInt32 var2[3] ) = 'glUniform3uiv_wrapper';
function glUniform4ui( in SInt32 var0, in UInt32 var1, in UInt32 var2, in UInt32 var3, in UInt32 var4 ) = 'glUniform4ui_wrapper';
function glUniform4uiv( in SInt32 var0, in UInt32 var1, in UInt32 var2[4] ) = 'glUniform4uiv_wrapper';
function glVertexAttribI1i( in UInt32 var0, in SInt32 var1 ) = 'glVertexAttribI1i_wrapper';
function glVertexAttribI1iv( in UInt32 var0, in SInt32 var1[1] ) = 'glVertexAttribI1iv_wrapper';
function glVertexAttribI1ui( in UInt32 var0, in UInt32 var1 ) = 'glVertexAttribI1ui_wrapper';
function glVertexAttribI1uiv( in UInt32 var0, in UInt32 var1[1] ) = 'glVertexAttribI1uiv_wrapper';
function glVertexAttribI2i( in UInt32 var0, in SInt32 var1, in SInt32 var2 ) = 'glVertexAttribI2i_wrapper';
function glVertexAttribI2iv( in UInt32 var0, in SInt32 var1[2] ) = 'glVertexAttribI2iv_wrapper';
function glVertexAttribI2ui( in UInt32 var0, in UInt32 var1, in UInt32 var2 ) = 'glVertexAttribI2ui_wrapper';
function glVertexAttribI2uiv( in UInt32 var0, in UInt32 var1[2] ) = 'glVertexAttribI2uiv_wrapper';
function glVertexAttribI3i( in UInt32 var0, in SInt32 var1, in SInt32 var2, in SInt32 var3 ) = 'glVertexAttribI3i_wrapper';
function glVertexAttribI3iv( in UInt32 var0, in SInt32 var1[3] ) = 'glVertexAttribI3iv_wrapper';
function glVertexAttribI3ui( in UInt32 var0, in UInt32 var1, in UInt32 var2, in UInt32 var3 ) = 'glVertexAttribI3ui_wrapper';
function glVertexAttribI3uiv( in UInt32 var0, in UInt32 var1[3] ) = 'glVertexAttribI3uiv_wrapper';
function glVertexAttribI4bv( in UInt32 var0, in Byte var1[4] ) = 'glVertexAttribI4bv_wrapper';
function glVertexAttribI4i( in UInt32 var0, in SInt32 var1, in SInt32 var2, in SInt32 var3, in SInt32 var4 ) = 'glVertexAttribI4i_wrapper';
function glVertexAttribI4iv( in UInt32 var0, in SInt32 var1[4] ) = 'glVertexAttribI4iv_wrapper';
function glVertexAttribI4sv( in UInt32 var0, in SInt16 var1[4] ) = 'glVertexAttribI4sv_wrapper';
function glVertexAttribI4ubv( in UInt32 var0, in Byte var1[4] ) = 'glVertexAttribI4ubv_wrapper';
function glVertexAttribI4ui( in UInt32 var0, in UInt32 var1, in UInt32 var2, in UInt32 var3, in UInt32 var4 ) = 'glVertexAttribI4ui_wrapper';
function glVertexAttribI4uiv( in UInt32 var0, in UInt32 var1[4] ) = 'glVertexAttribI4uiv_wrapper';
function glVertexAttribI4usv( in UInt32 var0, in UInt16 var1[4] ) = 'glVertexAttribI4usv_wrapper';
function glVertexAttribIPointer( in UInt32 var0, in SInt32 var1, in UInt32 var2, in UInt32 var3, in Data var4 ) = 'glVertexAttribIPointer_wrapper';
function glDrawArraysInstanced( in UInt32 var0, in SInt32 var1, in UInt32 var2, in UInt32 var3 ) = 'glDrawArraysInstanced_wrapper';
function glDrawElementsInstanced( in UInt32 var0, in UInt32 var1, in UInt32 var2, in Data var3, in UInt32 var4 ) = 'glDrawElementsInstanced_wrapper';
function glPrimitiveRestartIndex( in UInt32 var0 ) = 'glPrimitiveRestartIndex_wrapper';
function glTexBuffer( in UInt32 var0, in UInt32 var1, in UInt32 var2 ) = 'glTexBuffer_wrapper';
function glFramebufferTexture( in UInt32 var0, in UInt32 var1, in UInt32 var2, in SInt32 var3 ) = 'glFramebufferTexture_wrapper';
function glVertexAttribDivisor( in UInt32 index, in UInt32 divisor ) = 'glVertexAttribDivisor_wrapper';
function glBlendEquationSeparatei( in UInt32 buf, in UInt32 modeRGB, in UInt32 modeAlpha ) = 'glBlendEquationSeparatei_wrapper';
function glBlendEquationi( in UInt32 buf, in UInt32 mode ) = 'glBlendEquationi_wrapper';
function glBlendFuncSeparatei( in UInt32 buf, in UInt32 srcRGB, in UInt32 dstRGB, in UInt32 srcAlpha, in UInt32 dstAlpha ) = 'glBlendFuncSeparatei_wrapper';
function glBlendFunci( in UInt32 buf, in UInt32 src, in UInt32 dst ) = 'glBlendFunci_wrapper';
function glMinSampleShading( in Float32 value ) = 'glMinSampleShading_wrapper';
function glTbufferMask3DFX( in UInt32 mask ) = 'glTbufferMask3DFX_wrapper';
function glClearDepthf( in Float32 d ) = 'glClearDepthf_wrapper';
function glDepthRangef( in Float32 n, in Float32 f ) = 'glDepthRangef_wrapper';
function glGetShaderPrecisionFormat( in UInt32 shadertype, in UInt32 precisiontype, io SInt32 range[], io SInt32 precision[] ) = 'glGetShaderPrecisionFormat_wrapper';
function glReleaseShaderCompiler(  ) = 'glReleaseShaderCompiler_wrapper';
function glShaderBinary( in UInt32 count, in UInt32 shaders[], in UInt32 binaryformat, in Data binary, in UInt32 length ) = 'glShaderBinary_wrapper';
function glDrawArraysInstancedBaseInstance( in UInt32 mode, in SInt32 first, in UInt32 count, in UInt32 primcount, in UInt32 baseinstance ) = 'glDrawArraysInstancedBaseInstance_wrapper';
function glDrawElementsInstancedBaseInstance( in UInt32 mode, in UInt32 count, in UInt32 type, in Data indices, in UInt32 primcount, in UInt32 baseinstance ) = 'glDrawElementsInstancedBaseInstance_wrapper';
function glDrawElementsInstancedBaseVertexBaseInstance( in UInt32 mode, in UInt32 count, in UInt32 type, in Data indices, in UInt32 primcount, in SInt32 basevertex, in UInt32 baseinstance ) = 'glDrawElementsInstancedBaseVertexBaseInstance_wrapper';
function glBindFragDataLocationIndexed( in UInt32 program, in UInt32 colorNumber, in UInt32 index, in String name ) = 'glBindFragDataLocationIndexed_wrapper';
function SInt32 glGetFragDataIndex( in UInt32 program, in String name ) = 'glGetFragDataIndex_wrapper';
function glClearBufferData( in UInt32 target, in UInt32 internalformat, in UInt32 format, in UInt32 type, in Data data ) = 'glClearBufferData_wrapper';
function glClearBufferSubData( in UInt32 target, in UInt32 internalformat, in Size offset, in Size size, in UInt32 format, in UInt32 type, in Data data ) = 'glClearBufferSubData_wrapper';
function glClearNamedBufferDataEXT( in UInt32 buffer, in UInt32 internalformat, in UInt32 format, in UInt32 type, in Data data ) = 'glClearNamedBufferDataEXT_wrapper';
function glClearNamedBufferSubDataEXT( in UInt32 buffer, in UInt32 internalformat, in Size offset, in Size size, in UInt32 format, in UInt32 type, in Data data ) = 'glClearNamedBufferSubDataEXT_wrapper';
function glClampColorARB( in UInt32 target, in UInt32 clamp ) = 'glClampColorARB_wrapper';
function glDispatchCompute( in UInt32 num_groups_x, in UInt32 num_groups_y, in UInt32 num_groups_z ) = 'glDispatchCompute_wrapper';
function glDispatchComputeIndirect( in Size indirect ) = 'glDispatchComputeIndirect_wrapper';
function glCopyBufferSubData( in UInt32 readtarget, in UInt32 writetarget, in Size readoffset, in Size writeoffset, in Size size ) = 'glCopyBufferSubData_wrapper';
function glCopyImageSubData( in UInt32 srcName, in UInt32 srcTarget, in SInt32 srcLevel, in SInt32 srcX, in SInt32 srcY, in SInt32 srcZ, in UInt32 dstName, in UInt32 dstTarget, in SInt32 dstLevel, in SInt32 dstX, in SInt32 dstY, in SInt32 dstZ, in UInt32 srcWidth, in UInt32 srcHeight, in UInt32 srcDepth ) = 'glCopyImageSubData_wrapper';
function glDebugMessageControlARB( in UInt32 source, in UInt32 type, in UInt32 severity, in UInt32 count, in UInt32 ids[], in Boolean enabled ) = 'glDebugMessageControlARB_wrapper';
function glDebugMessageInsertARB( in UInt32 source, in UInt32 type, in UInt32 id, in UInt32 severity, in UInt32 length, in String buf ) = 'glDebugMessageInsertARB_wrapper';
function UInt32 glGetDebugMessageLogARB( in UInt32 count, in UInt32 bufsize, io UInt32 sources[], io UInt32 types[], io UInt32 ids[], io UInt32 severities[], io UInt32 lengths[], io String messageLog ) = 'glGetDebugMessageLogARB_wrapper';
function glDrawBuffersARB( in UInt32 n, in UInt32 bufs[] ) = 'glDrawBuffersARB_wrapper';
function glBlendEquationSeparateiARB( in UInt32 buf, in UInt32 modeRGB, in UInt32 modeAlpha ) = 'glBlendEquationSeparateiARB_wrapper';
function glBlendEquationiARB( in UInt32 buf, in UInt32 mode ) = 'glBlendEquationiARB_wrapper';
function glBlendFuncSeparateiARB( in UInt32 buf, in UInt32 srcRGB, in UInt32 dstRGB, in UInt32 srcAlpha, in UInt32 dstAlpha ) = 'glBlendFuncSeparateiARB_wrapper';
function glBlendFunciARB( in UInt32 buf, in UInt32 src, in UInt32 dst ) = 'glBlendFunciARB_wrapper';
function glDrawElementsBaseVertex( in UInt32 mode, in UInt32 count, in UInt32 type, in Data indices, in SInt32 basevertex ) = 'glDrawElementsBaseVertex_wrapper';
function glDrawElementsInstancedBaseVertex( in UInt32 mode, in UInt32 count, in UInt32 type, in Data indices, in UInt32 primcount, in SInt32 basevertex ) = 'glDrawElementsInstancedBaseVertex_wrapper';
function glDrawRangeElementsBaseVertex( in UInt32 mode, in UInt32 start, in UInt32 end, in UInt32 count, in UInt32 type, in Data indices, in SInt32 basevertex ) = 'glDrawRangeElementsBaseVertex_wrapper';
function glDrawArraysIndirect( in UInt32 mode, in Data indirect ) = 'glDrawArraysIndirect_wrapper';
function glDrawElementsIndirect( in UInt32 mode, in UInt32 type, in Data indirect ) = 'glDrawElementsIndirect_wrapper';
function glFramebufferParameteri( in UInt32 target, in UInt32 pname, in SInt32 param ) = 'glFramebufferParameteri_wrapper';
function glGetFramebufferParameteriv( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetFramebufferParameteriv_wrapper';
function glGetNamedFramebufferParameterivEXT( in UInt32 framebuffer, in UInt32 pname, io SInt32 params[] ) = 'glGetNamedFramebufferParameterivEXT_wrapper';
function glNamedFramebufferParameteriEXT( in UInt32 framebuffer, in UInt32 pname, in SInt32 param ) = 'glNamedFramebufferParameteriEXT_wrapper';
function glBindFramebuffer( in UInt32 target, in UInt32 framebuffer ) = 'glBindFramebuffer_wrapper';
function glBindRenderbuffer( in UInt32 target, in UInt32 renderbuffer ) = 'glBindRenderbuffer_wrapper';
function glBlitFramebuffer( in SInt32 srcX0, in SInt32 srcY0, in SInt32 srcX1, in SInt32 srcY1, in SInt32 dstX0, in SInt32 dstY0, in SInt32 dstX1, in SInt32 dstY1, in UInt32 mask, in UInt32 filter ) = 'glBlitFramebuffer_wrapper';
function UInt32 glCheckFramebufferStatus( in UInt32 target ) = 'glCheckFramebufferStatus_wrapper';
function glDeleteFramebuffers( in UInt32 n, in UInt32 framebuffers[] ) = 'glDeleteFramebuffers_wrapper';
function glDeleteRenderbuffers( in UInt32 n, in UInt32 renderbuffers[] ) = 'glDeleteRenderbuffers_wrapper';
function glFramebufferRenderbuffer( in UInt32 target, in UInt32 attachment, in UInt32 renderbuffertarget, in UInt32 renderbuffer ) = 'glFramebufferRenderbuffer_wrapper';
function glFramebufferTexture1D( in UInt32 target, in UInt32 attachment, in UInt32 textarget, in UInt32 texture, in SInt32 level ) = 'glFramebufferTexture1D_wrapper';
function glFramebufferTexture2D( in UInt32 target, in UInt32 attachment, in UInt32 textarget, in UInt32 texture, in SInt32 level ) = 'glFramebufferTexture2D_wrapper';
function glFramebufferTexture3D( in UInt32 target, in UInt32 attachment, in UInt32 textarget, in UInt32 texture, in SInt32 level, in SInt32 layer ) = 'glFramebufferTexture3D_wrapper';
function glFramebufferTextureLayer( in UInt32 target, in UInt32 attachment, in UInt32 texture, in SInt32 level, in SInt32 layer ) = 'glFramebufferTextureLayer_wrapper';
function glGenFramebuffers( in UInt32 n, io UInt32 framebuffers[] ) = 'glGenFramebuffers_wrapper';
function glGenRenderbuffers( in UInt32 n, io UInt32 renderbuffers[] ) = 'glGenRenderbuffers_wrapper';
function glGenerateMipmap( in UInt32 target ) = 'glGenerateMipmap_wrapper';
function glGetFramebufferAttachmentParameteriv( in UInt32 target, in UInt32 attachment, in UInt32 pname, io SInt32 params[] ) = 'glGetFramebufferAttachmentParameteriv_wrapper';
function glGetRenderbufferParameteriv( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetRenderbufferParameteriv_wrapper';
function Boolean glIsFramebuffer( in UInt32 framebuffer ) = 'glIsFramebuffer_wrapper';
function Boolean glIsRenderbuffer( in UInt32 renderbuffer ) = 'glIsRenderbuffer_wrapper';
function glRenderbufferStorage( in UInt32 target, in UInt32 internalformat, in UInt32 width, in UInt32 height ) = 'glRenderbufferStorage_wrapper';
function glRenderbufferStorageMultisample( in UInt32 target, in UInt32 samples, in UInt32 internalformat, in UInt32 width, in UInt32 height ) = 'glRenderbufferStorageMultisample_wrapper';
function glFramebufferTextureARB( in UInt32 target, in UInt32 attachment, in UInt32 texture, in SInt32 level ) = 'glFramebufferTextureARB_wrapper';
function glFramebufferTextureFaceARB( in UInt32 target, in UInt32 attachment, in UInt32 texture, in SInt32 level, in UInt32 face ) = 'glFramebufferTextureFaceARB_wrapper';
function glFramebufferTextureLayerARB( in UInt32 target, in UInt32 attachment, in UInt32 texture, in SInt32 level, in SInt32 layer ) = 'glFramebufferTextureLayerARB_wrapper';
function glProgramParameteriARB( in UInt32 program, in UInt32 pname, in SInt32 value ) = 'glProgramParameteriARB_wrapper';
function glGetProgramBinary( in UInt32 program, in UInt32 bufSize, io UInt32 length[], io UInt32 binaryFormat[], in Data binary ) = 'glGetProgramBinary_wrapper';
function glProgramBinary( in UInt32 program, in UInt32 binaryFormat, in Data binary, in UInt32 length ) = 'glProgramBinary_wrapper';
function glProgramParameteri( in UInt32 program, in UInt32 pname, in SInt32 value ) = 'glProgramParameteri_wrapper';
function glGetUniformdv( in UInt32 program, in SInt32 location, io Float64 params[] ) = 'glGetUniformdv_wrapper';
function glUniform1d( in SInt32 location, in Float64 x ) = 'glUniform1d_wrapper';
function glUniform1dv( in SInt32 location, in UInt32 count, in Float64 value[1] ) = 'glUniform1dv_wrapper';
function glUniform2d( in SInt32 location, in Float64 x, in Float64 y ) = 'glUniform2d_wrapper';
function glUniform2dv( in SInt32 location, in UInt32 count, in Float64 value[2] ) = 'glUniform2dv_wrapper';
function glUniform3d( in SInt32 location, in Float64 x, in Float64 y, in Float64 z ) = 'glUniform3d_wrapper';
function glUniform3dv( in SInt32 location, in UInt32 count, in Float64 value[3] ) = 'glUniform3dv_wrapper';
function glUniform4d( in SInt32 location, in Float64 x, in Float64 y, in Float64 z, in Float64 w ) = 'glUniform4d_wrapper';
function glUniform4dv( in SInt32 location, in UInt32 count, in Float64 value[4] ) = 'glUniform4dv_wrapper';
function glUniformMatrix2dv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glUniformMatrix2dv_wrapper';
function glUniformMatrix2x3dv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glUniformMatrix2x3dv_wrapper';
function glUniformMatrix2x4dv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glUniformMatrix2x4dv_wrapper';
function glUniformMatrix3dv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glUniformMatrix3dv_wrapper';
function glUniformMatrix3x2dv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glUniformMatrix3x2dv_wrapper';
function glUniformMatrix3x4dv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glUniformMatrix3x4dv_wrapper';
function glUniformMatrix4dv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glUniformMatrix4dv_wrapper';
function glUniformMatrix4x2dv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glUniformMatrix4x2dv_wrapper';
function glUniformMatrix4x3dv( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glUniformMatrix4x3dv_wrapper';
function glColorSubTable( in UInt32 target, in UInt32 start, in UInt32 count, in UInt32 format, in UInt32 type, in Data data ) = 'glColorSubTable_wrapper';
function glColorTable( in UInt32 target, in UInt32 internalformat, in UInt32 width, in UInt32 format, in UInt32 type, in Data table ) = 'glColorTable_wrapper';
function glColorTableParameterfv( in UInt32 target, in UInt32 pname, in Float32 params[] ) = 'glColorTableParameterfv_wrapper';
function glColorTableParameteriv( in UInt32 target, in UInt32 pname, in SInt32 params[] ) = 'glColorTableParameteriv_wrapper';
function glConvolutionFilter1D( in UInt32 target, in UInt32 internalformat, in UInt32 width, in UInt32 format, in UInt32 type, in Data image ) = 'glConvolutionFilter1D_wrapper';
function glConvolutionFilter2D( in UInt32 target, in UInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 type, in Data image ) = 'glConvolutionFilter2D_wrapper';
function glConvolutionParameterf( in UInt32 target, in UInt32 pname, in Float32 params ) = 'glConvolutionParameterf_wrapper';
function glConvolutionParameterfv( in UInt32 target, in UInt32 pname, in Float32 params[] ) = 'glConvolutionParameterfv_wrapper';
function glConvolutionParameteri( in UInt32 target, in UInt32 pname, in SInt32 params ) = 'glConvolutionParameteri_wrapper';
function glConvolutionParameteriv( in UInt32 target, in UInt32 pname, in SInt32 params[] ) = 'glConvolutionParameteriv_wrapper';
function glCopyColorSubTable( in UInt32 target, in UInt32 start, in SInt32 x, in SInt32 y, in UInt32 width ) = 'glCopyColorSubTable_wrapper';
function glCopyColorTable( in UInt32 target, in UInt32 internalformat, in SInt32 x, in SInt32 y, in UInt32 width ) = 'glCopyColorTable_wrapper';
function glCopyConvolutionFilter1D( in UInt32 target, in UInt32 internalformat, in SInt32 x, in SInt32 y, in UInt32 width ) = 'glCopyConvolutionFilter1D_wrapper';
function glCopyConvolutionFilter2D( in UInt32 target, in UInt32 internalformat, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glCopyConvolutionFilter2D_wrapper';
function glGetColorTable( in UInt32 target, in UInt32 format, in UInt32 type, in Data table ) = 'glGetColorTable_wrapper';
function glGetColorTableParameterfv( in UInt32 target, in UInt32 pname, io Float32 params[] ) = 'glGetColorTableParameterfv_wrapper';
function glGetColorTableParameteriv( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetColorTableParameteriv_wrapper';
function glGetConvolutionFilter( in UInt32 target, in UInt32 format, in UInt32 type, in Data image ) = 'glGetConvolutionFilter_wrapper';
function glGetConvolutionParameterfv( in UInt32 target, in UInt32 pname, io Float32 params[] ) = 'glGetConvolutionParameterfv_wrapper';
function glGetConvolutionParameteriv( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetConvolutionParameteriv_wrapper';
function glGetHistogram( in UInt32 target, in Boolean reset, in UInt32 format, in UInt32 type, in Data values ) = 'glGetHistogram_wrapper';
function glGetHistogramParameterfv( in UInt32 target, in UInt32 pname, io Float32 params[] ) = 'glGetHistogramParameterfv_wrapper';
function glGetHistogramParameteriv( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetHistogramParameteriv_wrapper';
function glGetMinmax( in UInt32 target, in Boolean reset, in UInt32 format, in UInt32 types, in Data values ) = 'glGetMinmax_wrapper';
function glGetMinmaxParameterfv( in UInt32 target, in UInt32 pname, io Float32 params[] ) = 'glGetMinmaxParameterfv_wrapper';
function glGetMinmaxParameteriv( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetMinmaxParameteriv_wrapper';
function glGetSeparableFilter( in UInt32 target, in UInt32 format, in UInt32 type, in Data row, in Data column, in Data span ) = 'glGetSeparableFilter_wrapper';
function glHistogram( in UInt32 target, in UInt32 width, in UInt32 internalformat, in Boolean sink ) = 'glHistogram_wrapper';
function glMinmax( in UInt32 target, in UInt32 internalformat, in Boolean sink ) = 'glMinmax_wrapper';
function glResetHistogram( in UInt32 target ) = 'glResetHistogram_wrapper';
function glResetMinmax( in UInt32 target ) = 'glResetMinmax_wrapper';
function glSeparableFilter2D( in UInt32 target, in UInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 type, in Data row, in Data column ) = 'glSeparableFilter2D_wrapper';
function glDrawArraysInstancedARB( in UInt32 mode, in SInt32 first, in UInt32 count, in UInt32 primcount ) = 'glDrawArraysInstancedARB_wrapper';
function glDrawElementsInstancedARB( in UInt32 mode, in UInt32 count, in UInt32 type, in Data indices, in UInt32 primcount ) = 'glDrawElementsInstancedARB_wrapper';
function glVertexAttribDivisorARB( in UInt32 index, in UInt32 divisor ) = 'glVertexAttribDivisorARB_wrapper';
function glGetInternalformativ( in UInt32 target, in UInt32 internalformat, in UInt32 pname, in UInt32 bufSize, io SInt32 params[] ) = 'glGetInternalformativ_wrapper';
function glInvalidateBufferData( in UInt32 buffer ) = 'glInvalidateBufferData_wrapper';
function glInvalidateBufferSubData( in UInt32 buffer, in Size offset, in Size length ) = 'glInvalidateBufferSubData_wrapper';
function glInvalidateFramebuffer( in UInt32 target, in UInt32 numAttachments, in UInt32 attachments[] ) = 'glInvalidateFramebuffer_wrapper';
function glInvalidateSubFramebuffer( in UInt32 target, in UInt32 numAttachments, in UInt32 attachments[], in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glInvalidateSubFramebuffer_wrapper';
function glInvalidateTexImage( in UInt32 texture, in SInt32 level ) = 'glInvalidateTexImage_wrapper';
function glInvalidateTexSubImage( in UInt32 texture, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 zoffset, in UInt32 width, in UInt32 height, in UInt32 depth ) = 'glInvalidateTexSubImage_wrapper';
function glFlushMappedBufferRange( in UInt32 target, in Size offset, in Size length ) = 'glFlushMappedBufferRange_wrapper';
function glMapBufferRange( in UInt32 target, in Size offset, in Size length, in UInt32 access ) = 'glMapBufferRange_wrapper';
function glCurrentPaletteMatrixARB( in SInt32 index ) = 'glCurrentPaletteMatrixARB_wrapper';
function glMatrixIndexPointerARB( in SInt32 size, in UInt32 type, in UInt32 stride, in Data pointer ) = 'glMatrixIndexPointerARB_wrapper';
function glMatrixIndexubvARB( in SInt32 size, io Byte indices[] ) = 'glMatrixIndexubvARB_wrapper';
function glMatrixIndexuivARB( in SInt32 size, io UInt32 indices[] ) = 'glMatrixIndexuivARB_wrapper';
function glMatrixIndexusvARB( in SInt32 size, io UInt16 indices[] ) = 'glMatrixIndexusvARB_wrapper';
function glMultiDrawArraysIndirect( in UInt32 mode, in Data indirect, in UInt32 primcount, in UInt32 stride ) = 'glMultiDrawArraysIndirect_wrapper';
function glMultiDrawElementsIndirect( in UInt32 mode, in UInt32 type, in Data indirect, in UInt32 primcount, in UInt32 stride ) = 'glMultiDrawElementsIndirect_wrapper';
function glSampleCoverageARB( in Float32 value, in Boolean invert ) = 'glSampleCoverageARB_wrapper';
function glActiveTextureARB( in UInt32 texture ) = 'glActiveTextureARB_wrapper';
function glClientActiveTextureARB( in UInt32 texture ) = 'glClientActiveTextureARB_wrapper';
function glMultiTexCoord1dARB( in UInt32 target, in Float64 s ) = 'glMultiTexCoord1dARB_wrapper';
function glMultiTexCoord1dvARB( in UInt32 target, in Float64 v[1] ) = 'glMultiTexCoord1dvARB_wrapper';
function glMultiTexCoord1fARB( in UInt32 target, in Float32 s ) = 'glMultiTexCoord1fARB_wrapper';
function glMultiTexCoord1fvARB( in UInt32 target, in Float32 v[1] ) = 'glMultiTexCoord1fvARB_wrapper';
function glMultiTexCoord1iARB( in UInt32 target, in SInt32 s ) = 'glMultiTexCoord1iARB_wrapper';
function glMultiTexCoord1ivARB( in UInt32 target, in SInt32 v[1] ) = 'glMultiTexCoord1ivARB_wrapper';
function glMultiTexCoord1sARB( in UInt32 target, in SInt16 s ) = 'glMultiTexCoord1sARB_wrapper';
function glMultiTexCoord1svARB( in UInt32 target, in SInt16 v[1] ) = 'glMultiTexCoord1svARB_wrapper';
function glMultiTexCoord2dARB( in UInt32 target, in Float64 s, in Float64 t ) = 'glMultiTexCoord2dARB_wrapper';
function glMultiTexCoord2dvARB( in UInt32 target, in Float64 v[2] ) = 'glMultiTexCoord2dvARB_wrapper';
function glMultiTexCoord2fARB( in UInt32 target, in Float32 s, in Float32 t ) = 'glMultiTexCoord2fARB_wrapper';
function glMultiTexCoord2fvARB( in UInt32 target, in Float32 v[2] ) = 'glMultiTexCoord2fvARB_wrapper';
function glMultiTexCoord2iARB( in UInt32 target, in SInt32 s, in SInt32 t ) = 'glMultiTexCoord2iARB_wrapper';
function glMultiTexCoord2ivARB( in UInt32 target, in SInt32 v[2] ) = 'glMultiTexCoord2ivARB_wrapper';
function glMultiTexCoord2sARB( in UInt32 target, in SInt16 s, in SInt16 t ) = 'glMultiTexCoord2sARB_wrapper';
function glMultiTexCoord2svARB( in UInt32 target, in SInt16 v[2] ) = 'glMultiTexCoord2svARB_wrapper';
function glMultiTexCoord3dARB( in UInt32 target, in Float64 s, in Float64 t, in Float64 r ) = 'glMultiTexCoord3dARB_wrapper';
function glMultiTexCoord3dvARB( in UInt32 target, in Float64 v[3] ) = 'glMultiTexCoord3dvARB_wrapper';
function glMultiTexCoord3fARB( in UInt32 target, in Float32 s, in Float32 t, in Float32 r ) = 'glMultiTexCoord3fARB_wrapper';
function glMultiTexCoord3fvARB( in UInt32 target, in Float32 v[3] ) = 'glMultiTexCoord3fvARB_wrapper';
function glMultiTexCoord3iARB( in UInt32 target, in SInt32 s, in SInt32 t, in SInt32 r ) = 'glMultiTexCoord3iARB_wrapper';
function glMultiTexCoord3ivARB( in UInt32 target, in SInt32 v[3] ) = 'glMultiTexCoord3ivARB_wrapper';
function glMultiTexCoord3sARB( in UInt32 target, in SInt16 s, in SInt16 t, in SInt16 r ) = 'glMultiTexCoord3sARB_wrapper';
function glMultiTexCoord3svARB( in UInt32 target, in SInt16 v[3] ) = 'glMultiTexCoord3svARB_wrapper';
function glMultiTexCoord4dARB( in UInt32 target, in Float64 s, in Float64 t, in Float64 r, in Float64 q ) = 'glMultiTexCoord4dARB_wrapper';
function glMultiTexCoord4dvARB( in UInt32 target, in Float64 v[4] ) = 'glMultiTexCoord4dvARB_wrapper';
function glMultiTexCoord4fARB( in UInt32 target, in Float32 s, in Float32 t, in Float32 r, in Float32 q ) = 'glMultiTexCoord4fARB_wrapper';
function glMultiTexCoord4fvARB( in UInt32 target, in Float32 v[4] ) = 'glMultiTexCoord4fvARB_wrapper';
function glMultiTexCoord4iARB( in UInt32 target, in SInt32 s, in SInt32 t, in SInt32 r, in SInt32 q ) = 'glMultiTexCoord4iARB_wrapper';
function glMultiTexCoord4ivARB( in UInt32 target, in SInt32 v[4] ) = 'glMultiTexCoord4ivARB_wrapper';
function glMultiTexCoord4sARB( in UInt32 target, in SInt16 s, in SInt16 t, in SInt16 r, in SInt16 q ) = 'glMultiTexCoord4sARB_wrapper';
function glMultiTexCoord4svARB( in UInt32 target, in SInt16 v[4] ) = 'glMultiTexCoord4svARB_wrapper';
function glBeginQueryARB( in UInt32 target, in UInt32 id ) = 'glBeginQueryARB_wrapper';
function glDeleteQueriesARB( in UInt32 n, in UInt32 ids[] ) = 'glDeleteQueriesARB_wrapper';
function glEndQueryARB( in UInt32 target ) = 'glEndQueryARB_wrapper';
function glGenQueriesARB( in UInt32 n, io UInt32 ids[] ) = 'glGenQueriesARB_wrapper';
function glGetQueryObjectivARB( in UInt32 id, in UInt32 pname, io SInt32 params[] ) = 'glGetQueryObjectivARB_wrapper';
function glGetQueryObjectuivARB( in UInt32 id, in UInt32 pname, io UInt32 params[] ) = 'glGetQueryObjectuivARB_wrapper';
function glGetQueryivARB( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetQueryivARB_wrapper';
function Boolean glIsQueryARB( in UInt32 id ) = 'glIsQueryARB_wrapper';
function glPointParameterfARB( in UInt32 pname, in Float32 param ) = 'glPointParameterfARB_wrapper';
function glPointParameterfvARB( in UInt32 pname, in Float32 params[] ) = 'glPointParameterfvARB_wrapper';
function glGetProgramInterfaceiv( in UInt32 program, in UInt32 programInterface, in UInt32 pname, io SInt32 params[] ) = 'glGetProgramInterfaceiv_wrapper';
function UInt32 glGetProgramResourceIndex( in UInt32 program, in UInt32 programInterface, in String name ) = 'glGetProgramResourceIndex_wrapper';
function SInt32 glGetProgramResourceLocation( in UInt32 program, in UInt32 programInterface, in String name ) = 'glGetProgramResourceLocation_wrapper';
function SInt32 glGetProgramResourceLocationIndex( in UInt32 program, in UInt32 programInterface, in String name ) = 'glGetProgramResourceLocationIndex_wrapper';
function glGetProgramResourceName( in UInt32 program, in UInt32 programInterface, in UInt32 index, in UInt32 bufSize, io UInt32 length[], io String name ) = 'glGetProgramResourceName_wrapper';
function glGetProgramResourceiv( in UInt32 program, in UInt32 programInterface, in UInt32 index, in UInt32 propCount, in UInt32 props[], in UInt32 bufSize, io UInt32 length[], io SInt32 params[] ) = 'glGetProgramResourceiv_wrapper';
function glProvokingVertex( in UInt32 mode ) = 'glProvokingVertex_wrapper';
function UInt32 glGetGraphicsResetStatusARB(  ) = 'glGetGraphicsResetStatusARB_wrapper';
function glGetnColorTableARB( in UInt32 target, in UInt32 format, in UInt32 type, in UInt32 bufSize, in Data table ) = 'glGetnColorTableARB_wrapper';
function glGetnCompressedTexImageARB( in UInt32 target, in SInt32 lod, in UInt32 bufSize, in Data img ) = 'glGetnCompressedTexImageARB_wrapper';
function glGetnConvolutionFilterARB( in UInt32 target, in UInt32 format, in UInt32 type, in UInt32 bufSize, in Data image ) = 'glGetnConvolutionFilterARB_wrapper';
function glGetnHistogramARB( in UInt32 target, in Boolean reset, in UInt32 format, in UInt32 type, in UInt32 bufSize, in Data values ) = 'glGetnHistogramARB_wrapper';
function glGetnMapdvARB( in UInt32 target, in UInt32 query, in UInt32 bufSize, io Float64 v[] ) = 'glGetnMapdvARB_wrapper';
function glGetnMapfvARB( in UInt32 target, in UInt32 query, in UInt32 bufSize, io Float32 v[] ) = 'glGetnMapfvARB_wrapper';
function glGetnMapivARB( in UInt32 target, in UInt32 query, in UInt32 bufSize, io SInt32 v[] ) = 'glGetnMapivARB_wrapper';
function glGetnMinmaxARB( in UInt32 target, in Boolean reset, in UInt32 format, in UInt32 type, in UInt32 bufSize, in Data values ) = 'glGetnMinmaxARB_wrapper';
function glGetnPixelMapfvARB( in UInt32 map, in UInt32 bufSize, io Float32 values[] ) = 'glGetnPixelMapfvARB_wrapper';
function glGetnPixelMapuivARB( in UInt32 map, in UInt32 bufSize, io UInt32 values[] ) = 'glGetnPixelMapuivARB_wrapper';
function glGetnPixelMapusvARB( in UInt32 map, in UInt32 bufSize, io UInt16 values[] ) = 'glGetnPixelMapusvARB_wrapper';
function glGetnPolygonStippleARB( in UInt32 bufSize, io Byte pattern[] ) = 'glGetnPolygonStippleARB_wrapper';
function glGetnSeparableFilterARB( in UInt32 target, in UInt32 format, in UInt32 type, in UInt32 rowBufSize, in Data row, in UInt32 columnBufSize, in Data column, in Data span ) = 'glGetnSeparableFilterARB_wrapper';
function glGetnTexImageARB( in UInt32 target, in SInt32 level, in UInt32 format, in UInt32 type, in UInt32 bufSize, in Data img ) = 'glGetnTexImageARB_wrapper';
function glGetnUniformdvARB( in UInt32 program, in SInt32 location, in UInt32 bufSize, io Float64 params[] ) = 'glGetnUniformdvARB_wrapper';
function glGetnUniformfvARB( in UInt32 program, in SInt32 location, in UInt32 bufSize, io Float32 params[] ) = 'glGetnUniformfvARB_wrapper';
function glGetnUniformivARB( in UInt32 program, in SInt32 location, in UInt32 bufSize, io SInt32 params[] ) = 'glGetnUniformivARB_wrapper';
function glGetnUniformuivARB( in UInt32 program, in SInt32 location, in UInt32 bufSize, io UInt32 params[] ) = 'glGetnUniformuivARB_wrapper';
function glReadnPixelsARB( in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 type, in UInt32 bufSize, in Data data ) = 'glReadnPixelsARB_wrapper';
function glMinSampleShadingARB( in Float32 value ) = 'glMinSampleShadingARB_wrapper';
function glBindSampler( in UInt32 unit, in UInt32 sampler ) = 'glBindSampler_wrapper';
function glDeleteSamplers( in UInt32 count, in UInt32 samplers[] ) = 'glDeleteSamplers_wrapper';
function glGenSamplers( in UInt32 count, io UInt32 samplers[] ) = 'glGenSamplers_wrapper';
function glGetSamplerParameterIiv( in UInt32 sampler, in UInt32 pname, io SInt32 params[] ) = 'glGetSamplerParameterIiv_wrapper';
function glGetSamplerParameterIuiv( in UInt32 sampler, in UInt32 pname, io UInt32 params[] ) = 'glGetSamplerParameterIuiv_wrapper';
function glGetSamplerParameterfv( in UInt32 sampler, in UInt32 pname, io Float32 params[] ) = 'glGetSamplerParameterfv_wrapper';
function glGetSamplerParameteriv( in UInt32 sampler, in UInt32 pname, io SInt32 params[] ) = 'glGetSamplerParameteriv_wrapper';
function Boolean glIsSampler( in UInt32 sampler ) = 'glIsSampler_wrapper';
function glSamplerParameterIiv( in UInt32 sampler, in UInt32 pname, in SInt32 params[] ) = 'glSamplerParameterIiv_wrapper';
function glSamplerParameterIuiv( in UInt32 sampler, in UInt32 pname, in UInt32 params[] ) = 'glSamplerParameterIuiv_wrapper';
function glSamplerParameterf( in UInt32 sampler, in UInt32 pname, in Float32 param ) = 'glSamplerParameterf_wrapper';
function glSamplerParameterfv( in UInt32 sampler, in UInt32 pname, in Float32 params[] ) = 'glSamplerParameterfv_wrapper';
function glSamplerParameteri( in UInt32 sampler, in UInt32 pname, in SInt32 param ) = 'glSamplerParameteri_wrapper';
function glSamplerParameteriv( in UInt32 sampler, in UInt32 pname, in SInt32 params[] ) = 'glSamplerParameteriv_wrapper';
function glActiveShaderProgram( in UInt32 pipeline, in UInt32 program ) = 'glActiveShaderProgram_wrapper';
function glBindProgramPipeline( in UInt32 pipeline ) = 'glBindProgramPipeline_wrapper';
function UInt32 glCreateShaderProgramv( in UInt32 type, in UInt32 count, in String strings[] ) = 'glCreateShaderProgramv_wrapper';
function glDeleteProgramPipelines( in UInt32 n, in UInt32 pipelines[] ) = 'glDeleteProgramPipelines_wrapper';
function glGenProgramPipelines( in UInt32 n, io UInt32 pipelines[] ) = 'glGenProgramPipelines_wrapper';
function glGetProgramPipelineInfoLog( in UInt32 pipeline, in UInt32 bufSize, io UInt32 length[], io String infoLog ) = 'glGetProgramPipelineInfoLog_wrapper';
function glGetProgramPipelineiv( in UInt32 pipeline, in UInt32 pname, io SInt32 params[] ) = 'glGetProgramPipelineiv_wrapper';
function Boolean glIsProgramPipeline( in UInt32 pipeline ) = 'glIsProgramPipeline_wrapper';
function glProgramUniform1d( in UInt32 program, in SInt32 location, in Float64 x ) = 'glProgramUniform1d_wrapper';
function glProgramUniform1dv( in UInt32 program, in SInt32 location, in UInt32 count, in Float64 value[1] ) = 'glProgramUniform1dv_wrapper';
function glProgramUniform1f( in UInt32 program, in SInt32 location, in Float32 x ) = 'glProgramUniform1f_wrapper';
function glProgramUniform1fv( in UInt32 program, in SInt32 location, in UInt32 count, in Float32 value[1] ) = 'glProgramUniform1fv_wrapper';
function glProgramUniform1i( in UInt32 program, in SInt32 location, in SInt32 x ) = 'glProgramUniform1i_wrapper';
function glProgramUniform1iv( in UInt32 program, in SInt32 location, in UInt32 count, in SInt32 value[1] ) = 'glProgramUniform1iv_wrapper';
function glProgramUniform1ui( in UInt32 program, in SInt32 location, in UInt32 x ) = 'glProgramUniform1ui_wrapper';
function glProgramUniform1uiv( in UInt32 program, in SInt32 location, in UInt32 count, in UInt32 value[1] ) = 'glProgramUniform1uiv_wrapper';
function glProgramUniform2d( in UInt32 program, in SInt32 location, in Float64 x, in Float64 y ) = 'glProgramUniform2d_wrapper';
function glProgramUniform2dv( in UInt32 program, in SInt32 location, in UInt32 count, in Float64 value[2] ) = 'glProgramUniform2dv_wrapper';
function glProgramUniform2f( in UInt32 program, in SInt32 location, in Float32 x, in Float32 y ) = 'glProgramUniform2f_wrapper';
function glProgramUniform2fv( in UInt32 program, in SInt32 location, in UInt32 count, in Float32 value[2] ) = 'glProgramUniform2fv_wrapper';
function glProgramUniform2i( in UInt32 program, in SInt32 location, in SInt32 x, in SInt32 y ) = 'glProgramUniform2i_wrapper';
function glProgramUniform2iv( in UInt32 program, in SInt32 location, in UInt32 count, in SInt32 value[2] ) = 'glProgramUniform2iv_wrapper';
function glProgramUniform2ui( in UInt32 program, in SInt32 location, in UInt32 x, in UInt32 y ) = 'glProgramUniform2ui_wrapper';
function glProgramUniform2uiv( in UInt32 program, in SInt32 location, in UInt32 count, in UInt32 value[2] ) = 'glProgramUniform2uiv_wrapper';
function glProgramUniform3d( in UInt32 program, in SInt32 location, in Float64 x, in Float64 y, in Float64 z ) = 'glProgramUniform3d_wrapper';
function glProgramUniform3dv( in UInt32 program, in SInt32 location, in UInt32 count, in Float64 value[3] ) = 'glProgramUniform3dv_wrapper';
function glProgramUniform3f( in UInt32 program, in SInt32 location, in Float32 x, in Float32 y, in Float32 z ) = 'glProgramUniform3f_wrapper';
function glProgramUniform3fv( in UInt32 program, in SInt32 location, in UInt32 count, in Float32 value[3] ) = 'glProgramUniform3fv_wrapper';
function glProgramUniform3i( in UInt32 program, in SInt32 location, in SInt32 x, in SInt32 y, in SInt32 z ) = 'glProgramUniform3i_wrapper';
function glProgramUniform3iv( in UInt32 program, in SInt32 location, in UInt32 count, in SInt32 value[3] ) = 'glProgramUniform3iv_wrapper';
function glProgramUniform3ui( in UInt32 program, in SInt32 location, in UInt32 x, in UInt32 y, in UInt32 z ) = 'glProgramUniform3ui_wrapper';
function glProgramUniform3uiv( in UInt32 program, in SInt32 location, in UInt32 count, in UInt32 value[3] ) = 'glProgramUniform3uiv_wrapper';
function glProgramUniform4d( in UInt32 program, in SInt32 location, in Float64 x, in Float64 y, in Float64 z, in Float64 w ) = 'glProgramUniform4d_wrapper';
function glProgramUniform4dv( in UInt32 program, in SInt32 location, in UInt32 count, in Float64 value[4] ) = 'glProgramUniform4dv_wrapper';
function glProgramUniform4f( in UInt32 program, in SInt32 location, in Float32 x, in Float32 y, in Float32 z, in Float32 w ) = 'glProgramUniform4f_wrapper';
function glProgramUniform4fv( in UInt32 program, in SInt32 location, in UInt32 count, in Float32 value[4] ) = 'glProgramUniform4fv_wrapper';
function glProgramUniform4i( in UInt32 program, in SInt32 location, in SInt32 x, in SInt32 y, in SInt32 z, in SInt32 w ) = 'glProgramUniform4i_wrapper';
function glProgramUniform4iv( in UInt32 program, in SInt32 location, in UInt32 count, in SInt32 value[4] ) = 'glProgramUniform4iv_wrapper';
function glProgramUniform4ui( in UInt32 program, in SInt32 location, in UInt32 x, in UInt32 y, in UInt32 z, in UInt32 w ) = 'glProgramUniform4ui_wrapper';
function glProgramUniform4uiv( in UInt32 program, in SInt32 location, in UInt32 count, in UInt32 value[4] ) = 'glProgramUniform4uiv_wrapper';
function glProgramUniformMatrix2dv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glProgramUniformMatrix2dv_wrapper';
function glProgramUniformMatrix2fv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glProgramUniformMatrix2fv_wrapper';
function glProgramUniformMatrix2x3dv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glProgramUniformMatrix2x3dv_wrapper';
function glProgramUniformMatrix2x3fv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glProgramUniformMatrix2x3fv_wrapper';
function glProgramUniformMatrix2x4dv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glProgramUniformMatrix2x4dv_wrapper';
function glProgramUniformMatrix2x4fv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glProgramUniformMatrix2x4fv_wrapper';
function glProgramUniformMatrix3dv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glProgramUniformMatrix3dv_wrapper';
function glProgramUniformMatrix3fv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glProgramUniformMatrix3fv_wrapper';
function glProgramUniformMatrix3x2dv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glProgramUniformMatrix3x2dv_wrapper';
function glProgramUniformMatrix3x2fv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glProgramUniformMatrix3x2fv_wrapper';
function glProgramUniformMatrix3x4dv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glProgramUniformMatrix3x4dv_wrapper';
function glProgramUniformMatrix3x4fv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glProgramUniformMatrix3x4fv_wrapper';
function glProgramUniformMatrix4dv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glProgramUniformMatrix4dv_wrapper';
function glProgramUniformMatrix4fv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glProgramUniformMatrix4fv_wrapper';
function glProgramUniformMatrix4x2dv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glProgramUniformMatrix4x2dv_wrapper';
function glProgramUniformMatrix4x2fv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glProgramUniformMatrix4x2fv_wrapper';
function glProgramUniformMatrix4x3dv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glProgramUniformMatrix4x3dv_wrapper';
function glProgramUniformMatrix4x3fv( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glProgramUniformMatrix4x3fv_wrapper';
function glUseProgramStages( in UInt32 pipeline, in UInt32 stages, in UInt32 program ) = 'glUseProgramStages_wrapper';
function glValidateProgramPipeline( in UInt32 pipeline ) = 'glValidateProgramPipeline_wrapper';
function glGetActiveAtomicCounterBufferiv( in UInt32 program, in UInt32 bufferIndex, in UInt32 pname, io SInt32 params[] ) = 'glGetActiveAtomicCounterBufferiv_wrapper';
function glBindImageTexture( in UInt32 unit, in UInt32 texture, in SInt32 level, in Boolean layered, in SInt32 layer, in UInt32 access, in UInt32 format ) = 'glBindImageTexture_wrapper';
function glMemoryBarrier( in UInt32 barriers ) = 'glMemoryBarrier_wrapper';
function glUniform1fARB( in SInt32 location, in Float32 v0 ) = 'glUniform1fARB_wrapper';
function glUniform1fvARB( in SInt32 location, in UInt32 count, in Float32 value[1] ) = 'glUniform1fvARB_wrapper';
function glUniform1iARB( in SInt32 location, in SInt32 v0 ) = 'glUniform1iARB_wrapper';
function glUniform1ivARB( in SInt32 location, in UInt32 count, in SInt32 value[1] ) = 'glUniform1ivARB_wrapper';
function glUniform2fARB( in SInt32 location, in Float32 v0, in Float32 v1 ) = 'glUniform2fARB_wrapper';
function glUniform2fvARB( in SInt32 location, in UInt32 count, in Float32 value[2] ) = 'glUniform2fvARB_wrapper';
function glUniform2iARB( in SInt32 location, in SInt32 v0, in SInt32 v1 ) = 'glUniform2iARB_wrapper';
function glUniform2ivARB( in SInt32 location, in UInt32 count, in SInt32 value[2] ) = 'glUniform2ivARB_wrapper';
function glUniform3fARB( in SInt32 location, in Float32 v0, in Float32 v1, in Float32 v2 ) = 'glUniform3fARB_wrapper';
function glUniform3fvARB( in SInt32 location, in UInt32 count, in Float32 value[3] ) = 'glUniform3fvARB_wrapper';
function glUniform3iARB( in SInt32 location, in SInt32 v0, in SInt32 v1, in SInt32 v2 ) = 'glUniform3iARB_wrapper';
function glUniform3ivARB( in SInt32 location, in UInt32 count, in SInt32 value[3] ) = 'glUniform3ivARB_wrapper';
function glUniform4fARB( in SInt32 location, in Float32 v0, in Float32 v1, in Float32 v2, in Float32 v3 ) = 'glUniform4fARB_wrapper';
function glUniform4fvARB( in SInt32 location, in UInt32 count, in Float32 value[4] ) = 'glUniform4fvARB_wrapper';
function glUniform4iARB( in SInt32 location, in SInt32 v0, in SInt32 v1, in SInt32 v2, in SInt32 v3 ) = 'glUniform4iARB_wrapper';
function glUniform4ivARB( in SInt32 location, in UInt32 count, in SInt32 value[4] ) = 'glUniform4ivARB_wrapper';
function glUniformMatrix2fvARB( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glUniformMatrix2fvARB_wrapper';
function glUniformMatrix3fvARB( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glUniformMatrix3fvARB_wrapper';
function glUniformMatrix4fvARB( in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glUniformMatrix4fvARB_wrapper';
function glShaderStorageBlockBinding( in UInt32 program, in UInt32 storageBlockIndex, in UInt32 storageBlockBinding ) = 'glShaderStorageBlockBinding_wrapper';
function glGetActiveSubroutineName( in UInt32 program, in UInt32 shadertype, in UInt32 index, in UInt32 bufsize, io UInt32 length[], io String name ) = 'glGetActiveSubroutineName_wrapper';
function glGetActiveSubroutineUniformName( in UInt32 program, in UInt32 shadertype, in UInt32 index, in UInt32 bufsize, io UInt32 length[], io String name ) = 'glGetActiveSubroutineUniformName_wrapper';
function glGetActiveSubroutineUniformiv( in UInt32 program, in UInt32 shadertype, in UInt32 index, in UInt32 pname, io SInt32 values[] ) = 'glGetActiveSubroutineUniformiv_wrapper';
function glGetProgramStageiv( in UInt32 program, in UInt32 shadertype, in UInt32 pname, io SInt32 values[] ) = 'glGetProgramStageiv_wrapper';
function UInt32 glGetSubroutineIndex( in UInt32 program, in UInt32 shadertype, in String name ) = 'glGetSubroutineIndex_wrapper';
function SInt32 glGetSubroutineUniformLocation( in UInt32 program, in UInt32 shadertype, in String name ) = 'glGetSubroutineUniformLocation_wrapper';
function glGetUniformSubroutineuiv( in UInt32 shadertype, in SInt32 location, io UInt32 params[] ) = 'glGetUniformSubroutineuiv_wrapper';
function glUniformSubroutinesuiv( in UInt32 shadertype, in UInt32 count, in UInt32 indices[] ) = 'glUniformSubroutinesuiv_wrapper';
function glCompileShaderIncludeARB( in UInt32 shader, in UInt32 count, in String path[], in SInt32 length[] ) = 'glCompileShaderIncludeARB_wrapper';
function glDeleteNamedStringARB( in SInt32 namelen, in String name ) = 'glDeleteNamedStringARB_wrapper';
function glGetNamedStringARB( in SInt32 namelen, in String name, in UInt32 bufSize, io SInt32 stringlen[], io String string ) = 'glGetNamedStringARB_wrapper';
function glGetNamedStringivARB( in SInt32 namelen, in String name, in UInt32 pname, io SInt32 params[] ) = 'glGetNamedStringivARB_wrapper';
function Boolean glIsNamedStringARB( in SInt32 namelen, in String name ) = 'glIsNamedStringARB_wrapper';
function glNamedStringARB( in UInt32 type, in SInt32 namelen, in String name, in SInt32 stringlen, in String string ) = 'glNamedStringARB_wrapper';
function glPatchParameterfv( in UInt32 pname, in Float32 values[] ) = 'glPatchParameterfv_wrapper';
function glPatchParameteri( in UInt32 pname, in SInt32 value ) = 'glPatchParameteri_wrapper';
function glTexBufferARB( in UInt32 target, in UInt32 internalformat, in UInt32 buffer ) = 'glTexBufferARB_wrapper';
function glTexBufferRange( in UInt32 target, in UInt32 internalformat, in UInt32 buffer, in Size offset, in Size size ) = 'glTexBufferRange_wrapper';
function glTextureBufferRangeEXT( in UInt32 texture, in UInt32 target, in UInt32 internalformat, in UInt32 buffer, in Size offset, in Size size ) = 'glTextureBufferRangeEXT_wrapper';
function glCompressedTexImage1DARB( in UInt32 target, in SInt32 level, in UInt32 internalformat, in UInt32 width, in SInt32 border, in UInt32 imageSize, in Data data ) = 'glCompressedTexImage1DARB_wrapper';
function glCompressedTexImage2DARB( in UInt32 target, in SInt32 level, in UInt32 internalformat, in UInt32 width, in UInt32 height, in SInt32 border, in UInt32 imageSize, in Data data ) = 'glCompressedTexImage2DARB_wrapper';
function glCompressedTexImage3DARB( in UInt32 target, in SInt32 level, in UInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 depth, in SInt32 border, in UInt32 imageSize, in Data data ) = 'glCompressedTexImage3DARB_wrapper';
function glCompressedTexSubImage1DARB( in UInt32 target, in SInt32 level, in SInt32 xoffset, in UInt32 width, in UInt32 format, in UInt32 imageSize, in Data data ) = 'glCompressedTexSubImage1DARB_wrapper';
function glCompressedTexSubImage2DARB( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 imageSize, in Data data ) = 'glCompressedTexSubImage2DARB_wrapper';
function glCompressedTexSubImage3DARB( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 zoffset, in UInt32 width, in UInt32 height, in UInt32 depth, in UInt32 format, in UInt32 imageSize, in Data data ) = 'glCompressedTexSubImage3DARB_wrapper';
function glGetCompressedTexImageARB( in UInt32 target, in SInt32 lod, in Data img ) = 'glGetCompressedTexImageARB_wrapper';
function glGetMultisamplefv( in UInt32 pname, in UInt32 index, io Float32 val[] ) = 'glGetMultisamplefv_wrapper';
function glSampleMaski( in UInt32 index, in UInt32 mask ) = 'glSampleMaski_wrapper';
function glTexImage2DMultisample( in UInt32 target, in UInt32 samples, in SInt32 internalformat, in UInt32 width, in UInt32 height, in Boolean fixedsamplelocations ) = 'glTexImage2DMultisample_wrapper';
function glTexImage3DMultisample( in UInt32 target, in UInt32 samples, in SInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 depth, in Boolean fixedsamplelocations ) = 'glTexImage3DMultisample_wrapper';
function glTexStorage1D( in UInt32 target, in UInt32 levels, in UInt32 internalformat, in UInt32 width ) = 'glTexStorage1D_wrapper';
function glTexStorage2D( in UInt32 target, in UInt32 levels, in UInt32 internalformat, in UInt32 width, in UInt32 height ) = 'glTexStorage2D_wrapper';
function glTexStorage3D( in UInt32 target, in UInt32 levels, in UInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 depth ) = 'glTexStorage3D_wrapper';
function glTextureStorage1DEXT( in UInt32 texture, in UInt32 target, in UInt32 levels, in UInt32 internalformat, in UInt32 width ) = 'glTextureStorage1DEXT_wrapper';
function glTextureStorage2DEXT( in UInt32 texture, in UInt32 target, in UInt32 levels, in UInt32 internalformat, in UInt32 width, in UInt32 height ) = 'glTextureStorage2DEXT_wrapper';
function glTextureStorage3DEXT( in UInt32 texture, in UInt32 target, in UInt32 levels, in UInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 depth ) = 'glTextureStorage3DEXT_wrapper';
function glTexStorage2DMultisample( in UInt32 target, in UInt32 samples, in UInt32 internalformat, in UInt32 width, in UInt32 height, in Boolean fixedsamplelocations ) = 'glTexStorage2DMultisample_wrapper';
function glTexStorage3DMultisample( in UInt32 target, in UInt32 samples, in UInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 depth, in Boolean fixedsamplelocations ) = 'glTexStorage3DMultisample_wrapper';
function glTextureStorage2DMultisampleEXT( in UInt32 texture, in UInt32 target, in UInt32 samples, in UInt32 internalformat, in UInt32 width, in UInt32 height, in Boolean fixedsamplelocations ) = 'glTextureStorage2DMultisampleEXT_wrapper';
function glTextureStorage3DMultisampleEXT( in UInt32 texture, in UInt32 target, in UInt32 samples, in UInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 depth, in Boolean fixedsamplelocations ) = 'glTextureStorage3DMultisampleEXT_wrapper';
function glTextureView( in UInt32 texture, in UInt32 target, in UInt32 origtexture, in UInt32 internalformat, in UInt32 minlevel, in UInt32 numlevels, in UInt32 minlayer, in UInt32 numlayers ) = 'glTextureView_wrapper';
function glQueryCounter( in UInt32 id, in UInt32 target ) = 'glQueryCounter_wrapper';
function glBindTransformFeedback( in UInt32 target, in UInt32 id ) = 'glBindTransformFeedback_wrapper';
function glDeleteTransformFeedbacks( in UInt32 n, in UInt32 ids[] ) = 'glDeleteTransformFeedbacks_wrapper';
function glDrawTransformFeedback( in UInt32 mode, in UInt32 id ) = 'glDrawTransformFeedback_wrapper';
function glGenTransformFeedbacks( in UInt32 n, io UInt32 ids[] ) = 'glGenTransformFeedbacks_wrapper';
function Boolean glIsTransformFeedback( in UInt32 id ) = 'glIsTransformFeedback_wrapper';
function glPauseTransformFeedback(  ) = 'glPauseTransformFeedback_wrapper';
function glResumeTransformFeedback(  ) = 'glResumeTransformFeedback_wrapper';
function glBeginQueryIndexed( in UInt32 target, in UInt32 index, in UInt32 id ) = 'glBeginQueryIndexed_wrapper';
function glDrawTransformFeedbackStream( in UInt32 mode, in UInt32 id, in UInt32 stream ) = 'glDrawTransformFeedbackStream_wrapper';
function glEndQueryIndexed( in UInt32 target, in UInt32 index ) = 'glEndQueryIndexed_wrapper';
function glGetQueryIndexediv( in UInt32 target, in UInt32 index, in UInt32 pname, io SInt32 params[] ) = 'glGetQueryIndexediv_wrapper';
function glDrawTransformFeedbackInstanced( in UInt32 mode, in UInt32 id, in UInt32 primcount ) = 'glDrawTransformFeedbackInstanced_wrapper';
function glDrawTransformFeedbackStreamInstanced( in UInt32 mode, in UInt32 id, in UInt32 stream, in UInt32 primcount ) = 'glDrawTransformFeedbackStreamInstanced_wrapper';
function glBindBufferBase( in UInt32 target, in UInt32 index, in UInt32 buffer ) = 'glBindBufferBase_wrapper';
function glBindBufferRange( in UInt32 target, in UInt32 index, in UInt32 buffer, in Size offset, in Size size ) = 'glBindBufferRange_wrapper';
function glGetActiveUniformBlockName( in UInt32 program, in UInt32 uniformBlockIndex, in UInt32 bufSize, io UInt32 length[], io String uniformBlockName ) = 'glGetActiveUniformBlockName_wrapper';
function glGetActiveUniformBlockiv( in UInt32 program, in UInt32 uniformBlockIndex, in UInt32 pname, io SInt32 params[] ) = 'glGetActiveUniformBlockiv_wrapper';
function glGetActiveUniformName( in UInt32 program, in UInt32 uniformIndex, in UInt32 bufSize, io UInt32 length[], io String uniformName ) = 'glGetActiveUniformName_wrapper';
function glGetActiveUniformsiv( in UInt32 program, in UInt32 uniformCount, in UInt32 uniformIndices[], in UInt32 pname, io SInt32 params[] ) = 'glGetActiveUniformsiv_wrapper';
function glGetIntegeri_v( in UInt32 target, in UInt32 index, io SInt32 data[] ) = 'glGetIntegeri_v_wrapper';
function UInt32 glGetUniformBlockIndex( in UInt32 program, in String uniformBlockName ) = 'glGetUniformBlockIndex_wrapper';
function glGetUniformIndices( in UInt32 program, in UInt32 uniformCount, in String uniformNames[], io UInt32 uniformIndices[] ) = 'glGetUniformIndices_wrapper';
function glUniformBlockBinding( in UInt32 program, in UInt32 uniformBlockIndex, in UInt32 uniformBlockBinding ) = 'glUniformBlockBinding_wrapper';
function glBindVertexArray( in UInt32 array ) = 'glBindVertexArray_wrapper';
function glDeleteVertexArrays( in UInt32 n, in UInt32 arrays[] ) = 'glDeleteVertexArrays_wrapper';
function glGenVertexArrays( in UInt32 n, io UInt32 arrays[] ) = 'glGenVertexArrays_wrapper';
function Boolean glIsVertexArray( in UInt32 array ) = 'glIsVertexArray_wrapper';
function glGetVertexAttribLdv( in UInt32 index, in UInt32 pname, io Float64 params[] ) = 'glGetVertexAttribLdv_wrapper';
function glVertexAttribL1d( in UInt32 index, in Float64 x ) = 'glVertexAttribL1d_wrapper';
function glVertexAttribL1dv( in UInt32 index, in Float64 v[1] ) = 'glVertexAttribL1dv_wrapper';
function glVertexAttribL2d( in UInt32 index, in Float64 x, in Float64 y ) = 'glVertexAttribL2d_wrapper';
function glVertexAttribL2dv( in UInt32 index, in Float64 v[2] ) = 'glVertexAttribL2dv_wrapper';
function glVertexAttribL3d( in UInt32 index, in Float64 x, in Float64 y, in Float64 z ) = 'glVertexAttribL3d_wrapper';
function glVertexAttribL3dv( in UInt32 index, in Float64 v[3] ) = 'glVertexAttribL3dv_wrapper';
function glVertexAttribL4d( in UInt32 index, in Float64 x, in Float64 y, in Float64 z, in Float64 w ) = 'glVertexAttribL4d_wrapper';
function glVertexAttribL4dv( in UInt32 index, in Float64 v[4] ) = 'glVertexAttribL4dv_wrapper';
function glVertexAttribLPointer( in UInt32 index, in SInt32 size, in UInt32 type, in UInt32 stride, in Data pointer ) = 'glVertexAttribLPointer_wrapper';
function glBindVertexBuffer( in UInt32 bindingindex, in UInt32 buffer, in Size offset, in UInt32 stride ) = 'glBindVertexBuffer_wrapper';
function glVertexAttribBinding( in UInt32 attribindex, in UInt32 bindingindex ) = 'glVertexAttribBinding_wrapper';
function glVertexAttribFormat( in UInt32 attribindex, in SInt32 size, in UInt32 type, in Boolean normalized, in UInt32 relativeoffset ) = 'glVertexAttribFormat_wrapper';
function glVertexAttribIFormat( in UInt32 attribindex, in SInt32 size, in UInt32 type, in UInt32 relativeoffset ) = 'glVertexAttribIFormat_wrapper';
function glVertexAttribLFormat( in UInt32 attribindex, in SInt32 size, in UInt32 type, in UInt32 relativeoffset ) = 'glVertexAttribLFormat_wrapper';
function glVertexBindingDivisor( in UInt32 bindingindex, in UInt32 divisor ) = 'glVertexBindingDivisor_wrapper';
function glVertexBlendARB( in SInt32 count ) = 'glVertexBlendARB_wrapper';
function glWeightPointerARB( in SInt32 size, in UInt32 type, in UInt32 stride, in Data pointer ) = 'glWeightPointerARB_wrapper';
function glWeightbvARB( in SInt32 size, io Byte weights[] ) = 'glWeightbvARB_wrapper';
function glWeightdvARB( in SInt32 size, io Float64 weights[] ) = 'glWeightdvARB_wrapper';
function glWeightfvARB( in SInt32 size, io Float32 weights[] ) = 'glWeightfvARB_wrapper';
function glWeightivARB( in SInt32 size, io SInt32 weights[] ) = 'glWeightivARB_wrapper';
function glWeightsvARB( in SInt32 size, io SInt16 weights[] ) = 'glWeightsvARB_wrapper';
function glWeightubvARB( in SInt32 size, io Byte weights[] ) = 'glWeightubvARB_wrapper';
function glWeightuivARB( in SInt32 size, io UInt32 weights[] ) = 'glWeightuivARB_wrapper';
function glWeightusvARB( in SInt32 size, io UInt16 weights[] ) = 'glWeightusvARB_wrapper';
function glBindBufferARB( in UInt32 target, in UInt32 buffer ) = 'glBindBufferARB_wrapper';
function glDeleteBuffersARB( in UInt32 n, in UInt32 buffers[] ) = 'glDeleteBuffersARB_wrapper';
function glGenBuffersARB( in UInt32 n, io UInt32 buffers[] ) = 'glGenBuffersARB_wrapper';
function glGetBufferParameterivARB( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetBufferParameterivARB_wrapper';
function Boolean glIsBufferARB( in UInt32 buffer ) = 'glIsBufferARB_wrapper';
function glMapBufferARB( in UInt32 target, in UInt32 access ) = 'glMapBufferARB_wrapper';
function Boolean glUnmapBufferARB( in UInt32 target ) = 'glUnmapBufferARB_wrapper';
function glBindProgramARB( in UInt32 target, in UInt32 program ) = 'glBindProgramARB_wrapper';
function glDeleteProgramsARB( in UInt32 n, in UInt32 programs[] ) = 'glDeleteProgramsARB_wrapper';
function glDisableVertexAttribArrayARB( in UInt32 index ) = 'glDisableVertexAttribArrayARB_wrapper';
function glEnableVertexAttribArrayARB( in UInt32 index ) = 'glEnableVertexAttribArrayARB_wrapper';
function glGenProgramsARB( in UInt32 n, io UInt32 programs[] ) = 'glGenProgramsARB_wrapper';
function glGetProgramEnvParameterdvARB( in UInt32 target, in UInt32 index, io Float64 params[] ) = 'glGetProgramEnvParameterdvARB_wrapper';
function glGetProgramEnvParameterfvARB( in UInt32 target, in UInt32 index, io Float32 params[] ) = 'glGetProgramEnvParameterfvARB_wrapper';
function glGetProgramLocalParameterdvARB( in UInt32 target, in UInt32 index, io Float64 params[] ) = 'glGetProgramLocalParameterdvARB_wrapper';
function glGetProgramLocalParameterfvARB( in UInt32 target, in UInt32 index, io Float32 params[] ) = 'glGetProgramLocalParameterfvARB_wrapper';
function glGetProgramStringARB( in UInt32 target, in UInt32 pname, in Data string ) = 'glGetProgramStringARB_wrapper';
function glGetProgramivARB( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetProgramivARB_wrapper';
function glGetVertexAttribdvARB( in UInt32 index, in UInt32 pname, io Float64 params[] ) = 'glGetVertexAttribdvARB_wrapper';
function glGetVertexAttribfvARB( in UInt32 index, in UInt32 pname, io Float32 params[] ) = 'glGetVertexAttribfvARB_wrapper';
function glGetVertexAttribivARB( in UInt32 index, in UInt32 pname, io SInt32 params[] ) = 'glGetVertexAttribivARB_wrapper';
function Boolean glIsProgramARB( in UInt32 program ) = 'glIsProgramARB_wrapper';
function glProgramEnvParameter4dARB( in UInt32 target, in UInt32 index, in Float64 x, in Float64 y, in Float64 z, in Float64 w ) = 'glProgramEnvParameter4dARB_wrapper';
function glProgramEnvParameter4dvARB( in UInt32 target, in UInt32 index, in Float64 params[4] ) = 'glProgramEnvParameter4dvARB_wrapper';
function glProgramEnvParameter4fARB( in UInt32 target, in UInt32 index, in Float32 x, in Float32 y, in Float32 z, in Float32 w ) = 'glProgramEnvParameter4fARB_wrapper';
function glProgramEnvParameter4fvARB( in UInt32 target, in UInt32 index, in Float32 params[4] ) = 'glProgramEnvParameter4fvARB_wrapper';
function glProgramLocalParameter4dARB( in UInt32 target, in UInt32 index, in Float64 x, in Float64 y, in Float64 z, in Float64 w ) = 'glProgramLocalParameter4dARB_wrapper';
function glProgramLocalParameter4dvARB( in UInt32 target, in UInt32 index, in Float64 params[4] ) = 'glProgramLocalParameter4dvARB_wrapper';
function glProgramLocalParameter4fARB( in UInt32 target, in UInt32 index, in Float32 x, in Float32 y, in Float32 z, in Float32 w ) = 'glProgramLocalParameter4fARB_wrapper';
function glProgramLocalParameter4fvARB( in UInt32 target, in UInt32 index, in Float32 params[4] ) = 'glProgramLocalParameter4fvARB_wrapper';
function glProgramStringARB( in UInt32 target, in UInt32 format, in UInt32 len, in Data string ) = 'glProgramStringARB_wrapper';
function glVertexAttrib1dARB( in UInt32 index, in Float64 x ) = 'glVertexAttrib1dARB_wrapper';
function glVertexAttrib1dvARB( in UInt32 index, in Float64 v[1] ) = 'glVertexAttrib1dvARB_wrapper';
function glVertexAttrib1fARB( in UInt32 index, in Float32 x ) = 'glVertexAttrib1fARB_wrapper';
function glVertexAttrib1fvARB( in UInt32 index, in Float32 v[1] ) = 'glVertexAttrib1fvARB_wrapper';
function glVertexAttrib1sARB( in UInt32 index, in SInt16 x ) = 'glVertexAttrib1sARB_wrapper';
function glVertexAttrib1svARB( in UInt32 index, in SInt16 v[1] ) = 'glVertexAttrib1svARB_wrapper';
function glVertexAttrib2dARB( in UInt32 index, in Float64 x, in Float64 y ) = 'glVertexAttrib2dARB_wrapper';
function glVertexAttrib2dvARB( in UInt32 index, in Float64 v[2] ) = 'glVertexAttrib2dvARB_wrapper';
function glVertexAttrib2fARB( in UInt32 index, in Float32 x, in Float32 y ) = 'glVertexAttrib2fARB_wrapper';
function glVertexAttrib2fvARB( in UInt32 index, in Float32 v[2] ) = 'glVertexAttrib2fvARB_wrapper';
function glVertexAttrib2sARB( in UInt32 index, in SInt16 x, in SInt16 y ) = 'glVertexAttrib2sARB_wrapper';
function glVertexAttrib2svARB( in UInt32 index, in SInt16 v[2] ) = 'glVertexAttrib2svARB_wrapper';
function glVertexAttrib3dARB( in UInt32 index, in Float64 x, in Float64 y, in Float64 z ) = 'glVertexAttrib3dARB_wrapper';
function glVertexAttrib3dvARB( in UInt32 index, in Float64 v[3] ) = 'glVertexAttrib3dvARB_wrapper';
function glVertexAttrib3fARB( in UInt32 index, in Float32 x, in Float32 y, in Float32 z ) = 'glVertexAttrib3fARB_wrapper';
function glVertexAttrib3fvARB( in UInt32 index, in Float32 v[3] ) = 'glVertexAttrib3fvARB_wrapper';
function glVertexAttrib3sARB( in UInt32 index, in SInt16 x, in SInt16 y, in SInt16 z ) = 'glVertexAttrib3sARB_wrapper';
function glVertexAttrib3svARB( in UInt32 index, in SInt16 v[3] ) = 'glVertexAttrib3svARB_wrapper';
function glVertexAttrib4NbvARB( in UInt32 index, in Byte v[4] ) = 'glVertexAttrib4NbvARB_wrapper';
function glVertexAttrib4NivARB( in UInt32 index, in SInt32 v[4] ) = 'glVertexAttrib4NivARB_wrapper';
function glVertexAttrib4NsvARB( in UInt32 index, in SInt16 v[4] ) = 'glVertexAttrib4NsvARB_wrapper';
function glVertexAttrib4NubARB( in UInt32 index, in Byte x, in Byte y, in Byte z, in Byte w ) = 'glVertexAttrib4NubARB_wrapper';
function glVertexAttrib4NubvARB( in UInt32 index, in Byte v[4] ) = 'glVertexAttrib4NubvARB_wrapper';
function glVertexAttrib4NuivARB( in UInt32 index, in UInt32 v[4] ) = 'glVertexAttrib4NuivARB_wrapper';
function glVertexAttrib4NusvARB( in UInt32 index, in UInt16 v[4] ) = 'glVertexAttrib4NusvARB_wrapper';
function glVertexAttrib4bvARB( in UInt32 index, in Byte v[4] ) = 'glVertexAttrib4bvARB_wrapper';
function glVertexAttrib4dARB( in UInt32 index, in Float64 x, in Float64 y, in Float64 z, in Float64 w ) = 'glVertexAttrib4dARB_wrapper';
function glVertexAttrib4dvARB( in UInt32 index, in Float64 v[4] ) = 'glVertexAttrib4dvARB_wrapper';
function glVertexAttrib4fARB( in UInt32 index, in Float32 x, in Float32 y, in Float32 z, in Float32 w ) = 'glVertexAttrib4fARB_wrapper';
function glVertexAttrib4fvARB( in UInt32 index, in Float32 v[4] ) = 'glVertexAttrib4fvARB_wrapper';
function glVertexAttrib4ivARB( in UInt32 index, in SInt32 v[4] ) = 'glVertexAttrib4ivARB_wrapper';
function glVertexAttrib4sARB( in UInt32 index, in SInt16 x, in SInt16 y, in SInt16 z, in SInt16 w ) = 'glVertexAttrib4sARB_wrapper';
function glVertexAttrib4svARB( in UInt32 index, in SInt16 v[4] ) = 'glVertexAttrib4svARB_wrapper';
function glVertexAttrib4ubvARB( in UInt32 index, in Byte v[4] ) = 'glVertexAttrib4ubvARB_wrapper';
function glVertexAttrib4uivARB( in UInt32 index, in UInt32 v[4] ) = 'glVertexAttrib4uivARB_wrapper';
function glVertexAttrib4usvARB( in UInt32 index, in UInt16 v[4] ) = 'glVertexAttrib4usvARB_wrapper';
function glVertexAttribPointerARB( in UInt32 index, in SInt32 size, in UInt32 type, in Boolean normalized, in UInt32 stride, in Data pointer ) = 'glVertexAttribPointerARB_wrapper';
function glColorP3ui( in UInt32 type, in UInt32 color ) = 'glColorP3ui_wrapper';
function glColorP3uiv( in UInt32 type, in UInt32 color[3] ) = 'glColorP3uiv_wrapper';
function glColorP4ui( in UInt32 type, in UInt32 color ) = 'glColorP4ui_wrapper';
function glColorP4uiv( in UInt32 type, in UInt32 color[4] ) = 'glColorP4uiv_wrapper';
function glMultiTexCoordP1ui( in UInt32 texture, in UInt32 type, in UInt32 coords ) = 'glMultiTexCoordP1ui_wrapper';
function glMultiTexCoordP1uiv( in UInt32 texture, in UInt32 type, in UInt32 coords[1] ) = 'glMultiTexCoordP1uiv_wrapper';
function glMultiTexCoordP2ui( in UInt32 texture, in UInt32 type, in UInt32 coords ) = 'glMultiTexCoordP2ui_wrapper';
function glMultiTexCoordP2uiv( in UInt32 texture, in UInt32 type, in UInt32 coords[2] ) = 'glMultiTexCoordP2uiv_wrapper';
function glMultiTexCoordP3ui( in UInt32 texture, in UInt32 type, in UInt32 coords ) = 'glMultiTexCoordP3ui_wrapper';
function glMultiTexCoordP3uiv( in UInt32 texture, in UInt32 type, in UInt32 coords[3] ) = 'glMultiTexCoordP3uiv_wrapper';
function glMultiTexCoordP4ui( in UInt32 texture, in UInt32 type, in UInt32 coords ) = 'glMultiTexCoordP4ui_wrapper';
function glMultiTexCoordP4uiv( in UInt32 texture, in UInt32 type, in UInt32 coords[4] ) = 'glMultiTexCoordP4uiv_wrapper';
function glNormalP3ui( in UInt32 type, in UInt32 coords ) = 'glNormalP3ui_wrapper';
function glNormalP3uiv( in UInt32 type, in UInt32 coords[3] ) = 'glNormalP3uiv_wrapper';
function glSecondaryColorP3ui( in UInt32 type, in UInt32 color ) = 'glSecondaryColorP3ui_wrapper';
function glSecondaryColorP3uiv( in UInt32 type, in UInt32 color[3] ) = 'glSecondaryColorP3uiv_wrapper';
function glTexCoordP1ui( in UInt32 type, in UInt32 coords ) = 'glTexCoordP1ui_wrapper';
function glTexCoordP1uiv( in UInt32 type, in UInt32 coords[1] ) = 'glTexCoordP1uiv_wrapper';
function glTexCoordP2ui( in UInt32 type, in UInt32 coords ) = 'glTexCoordP2ui_wrapper';
function glTexCoordP2uiv( in UInt32 type, in UInt32 coords[2] ) = 'glTexCoordP2uiv_wrapper';
function glTexCoordP3ui( in UInt32 type, in UInt32 coords ) = 'glTexCoordP3ui_wrapper';
function glTexCoordP3uiv( in UInt32 type, in UInt32 coords[3] ) = 'glTexCoordP3uiv_wrapper';
function glTexCoordP4ui( in UInt32 type, in UInt32 coords ) = 'glTexCoordP4ui_wrapper';
function glTexCoordP4uiv( in UInt32 type, in UInt32 coords[4] ) = 'glTexCoordP4uiv_wrapper';
function glVertexAttribP1ui( in UInt32 index, in UInt32 type, in Boolean normalized, in UInt32 value ) = 'glVertexAttribP1ui_wrapper';
function glVertexAttribP1uiv( in UInt32 index, in UInt32 type, in Boolean normalized, in UInt32 value[1] ) = 'glVertexAttribP1uiv_wrapper';
function glVertexAttribP2ui( in UInt32 index, in UInt32 type, in Boolean normalized, in UInt32 value ) = 'glVertexAttribP2ui_wrapper';
function glVertexAttribP2uiv( in UInt32 index, in UInt32 type, in Boolean normalized, in UInt32 value[2] ) = 'glVertexAttribP2uiv_wrapper';
function glVertexAttribP3ui( in UInt32 index, in UInt32 type, in Boolean normalized, in UInt32 value ) = 'glVertexAttribP3ui_wrapper';
function glVertexAttribP3uiv( in UInt32 index, in UInt32 type, in Boolean normalized, in UInt32 value[3] ) = 'glVertexAttribP3uiv_wrapper';
function glVertexAttribP4ui( in UInt32 index, in UInt32 type, in Boolean normalized, in UInt32 value ) = 'glVertexAttribP4ui_wrapper';
function glVertexAttribP4uiv( in UInt32 index, in UInt32 type, in Boolean normalized, in UInt32 value[4] ) = 'glVertexAttribP4uiv_wrapper';
function glVertexP2ui( in UInt32 type, in UInt32 value ) = 'glVertexP2ui_wrapper';
function glVertexP2uiv( in UInt32 type, in UInt32 value[2] ) = 'glVertexP2uiv_wrapper';
function glVertexP3ui( in UInt32 type, in UInt32 value ) = 'glVertexP3ui_wrapper';
function glVertexP3uiv( in UInt32 type, in UInt32 value[3] ) = 'glVertexP3uiv_wrapper';
function glVertexP4ui( in UInt32 type, in UInt32 value ) = 'glVertexP4ui_wrapper';
function glVertexP4uiv( in UInt32 type, in UInt32 value[4] ) = 'glVertexP4uiv_wrapper';
function glDepthRangeArrayv( in UInt32 first, in UInt32 count, in Float64 v[] ) = 'glDepthRangeArrayv_wrapper';
function glDepthRangeIndexed( in UInt32 index, in Float64 n, in Float64 f ) = 'glDepthRangeIndexed_wrapper';
function glGetDoublei_v( in UInt32 target, in UInt32 index, io Float64 data[] ) = 'glGetDoublei_v_wrapper';
function glGetFloati_v( in UInt32 target, in UInt32 index, io Float32 data[] ) = 'glGetFloati_v_wrapper';
function glScissorArrayv( in UInt32 first, in UInt32 count, in SInt32 v[] ) = 'glScissorArrayv_wrapper';
function glScissorIndexed( in UInt32 index, in SInt32 left, in SInt32 bottom, in UInt32 width, in UInt32 height ) = 'glScissorIndexed_wrapper';
function glScissorIndexedv( in UInt32 index, in SInt32 v[] ) = 'glScissorIndexedv_wrapper';
function glViewportArrayv( in UInt32 first, in UInt32 count, in Float32 v[] ) = 'glViewportArrayv_wrapper';
function glViewportIndexedf( in UInt32 index, in Float32 x, in Float32 y, in Float32 w, in Float32 h ) = 'glViewportIndexedf_wrapper';
function glViewportIndexedfv( in UInt32 index, in Float32 v[] ) = 'glViewportIndexedfv_wrapper';
function glWindowPos2dARB( in Float64 x, in Float64 y ) = 'glWindowPos2dARB_wrapper';
function glWindowPos2dvARB( in Float64 p[2] ) = 'glWindowPos2dvARB_wrapper';
function glWindowPos2fARB( in Float32 x, in Float32 y ) = 'glWindowPos2fARB_wrapper';
function glWindowPos2fvARB( in Float32 p[2] ) = 'glWindowPos2fvARB_wrapper';
function glWindowPos2iARB( in SInt32 x, in SInt32 y ) = 'glWindowPos2iARB_wrapper';
function glWindowPos2ivARB( in SInt32 p[2] ) = 'glWindowPos2ivARB_wrapper';
function glWindowPos2sARB( in SInt16 x, in SInt16 y ) = 'glWindowPos2sARB_wrapper';
function glWindowPos2svARB( in SInt16 p[2] ) = 'glWindowPos2svARB_wrapper';
function glWindowPos3dARB( in Float64 x, in Float64 y, in Float64 z ) = 'glWindowPos3dARB_wrapper';
function glWindowPos3dvARB( in Float64 p[3] ) = 'glWindowPos3dvARB_wrapper';
function glWindowPos3fARB( in Float32 x, in Float32 y, in Float32 z ) = 'glWindowPos3fARB_wrapper';
function glWindowPos3fvARB( in Float32 p[3] ) = 'glWindowPos3fvARB_wrapper';
function glWindowPos3iARB( in SInt32 x, in SInt32 y, in SInt32 z ) = 'glWindowPos3iARB_wrapper';
function glWindowPos3ivARB( in SInt32 p[3] ) = 'glWindowPos3ivARB_wrapper';
function glWindowPos3sARB( in SInt16 x, in SInt16 y, in SInt16 z ) = 'glWindowPos3sARB_wrapper';
function glWindowPos3svARB( in SInt16 p[3] ) = 'glWindowPos3svARB_wrapper';
function SInt32 glGetUniformBufferSizeEXT( in UInt32 program, in SInt32 location ) = 'glGetUniformBufferSizeEXT_wrapper';
function Size glGetUniformOffsetEXT( in UInt32 program, in SInt32 location ) = 'glGetUniformOffsetEXT_wrapper';
function glUniformBufferEXT( in UInt32 program, in SInt32 location, in UInt32 buffer ) = 'glUniformBufferEXT_wrapper';
function glBlendColorEXT( in Float32 red, in Float32 green, in Float32 blue, in Float32 alpha ) = 'glBlendColorEXT_wrapper';
function glBlendEquationSeparateEXT( in UInt32 modeRGB, in UInt32 modeAlpha ) = 'glBlendEquationSeparateEXT_wrapper';
function glBlendFuncSeparateEXT( in UInt32 sfactorRGB, in UInt32 dfactorRGB, in UInt32 sfactorAlpha, in UInt32 dfactorAlpha ) = 'glBlendFuncSeparateEXT_wrapper';
function glBlendEquationEXT( in UInt32 mode ) = 'glBlendEquationEXT_wrapper';
function glColorSubTableEXT( in UInt32 target, in UInt32 start, in UInt32 count, in UInt32 format, in UInt32 type, in Data data ) = 'glColorSubTableEXT_wrapper';
function glCopyColorSubTableEXT( in UInt32 target, in UInt32 start, in SInt32 x, in SInt32 y, in UInt32 width ) = 'glCopyColorSubTableEXT_wrapper';
function glLockArraysEXT( in SInt32 first, in UInt32 count ) = 'glLockArraysEXT_wrapper';
function glUnlockArraysEXT(  ) = 'glUnlockArraysEXT_wrapper';
function glConvolutionFilter1DEXT( in UInt32 target, in UInt32 internalformat, in UInt32 width, in UInt32 format, in UInt32 type, in Data image ) = 'glConvolutionFilter1DEXT_wrapper';
function glConvolutionFilter2DEXT( in UInt32 target, in UInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 type, in Data image ) = 'glConvolutionFilter2DEXT_wrapper';
function glConvolutionParameterfEXT( in UInt32 target, in UInt32 pname, in Float32 param ) = 'glConvolutionParameterfEXT_wrapper';
function glConvolutionParameterfvEXT( in UInt32 target, in UInt32 pname, in Float32 params[] ) = 'glConvolutionParameterfvEXT_wrapper';
function glConvolutionParameteriEXT( in UInt32 target, in UInt32 pname, in SInt32 param ) = 'glConvolutionParameteriEXT_wrapper';
function glConvolutionParameterivEXT( in UInt32 target, in UInt32 pname, in SInt32 params[] ) = 'glConvolutionParameterivEXT_wrapper';
function glCopyConvolutionFilter1DEXT( in UInt32 target, in UInt32 internalformat, in SInt32 x, in SInt32 y, in UInt32 width ) = 'glCopyConvolutionFilter1DEXT_wrapper';
function glCopyConvolutionFilter2DEXT( in UInt32 target, in UInt32 internalformat, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glCopyConvolutionFilter2DEXT_wrapper';
function glGetConvolutionFilterEXT( in UInt32 target, in UInt32 format, in UInt32 type, in Data image ) = 'glGetConvolutionFilterEXT_wrapper';
function glGetConvolutionParameterfvEXT( in UInt32 target, in UInt32 pname, io Float32 params[] ) = 'glGetConvolutionParameterfvEXT_wrapper';
function glGetConvolutionParameterivEXT( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetConvolutionParameterivEXT_wrapper';
function glGetSeparableFilterEXT( in UInt32 target, in UInt32 format, in UInt32 type, in Data row, in Data column, in Data span ) = 'glGetSeparableFilterEXT_wrapper';
function glSeparableFilter2DEXT( in UInt32 target, in UInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 type, in Data row, in Data column ) = 'glSeparableFilter2DEXT_wrapper';
function glBinormalPointerEXT( in UInt32 type, in UInt32 stride, in Data pointer ) = 'glBinormalPointerEXT_wrapper';
function glTangentPointerEXT( in UInt32 type, in UInt32 stride, in Data pointer ) = 'glTangentPointerEXT_wrapper';
function glCopyTexImage1DEXT( in UInt32 target, in SInt32 level, in UInt32 internalformat, in SInt32 x, in SInt32 y, in UInt32 width, in SInt32 border ) = 'glCopyTexImage1DEXT_wrapper';
function glCopyTexImage2DEXT( in UInt32 target, in SInt32 level, in UInt32 internalformat, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height, in SInt32 border ) = 'glCopyTexImage2DEXT_wrapper';
function glCopyTexSubImage1DEXT( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 x, in SInt32 y, in UInt32 width ) = 'glCopyTexSubImage1DEXT_wrapper';
function glCopyTexSubImage2DEXT( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glCopyTexSubImage2DEXT_wrapper';
function glCopyTexSubImage3DEXT( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 zoffset, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glCopyTexSubImage3DEXT_wrapper';
function glCullParameterdvEXT( in UInt32 pname, io Float64 params[] ) = 'glCullParameterdvEXT_wrapper';
function glCullParameterfvEXT( in UInt32 pname, io Float32 params[] ) = 'glCullParameterfvEXT_wrapper';
function glInsertEventMarkerEXT( in UInt32 length, in String marker ) = 'glInsertEventMarkerEXT_wrapper';
function glPopGroupMarkerEXT(  ) = 'glPopGroupMarkerEXT_wrapper';
function glPushGroupMarkerEXT( in UInt32 length, in String marker ) = 'glPushGroupMarkerEXT_wrapper';
function glDepthBoundsEXT( in Float64 zmin, in Float64 zmax ) = 'glDepthBoundsEXT_wrapper';
function glBindMultiTextureEXT( in UInt32 texunit, in UInt32 target, in UInt32 texture ) = 'glBindMultiTextureEXT_wrapper';
function UInt32 glCheckNamedFramebufferStatusEXT( in UInt32 framebuffer, in UInt32 target ) = 'glCheckNamedFramebufferStatusEXT_wrapper';
function glClientAttribDefaultEXT( in UInt32 mask ) = 'glClientAttribDefaultEXT_wrapper';
function glCompressedMultiTexImage1DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in UInt32 internalformat, in UInt32 width, in SInt32 border, in UInt32 imageSize, in Data data ) = 'glCompressedMultiTexImage1DEXT_wrapper';
function glCompressedMultiTexImage2DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in UInt32 internalformat, in UInt32 width, in UInt32 height, in SInt32 border, in UInt32 imageSize, in Data data ) = 'glCompressedMultiTexImage2DEXT_wrapper';
function glCompressedMultiTexImage3DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in UInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 depth, in SInt32 border, in UInt32 imageSize, in Data data ) = 'glCompressedMultiTexImage3DEXT_wrapper';
function glCompressedMultiTexSubImage1DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in SInt32 xoffset, in UInt32 width, in UInt32 format, in UInt32 imageSize, in Data data ) = 'glCompressedMultiTexSubImage1DEXT_wrapper';
function glCompressedMultiTexSubImage2DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 imageSize, in Data data ) = 'glCompressedMultiTexSubImage2DEXT_wrapper';
function glCompressedMultiTexSubImage3DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 zoffset, in UInt32 width, in UInt32 height, in UInt32 depth, in UInt32 format, in UInt32 imageSize, in Data data ) = 'glCompressedMultiTexSubImage3DEXT_wrapper';
function glCompressedTextureImage1DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in UInt32 internalformat, in UInt32 width, in SInt32 border, in UInt32 imageSize, in Data data ) = 'glCompressedTextureImage1DEXT_wrapper';
function glCompressedTextureImage2DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in UInt32 internalformat, in UInt32 width, in UInt32 height, in SInt32 border, in UInt32 imageSize, in Data data ) = 'glCompressedTextureImage2DEXT_wrapper';
function glCompressedTextureImage3DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in UInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 depth, in SInt32 border, in UInt32 imageSize, in Data data ) = 'glCompressedTextureImage3DEXT_wrapper';
function glCompressedTextureSubImage1DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in SInt32 xoffset, in UInt32 width, in UInt32 format, in UInt32 imageSize, in Data data ) = 'glCompressedTextureSubImage1DEXT_wrapper';
function glCompressedTextureSubImage2DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 imageSize, in Data data ) = 'glCompressedTextureSubImage2DEXT_wrapper';
function glCompressedTextureSubImage3DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 zoffset, in UInt32 width, in UInt32 height, in UInt32 depth, in UInt32 format, in UInt32 imageSize, in Data data ) = 'glCompressedTextureSubImage3DEXT_wrapper';
function glCopyMultiTexImage1DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in UInt32 internalformat, in SInt32 x, in SInt32 y, in UInt32 width, in SInt32 border ) = 'glCopyMultiTexImage1DEXT_wrapper';
function glCopyMultiTexImage2DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in UInt32 internalformat, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height, in SInt32 border ) = 'glCopyMultiTexImage2DEXT_wrapper';
function glCopyMultiTexSubImage1DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 x, in SInt32 y, in UInt32 width ) = 'glCopyMultiTexSubImage1DEXT_wrapper';
function glCopyMultiTexSubImage2DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glCopyMultiTexSubImage2DEXT_wrapper';
function glCopyMultiTexSubImage3DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 zoffset, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glCopyMultiTexSubImage3DEXT_wrapper';
function glCopyTextureImage1DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in UInt32 internalformat, in SInt32 x, in SInt32 y, in UInt32 width, in SInt32 border ) = 'glCopyTextureImage1DEXT_wrapper';
function glCopyTextureImage2DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in UInt32 internalformat, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height, in SInt32 border ) = 'glCopyTextureImage2DEXT_wrapper';
function glCopyTextureSubImage1DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 x, in SInt32 y, in UInt32 width ) = 'glCopyTextureSubImage1DEXT_wrapper';
function glCopyTextureSubImage2DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glCopyTextureSubImage2DEXT_wrapper';
function glCopyTextureSubImage3DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 zoffset, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glCopyTextureSubImage3DEXT_wrapper';
function glDisableClientStateIndexedEXT( in UInt32 array, in UInt32 index ) = 'glDisableClientStateIndexedEXT_wrapper';
function glDisableClientStateiEXT( in UInt32 array, in UInt32 index ) = 'glDisableClientStateiEXT_wrapper';
function glDisableVertexArrayAttribEXT( in UInt32 vaobj, in UInt32 index ) = 'glDisableVertexArrayAttribEXT_wrapper';
function glDisableVertexArrayEXT( in UInt32 vaobj, in UInt32 array ) = 'glDisableVertexArrayEXT_wrapper';
function glEnableClientStateIndexedEXT( in UInt32 array, in UInt32 index ) = 'glEnableClientStateIndexedEXT_wrapper';
function glEnableClientStateiEXT( in UInt32 array, in UInt32 index ) = 'glEnableClientStateiEXT_wrapper';
function glEnableVertexArrayAttribEXT( in UInt32 vaobj, in UInt32 index ) = 'glEnableVertexArrayAttribEXT_wrapper';
function glEnableVertexArrayEXT( in UInt32 vaobj, in UInt32 array ) = 'glEnableVertexArrayEXT_wrapper';
function glFlushMappedNamedBufferRangeEXT( in UInt32 buffer, in Size offset, in Size length ) = 'glFlushMappedNamedBufferRangeEXT_wrapper';
function glFramebufferDrawBufferEXT( in UInt32 framebuffer, in UInt32 mode ) = 'glFramebufferDrawBufferEXT_wrapper';
function glFramebufferDrawBuffersEXT( in UInt32 framebuffer, in UInt32 n, in UInt32 bufs[] ) = 'glFramebufferDrawBuffersEXT_wrapper';
function glFramebufferReadBufferEXT( in UInt32 framebuffer, in UInt32 mode ) = 'glFramebufferReadBufferEXT_wrapper';
function glGenerateMultiTexMipmapEXT( in UInt32 texunit, in UInt32 target ) = 'glGenerateMultiTexMipmapEXT_wrapper';
function glGenerateTextureMipmapEXT( in UInt32 texture, in UInt32 target ) = 'glGenerateTextureMipmapEXT_wrapper';
function glGetCompressedMultiTexImageEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in Data img ) = 'glGetCompressedMultiTexImageEXT_wrapper';
function glGetCompressedTextureImageEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in Data img ) = 'glGetCompressedTextureImageEXT_wrapper';
function glGetDoubleIndexedvEXT( in UInt32 target, in UInt32 index, io Float64 params[] ) = 'glGetDoubleIndexedvEXT_wrapper';
function glGetDoublei_vEXT( in UInt32 pname, in UInt32 index, io Float64 params[] ) = 'glGetDoublei_vEXT_wrapper';
function glGetFloatIndexedvEXT( in UInt32 target, in UInt32 index, io Float32 params[] ) = 'glGetFloatIndexedvEXT_wrapper';
function glGetFloati_vEXT( in UInt32 pname, in UInt32 index, io Float32 params[] ) = 'glGetFloati_vEXT_wrapper';
function glGetFramebufferParameterivEXT( in UInt32 framebuffer, in UInt32 pname, io SInt32 param[] ) = 'glGetFramebufferParameterivEXT_wrapper';
function glGetMultiTexEnvfvEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, io Float32 params[] ) = 'glGetMultiTexEnvfvEXT_wrapper';
function glGetMultiTexEnvivEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetMultiTexEnvivEXT_wrapper';
function glGetMultiTexGendvEXT( in UInt32 texunit, in UInt32 coord, in UInt32 pname, io Float64 params[] ) = 'glGetMultiTexGendvEXT_wrapper';
function glGetMultiTexGenfvEXT( in UInt32 texunit, in UInt32 coord, in UInt32 pname, io Float32 params[] ) = 'glGetMultiTexGenfvEXT_wrapper';
function glGetMultiTexGenivEXT( in UInt32 texunit, in UInt32 coord, in UInt32 pname, io SInt32 params[] ) = 'glGetMultiTexGenivEXT_wrapper';
function glGetMultiTexImageEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in UInt32 format, in UInt32 type, in Data pixels ) = 'glGetMultiTexImageEXT_wrapper';
function glGetMultiTexLevelParameterfvEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in UInt32 pname, io Float32 params[] ) = 'glGetMultiTexLevelParameterfvEXT_wrapper';
function glGetMultiTexLevelParameterivEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in UInt32 pname, io SInt32 params[] ) = 'glGetMultiTexLevelParameterivEXT_wrapper';
function glGetMultiTexParameterIivEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetMultiTexParameterIivEXT_wrapper';
function glGetMultiTexParameterIuivEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, io UInt32 params[] ) = 'glGetMultiTexParameterIuivEXT_wrapper';
function glGetMultiTexParameterfvEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, io Float32 params[] ) = 'glGetMultiTexParameterfvEXT_wrapper';
function glGetMultiTexParameterivEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetMultiTexParameterivEXT_wrapper';
function glGetNamedBufferParameterivEXT( in UInt32 buffer, in UInt32 pname, io SInt32 params[] ) = 'glGetNamedBufferParameterivEXT_wrapper';
function glGetNamedBufferSubDataEXT( in UInt32 buffer, in Size offset, in Size size, in Data data ) = 'glGetNamedBufferSubDataEXT_wrapper';
function glGetNamedFramebufferAttachmentParameterivEXT( in UInt32 framebuffer, in UInt32 attachment, in UInt32 pname, io SInt32 params[] ) = 'glGetNamedFramebufferAttachmentParameterivEXT_wrapper';
function glGetNamedProgramLocalParameterIivEXT( in UInt32 program, in UInt32 target, in UInt32 index, io SInt32 params[] ) = 'glGetNamedProgramLocalParameterIivEXT_wrapper';
function glGetNamedProgramLocalParameterIuivEXT( in UInt32 program, in UInt32 target, in UInt32 index, io UInt32 params[] ) = 'glGetNamedProgramLocalParameterIuivEXT_wrapper';
function glGetNamedProgramLocalParameterdvEXT( in UInt32 program, in UInt32 target, in UInt32 index, io Float64 params[] ) = 'glGetNamedProgramLocalParameterdvEXT_wrapper';
function glGetNamedProgramLocalParameterfvEXT( in UInt32 program, in UInt32 target, in UInt32 index, io Float32 params[] ) = 'glGetNamedProgramLocalParameterfvEXT_wrapper';
function glGetNamedProgramStringEXT( in UInt32 program, in UInt32 target, in UInt32 pname, in Data string ) = 'glGetNamedProgramStringEXT_wrapper';
function glGetNamedProgramivEXT( in UInt32 program, in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetNamedProgramivEXT_wrapper';
function glGetNamedRenderbufferParameterivEXT( in UInt32 renderbuffer, in UInt32 pname, io SInt32 params[] ) = 'glGetNamedRenderbufferParameterivEXT_wrapper';
function glGetTextureImageEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in UInt32 format, in UInt32 type, in Data pixels ) = 'glGetTextureImageEXT_wrapper';
function glGetTextureLevelParameterfvEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in UInt32 pname, io Float32 params[] ) = 'glGetTextureLevelParameterfvEXT_wrapper';
function glGetTextureLevelParameterivEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in UInt32 pname, io SInt32 params[] ) = 'glGetTextureLevelParameterivEXT_wrapper';
function glGetTextureParameterIivEXT( in UInt32 texture, in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetTextureParameterIivEXT_wrapper';
function glGetTextureParameterIuivEXT( in UInt32 texture, in UInt32 target, in UInt32 pname, io UInt32 params[] ) = 'glGetTextureParameterIuivEXT_wrapper';
function glGetTextureParameterfvEXT( in UInt32 texture, in UInt32 target, in UInt32 pname, io Float32 params[] ) = 'glGetTextureParameterfvEXT_wrapper';
function glGetTextureParameterivEXT( in UInt32 texture, in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetTextureParameterivEXT_wrapper';
function glGetVertexArrayIntegeri_vEXT( in UInt32 vaobj, in UInt32 index, in UInt32 pname, io SInt32 param[] ) = 'glGetVertexArrayIntegeri_vEXT_wrapper';
function glGetVertexArrayIntegervEXT( in UInt32 vaobj, in UInt32 pname, io SInt32 param[] ) = 'glGetVertexArrayIntegervEXT_wrapper';
function glMapNamedBufferEXT( in UInt32 buffer, in UInt32 access ) = 'glMapNamedBufferEXT_wrapper';
function glMapNamedBufferRangeEXT( in UInt32 buffer, in Size offset, in Size length, in UInt32 access ) = 'glMapNamedBufferRangeEXT_wrapper';
function glMatrixFrustumEXT( in UInt32 matrixMode, in Float64 l, in Float64 r, in Float64 b, in Float64 t, in Float64 n, in Float64 f ) = 'glMatrixFrustumEXT_wrapper';
function glMatrixLoadIdentityEXT( in UInt32 matrixMode ) = 'glMatrixLoadIdentityEXT_wrapper';
function glMatrixLoadTransposedEXT( in UInt32 matrixMode, in Float64 m[] ) = 'glMatrixLoadTransposedEXT_wrapper';
function glMatrixLoadTransposefEXT( in UInt32 matrixMode, in Float32 m[] ) = 'glMatrixLoadTransposefEXT_wrapper';
function glMatrixLoaddEXT( in UInt32 matrixMode, in Float64 m[] ) = 'glMatrixLoaddEXT_wrapper';
function glMatrixLoadfEXT( in UInt32 matrixMode, in Float32 m[] ) = 'glMatrixLoadfEXT_wrapper';
function glMatrixMultTransposedEXT( in UInt32 matrixMode, in Float64 m[] ) = 'glMatrixMultTransposedEXT_wrapper';
function glMatrixMultTransposefEXT( in UInt32 matrixMode, in Float32 m[] ) = 'glMatrixMultTransposefEXT_wrapper';
function glMatrixMultdEXT( in UInt32 matrixMode, in Float64 m[] ) = 'glMatrixMultdEXT_wrapper';
function glMatrixMultfEXT( in UInt32 matrixMode, in Float32 m[] ) = 'glMatrixMultfEXT_wrapper';
function glMatrixOrthoEXT( in UInt32 matrixMode, in Float64 l, in Float64 r, in Float64 b, in Float64 t, in Float64 n, in Float64 f ) = 'glMatrixOrthoEXT_wrapper';
function glMatrixPopEXT( in UInt32 matrixMode ) = 'glMatrixPopEXT_wrapper';
function glMatrixPushEXT( in UInt32 matrixMode ) = 'glMatrixPushEXT_wrapper';
function glMatrixRotatedEXT( in UInt32 matrixMode, in Float64 angle, in Float64 x, in Float64 y, in Float64 z ) = 'glMatrixRotatedEXT_wrapper';
function glMatrixRotatefEXT( in UInt32 matrixMode, in Float32 angle, in Float32 x, in Float32 y, in Float32 z ) = 'glMatrixRotatefEXT_wrapper';
function glMatrixScaledEXT( in UInt32 matrixMode, in Float64 x, in Float64 y, in Float64 z ) = 'glMatrixScaledEXT_wrapper';
function glMatrixScalefEXT( in UInt32 matrixMode, in Float32 x, in Float32 y, in Float32 z ) = 'glMatrixScalefEXT_wrapper';
function glMatrixTranslatedEXT( in UInt32 matrixMode, in Float64 x, in Float64 y, in Float64 z ) = 'glMatrixTranslatedEXT_wrapper';
function glMatrixTranslatefEXT( in UInt32 matrixMode, in Float32 x, in Float32 y, in Float32 z ) = 'glMatrixTranslatefEXT_wrapper';
function glMultiTexBufferEXT( in UInt32 texunit, in UInt32 target, in UInt32 internalformat, in UInt32 buffer ) = 'glMultiTexBufferEXT_wrapper';
function glMultiTexCoordPointerEXT( in UInt32 texunit, in SInt32 size, in UInt32 type, in UInt32 stride, in Data pointer ) = 'glMultiTexCoordPointerEXT_wrapper';
function glMultiTexEnvfEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, in Float32 param ) = 'glMultiTexEnvfEXT_wrapper';
function glMultiTexEnvfvEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, in Float32 params[] ) = 'glMultiTexEnvfvEXT_wrapper';
function glMultiTexEnviEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, in SInt32 param ) = 'glMultiTexEnviEXT_wrapper';
function glMultiTexEnvivEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, in SInt32 params[] ) = 'glMultiTexEnvivEXT_wrapper';
function glMultiTexGendEXT( in UInt32 texunit, in UInt32 coord, in UInt32 pname, in Float64 param ) = 'glMultiTexGendEXT_wrapper';
function glMultiTexGendvEXT( in UInt32 texunit, in UInt32 coord, in UInt32 pname, in Float64 params[] ) = 'glMultiTexGendvEXT_wrapper';
function glMultiTexGenfEXT( in UInt32 texunit, in UInt32 coord, in UInt32 pname, in Float32 param ) = 'glMultiTexGenfEXT_wrapper';
function glMultiTexGenfvEXT( in UInt32 texunit, in UInt32 coord, in UInt32 pname, in Float32 params[] ) = 'glMultiTexGenfvEXT_wrapper';
function glMultiTexGeniEXT( in UInt32 texunit, in UInt32 coord, in UInt32 pname, in SInt32 param ) = 'glMultiTexGeniEXT_wrapper';
function glMultiTexGenivEXT( in UInt32 texunit, in UInt32 coord, in UInt32 pname, in SInt32 params[] ) = 'glMultiTexGenivEXT_wrapper';
function glMultiTexImage1DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in SInt32 internalformat, in UInt32 width, in SInt32 border, in UInt32 format, in UInt32 type, in Data pixels ) = 'glMultiTexImage1DEXT_wrapper';
function glMultiTexImage2DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in SInt32 internalformat, in UInt32 width, in UInt32 height, in SInt32 border, in UInt32 format, in UInt32 type, in Data pixels ) = 'glMultiTexImage2DEXT_wrapper';
function glMultiTexImage3DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in SInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 depth, in SInt32 border, in UInt32 format, in UInt32 type, in Data pixels ) = 'glMultiTexImage3DEXT_wrapper';
function glMultiTexParameterIivEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, in SInt32 params[] ) = 'glMultiTexParameterIivEXT_wrapper';
function glMultiTexParameterIuivEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, in UInt32 params[] ) = 'glMultiTexParameterIuivEXT_wrapper';
function glMultiTexParameterfEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, in Float32 param ) = 'glMultiTexParameterfEXT_wrapper';
function glMultiTexParameterfvEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, in Float32 param[] ) = 'glMultiTexParameterfvEXT_wrapper';
function glMultiTexParameteriEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, in SInt32 param ) = 'glMultiTexParameteriEXT_wrapper';
function glMultiTexParameterivEXT( in UInt32 texunit, in UInt32 target, in UInt32 pname, in SInt32 param[] ) = 'glMultiTexParameterivEXT_wrapper';
function glMultiTexRenderbufferEXT( in UInt32 texunit, in UInt32 target, in UInt32 renderbuffer ) = 'glMultiTexRenderbufferEXT_wrapper';
function glMultiTexSubImage1DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in SInt32 xoffset, in UInt32 width, in UInt32 format, in UInt32 type, in Data pixels ) = 'glMultiTexSubImage1DEXT_wrapper';
function glMultiTexSubImage2DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 type, in Data pixels ) = 'glMultiTexSubImage2DEXT_wrapper';
function glMultiTexSubImage3DEXT( in UInt32 texunit, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 zoffset, in UInt32 width, in UInt32 height, in UInt32 depth, in UInt32 format, in UInt32 type, in Data pixels ) = 'glMultiTexSubImage3DEXT_wrapper';
function glNamedBufferDataEXT( in UInt32 buffer, in Size size, in Data data, in UInt32 usage ) = 'glNamedBufferDataEXT_wrapper';
function glNamedBufferSubDataEXT( in UInt32 buffer, in Size offset, in Size size, in Data data ) = 'glNamedBufferSubDataEXT_wrapper';
function glNamedCopyBufferSubDataEXT( in UInt32 readBuffer, in UInt32 writeBuffer, in Size readOffset, in Size writeOffset, in Size size ) = 'glNamedCopyBufferSubDataEXT_wrapper';
function glNamedFramebufferRenderbufferEXT( in UInt32 framebuffer, in UInt32 attachment, in UInt32 renderbuffertarget, in UInt32 renderbuffer ) = 'glNamedFramebufferRenderbufferEXT_wrapper';
function glNamedFramebufferTexture1DEXT( in UInt32 framebuffer, in UInt32 attachment, in UInt32 textarget, in UInt32 texture, in SInt32 level ) = 'glNamedFramebufferTexture1DEXT_wrapper';
function glNamedFramebufferTexture2DEXT( in UInt32 framebuffer, in UInt32 attachment, in UInt32 textarget, in UInt32 texture, in SInt32 level ) = 'glNamedFramebufferTexture2DEXT_wrapper';
function glNamedFramebufferTexture3DEXT( in UInt32 framebuffer, in UInt32 attachment, in UInt32 textarget, in UInt32 texture, in SInt32 level, in SInt32 zoffset ) = 'glNamedFramebufferTexture3DEXT_wrapper';
function glNamedFramebufferTextureEXT( in UInt32 framebuffer, in UInt32 attachment, in UInt32 texture, in SInt32 level ) = 'glNamedFramebufferTextureEXT_wrapper';
function glNamedFramebufferTextureFaceEXT( in UInt32 framebuffer, in UInt32 attachment, in UInt32 texture, in SInt32 level, in UInt32 face ) = 'glNamedFramebufferTextureFaceEXT_wrapper';
function glNamedFramebufferTextureLayerEXT( in UInt32 framebuffer, in UInt32 attachment, in UInt32 texture, in SInt32 level, in SInt32 layer ) = 'glNamedFramebufferTextureLayerEXT_wrapper';
function glNamedProgramLocalParameter4dEXT( in UInt32 program, in UInt32 target, in UInt32 index, in Float64 x, in Float64 y, in Float64 z, in Float64 w ) = 'glNamedProgramLocalParameter4dEXT_wrapper';
function glNamedProgramLocalParameter4dvEXT( in UInt32 program, in UInt32 target, in UInt32 index, in Float64 params[4] ) = 'glNamedProgramLocalParameter4dvEXT_wrapper';
function glNamedProgramLocalParameter4fEXT( in UInt32 program, in UInt32 target, in UInt32 index, in Float32 x, in Float32 y, in Float32 z, in Float32 w ) = 'glNamedProgramLocalParameter4fEXT_wrapper';
function glNamedProgramLocalParameter4fvEXT( in UInt32 program, in UInt32 target, in UInt32 index, in Float32 params[4] ) = 'glNamedProgramLocalParameter4fvEXT_wrapper';
function glNamedProgramLocalParameterI4iEXT( in UInt32 program, in UInt32 target, in UInt32 index, in SInt32 x, in SInt32 y, in SInt32 z, in SInt32 w ) = 'glNamedProgramLocalParameterI4iEXT_wrapper';
function glNamedProgramLocalParameterI4ivEXT( in UInt32 program, in UInt32 target, in UInt32 index, in SInt32 params[4] ) = 'glNamedProgramLocalParameterI4ivEXT_wrapper';
function glNamedProgramLocalParameterI4uiEXT( in UInt32 program, in UInt32 target, in UInt32 index, in UInt32 x, in UInt32 y, in UInt32 z, in UInt32 w ) = 'glNamedProgramLocalParameterI4uiEXT_wrapper';
function glNamedProgramLocalParameterI4uivEXT( in UInt32 program, in UInt32 target, in UInt32 index, in UInt32 params[4] ) = 'glNamedProgramLocalParameterI4uivEXT_wrapper';
function glNamedProgramLocalParameters4fvEXT( in UInt32 program, in UInt32 target, in UInt32 index, in UInt32 count, in Float32 params[4] ) = 'glNamedProgramLocalParameters4fvEXT_wrapper';
function glNamedProgramLocalParametersI4ivEXT( in UInt32 program, in UInt32 target, in UInt32 index, in UInt32 count, in SInt32 params[4] ) = 'glNamedProgramLocalParametersI4ivEXT_wrapper';
function glNamedProgramLocalParametersI4uivEXT( in UInt32 program, in UInt32 target, in UInt32 index, in UInt32 count, in UInt32 params[4] ) = 'glNamedProgramLocalParametersI4uivEXT_wrapper';
function glNamedProgramStringEXT( in UInt32 program, in UInt32 target, in UInt32 format, in UInt32 len, in Data string ) = 'glNamedProgramStringEXT_wrapper';
function glNamedRenderbufferStorageEXT( in UInt32 renderbuffer, in UInt32 internalformat, in UInt32 width, in UInt32 height ) = 'glNamedRenderbufferStorageEXT_wrapper';
function glNamedRenderbufferStorageMultisampleCoverageEXT( in UInt32 renderbuffer, in UInt32 coverageSamples, in UInt32 colorSamples, in UInt32 internalformat, in UInt32 width, in UInt32 height ) = 'glNamedRenderbufferStorageMultisampleCoverageEXT_wrapper';
function glNamedRenderbufferStorageMultisampleEXT( in UInt32 renderbuffer, in UInt32 samples, in UInt32 internalformat, in UInt32 width, in UInt32 height ) = 'glNamedRenderbufferStorageMultisampleEXT_wrapper';
function glProgramUniform1dEXT( in UInt32 program, in SInt32 location, in Float64 x ) = 'glProgramUniform1dEXT_wrapper';
function glProgramUniform1dvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Float64 value[1] ) = 'glProgramUniform1dvEXT_wrapper';
function glProgramUniform1fEXT( in UInt32 program, in SInt32 location, in Float32 v0 ) = 'glProgramUniform1fEXT_wrapper';
function glProgramUniform1fvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Float32 value[1] ) = 'glProgramUniform1fvEXT_wrapper';
function glProgramUniform1iEXT( in UInt32 program, in SInt32 location, in SInt32 v0 ) = 'glProgramUniform1iEXT_wrapper';
function glProgramUniform1ivEXT( in UInt32 program, in SInt32 location, in UInt32 count, in SInt32 value[1] ) = 'glProgramUniform1ivEXT_wrapper';
function glProgramUniform1uiEXT( in UInt32 program, in SInt32 location, in UInt32 v0 ) = 'glProgramUniform1uiEXT_wrapper';
function glProgramUniform1uivEXT( in UInt32 program, in SInt32 location, in UInt32 count, in UInt32 value[1] ) = 'glProgramUniform1uivEXT_wrapper';
function glProgramUniform2dEXT( in UInt32 program, in SInt32 location, in Float64 x, in Float64 y ) = 'glProgramUniform2dEXT_wrapper';
function glProgramUniform2dvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Float64 value[2] ) = 'glProgramUniform2dvEXT_wrapper';
function glProgramUniform2fEXT( in UInt32 program, in SInt32 location, in Float32 v0, in Float32 v1 ) = 'glProgramUniform2fEXT_wrapper';
function glProgramUniform2fvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Float32 value[2] ) = 'glProgramUniform2fvEXT_wrapper';
function glProgramUniform2iEXT( in UInt32 program, in SInt32 location, in SInt32 v0, in SInt32 v1 ) = 'glProgramUniform2iEXT_wrapper';
function glProgramUniform2ivEXT( in UInt32 program, in SInt32 location, in UInt32 count, in SInt32 value[2] ) = 'glProgramUniform2ivEXT_wrapper';
function glProgramUniform2uiEXT( in UInt32 program, in SInt32 location, in UInt32 v0, in UInt32 v1 ) = 'glProgramUniform2uiEXT_wrapper';
function glProgramUniform2uivEXT( in UInt32 program, in SInt32 location, in UInt32 count, in UInt32 value[2] ) = 'glProgramUniform2uivEXT_wrapper';
function glProgramUniform3dEXT( in UInt32 program, in SInt32 location, in Float64 x, in Float64 y, in Float64 z ) = 'glProgramUniform3dEXT_wrapper';
function glProgramUniform3dvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Float64 value[3] ) = 'glProgramUniform3dvEXT_wrapper';
function glProgramUniform3fEXT( in UInt32 program, in SInt32 location, in Float32 v0, in Float32 v1, in Float32 v2 ) = 'glProgramUniform3fEXT_wrapper';
function glProgramUniform3fvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Float32 value[3] ) = 'glProgramUniform3fvEXT_wrapper';
function glProgramUniform3iEXT( in UInt32 program, in SInt32 location, in SInt32 v0, in SInt32 v1, in SInt32 v2 ) = 'glProgramUniform3iEXT_wrapper';
function glProgramUniform3ivEXT( in UInt32 program, in SInt32 location, in UInt32 count, in SInt32 value[3] ) = 'glProgramUniform3ivEXT_wrapper';
function glProgramUniform3uiEXT( in UInt32 program, in SInt32 location, in UInt32 v0, in UInt32 v1, in UInt32 v2 ) = 'glProgramUniform3uiEXT_wrapper';
function glProgramUniform3uivEXT( in UInt32 program, in SInt32 location, in UInt32 count, in UInt32 value[3] ) = 'glProgramUniform3uivEXT_wrapper';
function glProgramUniform4dEXT( in UInt32 program, in SInt32 location, in Float64 x, in Float64 y, in Float64 z, in Float64 w ) = 'glProgramUniform4dEXT_wrapper';
function glProgramUniform4dvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Float64 value[4] ) = 'glProgramUniform4dvEXT_wrapper';
function glProgramUniform4fEXT( in UInt32 program, in SInt32 location, in Float32 v0, in Float32 v1, in Float32 v2, in Float32 v3 ) = 'glProgramUniform4fEXT_wrapper';
function glProgramUniform4fvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Float32 value[4] ) = 'glProgramUniform4fvEXT_wrapper';
function glProgramUniform4iEXT( in UInt32 program, in SInt32 location, in SInt32 v0, in SInt32 v1, in SInt32 v2, in SInt32 v3 ) = 'glProgramUniform4iEXT_wrapper';
function glProgramUniform4ivEXT( in UInt32 program, in SInt32 location, in UInt32 count, in SInt32 value[4] ) = 'glProgramUniform4ivEXT_wrapper';
function glProgramUniform4uiEXT( in UInt32 program, in SInt32 location, in UInt32 v0, in UInt32 v1, in UInt32 v2, in UInt32 v3 ) = 'glProgramUniform4uiEXT_wrapper';
function glProgramUniform4uivEXT( in UInt32 program, in SInt32 location, in UInt32 count, in UInt32 value[4] ) = 'glProgramUniform4uivEXT_wrapper';
function glProgramUniformMatrix2dvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glProgramUniformMatrix2dvEXT_wrapper';
function glProgramUniformMatrix2fvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glProgramUniformMatrix2fvEXT_wrapper';
function glProgramUniformMatrix2x3dvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glProgramUniformMatrix2x3dvEXT_wrapper';
function glProgramUniformMatrix2x3fvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glProgramUniformMatrix2x3fvEXT_wrapper';
function glProgramUniformMatrix2x4dvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glProgramUniformMatrix2x4dvEXT_wrapper';
function glProgramUniformMatrix2x4fvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glProgramUniformMatrix2x4fvEXT_wrapper';
function glProgramUniformMatrix3dvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glProgramUniformMatrix3dvEXT_wrapper';
function glProgramUniformMatrix3fvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glProgramUniformMatrix3fvEXT_wrapper';
function glProgramUniformMatrix3x2dvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glProgramUniformMatrix3x2dvEXT_wrapper';
function glProgramUniformMatrix3x2fvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glProgramUniformMatrix3x2fvEXT_wrapper';
function glProgramUniformMatrix3x4dvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glProgramUniformMatrix3x4dvEXT_wrapper';
function glProgramUniformMatrix3x4fvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glProgramUniformMatrix3x4fvEXT_wrapper';
function glProgramUniformMatrix4dvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glProgramUniformMatrix4dvEXT_wrapper';
function glProgramUniformMatrix4fvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat44 value[] ) = 'glProgramUniformMatrix4fvEXT_wrapper';
function glProgramUniformMatrix4x2dvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glProgramUniformMatrix4x2dvEXT_wrapper';
function glProgramUniformMatrix4x2fvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat22 value[] ) = 'glProgramUniformMatrix4x2fvEXT_wrapper';
function glProgramUniformMatrix4x3dvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glProgramUniformMatrix4x3dvEXT_wrapper';
function glProgramUniformMatrix4x3fvEXT( in UInt32 program, in SInt32 location, in UInt32 count, in Boolean transpose, io Mat33 value[] ) = 'glProgramUniformMatrix4x3fvEXT_wrapper';
function glPushClientAttribDefaultEXT( in UInt32 mask ) = 'glPushClientAttribDefaultEXT_wrapper';
function glTextureBufferEXT( in UInt32 texture, in UInt32 target, in UInt32 internalformat, in UInt32 buffer ) = 'glTextureBufferEXT_wrapper';
function glTextureImage1DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in SInt32 internalformat, in UInt32 width, in SInt32 border, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTextureImage1DEXT_wrapper';
function glTextureImage2DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in SInt32 internalformat, in UInt32 width, in UInt32 height, in SInt32 border, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTextureImage2DEXT_wrapper';
function glTextureImage3DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in SInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 depth, in SInt32 border, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTextureImage3DEXT_wrapper';
function glTextureParameterIivEXT( in UInt32 texture, in UInt32 target, in UInt32 pname, in SInt32 params[] ) = 'glTextureParameterIivEXT_wrapper';
function glTextureParameterIuivEXT( in UInt32 texture, in UInt32 target, in UInt32 pname, in UInt32 params[] ) = 'glTextureParameterIuivEXT_wrapper';
function glTextureParameterfEXT( in UInt32 texture, in UInt32 target, in UInt32 pname, in Float32 param ) = 'glTextureParameterfEXT_wrapper';
function glTextureParameterfvEXT( in UInt32 texture, in UInt32 target, in UInt32 pname, in Float32 param[] ) = 'glTextureParameterfvEXT_wrapper';
function glTextureParameteriEXT( in UInt32 texture, in UInt32 target, in UInt32 pname, in SInt32 param ) = 'glTextureParameteriEXT_wrapper';
function glTextureParameterivEXT( in UInt32 texture, in UInt32 target, in UInt32 pname, in SInt32 param[] ) = 'glTextureParameterivEXT_wrapper';
function glTextureRenderbufferEXT( in UInt32 texture, in UInt32 target, in UInt32 renderbuffer ) = 'glTextureRenderbufferEXT_wrapper';
function glTextureSubImage1DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in SInt32 xoffset, in UInt32 width, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTextureSubImage1DEXT_wrapper';
function glTextureSubImage2DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTextureSubImage2DEXT_wrapper';
function glTextureSubImage3DEXT( in UInt32 texture, in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 zoffset, in UInt32 width, in UInt32 height, in UInt32 depth, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTextureSubImage3DEXT_wrapper';
function Boolean glUnmapNamedBufferEXT( in UInt32 buffer ) = 'glUnmapNamedBufferEXT_wrapper';
function glVertexArrayColorOffsetEXT( in UInt32 vaobj, in UInt32 buffer, in SInt32 size, in UInt32 type, in UInt32 stride, in Size offset ) = 'glVertexArrayColorOffsetEXT_wrapper';
function glVertexArrayEdgeFlagOffsetEXT( in UInt32 vaobj, in UInt32 buffer, in UInt32 stride, in Size offset ) = 'glVertexArrayEdgeFlagOffsetEXT_wrapper';
function glVertexArrayFogCoordOffsetEXT( in UInt32 vaobj, in UInt32 buffer, in UInt32 type, in UInt32 stride, in Size offset ) = 'glVertexArrayFogCoordOffsetEXT_wrapper';
function glVertexArrayIndexOffsetEXT( in UInt32 vaobj, in UInt32 buffer, in UInt32 type, in UInt32 stride, in Size offset ) = 'glVertexArrayIndexOffsetEXT_wrapper';
function glVertexArrayMultiTexCoordOffsetEXT( in UInt32 vaobj, in UInt32 buffer, in UInt32 texunit, in SInt32 size, in UInt32 type, in UInt32 stride, in Size offset ) = 'glVertexArrayMultiTexCoordOffsetEXT_wrapper';
function glVertexArrayNormalOffsetEXT( in UInt32 vaobj, in UInt32 buffer, in UInt32 type, in UInt32 stride, in Size offset ) = 'glVertexArrayNormalOffsetEXT_wrapper';
function glVertexArraySecondaryColorOffsetEXT( in UInt32 vaobj, in UInt32 buffer, in SInt32 size, in UInt32 type, in UInt32 stride, in Size offset ) = 'glVertexArraySecondaryColorOffsetEXT_wrapper';
function glVertexArrayTexCoordOffsetEXT( in UInt32 vaobj, in UInt32 buffer, in SInt32 size, in UInt32 type, in UInt32 stride, in Size offset ) = 'glVertexArrayTexCoordOffsetEXT_wrapper';
function glVertexArrayVertexAttribIOffsetEXT( in UInt32 vaobj, in UInt32 buffer, in UInt32 index, in SInt32 size, in UInt32 type, in UInt32 stride, in Size offset ) = 'glVertexArrayVertexAttribIOffsetEXT_wrapper';
function glVertexArrayVertexAttribOffsetEXT( in UInt32 vaobj, in UInt32 buffer, in UInt32 index, in SInt32 size, in UInt32 type, in Boolean normalized, in UInt32 stride, in Size offset ) = 'glVertexArrayVertexAttribOffsetEXT_wrapper';
function glVertexArrayVertexOffsetEXT( in UInt32 vaobj, in UInt32 buffer, in SInt32 size, in UInt32 type, in UInt32 stride, in Size offset ) = 'glVertexArrayVertexOffsetEXT_wrapper';
function glColorMaskIndexedEXT( in UInt32 buf, in Boolean r, in Boolean g, in Boolean b, in Boolean a ) = 'glColorMaskIndexedEXT_wrapper';
function glDisableIndexedEXT( in UInt32 target, in UInt32 index ) = 'glDisableIndexedEXT_wrapper';
function glEnableIndexedEXT( in UInt32 target, in UInt32 index ) = 'glEnableIndexedEXT_wrapper';
function glGetBooleanIndexedvEXT( in UInt32 value, in UInt32 index, io Boolean data[] ) = 'glGetBooleanIndexedvEXT_wrapper';
function glGetIntegerIndexedvEXT( in UInt32 value, in UInt32 index, io SInt32 data[] ) = 'glGetIntegerIndexedvEXT_wrapper';
function Boolean glIsEnabledIndexedEXT( in UInt32 target, in UInt32 index ) = 'glIsEnabledIndexedEXT_wrapper';
function glDrawArraysInstancedEXT( in UInt32 mode, in SInt32 start, in UInt32 count, in UInt32 primcount ) = 'glDrawArraysInstancedEXT_wrapper';
function glDrawElementsInstancedEXT( in UInt32 mode, in UInt32 count, in UInt32 type, in Data indices, in UInt32 primcount ) = 'glDrawElementsInstancedEXT_wrapper';
function glDrawRangeElementsEXT( in UInt32 mode, in UInt32 start, in UInt32 end, in UInt32 count, in UInt32 type, in Data indices ) = 'glDrawRangeElementsEXT_wrapper';
function glFogCoordPointerEXT( in UInt32 type, in UInt32 stride, in Data pointer ) = 'glFogCoordPointerEXT_wrapper';
function glFogCoorddEXT( in Float64 coord ) = 'glFogCoorddEXT_wrapper';
function glFogCoorddvEXT( in Float64 coord[] ) = 'glFogCoorddvEXT_wrapper';
function glFogCoordfEXT( in Float32 coord ) = 'glFogCoordfEXT_wrapper';
function glFogCoordfvEXT( in Float32 coord[] ) = 'glFogCoordfvEXT_wrapper';
function glFragmentColorMaterialEXT( in UInt32 face, in UInt32 mode ) = 'glFragmentColorMaterialEXT_wrapper';
function glFragmentLightModelfEXT( in UInt32 pname, in Float32 param ) = 'glFragmentLightModelfEXT_wrapper';
function glFragmentLightModelfvEXT( in UInt32 pname, io Float32 params[] ) = 'glFragmentLightModelfvEXT_wrapper';
function glFragmentLightModeliEXT( in UInt32 pname, in SInt32 param ) = 'glFragmentLightModeliEXT_wrapper';
function glFragmentLightModelivEXT( in UInt32 pname, io SInt32 params[] ) = 'glFragmentLightModelivEXT_wrapper';
function glFragmentLightfEXT( in UInt32 light, in UInt32 pname, in Float32 param ) = 'glFragmentLightfEXT_wrapper';
function glFragmentLightfvEXT( in UInt32 light, in UInt32 pname, io Float32 params[] ) = 'glFragmentLightfvEXT_wrapper';
function glFragmentLightiEXT( in UInt32 light, in UInt32 pname, in SInt32 param ) = 'glFragmentLightiEXT_wrapper';
function glFragmentLightivEXT( in UInt32 light, in UInt32 pname, io SInt32 params[] ) = 'glFragmentLightivEXT_wrapper';
function glFragmentMaterialfEXT( in UInt32 face, in UInt32 pname, in Float32 param ) = 'glFragmentMaterialfEXT_wrapper';
function glFragmentMaterialfvEXT( in UInt32 face, in UInt32 pname, in Float32 params[] ) = 'glFragmentMaterialfvEXT_wrapper';
function glFragmentMaterialiEXT( in UInt32 face, in UInt32 pname, in SInt32 param ) = 'glFragmentMaterialiEXT_wrapper';
function glFragmentMaterialivEXT( in UInt32 face, in UInt32 pname, in SInt32 params[] ) = 'glFragmentMaterialivEXT_wrapper';
function glGetFragmentLightfvEXT( in UInt32 light, in UInt32 pname, io Float32 params[] ) = 'glGetFragmentLightfvEXT_wrapper';
function glGetFragmentLightivEXT( in UInt32 light, in UInt32 pname, io SInt32 params[] ) = 'glGetFragmentLightivEXT_wrapper';
function glGetFragmentMaterialfvEXT( in UInt32 face, in UInt32 pname, in Float32 params[] ) = 'glGetFragmentMaterialfvEXT_wrapper';
function glGetFragmentMaterialivEXT( in UInt32 face, in UInt32 pname, in SInt32 params[] ) = 'glGetFragmentMaterialivEXT_wrapper';
function glLightEnviEXT( in UInt32 pname, in SInt32 param ) = 'glLightEnviEXT_wrapper';
function glBlitFramebufferEXT( in SInt32 srcX0, in SInt32 srcY0, in SInt32 srcX1, in SInt32 srcY1, in SInt32 dstX0, in SInt32 dstY0, in SInt32 dstX1, in SInt32 dstY1, in UInt32 mask, in UInt32 filter ) = 'glBlitFramebufferEXT_wrapper';
function glRenderbufferStorageMultisampleEXT( in UInt32 target, in UInt32 samples, in UInt32 internalformat, in UInt32 width, in UInt32 height ) = 'glRenderbufferStorageMultisampleEXT_wrapper';
function glBindFramebufferEXT( in UInt32 target, in UInt32 framebuffer ) = 'glBindFramebufferEXT_wrapper';
function glBindRenderbufferEXT( in UInt32 target, in UInt32 renderbuffer ) = 'glBindRenderbufferEXT_wrapper';
function UInt32 glCheckFramebufferStatusEXT( in UInt32 target ) = 'glCheckFramebufferStatusEXT_wrapper';
function glDeleteFramebuffersEXT( in UInt32 n, in UInt32 framebuffers[] ) = 'glDeleteFramebuffersEXT_wrapper';
function glDeleteRenderbuffersEXT( in UInt32 n, in UInt32 renderbuffers[] ) = 'glDeleteRenderbuffersEXT_wrapper';
function glFramebufferRenderbufferEXT( in UInt32 target, in UInt32 attachment, in UInt32 renderbuffertarget, in UInt32 renderbuffer ) = 'glFramebufferRenderbufferEXT_wrapper';
function glFramebufferTexture1DEXT( in UInt32 target, in UInt32 attachment, in UInt32 textarget, in UInt32 texture, in SInt32 level ) = 'glFramebufferTexture1DEXT_wrapper';
function glFramebufferTexture2DEXT( in UInt32 target, in UInt32 attachment, in UInt32 textarget, in UInt32 texture, in SInt32 level ) = 'glFramebufferTexture2DEXT_wrapper';
function glFramebufferTexture3DEXT( in UInt32 target, in UInt32 attachment, in UInt32 textarget, in UInt32 texture, in SInt32 level, in SInt32 zoffset ) = 'glFramebufferTexture3DEXT_wrapper';
function glGenFramebuffersEXT( in UInt32 n, io UInt32 framebuffers[] ) = 'glGenFramebuffersEXT_wrapper';
function glGenRenderbuffersEXT( in UInt32 n, io UInt32 renderbuffers[] ) = 'glGenRenderbuffersEXT_wrapper';
function glGenerateMipmapEXT( in UInt32 target ) = 'glGenerateMipmapEXT_wrapper';
function glGetFramebufferAttachmentParameterivEXT( in UInt32 target, in UInt32 attachment, in UInt32 pname, io SInt32 params[] ) = 'glGetFramebufferAttachmentParameterivEXT_wrapper';
function glGetRenderbufferParameterivEXT( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetRenderbufferParameterivEXT_wrapper';
function Boolean glIsFramebufferEXT( in UInt32 framebuffer ) = 'glIsFramebufferEXT_wrapper';
function Boolean glIsRenderbufferEXT( in UInt32 renderbuffer ) = 'glIsRenderbufferEXT_wrapper';
function glRenderbufferStorageEXT( in UInt32 target, in UInt32 internalformat, in UInt32 width, in UInt32 height ) = 'glRenderbufferStorageEXT_wrapper';
function glFramebufferTextureEXT( in UInt32 target, in UInt32 attachment, in UInt32 texture, in SInt32 level ) = 'glFramebufferTextureEXT_wrapper';
function glFramebufferTextureFaceEXT( in UInt32 target, in UInt32 attachment, in UInt32 texture, in SInt32 level, in UInt32 face ) = 'glFramebufferTextureFaceEXT_wrapper';
function glProgramParameteriEXT( in UInt32 program, in UInt32 pname, in SInt32 value ) = 'glProgramParameteriEXT_wrapper';
function glProgramEnvParameters4fvEXT( in UInt32 target, in UInt32 index, in UInt32 count, in Float32 params[4] ) = 'glProgramEnvParameters4fvEXT_wrapper';
function glProgramLocalParameters4fvEXT( in UInt32 target, in UInt32 index, in UInt32 count, in Float32 params[4] ) = 'glProgramLocalParameters4fvEXT_wrapper';
function glBindFragDataLocationEXT( in UInt32 program, in UInt32 color, in String name ) = 'glBindFragDataLocationEXT_wrapper';
function SInt32 glGetFragDataLocationEXT( in UInt32 program, in String name ) = 'glGetFragDataLocationEXT_wrapper';
function glGetUniformuivEXT( in UInt32 program, in SInt32 location, io UInt32 params[] ) = 'glGetUniformuivEXT_wrapper';
function glGetVertexAttribIivEXT( in UInt32 index, in UInt32 pname, io SInt32 params[] ) = 'glGetVertexAttribIivEXT_wrapper';
function glGetVertexAttribIuivEXT( in UInt32 index, in UInt32 pname, io UInt32 params[] ) = 'glGetVertexAttribIuivEXT_wrapper';
function glUniform1uiEXT( in SInt32 location, in UInt32 v0 ) = 'glUniform1uiEXT_wrapper';
function glUniform1uivEXT( in SInt32 location, in UInt32 count, in UInt32 value[1] ) = 'glUniform1uivEXT_wrapper';
function glUniform2uiEXT( in SInt32 location, in UInt32 v0, in UInt32 v1 ) = 'glUniform2uiEXT_wrapper';
function glUniform2uivEXT( in SInt32 location, in UInt32 count, in UInt32 value[2] ) = 'glUniform2uivEXT_wrapper';
function glUniform3uiEXT( in SInt32 location, in UInt32 v0, in UInt32 v1, in UInt32 v2 ) = 'glUniform3uiEXT_wrapper';
function glUniform3uivEXT( in SInt32 location, in UInt32 count, in UInt32 value[3] ) = 'glUniform3uivEXT_wrapper';
function glUniform4uiEXT( in SInt32 location, in UInt32 v0, in UInt32 v1, in UInt32 v2, in UInt32 v3 ) = 'glUniform4uiEXT_wrapper';
function glUniform4uivEXT( in SInt32 location, in UInt32 count, in UInt32 value[4] ) = 'glUniform4uivEXT_wrapper';
function glVertexAttribI1iEXT( in UInt32 index, in SInt32 x ) = 'glVertexAttribI1iEXT_wrapper';
function glVertexAttribI1ivEXT( in UInt32 index, in SInt32 v[1] ) = 'glVertexAttribI1ivEXT_wrapper';
function glVertexAttribI1uiEXT( in UInt32 index, in UInt32 x ) = 'glVertexAttribI1uiEXT_wrapper';
function glVertexAttribI1uivEXT( in UInt32 index, in UInt32 v[1] ) = 'glVertexAttribI1uivEXT_wrapper';
function glVertexAttribI2iEXT( in UInt32 index, in SInt32 x, in SInt32 y ) = 'glVertexAttribI2iEXT_wrapper';
function glVertexAttribI2ivEXT( in UInt32 index, in SInt32 v[2] ) = 'glVertexAttribI2ivEXT_wrapper';
function glVertexAttribI2uiEXT( in UInt32 index, in UInt32 x, in UInt32 y ) = 'glVertexAttribI2uiEXT_wrapper';
function glVertexAttribI2uivEXT( in UInt32 index, in UInt32 v[2] ) = 'glVertexAttribI2uivEXT_wrapper';
function glVertexAttribI3iEXT( in UInt32 index, in SInt32 x, in SInt32 y, in SInt32 z ) = 'glVertexAttribI3iEXT_wrapper';
function glVertexAttribI3ivEXT( in UInt32 index, in SInt32 v[3] ) = 'glVertexAttribI3ivEXT_wrapper';
function glVertexAttribI3uiEXT( in UInt32 index, in UInt32 x, in UInt32 y, in UInt32 z ) = 'glVertexAttribI3uiEXT_wrapper';
function glVertexAttribI3uivEXT( in UInt32 index, in UInt32 v[3] ) = 'glVertexAttribI3uivEXT_wrapper';
function glVertexAttribI4bvEXT( in UInt32 index, in Byte v[4] ) = 'glVertexAttribI4bvEXT_wrapper';
function glVertexAttribI4iEXT( in UInt32 index, in SInt32 x, in SInt32 y, in SInt32 z, in SInt32 w ) = 'glVertexAttribI4iEXT_wrapper';
function glVertexAttribI4ivEXT( in UInt32 index, in SInt32 v[4] ) = 'glVertexAttribI4ivEXT_wrapper';
function glVertexAttribI4svEXT( in UInt32 index, in SInt16 v[4] ) = 'glVertexAttribI4svEXT_wrapper';
function glVertexAttribI4ubvEXT( in UInt32 index, in Byte v[4] ) = 'glVertexAttribI4ubvEXT_wrapper';
function glVertexAttribI4uiEXT( in UInt32 index, in UInt32 x, in UInt32 y, in UInt32 z, in UInt32 w ) = 'glVertexAttribI4uiEXT_wrapper';
function glVertexAttribI4uivEXT( in UInt32 index, in UInt32 v[4] ) = 'glVertexAttribI4uivEXT_wrapper';
function glVertexAttribI4usvEXT( in UInt32 index, in UInt16 v[4] ) = 'glVertexAttribI4usvEXT_wrapper';
function glVertexAttribIPointerEXT( in UInt32 index, in SInt32 size, in UInt32 type, in UInt32 stride, in Data pointer ) = 'glVertexAttribIPointerEXT_wrapper';
function glGetHistogramEXT( in UInt32 target, in Boolean reset, in UInt32 format, in UInt32 type, in Data values ) = 'glGetHistogramEXT_wrapper';
function glGetHistogramParameterfvEXT( in UInt32 target, in UInt32 pname, io Float32 params[] ) = 'glGetHistogramParameterfvEXT_wrapper';
function glGetHistogramParameterivEXT( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetHistogramParameterivEXT_wrapper';
function glGetMinmaxEXT( in UInt32 target, in Boolean reset, in UInt32 format, in UInt32 type, in Data values ) = 'glGetMinmaxEXT_wrapper';
function glGetMinmaxParameterfvEXT( in UInt32 target, in UInt32 pname, io Float32 params[] ) = 'glGetMinmaxParameterfvEXT_wrapper';
function glGetMinmaxParameterivEXT( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetMinmaxParameterivEXT_wrapper';
function glHistogramEXT( in UInt32 target, in UInt32 width, in UInt32 internalformat, in Boolean sink ) = 'glHistogramEXT_wrapper';
function glMinmaxEXT( in UInt32 target, in UInt32 internalformat, in Boolean sink ) = 'glMinmaxEXT_wrapper';
function glResetHistogramEXT( in UInt32 target ) = 'glResetHistogramEXT_wrapper';
function glResetMinmaxEXT( in UInt32 target ) = 'glResetMinmaxEXT_wrapper';
function glIndexFuncEXT( in UInt32 func, in Float32 ref ) = 'glIndexFuncEXT_wrapper';
function glIndexMaterialEXT( in UInt32 face, in UInt32 mode ) = 'glIndexMaterialEXT_wrapper';
function glApplyTextureEXT( in UInt32 mode ) = 'glApplyTextureEXT_wrapper';
function glTextureLightEXT( in UInt32 pname ) = 'glTextureLightEXT_wrapper';
function glTextureMaterialEXT( in UInt32 face, in UInt32 mode ) = 'glTextureMaterialEXT_wrapper';
function glMultiDrawArraysEXT( in UInt32 mode, in SInt32 first[], in UInt32 count[], in UInt32 primcount ) = 'glMultiDrawArraysEXT_wrapper';
function glSampleMaskEXT( in Float32 value, in Boolean invert ) = 'glSampleMaskEXT_wrapper';
function glSamplePatternEXT( in UInt32 pattern ) = 'glSamplePatternEXT_wrapper';
function glColorTableEXT( in UInt32 target, in UInt32 internalFormat, in UInt32 width, in UInt32 format, in UInt32 type, in Data data ) = 'glColorTableEXT_wrapper';
function glGetColorTableEXT( in UInt32 target, in UInt32 format, in UInt32 type, in Data data ) = 'glGetColorTableEXT_wrapper';
function glGetColorTableParameterfvEXT( in UInt32 target, in UInt32 pname, io Float32 params[] ) = 'glGetColorTableParameterfvEXT_wrapper';
function glGetColorTableParameterivEXT( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetColorTableParameterivEXT_wrapper';
function glGetPixelTransformParameterfvEXT( in UInt32 target, in UInt32 pname, in Float32 params[] ) = 'glGetPixelTransformParameterfvEXT_wrapper';
function glGetPixelTransformParameterivEXT( in UInt32 target, in UInt32 pname, in SInt32 params[] ) = 'glGetPixelTransformParameterivEXT_wrapper';
function glPixelTransformParameterfEXT( in UInt32 target, in UInt32 pname, in Float32 param ) = 'glPixelTransformParameterfEXT_wrapper';
function glPixelTransformParameterfvEXT( in UInt32 target, in UInt32 pname, in Float32 params[] ) = 'glPixelTransformParameterfvEXT_wrapper';
function glPixelTransformParameteriEXT( in UInt32 target, in UInt32 pname, in SInt32 param ) = 'glPixelTransformParameteriEXT_wrapper';
function glPixelTransformParameterivEXT( in UInt32 target, in UInt32 pname, in SInt32 params[] ) = 'glPixelTransformParameterivEXT_wrapper';
function glPointParameterfEXT( in UInt32 pname, in Float32 param ) = 'glPointParameterfEXT_wrapper';
function glPointParameterfvEXT( in UInt32 pname, in Float32 params[] ) = 'glPointParameterfvEXT_wrapper';
function glPolygonOffsetEXT( in Float32 factor, in Float32 bias ) = 'glPolygonOffsetEXT_wrapper';
function glProvokingVertexEXT( in UInt32 mode ) = 'glProvokingVertexEXT_wrapper';
function glBeginSceneEXT(  ) = 'glBeginSceneEXT_wrapper';
function glEndSceneEXT(  ) = 'glEndSceneEXT_wrapper';
function glSecondaryColor3bEXT( in Byte red, in Byte green, in Byte blue ) = 'glSecondaryColor3bEXT_wrapper';
function glSecondaryColor3bvEXT( in Byte v[3] ) = 'glSecondaryColor3bvEXT_wrapper';
function glSecondaryColor3dEXT( in Float64 red, in Float64 green, in Float64 blue ) = 'glSecondaryColor3dEXT_wrapper';
function glSecondaryColor3dvEXT( in Float64 v[3] ) = 'glSecondaryColor3dvEXT_wrapper';
function glSecondaryColor3fEXT( in Float32 red, in Float32 green, in Float32 blue ) = 'glSecondaryColor3fEXT_wrapper';
function glSecondaryColor3fvEXT( in Float32 v[3] ) = 'glSecondaryColor3fvEXT_wrapper';
function glSecondaryColor3iEXT( in SInt32 red, in SInt32 green, in SInt32 blue ) = 'glSecondaryColor3iEXT_wrapper';
function glSecondaryColor3ivEXT( in SInt32 v[3] ) = 'glSecondaryColor3ivEXT_wrapper';
function glSecondaryColor3sEXT( in SInt16 red, in SInt16 green, in SInt16 blue ) = 'glSecondaryColor3sEXT_wrapper';
function glSecondaryColor3svEXT( in SInt16 v[3] ) = 'glSecondaryColor3svEXT_wrapper';
function glSecondaryColor3ubEXT( in Byte red, in Byte green, in Byte blue ) = 'glSecondaryColor3ubEXT_wrapper';
function glSecondaryColor3ubvEXT( in Byte v[3] ) = 'glSecondaryColor3ubvEXT_wrapper';
function glSecondaryColor3uiEXT( in UInt32 red, in UInt32 green, in UInt32 blue ) = 'glSecondaryColor3uiEXT_wrapper';
function glSecondaryColor3uivEXT( in UInt32 v[3] ) = 'glSecondaryColor3uivEXT_wrapper';
function glSecondaryColor3usEXT( in UInt16 red, in UInt16 green, in UInt16 blue ) = 'glSecondaryColor3usEXT_wrapper';
function glSecondaryColor3usvEXT( in UInt16 v[3] ) = 'glSecondaryColor3usvEXT_wrapper';
function glSecondaryColorPointerEXT( in SInt32 size, in UInt32 type, in UInt32 stride, in Data pointer ) = 'glSecondaryColorPointerEXT_wrapper';
function glActiveProgramEXT( in UInt32 program ) = 'glActiveProgramEXT_wrapper';
function UInt32 glCreateShaderProgramEXT( in UInt32 type, in String string ) = 'glCreateShaderProgramEXT_wrapper';
function glUseShaderProgramEXT( in UInt32 type, in UInt32 program ) = 'glUseShaderProgramEXT_wrapper';
function glBindImageTextureEXT( in UInt32 index, in UInt32 texture, in SInt32 level, in Boolean layered, in SInt32 layer, in UInt32 access, in SInt32 format ) = 'glBindImageTextureEXT_wrapper';
function glMemoryBarrierEXT( in UInt32 barriers ) = 'glMemoryBarrierEXT_wrapper';
function glActiveStencilFaceEXT( in UInt32 face ) = 'glActiveStencilFaceEXT_wrapper';
function glTexSubImage1DEXT( in UInt32 target, in SInt32 level, in SInt32 xoffset, in UInt32 width, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTexSubImage1DEXT_wrapper';
function glTexSubImage2DEXT( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in UInt32 width, in UInt32 height, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTexSubImage2DEXT_wrapper';
function glTexSubImage3DEXT( in UInt32 target, in SInt32 level, in SInt32 xoffset, in SInt32 yoffset, in SInt32 zoffset, in UInt32 width, in UInt32 height, in UInt32 depth, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTexSubImage3DEXT_wrapper';
function glTexImage3DEXT( in UInt32 target, in SInt32 level, in UInt32 internalformat, in UInt32 width, in UInt32 height, in UInt32 depth, in SInt32 border, in UInt32 format, in UInt32 type, in Data pixels ) = 'glTexImage3DEXT_wrapper';
function glFramebufferTextureLayerEXT( in UInt32 target, in UInt32 attachment, in UInt32 texture, in SInt32 level, in SInt32 layer ) = 'glFramebufferTextureLayerEXT_wrapper';
function glTexBufferEXT( in UInt32 target, in UInt32 internalformat, in UInt32 buffer ) = 'glTexBufferEXT_wrapper';
function glClearColorIiEXT( in SInt32 red, in SInt32 green, in SInt32 blue, in SInt32 alpha ) = 'glClearColorIiEXT_wrapper';
function glClearColorIuiEXT( in UInt32 red, in UInt32 green, in UInt32 blue, in UInt32 alpha ) = 'glClearColorIuiEXT_wrapper';
function glGetTexParameterIivEXT( in UInt32 target, in UInt32 pname, io SInt32 params[] ) = 'glGetTexParameterIivEXT_wrapper';
function glGetTexParameterIuivEXT( in UInt32 target, in UInt32 pname, io UInt32 params[] ) = 'glGetTexParameterIuivEXT_wrapper';
function glTexParameterIivEXT( in UInt32 target, in UInt32 pname, in SInt32 params[] ) = 'glTexParameterIivEXT_wrapper';
function glTexParameterIuivEXT( in UInt32 target, in UInt32 pname, in UInt32 params[] ) = 'glTexParameterIuivEXT_wrapper';
function Boolean glAreTexturesResidentEXT( in UInt32 n, in UInt32 textures[], io Boolean residences[] ) = 'glAreTexturesResidentEXT_wrapper';
function glBindTextureEXT( in UInt32 target, in UInt32 texture ) = 'glBindTextureEXT_wrapper';
function glDeleteTexturesEXT( in UInt32 n, in UInt32 textures[] ) = 'glDeleteTexturesEXT_wrapper';
function glGenTexturesEXT( in UInt32 n, io UInt32 textures[] ) = 'glGenTexturesEXT_wrapper';
function Boolean glIsTextureEXT( in UInt32 texture ) = 'glIsTextureEXT_wrapper';
function glPrioritizeTexturesEXT( in UInt32 n, in UInt32 textures[], in Float32 priorities[] ) = 'glPrioritizeTexturesEXT_wrapper';
function glTextureNormalEXT( in UInt32 mode ) = 'glTextureNormalEXT_wrapper';
function glBeginTransformFeedbackEXT( in UInt32 primitiveMode ) = 'glBeginTransformFeedbackEXT_wrapper';
function glBindBufferBaseEXT( in UInt32 target, in UInt32 index, in UInt32 buffer ) = 'glBindBufferBaseEXT_wrapper';
function glBindBufferOffsetEXT( in UInt32 target, in UInt32 index, in UInt32 buffer, in Size offset ) = 'glBindBufferOffsetEXT_wrapper';
function glBindBufferRangeEXT( in UInt32 target, in UInt32 index, in UInt32 buffer, in Size offset, in Size size ) = 'glBindBufferRangeEXT_wrapper';
function glEndTransformFeedbackEXT(  ) = 'glEndTransformFeedbackEXT_wrapper';
function glGetTransformFeedbackVaryingEXT( in UInt32 program, in UInt32 index, in UInt32 bufSize, io UInt32 length[], io UInt32 size[], io UInt32 type[], io String name ) = 'glGetTransformFeedbackVaryingEXT_wrapper';
function glTransformFeedbackVaryingsEXT( in UInt32 program, in UInt32 count, in String varyings[], in UInt32 bufferMode ) = 'glTransformFeedbackVaryingsEXT_wrapper';
function glArrayElementEXT( in SInt32 i ) = 'glArrayElementEXT_wrapper';
function glColorPointerEXT( in SInt32 size, in UInt32 type, in UInt32 stride, in UInt32 count, in Data pointer ) = 'glColorPointerEXT_wrapper';
function glDrawArraysEXT( in UInt32 mode, in SInt32 first, in UInt32 count ) = 'glDrawArraysEXT_wrapper';
function glEdgeFlagPointerEXT( in UInt32 stride, in UInt32 count, in Boolean pointer[] ) = 'glEdgeFlagPointerEXT_wrapper';
function glIndexPointerEXT( in UInt32 type, in UInt32 stride, in UInt32 count, in Data pointer ) = 'glIndexPointerEXT_wrapper';
function glNormalPointerEXT( in UInt32 type, in UInt32 stride, in UInt32 count, in Data pointer ) = 'glNormalPointerEXT_wrapper';
function glTexCoordPointerEXT( in SInt32 size, in UInt32 type, in UInt32 stride, in UInt32 count, in Data pointer ) = 'glTexCoordPointerEXT_wrapper';
function glVertexPointerEXT( in SInt32 size, in UInt32 type, in UInt32 stride, in UInt32 count, in Data pointer ) = 'glVertexPointerEXT_wrapper';
function glGetVertexAttribLdvEXT( in UInt32 index, in UInt32 pname, io Float64 params[] ) = 'glGetVertexAttribLdvEXT_wrapper';
function glVertexArrayVertexAttribLOffsetEXT( in UInt32 vaobj, in UInt32 buffer, in UInt32 index, in SInt32 size, in UInt32 type, in UInt32 stride, in Size offset ) = 'glVertexArrayVertexAttribLOffsetEXT_wrapper';
function glVertexAttribL1dEXT( in UInt32 index, in Float64 x ) = 'glVertexAttribL1dEXT_wrapper';
function glVertexAttribL1dvEXT( in UInt32 index, in Float64 v[1] ) = 'glVertexAttribL1dvEXT_wrapper';
function glVertexAttribL2dEXT( in UInt32 index, in Float64 x, in Float64 y ) = 'glVertexAttribL2dEXT_wrapper';
function glVertexAttribL2dvEXT( in UInt32 index, in Float64 v[2] ) = 'glVertexAttribL2dvEXT_wrapper';
function glVertexAttribL3dEXT( in UInt32 index, in Float64 x, in Float64 y, in Float64 z ) = 'glVertexAttribL3dEXT_wrapper';
function glVertexAttribL3dvEXT( in UInt32 index, in Float64 v[3] ) = 'glVertexAttribL3dvEXT_wrapper';
function glVertexAttribL4dEXT( in UInt32 index, in Float64 x, in Float64 y, in Float64 z, in Float64 w ) = 'glVertexAttribL4dEXT_wrapper';
function glVertexAttribL4dvEXT( in UInt32 index, in Float64 v[4] ) = 'glVertexAttribL4dvEXT_wrapper';
function glVertexAttribLPointerEXT( in UInt32 index, in SInt32 size, in UInt32 type, in UInt32 stride, in Data pointer ) = 'glVertexAttribLPointerEXT_wrapper';
function glBeginVertexShaderEXT(  ) = 'glBeginVertexShaderEXT_wrapper';
function UInt32 glBindLightParameterEXT( in UInt32 light, in UInt32 value ) = 'glBindLightParameterEXT_wrapper';
function UInt32 glBindMaterialParameterEXT( in UInt32 face, in UInt32 value ) = 'glBindMaterialParameterEXT_wrapper';
function UInt32 glBindParameterEXT( in UInt32 value ) = 'glBindParameterEXT_wrapper';
function UInt32 glBindTexGenParameterEXT( in UInt32 unit, in UInt32 coord, in UInt32 value ) = 'glBindTexGenParameterEXT_wrapper';
function UInt32 glBindTextureUnitParameterEXT( in UInt32 unit, in UInt32 value ) = 'glBindTextureUnitParameterEXT_wrapper';
function glBindVertexShaderEXT( in UInt32 id ) = 'glBindVertexShaderEXT_wrapper';
function glDeleteVertexShaderEXT( in UInt32 id ) = 'glDeleteVertexShaderEXT_wrapper';
function glDisableVariantClientStateEXT( in UInt32 id ) = 'glDisableVariantClientStateEXT_wrapper';
function glEnableVariantClientStateEXT( in UInt32 id ) = 'glEnableVariantClientStateEXT_wrapper';
function glEndVertexShaderEXT(  ) = 'glEndVertexShaderEXT_wrapper';
function glExtractComponentEXT( in UInt32 res, in UInt32 src, in UInt32 num ) = 'glExtractComponentEXT_wrapper';
function UInt32 glGenSymbolsEXT( in UInt32 dataType, in UInt32 storageType, in UInt32 range, in UInt32 components ) = 'glGenSymbolsEXT_wrapper';
function UInt32 glGenVertexShadersEXT( in UInt32 range ) = 'glGenVertexShadersEXT_wrapper';
function glGetInvariantBooleanvEXT( in UInt32 id, in UInt32 value, io Boolean data[] ) = 'glGetInvariantBooleanvEXT_wrapper';
function glGetInvariantFloatvEXT( in UInt32 id, in UInt32 value, io Float32 data[] ) = 'glGetInvariantFloatvEXT_wrapper';
function glGetInvariantIntegervEXT( in UInt32 id, in UInt32 value, io SInt32 data[] ) = 'glGetInvariantIntegervEXT_wrapper';
function glGetLocalConstantBooleanvEXT( in UInt32 id, in UInt32 value, io Boolean data[] ) = 'glGetLocalConstantBooleanvEXT_wrapper';
function glGetLocalConstantFloatvEXT( in UInt32 id, in UInt32 value, io Float32 data[] ) = 'glGetLocalConstantFloatvEXT_wrapper';
function glGetLocalConstantIntegervEXT( in UInt32 id, in UInt32 value, io SInt32 data[] ) = 'glGetLocalConstantIntegervEXT_wrapper';
function glGetVariantBooleanvEXT( in UInt32 id, in UInt32 value, io Boolean data[] ) = 'glGetVariantBooleanvEXT_wrapper';
function glGetVariantFloatvEXT( in UInt32 id, in UInt32 value, io Float32 data[] ) = 'glGetVariantFloatvEXT_wrapper';
function glGetVariantIntegervEXT( in UInt32 id, in UInt32 value, io SInt32 data[] ) = 'glGetVariantIntegervEXT_wrapper';
function glInsertComponentEXT( in UInt32 res, in UInt32 src, in UInt32 num ) = 'glInsertComponentEXT_wrapper';
function Boolean glIsVariantEnabledEXT( in UInt32 id, in UInt32 cap ) = 'glIsVariantEnabledEXT_wrapper';
function glSetInvariantEXT( in UInt32 id, in UInt32 type, in Data addr ) = 'glSetInvariantEXT_wrapper';
function glSetLocalConstantEXT( in UInt32 id, in UInt32 type, in Data addr ) = 'glSetLocalConstantEXT_wrapper';
function glShaderOp1EXT( in UInt32 op, in UInt32 res, in UInt32 arg1 ) = 'glShaderOp1EXT_wrapper';
function glShaderOp2EXT( in UInt32 op, in UInt32 res, in UInt32 arg1, in UInt32 arg2 ) = 'glShaderOp2EXT_wrapper';
function glShaderOp3EXT( in UInt32 op, in UInt32 res, in UInt32 arg1, in UInt32 arg2, in UInt32 arg3 ) = 'glShaderOp3EXT_wrapper';
function glSwizzleEXT( in UInt32 res, in UInt32 inValue, in UInt32 outX, in UInt32 outY, in UInt32 outZ, in UInt32 outW ) = 'glSwizzleEXT_wrapper';
function glVariantPointerEXT( in UInt32 id, in UInt32 type, in UInt32 stride, in Data addr ) = 'glVariantPointerEXT_wrapper';
function glVariantbvEXT( in UInt32 id, io Byte addr[] ) = 'glVariantbvEXT_wrapper';
function glVariantdvEXT( in UInt32 id, io Float64 addr[] ) = 'glVariantdvEXT_wrapper';
function glVariantfvEXT( in UInt32 id, io Float32 addr[] ) = 'glVariantfvEXT_wrapper';
function glVariantivEXT( in UInt32 id, io SInt32 addr[] ) = 'glVariantivEXT_wrapper';
function glVariantsvEXT( in UInt32 id, io SInt16 addr[] ) = 'glVariantsvEXT_wrapper';
function glVariantubvEXT( in UInt32 id, io Byte addr[] ) = 'glVariantubvEXT_wrapper';
function glVariantuivEXT( in UInt32 id, io UInt32 addr[] ) = 'glVariantuivEXT_wrapper';
function glVariantusvEXT( in UInt32 id, io UInt16 addr[] ) = 'glVariantusvEXT_wrapper';
function glWriteMaskEXT( in UInt32 res, in UInt32 inValue, in UInt32 outX, in UInt32 outY, in UInt32 outZ, in UInt32 outW ) = 'glWriteMaskEXT_wrapper';
function glVertexWeightPointerEXT( in SInt32 size, in UInt32 type, in UInt32 stride, in Data pointer ) = 'glVertexWeightPointerEXT_wrapper';
function glVertexWeightfEXT( in Float32 weight ) = 'glVertexWeightfEXT_wrapper';
function glVertexWeightfvEXT( io Float32 weight[] ) = 'glVertexWeightfvEXT_wrapper';
function glDebugMessageControl( in UInt32 source, in UInt32 type, in UInt32 severity, in UInt32 count, in UInt32 ids[], in Boolean enabled ) = 'glDebugMessageControl_wrapper';
function glDebugMessageInsert( in UInt32 source, in UInt32 type, in UInt32 id, in UInt32 severity, in UInt32 length, in String buf ) = 'glDebugMessageInsert_wrapper';
function UInt32 glGetDebugMessageLog( in UInt32 count, in UInt32 bufsize, io UInt32 sources[], io UInt32 types[], io UInt32 ids[], io UInt32 severities[], io UInt32 lengths[], io String messageLog ) = 'glGetDebugMessageLog_wrapper';
function glGetObjectLabel( in UInt32 identifier, in UInt32 name, in UInt32 bufSize, io UInt32 length[], io String label ) = 'glGetObjectLabel_wrapper';
function glGetObjectPtrLabel( in Data ptr, in UInt32 bufSize, io UInt32 length[], io String label ) = 'glGetObjectPtrLabel_wrapper';
function glObjectLabel( in UInt32 identifier, in UInt32 name, in UInt32 length, in String label ) = 'glObjectLabel_wrapper';
function glObjectPtrLabel( in Data ptr, in UInt32 length, in String label ) = 'glObjectPtrLabel_wrapper';
function glPushDebugGroup( in UInt32 source, in UInt32 id, in UInt32 length, in String message ) = 'glPushDebugGroup_wrapper';
function UInt32 glBufferRegionEnabled(  ) = 'glBufferRegionEnabled_wrapper';
function glDeleteBufferRegion( in UInt32 region ) = 'glDeleteBufferRegion_wrapper';
function glDrawBufferRegion( in UInt32 region, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height, in SInt32 xDest, in SInt32 yDest ) = 'glDrawBufferRegion_wrapper';
function UInt32 glNewBufferRegion( in UInt32 region ) = 'glNewBufferRegion_wrapper';
function glReadBufferRegion( in UInt32 region, in SInt32 x, in SInt32 y, in UInt32 width, in UInt32 height ) = 'glReadBufferRegion_wrapper';
function Boolean glGetExtensionREGAL( in String ext ) = 'glGetExtensionREGAL_wrapper';
function Boolean glIsSupportedREGAL( in String ext ) = 'glIsSupportedREGAL_wrapper';