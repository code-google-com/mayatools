//
// Copyright 2010-2014 Fabric Software Inc. All rights reserved.
//

require FabricStatistics;

//Structures used for raycast & getClosest

//This interface enables to abstract the content of an queried object for raycast queries,
//enabling for specialization of its content (eg: polygons, geometries).
//NOTE: the 'RaycastResult' object must properly support the 'clone' operation
interface RaycastResult {

  //Resets the content of the query (new raycast beginning)
  reset!( Vec3 start, Vec3 unitDir, Boolean doubleSided, Scalar coneThreshold );

  //If the raycast resulting distance is <= maxDistance, returns 'true'
  //and the object should preserve location information for that best candidate.
	Boolean compareAndUpdate!( Size objectIndex, io Scalar maxDistance );

  copyResultFrom!( Ref<RaycastResult> other );
};

//This interface enables to abstract the content of an queried object for getClosest queries,
//enabling for specialization of its content (eg: polygons, geometries).
//NOTE: the 'ClosestResult' object must properly support the 'clone' operation
interface ClosestResult {

  //Resets the content of the query (new getClosest beginning).
  //If 'hasScaling', then 'scaling' will contain a non-uniform scaling vector.
  //Else, 'scaling' will be Vec3(1,1,1).
  reset!( Vec3 position, Vec3 scaling, Boolean hasScaling );

  //If the getClosest resulting squared scaled distance is <= maxScaledSquaredDistance, returns 'true'
  //and the object should preserve location information for that best candidate.
	Boolean compareAndUpdate!( Size objectIndex, io Scalar maxScaledSquaredDistance );

  copyResultFrom!( Ref<ClosestResult> other );
};

struct _QueryHeapItem {
  UInt32 cellIndex;//Important: cellIndex == 0 will be sorted 'first' if same distance.
  UInt32 cellDepth;
  UInt32 objIndex;
  Scalar distFactor;
};

struct _StatialQueryData {
  IndexSet visitedItems;
  BitVector tempBits;

  _QueryHeapItem heapItems[];
  Size heapItemsEnd;//heapItems only grows to avoid reallocs

  Object userData;//Spatial accelerations can store what they need here
};

inline _StatialQueryData._cleanup!( Boolean clearTempBits ) {
  this.visitedItems.clear();
  if( clearTempBits )
    this.tempBits.clearAll();
  this._ResetHeap();
}

inline Size _StatialQueryData.getQueriedElement( Size index ) {
  if( index > this.visitedItems.size() )
    throw("_StatialQueryData.getQueriedElement: index out of range");
  return this.visitedItems.indices[index];
}

inline _StatialQueryData._ResetHeap!() {
  this.heapItemsEnd = 0;
}

inline Size _StatialQueryData._HeapSize() {
  return this.heapItemsEnd;
}

inline _StatialQueryData._QueryHeapInsert!( _QueryHeapItem item) {
  Size child = this.heapItemsEnd;
  if( child == this.heapItems.size() )
    this.heapItems.push(item);
  else
    this.heapItems[child] = item;
  ++this.heapItemsEnd;

  while (child > 0) {
    Size parent = (child - 1) / 2;
    if( !this.heapItems[parent].closerThan(this.heapItems[child]) ) {
      _QueryHeapItem temp = this.heapItems[parent];
      this.heapItems[parent] = this.heapItems[child];
      this.heapItems[child] = temp;
      child = parent;
    } else
      return;
  }
}

//Sort by:
// distance
// then object < cell
// then cell depth
function Boolean _QueryHeapItem.closerThan( _QueryHeapItem other ) {
  if( this.distFactor < other.distFactor )
    return true;
  if( this.distFactor == other.distFactor ) {
    if( (this.cellIndex==0) != (other.cellIndex==0) ) {
      //Same distance, but one is an object, and the other is a cell (
      return this.cellIndex==0;
    }
    return this.cellDepth > other.cellDepth;
  }
  return false;
}

inline Boolean _StatialQueryData._QueryHeapPopMin!(io _QueryHeapItem item) {
  if( this.heapItemsEnd ) {
    item = this.heapItems[0];
    --this.heapItemsEnd;
    this.heapItems[0] = this.heapItems[this.heapItemsEnd];

    //Trickle down
    Size root = 0;
    while ( root*2+1 < this.heapItemsEnd ) {
      Size child = 2*root + 1;
      if ((child + 1 < this.heapItemsEnd) && !this.heapItems[child].closerThan( this.heapItems[child+1] ) )
        child += 1;

      if (!this.heapItems[root].closerThan( this.heapItems[child] ) ) {
        _QueryHeapItem temp = this.heapItems[root];
        this.heapItems[root] = this.heapItems[child];
        this.heapItems[child] = temp;
        root = child;
      }
      else
        break;
    }
    return true;
  } else
    return false;
}

inline Boolean _StatialQueryData._QueryHeapGetMin!(io _QueryHeapItem item) {
  if( this.heapItemsEnd ) {
    item = this.heapItems[0];
    return true;
  } else
    return false;
}

//Here, we sort of re-implement manually map-reduce, so we can share per-thread allocated data, which is not possible with map-reduce
operator _RaycastNoAcceleration<<<index>>>( Size objectCount, Size batchSize, io Scalar maxDist[8], io RaycastResult results[8] ) {
  Size start = index*batchSize;
  Size end = start + batchSize;
  if( end > objectCount )
    end = objectCount;

  for( Size i = start; i < end; ++i )
    results[index].compareAndUpdate( i, maxDist[index] );
}

inline _GetBatchCountAndSize_min1_max8( Size objectCount, io Size batchCount, io Size batchSize ) {
  batchSize = objectCount / 7;
  if( batchSize < 100 )
    batchSize = 100;
  batchCount = ( objectCount + (batchSize-1) ) / batchSize;//Batch count: from 0 to 8
  if( batchCount == 0 )
    batchCount = 1;
}

//Here, we sort of re-implement manually map-reduce, so we can share per-thread allocated data, which is not possible with map-reduce
operator _GetClosestNoAcceleration<<<index>>>( Size objectCount, Size batchSize, io Scalar maxDist[8], io ClosestResult results[8] ) {
  Size start = index*batchSize;
  Size end = start + batchSize;
  if( end > objectCount )
    end = objectCount;

  for( Size i = start; i < end; ++i )
    results[index].compareAndUpdate( i, maxDist[index] );
}


inline Boolean _insideBBox( Vec3 min, Vec3 max, Vec3 point ) {
  return( point.x >= min.x && point.x <= max.x &&
          point.y >= min.y && point.y <= max.y &&
          point.z >= min.z && point.z <= max.z);
}

struct _RayQueryData {

  //Constants
  Vec3 start;
  Vec3 unitDir;

  Scalar start3[3];//Used only for bbox tests
  Scalar unitDir3[3];//Used only for bbox tests

  Integer dirSign3[3];//Used only for bbox tests
  Scalar absInvUnitDir3[3];//Used only for bbox tests

  Boolean doubleSided;
  Scalar coneThreshold;

  //Current values
  Scalar startFactor;
  Scalar distFactor;
  Ref<RaycastResult> bestResult;
};

 function _RayQueryData(Ray ray, Boolean doubleSided, Scalar maxDistance, Ref<RaycastResult> result) {
  //Prepare direction-related constants to accelerate computations
  this.start = ray.start;
  this.unitDir = ray.direction.unit_safe();
  this.doubleSided = doubleSided;

  this.distFactor = maxDistance;
  this.bestResult = result;
  this.bestResult.reset( this.start, this.unitDir, doubleSided, 0 );

  for( UInt8 i = 0; i < 3; ++i ) {
    Scalar comp = this.unitDir.component(i);
    this.unitDir3[i] = comp;
    this.start3[i] = this.start.component(i);
    if( comp < -1.0e-6 )
      this.dirSign3[i] = -1;
    else if( comp > 1.0e-6 )
      this.dirSign3[i] = 1;
    if( this.dirSign3[i] != 0 )
      this.absInvUnitDir3[i] = 1.0/abs(comp);
  }
}

inline _intersectBBoxFromInside( Vec3 min, Vec3 max, _RayQueryData rayData, io Scalar intersectUnitDirFactor, io UInt8 side ) {
  side = 0;
  Scalar minDistFactor = 1.0e100;
  for( UInt8 i = 0; i < 3; ++i ) {
    if( rayData.dirSign3[i] != 0 ) {
      Scalar axisDist;
      if( rayData.dirSign3[i] == -1 )
        axisDist = rayData.start3[i] - min.component(i);
      else
        axisDist = max.component(i) - rayData.start3[i];
      Scalar distFactor = axisDist * rayData.absInvUnitDir3[i];
      if( distFactor < minDistFactor ) {
        side = i;
        minDistFactor = distFactor;
      }
    }
  }
  intersectUnitDirFactor = minDistFactor;
}

inline Boolean _intersectBBoxFromOutside( Vec3 min, Vec3 max, _RayQueryData rayData, io Scalar intersectUnitDirFactor ) {
  Size maxDistComp = 3;
  Scalar maxDistFactor = -1.0e-6;
  for( UInt8 i = 0; i < 3; ++i ) {
    if( rayData.dirSign3[i] != 0 ) {
      Scalar axisDist;
      if( rayData.dirSign3[i] == -1 )
        axisDist = rayData.start3[i] - max.component(i);
      else
        axisDist = min.component(i) - rayData.start3[i];
      Scalar distFactor = axisDist * rayData.absInvUnitDir3[i];
      if( distFactor > maxDistFactor ) {
        maxDistComp = i;
        maxDistFactor = distFactor;
      }
    }
  }
  if( maxDistComp == 3 )
    return false;

  Vec3 pos = maxDistFactor*rayData.unitDir + rayData.start;
  Scalar relativeEpsilon = maxDistFactor*1.0e-6;

  if( maxDistComp != 0 && (pos.x < min.x-relativeEpsilon || pos.x > max.x+relativeEpsilon) )
    return false;
  if( maxDistComp != 1 && (pos.y < min.y-relativeEpsilon || pos.y > max.y+relativeEpsilon) )
    return false;
  if( maxDistComp != 2 && (pos.z < min.z-relativeEpsilon || pos.z > max.z+relativeEpsilon) )
    return false;

  intersectUnitDirFactor = maxDistFactor;
  return true;
}

struct _ClosestQueryData {
  //Constants
  Vec3 position;
  Vec3 scaling;
  Boolean hasScaling;

  //Current values
  Scalar maxScaledSquaredDist;
  Ref<ClosestResult> bestResult;
};

inline Scalar _getScaledSquaredDistance( Vec3 pos, _ClosestQueryData closestData ) {
  Vec3 vector = closestData.position - pos;
  if( closestData.hasScaling )
    return ( vector * closestData.scaling ).lengthSquared();
  else
    return vector.lengthSquared();
}

inline Scalar _getBBoxSquaredDistance( Vec3 min, Vec3 max, _ClosestQueryData closestData ) {
  return _getScaledSquaredDistance(bBoxGetClosestPoint( min, max, closestData.position ), closestData );
}

function _Raycast( 
    Size objectCount, 
    Ray ray, 
    Boolean doubleSided, 
    Scalar coneThreshold, 
    Scalar maxDistance,
    io Ref<RaycastResult> raycastResult ) {

  Size batchCount, batchSize;
  _GetBatchCountAndSize_min1_max8( objectCount, batchCount, batchSize );

  Vec3 unitDir =   ray.direction.unit_safe();
  Scalar maxDist[8];
  RaycastResult results[8];
  for( Size i = 0; i < batchCount; ++i ) {
    maxDist[i] = maxDistance;
    if( i == 0 )
      results[i] = raycastResult;
    else
      results[i] = results[0].clone();//Don't use closestResult; it's "identity" on Ref<>
    results[i].reset( ray.start, unitDir, doubleSided, coneThreshold );
  }
  _RaycastNoAcceleration<<<batchCount>>>(objectCount, batchSize, maxDist, results);
  Scalar minDist = maxDist[0];
  for( Size i = 1; i < batchCount; ++i ) {
    if(maxDist[i] < minDist) {
      minDist = maxDist[i];
      raycastResult.copyResultFrom( results[i] );
    }
  }
}

function _GetClosest( 
  Size objectCount,
  Vec3 position, 
  Vec3 scaling, 
  Scalar maxUnscaledDistance,
  io Ref<ClosestResult> closestResult ) {

  Size batchCount, batchSize;
  _GetBatchCountAndSize_min1_max8( objectCount, batchCount, batchSize );
  Boolean hasScaling = abs(scaling.x-1.0)>1.0e-5 || abs(scaling.y-1.0)>1.0e-5 || abs(scaling.z-1.0)>1.0e-5;
  Scalar maxDist[8];
  ClosestResult results[8];
  for( Size i = 0; i < batchCount; ++i ) {
    maxDist[i] = maxUnscaledDistance*maxUnscaledDistance;
    if( i == 0 )
      results[i] = closestResult;
    else
      results[i] = results[0].clone();//Don't use closestResult; it's "identity" on Ref<>
    results[i].reset( position, scaling, hasScaling );
  }
  _GetClosestNoAcceleration<<<batchCount>>>(objectCount, batchSize, maxDist, results);
  Scalar minDist = maxDist[0];
  for( Size i = 1; i < batchCount; ++i ) {
    if(maxDist[i] < minDist) {
      minDist = maxDist[i];
      closestResult.copyResultFrom( results[i] );
    }
  }
}

