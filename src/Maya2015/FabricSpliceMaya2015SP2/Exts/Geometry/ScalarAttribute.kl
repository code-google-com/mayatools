/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object ScalarAttribute : GeometryAttribute, StatisticSourceWithAutoRegisterMember {
  UInt32 version;
  String name;
  UInt32 containerIndex;

  Scalar values[];
  StatisticsAutoRegisterMember autoStats;
};

function ScalarAttribute() {
  if(FabricStatisticsEnabled())
    this.autoStats = StatisticsAutoRegisterMember(this);
}

//Implementation of StatisticSource interface's 'getStatistics()'.
function StatisticRecord[] ScalarAttribute.getStatistics() {
  StatisticRecord stats[];
  stats.push( StatisticRecord( Statistic_Name, this.name ) );
  stats.push( StatisticRecord( Statistic_Category, "Attribute" ) );
  stats.push( StatisticRecord( Statistic_MemoryUsage, this.values.size()*4 ) );
  return stats;
}

inline String ScalarAttribute.getName() {
  return this.name;
}

inline UInt32 ScalarAttribute.getVersion() {
  return this.version;
}

inline Size ScalarAttribute.getContainerIndex() {
  return this.containerIndex;
}

inline ScalarAttribute.setContainerIndex!( Size index ) {
  this.containerIndex = index;
}

function ScalarAttribute ScalarAttribute.clone() {
  //The difference with default clone() is that new.base.autoStat will point to 'new' (from constructor)
  ScalarAttribute new = ScalarAttribute();
  new.version = this.version;
  new.name = this.name.clone();
  new.containerIndex = this.containerIndex;
  new.values = this.values.clone();
  return new;
}

function Ref<StatisticSource> ScalarAttribute.getStatisticsSource() {
  return this.autoStats;
}

inline ScalarAttribute.resize!(Size count) {
  this.values.resize(count);
  ++this.version;
}

inline Size ScalarAttribute.size() {
  return this.values.size();
}

inline Data ScalarAttribute.data() {
  Ref<ScalarAttribute> thisRef = this;
  return thisRef.values.data();
}

//Make sure to call this method after position changes are finished, so caches (such as drawing data) know that they need to be regenerated.
inline ScalarAttribute.incrementVersion!() {
  ++this.version;
}

inline ScalarAttribute.copyValue!( Size sourceIndex, Size targetIndex ) {
  this.values[targetIndex] = this.values[sourceIndex];
}

inline ScalarAttribute.copyValue!( Ref<Object> sourceAttr, Size sourceIndex, Size targetIndex ) {
  Ref<ScalarAttribute> source = sourceAttr;
  this.values[targetIndex] = source.values[sourceIndex];
}

inline Scalar ScalarAttribute.getLinearCombination( LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights ) {
  Scalar result;
  for( Size i = 0; i < sourceIndices.size(); ++i )
    result += this.values[sourceIndices.get(i)]*sourceWeights.get(i);
  return result;
}

inline ScalarAttribute.linearCombine!( Ref<Object> sourceAttr, LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights, Size targetIndex ) {
  Ref<ScalarAttribute> source = sourceAttr;
  this.values[targetIndex] = source.getLinearCombination(sourceIndices, sourceWeights);
}

inline ScalarAttribute.copyFrom!( Ref<Object> otherAttr ) {
  Ref<ScalarAttribute> other = otherAttr;
  this.incrementVersion();

  // Copy in place to avoid mallocs
  Size size = other.values.size();
  this.values.resize( size );
  for( Size i = 0; i < size; ++i )
    this.values[i] = other.values[i];
}

inline ScalarAttribute.setFromScalar!( Size index, LocalL16ScalarArray value ) {
  this.values[index] = value.get(0);
}

inline Size ScalarAttribute.getScalarValueSize() {
  return 1;
}

inline Boolean ScalarAttribute.equalValues( Size index1, Size index2 ) {
  return this.values[index1] == this.values[index2];
}

function String ScalarAttribute.valueDesc( Size index ) {
  return String(this.values[index]);
}

require Util;
function String ScalarAttribute.unitTestPrint( Size index ) {
  return unitTestPrint(this.values[index]);
}
//Returns a string description of the attribute.
function String ScalarAttribute.getDesc?( Boolean includeValues) {
  String desc;
  desc += "Attribute: " + this.getName() + " nb elements = "+ this.values.size()+'\n';
  if(includeValues){
    if(this.values.size > 0){
      desc += "  values:[ \n";
      for(Integer i=0; i<this.values.size; i++){
        desc += '    ' + unitTestPrint(this.values[i]) + " \n";
      }
      desc += "  ]\n";
    }
    else{
      desc += "  values:[]\n";
    }
  }
  return desc;
}
function String ScalarAttribute.getDesc?() {
  return this.getDesc(false);
}

function Ref<ScalarAttribute> GeometryAttributes.getOrCreateScalarAttribute!( String name ) {
  Ref<GeometryAttribute> attr = this.getAttribute( name, ScalarAttribute );
  if( attr )
    return attr;

  ScalarAttribute newAttr = ScalarAttribute();
  newAttr.resize(this.elementCount);
  newAttr.name = name;
  newAttr.version = this.keysVersion;
  this.attachNewAttribute(newAttr);
  return newAttr;
}
