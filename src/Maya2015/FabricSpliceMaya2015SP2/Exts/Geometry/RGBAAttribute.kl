/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object RGBAAttribute : GeometryAttribute, StatisticSourceWithAutoRegisterMember {
  UInt32 version;
  String name;
  UInt32 containerIndex;

  RGBA values[];
  StatisticsAutoRegisterMember autoStats;
};

function RGBAAttribute() {
  if(FabricStatisticsEnabled())
    this.autoStats = StatisticsAutoRegisterMember(this);
}

//Implementation of StatisticSource interface's 'getStatistics()'.
function StatisticRecord[] RGBAAttribute.getStatistics() {
  StatisticRecord stats[];
  stats.push( StatisticRecord( Statistic_Name, this.name ) );
  stats.push( StatisticRecord( Statistic_Category, "Attribute" ) );
  stats.push( StatisticRecord( Statistic_MemoryUsage, this.values.size()*4 ) );
  return stats;
}

inline String RGBAAttribute.getName() {
  return this.name;
}

inline UInt32 RGBAAttribute.getVersion() {
  return this.version;
}

inline Size RGBAAttribute.getContainerIndex() {
  return this.containerIndex;
}

inline RGBAAttribute.setContainerIndex!( Size index ) {
  this.containerIndex = index;
}

function RGBAAttribute RGBAAttribute.clone() {
  //The difference with default clone() is that new.base.autoStat will point to 'new' (from constructor)
  RGBAAttribute new = RGBAAttribute();
  new.version = this.version;
  new.name = this.name.clone();
  new.containerIndex = this.containerIndex;
  new.values = this.values.clone();
  return new;
}

function Ref<StatisticSource> RGBAAttribute.getStatisticsSource() {
  return this.autoStats;
}

inline RGBAAttribute.resize!(Size count) {
  this.values.resize(count);
  ++this.version;
}

inline Size RGBAAttribute.size() {
  return this.values.size();
}

inline Data RGBAAttribute.data() {
  Ref<RGBAAttribute> thisRef = this;
  return thisRef.values.data();
}

//Make sure to call this method after position changes are finished, so caches (such as drawing data) know that they need to be regenerated.
inline RGBAAttribute.incrementVersion!() {
  ++this.version;
}

inline RGBAAttribute.copyValue!( Size sourceIndex, Size targetIndex ) {
  this.values[targetIndex] = this.values[sourceIndex];
}

inline RGBAAttribute.copyValue!( Ref<Object> sourceAttr, Size sourceIndex, Size targetIndex ) {
  Ref<RGBAAttribute> source = sourceAttr;
  this.values[targetIndex] = source.values[sourceIndex];
}

inline RGBA RGBAAttribute.getLinearCombination( LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights ) {
  Vec4 result;//Use Vec3: avoid precision problems & leverage SIMD
  for( Size i = 0; i < sourceIndices.size(); ++i ) {
    RGBA sourceData = this.values[sourceIndices.get(i)];
    Vec4 source = Vec4(sourceData.r, sourceData.g, sourceData.b, sourceData.a);
    result += source*sourceWeights.get(i);
  }
  result = result*255.0 + Vec4(0.5,0.5,0.5,0.5);//rounding
  return RGBA(Byte(result.x), Byte(result.y), Byte(result.z), Byte(result.t));
}

inline RGBAAttribute.linearCombine!( Ref<Object> sourceAttr, LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights, Size targetIndex ) {
  Ref<RGBAAttribute> source = sourceAttr;
  this.values[targetIndex] = source.getLinearCombination( sourceIndices, sourceWeights );
}

inline RGBAAttribute.copyFrom!( Ref<Object> otherAttr ) {
  Ref<RGBAAttribute> other = otherAttr;
  this.incrementVersion();

  // Copy in place to avoid mallocs
  Size size = other.values.size();
  this.values.resize( size );
  for( Size i = 0; i < size; ++i )
    this.values[i] = other.values[i];
}

inline RGBAAttribute.setFromScalar!( Size index, LocalL16ScalarArray value ) {
  this.values[index].r = value.get(0)*255;
  this.values[index].g = value.get(1)*255;
  this.values[index].b = value.get(2)*255;
  this.values[index].a = value.get(3)*255;
}

inline Size RGBAAttribute.getScalarValueSize() {
  return 4;
}

inline Boolean RGBAAttribute.equalValues( Size index1, Size index2 ) {
  return this.values[index1].equal( this.values[index2] );
}

function String RGBAAttribute.valueDesc( Size index ) {
  return String(this.values[index]);
}

require Util;
function String RGBAAttribute.unitTestPrint( Size index ) {
  return this.valueDesc(index);
}
//Returns a string description of the attribute.
function String RGBAAttribute.getDesc?( Boolean includeValues) {
  String desc;
  desc += "Attribute: " + this.getName() + " nb elements = "+ this.values.size()+'\n';
  if(includeValues){
    if(this.values.size > 0){
      desc += "  values:[ \n";
      for(Integer i=0; i<this.values.size; i++){
        desc += '    ' + unitTestPrint(this.values[i]) + " \n";
      }
      desc += "  ]\n";
    }
    else{
      desc += "  values:[]\n";
    }
  }
  return desc;
}
function String RGBAAttribute.getDesc?() {
  return this.getDesc(false);
}

function Ref<RGBAAttribute> GeometryAttributes.getOrCreateRGBAAttribute!( String name ) {
  Ref<GeometryAttribute> attr = this.getAttribute( name, RGBAAttribute );
  if( attr )
    return attr;

  RGBAAttribute newAttr = RGBAAttribute();
  newAttr.resize(this.elementCount);
  newAttr.name = name;
  newAttr.version = this.keysVersion;
  this.attachNewAttribute(newAttr);
  return newAttr;
}
