/*
 *  Copyright 2010-2013 Fabric Engine Inc. All rights reserved.
 */

/*SPHINX-description
.. versionadded:: 1.12.0

The :ref:`oglsurfacenormalmapshader` implements the :ref:`inlineshader` interface for OpenGL direct rendering. It encapsulates the :ref:`oglinlineshader` for shading with a simple phong model using a texture for the diffuse and performing normal mapping.

Uniforms
----------
==================== ============ ===================================== ==================================
Name                 Type         Description                           Default
==================== ============ ===================================== ==================================
u_light0Position     Vec3         Position of the first light           Position of the camera
u_light0Color        Color        Color of the first light              Color(1.0, 1.0, 1.0)
u_ambientColor       Color        Ambient color component               Color(0.05, 0.05, 0.05)
u_diffuseColor       Color        Diffuse color component               Color(1.0, 1.0, 1.0)
u_specularColor      Color        Specular color component              Color(0.2, 0.2, 0.2)
u_specularFactor     Color        Specular distribution factor          16.0
u_diffuseTexture     Texture      Texture used for the diffuse          null
u_normalsTexture     Texture      Texture used for the normals          null
u_mirrorU            Integer      Flag toggle a flip of the U component 0
u_mirrorV            Integer      Flag toggle a flip of the V component 1
u_bumpStrength       Scalar       Determines the strength of the bump   1.0
==================== ============ ===================================== ==================================

Attributes
----------
=============== ============ =====================================
Name            Type         Description
=============== ============ =====================================
positions       Vec3         Geometry positions
normals         Vec3         Geometry normals
tangents        Vec3         Geometry tangents
uvs0            Vec2         UV set
=============== ============ =====================================

Example
---------

.. code-block:: kl

    InlineShader shader = draw.registerShader(OGLSurfaceNormalMapShader());
    InlineMaterial mat = shader.getOrCreateMaterial('normalMap');
    InlineTexture texture = draw.registerTexture(InlineFileBasedTexture('diffuse.png'));
    InlineTexture texture = draw.registerTexture(InlineFileBasedTexture('normal.png'));
    mat.setUniform('u_diffuseTexture', texture);
    mat.setUniform('u_normalsTexture', texture);
*/

require Math;
require FabricOGL;

object OGLSurfaceNormalMapShader: InlineShader {
  OGLInlineShader _shader;
};

// default constructor without a name
function OGLSurfaceNormalMapShader() {
  this = OGLSurfaceNormalMapShader(this.type());
}

// default constructor taking a name
function OGLSurfaceNormalMapShader(String name) {
  this._shader = OGLInlineShader(
    name,
    "
      #version 150 //required for OSX support
      
      uniform mat4 u_viewMatrix;
      uniform mat4 u_projection;
      uniform mat4 u_modelMatrix;
      uniform mat3 u_normalMatrix;

      uniform vec3 u_light0Position;
      uniform vec4 u_light0Color;

      in vec4 positions;
      in vec3 normals;
      in vec3 tangents;
      in vec2 uvs0;

      out vec3 v_normal;
      out vec3 v_tangent;
      out vec3 v_binormal;
      out vec4 v_position;
      out vec2 v_uv0;
      out vec3 v_lightDir;
      out vec4 v_lightColor;
      out vec3 v_eyeVec;

      void main(){
        v_normal = u_normalMatrix * normals;
        v_tangent = u_normalMatrix * tangents;
        v_binormal = cross(v_normal, v_tangent);
        v_position = u_modelMatrix * positions;
        vec4 v_positionInv = (u_viewMatrix * vec4(v_position.xyz, 1.0));
        gl_Position = u_projection * v_positionInv;
  
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        v_eyeVec = -v_positionInv.xyz;
        v_uv0 = uvs0;
      }
    ", "
      #version 150 //required for OSX support
      
      uniform vec4 u_ambientColor;
      uniform vec4 u_diffuseColor;
      uniform vec4 u_specularColor;
      uniform float u_specularFactor;

      uniform sampler2D u_diffuseTexture;
      uniform sampler2D u_normalsTexture;
      uniform int u_mirrorU;
      uniform int u_mirrorV;
      uniform float u_bumpStrength;

      in vec3 v_normal;
      in vec3 v_tangent;
      in vec3 v_binormal;
      in vec4 v_position;
      in vec2 v_uv0;
      in vec3 v_lightDir;
      in vec4 v_lightColor;
      in vec3 v_eyeVec;

      out vec4 out_fragColor;

      void main() {
        vec2 uv = v_uv0;
        if(u_mirrorU != 0) uv.x = 1.0 - uv.x;
        if(u_mirrorV != 0) uv.y = 1.0 - uv.y;

        vec4 texture_color = u_diffuseColor * texture( u_diffuseTexture, uv );
        vec4 final_color = u_ambientColor * texture_color;

        vec3 texture_normal = u_bumpStrength * normalize(texture2D( u_normalsTexture, uv ).rgb * 2.0 - 1.0 );
        if(u_mirrorU != 0) texture_normal.x = 1.0 - texture_normal.x;
        if(u_mirrorV != 0) texture_normal.y = 1.0 - texture_normal.y;

        vec3 NX = normalize(v_tangent);
        vec3 NY = normalize(v_normal);
        vec3 NZ = normalize(v_binormal);
        vec3 N = normalize(NY + texture_normal.x * NX + texture_normal.y * NZ);
        vec3 L = normalize(v_lightDir);

        float lambertTerm = dot(N,L);
        if(lambertTerm > 0.0)
        {
          final_color += v_lightColor * texture_color * lambertTerm; 
          vec3 E = normalize(v_eyeVec);
          vec3 R = reflect(-L, N);
          float specular = pow( max(dot(R, E), 0.0), u_specularFactor );
          final_color += u_specularColor * specular;  
        }

        out_fragColor = final_color;
      }
    ");  
  this._shader.defineUniform(InlineUniform("u_viewMatrix", Mat44()));
  this._shader.defineUniform(InlineUniform("u_projection", Mat44()));
  this._shader.defineUniform(InlineUniform("u_modelMatrix", Mat44()));
  this._shader.defineUniform(InlineUniform("u_normalMatrix", Mat33()));

  this._shader.defineUniform(InlineUniform("u_light0Position", Vec3(100, 100, 100)));
  this._shader.defineUniform(InlineUniform("u_light0Color", Color(1.0, 1.0, 1.0)));

  this._shader.defineUniform(InlineUniform("u_ambientColor", Color(0.05, 0.05, 0.05)));
  this._shader.defineUniform(InlineUniform("u_diffuseColor", Color(1.0, 1.0, 1.0)));
  this._shader.defineUniform(InlineUniform("u_specularColor", Color(0.2, 0.2, 0.2)));
  this._shader.defineUniform(InlineUniform("u_specularFactor", 16.0));

  this._shader.defineUniform(InlineUniform('u_diffuseTexture', InlineFileBasedTexture()));
  this._shader.defineUniform(InlineUniform('u_normalsTexture', InlineFileBasedTexture()));
  this._shader.defineUniform(InlineUniform('u_mirrorU', 0));
  this._shader.defineUniform(InlineUniform('u_mirrorV', 1));
  this._shader.defineUniform(InlineUniform("u_bumpStrength", 1.0));

  this._shader.defineAttribute('positions', "Vec3");
  this._shader.defineAttribute('normals', "Vec3");
  this._shader.defineAttribute('tangents', "Vec2");
  this._shader.defineAttribute('uvs0', "Vec2");
}

// empties all materials of this shader
function OGLSurfaceNormalMapShader.reset!() {
  this._shader.reset();
}

// returns the name of this shader
function String OGLSurfaceNormalMapShader.getName() {
  return this._shader.getName();
}

// called by the InlineDrawing, should not be called manually
function Boolean OGLSurfaceNormalMapShader._draw!(io DrawContext context) {

  if(context.lightPositions.size() > 0)
    this.setUniform(InlineUniform('u_light0Position', context.lightPositions[0]));
  else
    this.setUniform(InlineUniform('u_light0Position', context.viewport.getCamera().getMat44().translation()));

  if(context.lightColors.size() > 0)
    this.setUniform(InlineUniform('u_light0Color', context.lightColors[0]));

  return this._shader._draw(context);
}

// returns true if this shader has a material with a given name
function Boolean OGLSurfaceNormalMapShader.hasMaterial(String name) {
  return this._shader.hasMaterial(name);
}

// returns (and eventually creates) a new matching material with a given name
function InlineMaterial OGLSurfaceNormalMapShader.getOrCreateMaterial!(String name) {
  return this._shader.getOrCreateMaterial(name);
}

// returns the number of materials in this shader
function Size OGLSurfaceNormalMapShader.getMaterialCount() {
  return this._shader.getMaterialCount();
}

// returns an existing material by index
function InlineMaterial OGLSurfaceNormalMapShader.getMaterial(Index index) {
  return this._shader.getMaterial(index);
}

// define a new uniform on the shader.
function OGLSurfaceNormalMapShader.defineUniform!(InlineUniform uniform) {
  return;
}

// returns true if this shader has a uniform with a given name
function Boolean OGLSurfaceNormalMapShader.hasUniform(String name) {
  return this._shader.hasUniform(name);
}

// sets the global value of a uniform
// this can be changed per material, per instance or even per transform
function OGLSurfaceNormalMapShader.setUniform!(InlineUniform uniform) {
  this._shader.setUniform(uniform);
}

// draws a uniform for the shader, applies the value essentially. 
// this should be used from within the InlineMaterial's _draw or 
// the InlineInstance's _draw.
function Boolean OGLSurfaceNormalMapShader._drawUniform!(io DrawContext context, InlineUniform uniform) {
  return this._shader._drawUniform(context, uniform);
}

// define a surface attribute with a given name and type
function OGLSurfaceNormalMapShader.defineAttribute!(String name, String attributeType) {
  return;
}

// returns the number of attributes
function Size OGLSurfaceNormalMapShader.getAttributeCount() {
  return this._shader.getAttributeCount();
}

// returns the name of an attribute
function String OGLSurfaceNormalMapShader.getAttributeName(Index index) {
  return this._shader.getAttributeName(index);
}

// returns true if this shader has an attribute with a given name
function Integer OGLSurfaceNormalMapShader.getAttributeID(String name) {
  return this._shader.getAttributeID(name);
}

// returns the ID / location of a given attribute inside the shader.
function Boolean OGLSurfaceNormalMapShader.hasAttribute(String name) {
  return this._shader.hasAttribute(name);
}
