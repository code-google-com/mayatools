/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

require Alembic;
require Geometry;

object AlembicSubDReader : AlembicObjectReader{
  AlembicISubD _subd;
  AlembicISubDSchema _schema;
  AlembicTimeSampling _timeSampling;
  AlembicSampleInfo _info;
  UInt32 _numSamples;
  AlembicISubDSample _sampleA;
  AlembicISubDSample _sampleB;
  AlembicGeometryAttributesReader _attributesReader;
};

function AlembicSubDReader(AlembicIObject subd) {
  this._subd = AlembicISubD(subd);
  this._schema = this._subd.getSchema();
  this._sampleA = AlembicISubDSample();
  this._sampleB = AlembicISubDSample();
  this._timeSampling = this._schema.getTimeSampling();
  this._numSamples = this._schema.getNumSamples();
  this._attributesReader = AlembicGeometryAttributesReader(this._schema.getArbGeomParams());
}

function String AlembicSubDReader.getPath() {
  return this._subd.asIObject().getFullName();
}

function Boolean AlembicSubDReader.valid() {
  return this._subd.valid();
}

function AlembicSubDReader.reset!() {
  this._subd.reset();
  this._schema.reset();
  this._sampleA = null;
  this._sampleB = null;
}

function AlembicIObject AlembicSubDReader.getIObject() {
  return this._subd.asIObject();
}

function SInt32 AlembicSubDReader.getNumSamples() {
  return this._numSamples;
}

function AlembicSubDReader.readSample!(Float64 time, io PolygonMesh mesh) {
  if(this._info.time == time)
    return;

  AlembicSampleInfo info(time, this._timeSampling, this._numSamples);
  if(info == this._info)
    return;
  this._info = info;

  this._schema.get(this._sampleA, AlembicISampleSelector(this._info.indexA));
  if(this._info.requiresInterpolation())
    this._schema.get(this._sampleB, AlembicISampleSelector(this._info.indexB));

  Vec3 positionsValuesA<> = this._sampleA.getPositions();
  Vec3 positionsValuesB<>;
  if(this._info.requiresInterpolation())
    positionsValuesB = this._sampleB.getPositions();

  // topology
  if(mesh.pointCount() == 0 || this._schema.getTopologyVariance() == Alembic_kHeterogenousTopology) {
    mesh.clear();
    mesh.createPoints(positionsValuesA.size());
    mesh.beginStructureChanges();

    SInt32 faceCounts<> = this._sampleA.getFaceCounts();
    SInt32 faceIndices<> = this._sampleA.getFaceIndices();

    LocalIndexArray indexArray;
    UInt32 ptIndexIter = 0;

    for( Size i = 0; i < faceCounts.size(); ++i ) {
      UInt32 polSize = faceCounts[i];
      indexArray.resize(0);
      for( Size j = 0; j < polSize; ++j )
        indexArray.push( faceIndices[ptIndexIter++] );
      mesh.addPolygon( indexArray );
    }

    mesh.endStructureChanges();
  }

  Size nbPoints = mesh.pointCount();

  // perform positions
  Vec3Attribute positionsAttr = mesh.getOrCreateVec3Attribute('positions');
  if(this._info.requiresInterpolation()) {
    for(Size i=0;i<nbPoints;i++)
      mesh.setPointPosition(i, positionsValuesA[i].linearInterpolate(positionsValuesB[i], Float32(this._info.fraction)));
  } else {
    for(Size i=0;i<nbPoints;i++)
      mesh.setPointPosition(i, positionsValuesA[i]);
  }
  positionsAttr.incrementVersion();
  mesh.recomputePointNormals();

  // perform velocities
  Vec3 velocitiesValuesA<> = this._sampleA.getVelocities();
  if(velocitiesValuesA.size() > 0) {
    Vec3Attribute velocitiesAttr = mesh.getOrCreateVec3Attribute('velocities');
    if(this._info.requiresInterpolation()) {
      Vec3 velocitiesValuesB<> = this._sampleB.getVelocities();
      for(Size i=0;i<nbPoints;i++)
        velocitiesAttr.values[i] = velocitiesValuesA[i].linearInterpolate(velocitiesValuesB[i], Float32(this._info.fraction));
    } else {
      for(Size i=0;i<nbPoints;i++)
        velocitiesAttr.values[i] = velocitiesValuesA[i];
    }
    velocitiesAttr.incrementVersion();
  }  

  // uvs
  AlembicIVec2VfGeomParam uvsParam = this._schema.getUVsParam();
  if(uvsParam.valid()) {
    if(!mesh.has('uvs0')) { // || uvsParam.getNumSamples() > 1) {
      if(uvsParam.isIndexed()) {
        info = AlembicSampleInfo(time, this._timeSampling, uvsParam.getNumSamples());
        AlembicIVec2VfGeomParamSample sampleA = uvsParam.getIndexed(AlembicISampleSelector(info.indexA));
        Vec2 uvsValuesA<> = sampleA.getVals();
        UInt32 indicesA<> = sampleA.getIndices();
        if(uvsValuesA.size() > 0) {
          Ref<Vec2Attribute> attr = mesh.getOrCreateVec2Attribute('uvs0');
          if(sampleA.getScope() == Alembic_kVertexScope || indicesA.size() == mesh.pointCount()) {
            if(info.requiresInterpolation()) {
              AlembicIVec2VfGeomParamSample sampleB = uvsParam.getIndexed(AlembicISampleSelector(info.indexB));
              Vec2 uvsValuesB<> = sampleB.getVals();
              UInt32 indicesB<> = sampleB.getIndices();
              for(UInt32 i=0;i<mesh.pointCount();i++) {
                Vec2 value = uvsValuesA[indicesA[i]].linearInterpolate(uvsValuesB[indicesB[i]], Float32(info.fraction));
                mesh.setPointAttribute( i, attr, value );
              }
            } else {
              for(UInt32 i=0;i<mesh.pointCount();i++) {
                Vec2 value = uvsValuesA[indicesA[i]];
                mesh.setPointAttribute( i, attr, value );
              }
            }
          } else {
            if(info.requiresInterpolation()) {
              AlembicIVec2VfGeomParamSample sampleB = uvsParam.getIndexed(AlembicISampleSelector(info.indexB));
              Vec2 uvsValuesB<> = sampleB.getVals();
              UInt32 indicesB<> = sampleB.getIndices();
              Size offset = 0;
              for(Size i=0;i<mesh.polygonCount();i++) {
                Size count = mesh.getPolygonSize(i);
                for(UInt32 j=0;j<count;j++) {
                  Vec2 value = uvsValuesA[indicesA[offset]].linearInterpolate(uvsValuesB[indicesB[offset]], Float32(info.fraction));
                  mesh.setPolygonAttribute( i, count - 1 - j, attr, value );
                  offset++;
                }
              }
            } else {
              Size offset = 0;
              for(Size i=0;i<mesh.polygonCount();i++) {
                Size count = mesh.getPolygonSize(i);
                for(UInt32 j=0;j<count;j++) {
                  Vec2 value = uvsValuesA[indicesA[offset]];
                  mesh.setPolygonAttribute( i, count - 1 - j, attr, value );
                  offset++;
                }
              }
            }
          }     
          attr.incrementVersion();
        }
      } else {
        info = AlembicSampleInfo(time, this._timeSampling, uvsParam.getNumSamples());
        AlembicIVec2VfGeomParamSample sampleA = uvsParam.getExpanded(AlembicISampleSelector(info.indexA));
        Vec2 uvsValuesA<> = sampleA.getVals();
        if(uvsValuesA.size() > 0) {
          Ref<Vec2Attribute> attr = mesh.getOrCreateVec2Attribute('uvs0');
          if(sampleA.getScope() == Alembic_kVertexScope || uvsValuesA.size() == mesh.pointCount()) {
            if(info.requiresInterpolation()) {
              AlembicIVec2VfGeomParamSample sampleB = uvsParam.getExpanded(AlembicISampleSelector(info.indexB));
              Vec2 uvsValuesB<> = sampleB.getVals();
              for(UInt32 i=0;i<mesh.pointCount();i++) {
                Vec2 value = uvsValuesA[i].linearInterpolate(uvsValuesB[i], Float32(info.fraction));
                mesh.setPointAttribute( i, attr, value );
              }
            } else {
              for(UInt32 i=0;i<mesh.pointCount();i++) {
                Vec2 value = uvsValuesA[i];
                mesh.setPointAttribute( i, attr, value );
              }
            }
          } else {
            if(info.requiresInterpolation()) {
              AlembicIVec2VfGeomParamSample sampleB = uvsParam.getExpanded(AlembicISampleSelector(info.indexB));
              Vec2 uvsValuesB<> = sampleB.getVals();
              Size offset = 0;
              for(Size i=0;i<mesh.polygonCount();i++) {
                Size count = mesh.getPolygonSize(i);
                for(UInt32 j=0;j<count;j++) {
                  Vec2 value = uvsValuesA[offset].linearInterpolate(uvsValuesB[offset], Float32(info.fraction));
                  mesh.setPolygonAttribute( i, count - 1 - j, attr, value );
                  offset++;
                }
              }
            } else {
              Size offset = 0;
              for(Size i=0;i<mesh.polygonCount();i++) {
                Size count = mesh.getPolygonSize(i);
                for(UInt32 j=0;j<count;j++) {
                  Vec2 value = uvsValuesA[offset];
                  mesh.setPolygonAttribute( i, count - 1 - j, attr, value );
                  offset++;
                }
              }
            }
          }     
          attr.incrementVersion();
        }
      }
    }
  }

  this._attributesReader.readSample(time, mesh);
}
