
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */


alias UInt32 SolverTypes;
const SolverTypes BulletSoftBodySolver_DEFAULT_SOLVER = 0;
const SolverTypes BulletSoftBodySolver_CPU_SOLVER = 1;
const SolverTypes BulletSoftBodySolver_CL_SOLVER = 2;
const SolverTypes BulletSoftBodySolver_CL_SIMD_SOLVER = 3;
const SolverTypes BulletSoftBodySolver_DX_SOLVER = 4;
const SolverTypes BulletSoftBodySolver_DX_SIMD_SOLVER = 5;


interface BulletSoftBodySolver
{
	Data getPointer();
	

	// btSoftBodySolver() :
	// 	m_numberOfPositionIterations( 10 ),
	// 	m_timeScale( 1 )
	// {
	// 	m_numberOfVelocityIterations = 0;
	// 	m_numberOfPositionIterations = 5;
	// }

	// virtual ~btSoftBodySolver()
	// {
	// }
	
	/**
	 * Return the type of the solver.
	 */
	// virtual SolverTypes getSolverType() = 0;


	// /** Ensure that this solver is initialized. */
	// virtual Boolean checkInitialized() = 0;

	// /** Optimize soft bodies in this solver. */
	// virtual void optimize( btAlignedObjectArray< btSoftBody * > &softBodies , Boolean forceUpdate=false) = 0;

	// /** Copy necessary data back to the original soft body source objects. */
	// virtual void copyBackToSoftBodies() = 0;

	// /** Predict motion of soft bodies into next timestep */
	// virtual void predictMotion( float solverdt ) = 0;

	// /** Solve constraints for a set of soft bodies */
	// virtual void solveConstraints( float solverdt ) = 0;

	// /** Perform necessary per-step updates of soft bodies such as recomputing normals and bounding boxes */
	// virtual void updateSoftBodies() = 0;

	// /** Process a collision between one of the world's soft bodies and another collision object */
	// virtual void processCollision( btSoftBody *, btCollisionObject* ) = 0;

	// * Process a collision between two soft bodies 
	// virtual void processCollision( btSoftBody*, btSoftBody* ) = 0;

	// * Set the number of velocity constraint solver iterations this solver uses. 
	// virtual void setNumberOfPositionIterations( Integer iterations )
	// {
	// 	m_numberOfPositionIterations = iterations;
	// }

	// /** Get the number of velocity constraint solver iterations this solver uses. */
	// virtual Integer getNumberOfPositionIterations()
	// {
	// 	return m_numberOfPositionIterations;
	// }

	// /** Set the number of velocity constraint solver iterations this solver uses. */
	// virtual void setNumberOfVelocityIterations( Integer iterations )
	// {
	// 	m_numberOfVelocityIterations = iterations;
	// }

	// /** Get the number of velocity constraint solver iterations this solver uses. */
	// virtual Integer getNumberOfVelocityIterations()
	// {
	// 	return m_numberOfVelocityIterations;
	// }

	// /** Return the timescale that the simulation is using */
	// float getTimeScale()
	// {
	// 	return m_timeScale;
	// }

// #if 0
// 	/**
// 	 * Add a collision object to be used by the indicated softbody.
// 	 */
// 	// virtual void addCollisionObjectForSoftBody( Integer clothIdentifier, btCollisionObject *collisionObject ) = 0;
// #endif
};

// /** 
//  * Class to manage movement of data from a solver to a given target.
//  * This version is abstract. Subclasses will have custom pairings for different combinations.
//  */
// class btSoftBodySolverOutput
// {
// protected:

// public:
// 	btSoftBodySolverOutput()
// 	{
// 	}

// 	virtual ~btSoftBodySolverOutput()
// 	{
// 	}


// 	/** Output current computed vertex data to the vertex buffers for all cloths in the solver. */
// 	virtual void copySoftBodyToVertexBuffer( const btSoftBody * const softBody, btVertexBufferDescriptor *vertexBuffer ) = 0;
// };

