
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */


/*

//
static void				drawVertex(	btIDebugDraw* idraw,
								   in Vec3 x,Scalar s,in Vec3 c)
{
	idraw->drawLine(x-Vec3(s,0,0),x+Vec3(s,0,0),c);
	idraw->drawLine(x-Vec3(0,s,0),x+Vec3(0,s,0),c);
	idraw->drawLine(x-Vec3(0,0,s),x+Vec3(0,0,s),c);
}

//
static void				drawBox(	btIDebugDraw* idraw,
								in Vec3 mins,
								in Vec3 maxs,
								in Vec3 color)
{
	const Vec3	c[]={	Vec3(mins.x(),mins.y(),mins.z()),
		Vec3(maxs.x(),mins.y(),mins.z()),
		Vec3(maxs.x(),maxs.y(),mins.z()),
		Vec3(mins.x(),maxs.y(),mins.z()),
		Vec3(mins.x(),mins.y(),maxs.z()),
		Vec3(maxs.x(),mins.y(),maxs.z()),
		Vec3(maxs.x(),maxs.y(),maxs.z()),
		Vec3(mins.x(),maxs.y(),maxs.z())};
	idraw->drawLine(c[0],c[1],color);idraw->drawLine(c[1],c[2],color);
	idraw->drawLine(c[2],c[3],color);idraw->drawLine(c[3],c[0],color);
	idraw->drawLine(c[4],c[5],color);idraw->drawLine(c[5],c[6],color);
	idraw->drawLine(c[6],c[7],color);idraw->drawLine(c[7],c[4],color);
	idraw->drawLine(c[0],c[4],color);idraw->drawLine(c[1],c[5],color);
	idraw->drawLine(c[2],c[6],color);idraw->drawLine(c[3],c[7],color);
}

//
static void				drawTree(	btIDebugDraw* idraw,
								 const btDbvtNode* node,
								 Integer depth,
								 in Vec3 ncolor,
								 in Vec3 lcolor,
								 Integer mindepth,
								 Integer maxdepth)
{
	if(node)
	{
		if(node->isinternal()&&((depth<maxdepth)||(maxdepth<0)))
		{
			drawTree(idraw,node->childs[0],depth+1,ncolor,lcolor,mindepth,maxdepth);
			drawTree(idraw,node->childs[1],depth+1,ncolor,lcolor,mindepth,maxdepth);
		}
		if(depth>=mindepth)
		{
			const Scalar	scl=(Scalar)(node->isinternal()?1:1);
			const Vec3	mi=node->volume.Center()-node->volume.Extents()*scl;
			const Vec3	mx=node->volume.Center()+node->volume.Extents()*scl;
			drawBox(idraw,mi,mx,node->isleaf()?lcolor:ncolor);
		}
	}
}

//
template <typename T>
static inline T				sum(const btAlignedObjectArray<T>& items)
{
	T	v;
	if(items.size())
	{
		v=items[0];
		for(Integer i=1,ni=items.size();i<ni;++i)
		{
			v+=items[i];
		}
	}
	return(v);
}

//
template <typename T,typename Q>
static inline void			add(btAlignedObjectArray<T>& items,const Q& value)
{
	for(Integer i=0,ni=items.size();i<ni;++i)
	{
		items[i]+=value;
	}
}

//
template <typename T,typename Q>
static inline void			mul(btAlignedObjectArray<T>& items,const Q& value)
{
	for(Integer i=0,ni=items.size();i<ni;++i)
	{
		items[i]*=value;
	}
}

//
template <typename T>
static inline T				average(const btAlignedObjectArray<T>& items)
{
	const Scalar	n=(Scalar)(items.size()>0?items.size():1);
	return(sum(items)/n);
}

//
static inline Scalar		tetravolume(in Vec3 x0,
										in Vec3 x1,
										in Vec3 x2,
										in Vec3 x3)
{
	const Vec3	a=x1-x0;
	const Vec3	b=x2-x0;
	const Vec3	c=x3-x0;
	return(btDot(a,btCross(b,c)));
}

//
#if 0
static Vec3		stresscolor(Scalar stress)
{
	static const Vec3	spectrum[]=	{	Vec3(1,0,1),
		Vec3(0,0,1),
		Vec3(0,1,1),
		Vec3(0,1,0),
		Vec3(1,1,0),
		Vec3(1,0,0),
		Vec3(1,0,0)};
	static const Integer		ncolors=sizeof(spectrum)/sizeof(spectrum[0])-1;
	static const Scalar	one=1;
	stress=btMax<Scalar>(0,btMin<Scalar>(1,stress))*ncolors;
	const Integer				sel=(Integer)stress;
	const Scalar			frc=stress-sel;
	return(spectrum[sel]+(spectrum[sel+1]-spectrum[sel])*frc);
}
#endif

//
void			BulletSoftBodyHelpers_Draw(	BulletSoftBody psb,
										btIDebugDraw* idraw,
										Integer drawflags)
{
	const Scalar		scl=(Scalar)0.1;
	const Scalar		nscl=scl*5;
	const Vec3		lcolor=Vec3(0,0,0);
	const Vec3		ncolor=Vec3(1,1,1);
	const Vec3		ccolor=Vec3(1,0,0);
	Integer i,j,nj;

		/* Clusters	* / 
	if(0!=(drawflags&fDrawFlags::Clusters))
	{
		srand(1806);
		for(i=0;i<psb.m_clusters.size();++i)
		{
			if(psb.m_clusters[i]->m_collide)
			{
				Vec3						color(	rand()/(Scalar)RAND_MAX,
					rand()/(Scalar)RAND_MAX,
					rand()/(Scalar)RAND_MAX);
				color=color.normalized()*0.75;
				btAlignedObjectArray<Vec3>	vertices;
				vertices.resize(psb.m_clusters[i]->m_nodes.size());
				for(j=0,nj=vertices.size();j<nj;++j)
				{				
					vertices[j]=psb.m_clusters[i]->m_nodes[j]->m_x;
				}
#define USE_NEW_CONVEX_HULL_COMPUTER
#ifdef USE_NEW_CONVEX_HULL_COMPUTER
				btConvexHullComputer	computer;
				Integer stride = sizeof(Vec3);
				Integer count = vertices.size();
				Scalar shrink=0.f;
				Scalar shrinkClamp=0.f;
				computer.compute(&vertices[0].getX(),stride,count,shrink,shrinkClamp);
				for (Integer i=0;i<computer.faces.size();i++)
				{

					Integer face = computer.faces[i];
					//printf("face=%d\n",face);
					const btConvexHullComputer::Edge*  firstEdge = &computer.edges[face];
					const btConvexHullComputer::Edge*  edge = firstEdge->getNextEdgeOfFace();

					Integer v0 = firstEdge->getSourceVertex();
					Integer v1 = firstEdge->getTargetVertex();
					while (edge!=firstEdge)
					{
						Integer v2 = edge->getTargetVertex();
						idraw->drawTriangle(computer.vertices[v0],computer.vertices[v1],computer.vertices[v2],color,1);
						edge = edge->getNextEdgeOfFace();
						v0=v1;
						v1=v2;
					};
				}
#else

				HullDesc		hdsc(QF_TRIANGLES,vertices.size(),&vertices[0]);
				HullResult		hres;
				HullLibrary		hlib;
				hdsc.mMaxVertices=vertices.size();
				hlib.CreateConvexHull(hdsc,hres);
				const Vec3	center=average(hres.m_OutputVertices);
				add(hres.m_OutputVertices,-center);
				mul(hres.m_OutputVertices,(Scalar)1);
				add(hres.m_OutputVertices,center);
				for(j=0;j<(Integer)hres.mNumFaces;++j)
				{
					const Integer idx[]={hres.m_Indices[j*3+0],hres.m_Indices[j*3+1],hres.m_Indices[j*3+2]};
					idraw->drawTriangle(hres.m_OutputVertices[idx[0]],
						hres.m_OutputVertices[idx[1]],
						hres.m_OutputVertices[idx[2]],
						color,1);
				}
				hlib.ReleaseResult(hres);
#endif

			}
			/* Velocities	* / 
#if 0
			for(Integer j=0;j<psb.m_clusters[i].m_nodes.size();++j)
			{
				const BulletSoftBody::Cluster&	c=psb.m_clusters[i];
				const Vec3				r=c.m_nodes[j]->m_x-c.m_com;
				const Vec3				v=c.m_lv+btCross(c.m_av,r);
				idraw->drawLine(c.m_nodes[j]->m_x,c.m_nodes[j]->m_x+v,Vec3(1,0,0));
			}
#endif
			/* Frame		* / 
	//		BulletSoftBody::Cluster& c=*psb.m_clusters[i];
	//		idraw->drawLine(c.m_com,c.m_framexform*Vec3(10,0,0),Vec3(1,0,0));
	//		idraw->drawLine(c.m_com,c.m_framexform*Vec3(0,10,0),Vec3(0,1,0));
	//		idraw->drawLine(c.m_com,c.m_framexform*Vec3(0,0,10),Vec3(0,0,1));
		}
	}
	else
	{
		/* Nodes	* / 
		if(0!=(drawflags&fDrawFlags::Nodes))
		{
			for(i=0;i<psb.m_nodes.size();++i)
			{
				const BulletSoftBody::Node&	n=psb.m_nodes[i];
				if(0==(n.m_material->m_flags&BulletSoftBody::fMaterial::DebugDraw)) continue;
				idraw->drawLine(n.m_x-Vec3(scl,0,0),n.m_x+Vec3(scl,0,0),Vec3(1,0,0));
				idraw->drawLine(n.m_x-Vec3(0,scl,0),n.m_x+Vec3(0,scl,0),Vec3(0,1,0));
				idraw->drawLine(n.m_x-Vec3(0,0,scl),n.m_x+Vec3(0,0,scl),Vec3(0,0,1));
			}
		}
		/* Links	* / 
		if(0!=(drawflags&fDrawFlags::Links))
		{
			for(i=0;i<psb.m_links.size();++i)
			{
				const BulletSoftBody::Link&	l=psb.m_links[i];
				if(0==(l.m_material->m_flags&BulletSoftBody::fMaterial::DebugDraw)) continue;
				idraw->drawLine(l.m_n[0]->m_x,l.m_n[1]->m_x,lcolor);
			}
		}
		/* Normals	* / 
		if(0!=(drawflags&fDrawFlags::Normals))
		{
			for(i=0;i<psb.m_nodes.size();++i)
			{
				const BulletSoftBody::Node&	n=psb.m_nodes[i];
				if(0==(n.m_material->m_flags&BulletSoftBody::fMaterial::DebugDraw)) continue;
				const Vec3			d=n.m_n*nscl;
				idraw->drawLine(n.m_x,n.m_x+d,ncolor);
				idraw->drawLine(n.m_x,n.m_x-d,ncolor*0.5);
			}
		}
		/* Contacts	* / 
		if(0!=(drawflags&fDrawFlags::Contacts))
		{
			static const Vec3		axis[]={Vec3(1,0,0),
				Vec3(0,1,0),
				Vec3(0,0,1)};
			for(i=0;i<psb.m_rcontacts.size();++i)
			{		
				const BulletSoftBody::RContact&	c=psb.m_rcontacts[i];
				const Vec3				o=	c.m_node->m_x-c.m_cti.m_normal*
					(btDot(c.m_node->m_x,c.m_cti.m_normal)+c.m_cti.m_offset);
				const Vec3				x=btCross(c.m_cti.m_normal,axis[c.m_cti.m_normal.minAxis()]).normalized();
				const Vec3				y=btCross(x,c.m_cti.m_normal).normalized();
				idraw->drawLine(o-x*nscl,o+x*nscl,ccolor);
				idraw->drawLine(o-y*nscl,o+y*nscl,ccolor);
				idraw->drawLine(o,o+c.m_cti.m_normal*nscl*3,Vec3(1,1,0));
			}
		}
		/* Faces	* / 
	if(0!=(drawflags&fDrawFlags::Faces))
	{
		const Scalar	scl=(Scalar)0.8;
		const Scalar	alp=(Scalar)1;
		const Vec3	col(0,(Scalar)0.7,0);
		for(i=0;i<psb.m_faces.size();++i)
		{
			const BulletSoftBody::Face&	f=psb.m_faces[i];
			if(0==(f.m_material->m_flags&BulletSoftBody::fMaterial::DebugDraw)) continue;
			const Vec3			x[]={f.m_n[0]->m_x,f.m_n[1]->m_x,f.m_n[2]->m_x};
			const Vec3			c=(x[0]+x[1]+x[2])/3;
			idraw->drawTriangle((x[0]-c)*scl+c,
				(x[1]-c)*scl+c,
				(x[2]-c)*scl+c,
				col,alp);
		}	
	}
	/* Tetras	* / 
	if(0!=(drawflags&fDrawFlags::Tetras))
	{
		const Scalar	scl=(Scalar)0.8;
		const Scalar	alp=(Scalar)1;
		const Vec3	col((Scalar)0.3,(Scalar)0.3,(Scalar)0.7);
		for(Integer i=0;i<psb.m_tetras.size();++i)
		{
			const BulletSoftBody::Tetra&	t=psb.m_tetras[i];
			if(0==(t.m_material->m_flags&BulletSoftBody::fMaterial::DebugDraw)) continue;
			const Vec3				x[]={t.m_n[0]->m_x,t.m_n[1]->m_x,t.m_n[2]->m_x,t.m_n[3]->m_x};
			const Vec3				c=(x[0]+x[1]+x[2]+x[3])/4;
			idraw->drawTriangle((x[0]-c)*scl+c,(x[1]-c)*scl+c,(x[2]-c)*scl+c,col,alp);
			idraw->drawTriangle((x[0]-c)*scl+c,(x[1]-c)*scl+c,(x[3]-c)*scl+c,col,alp);
			idraw->drawTriangle((x[1]-c)*scl+c,(x[2]-c)*scl+c,(x[3]-c)*scl+c,col,alp);
			idraw->drawTriangle((x[2]-c)*scl+c,(x[0]-c)*scl+c,(x[3]-c)*scl+c,col,alp);
		}	
	}
	}
	/* Anchors	* / 
	if(0!=(drawflags&fDrawFlags::Anchors))
	{
		for(i=0;i<psb.m_anchors.size();++i)
		{
			const BulletSoftBody::Anchor&	a=psb.m_anchors[i];
			const Vec3				q=a.m_body->getWorldTransform()*a.m_local;
			drawVertex(idraw,a.m_node->m_x,0.25,Vec3(1,0,0));
			drawVertex(idraw,q,0.25,Vec3(0,1,0));
			idraw->drawLine(a.m_node->m_x,q,Vec3(1,1,1));
		}
		for(i=0;i<psb.m_nodes.size();++i)
		{
			const BulletSoftBody::Node&	n=psb.m_nodes[i];		
			if(0==(n.m_material->m_flags&BulletSoftBody::fMaterial::DebugDraw)) continue;
			if(n.m_im<=0)
			{
				drawVertex(idraw,n.m_x,0.25,Vec3(1,0,0));
			}
		}
	}
	

	/* Notes	* / 
	if(0!=(drawflags&fDrawFlags::Notes))
	{
		for(i=0;i<psb.m_notes.size();++i)
		{
			const BulletSoftBody::Note&	n=psb.m_notes[i];
			Vec3				p=n.m_offset;
			for(Integer j=0;j<n.m_rank;++j)
			{
				p+=n.m_nodes[j]->m_x*n.m_coords[j];
			}
			idraw->draw3dText(p,n.m_text);
		}
	}
	/* Node tree	* / 
	if(0!=(drawflags&fDrawFlags::NodeTree))		DrawNodeTree(psb,idraw);
	/* Face tree	* / 
	if(0!=(drawflags&fDrawFlags::FaceTree))		DrawFaceTree(psb,idraw);
	/* Cluster tree	* / 
	if(0!=(drawflags&fDrawFlags::ClusterTree))	DrawClusterTree(psb,idraw);
	/* Joints		* / 
	if(0!=(drawflags&fDrawFlags::Joints))
	{
		for(i=0;i<psb.m_joints.size();++i)
		{
			const BulletSoftBody::Joint*	pj=psb.m_joints[i];
			switch(pj->Type())
			{
			case	BulletSoftBody::Joint::eType::Linear:
				{
					const BulletSoftBody::LJoint*	pjl=(const BulletSoftBody::LJoint*)pj;
					const Vec3	a0=pj->m_bodies[0].xform()*pjl->m_refs[0];
					const Vec3	a1=pj->m_bodies[1].xform()*pjl->m_refs[1];
					idraw->drawLine(pj->m_bodies[0].xform().getOrigin(),a0,Vec3(1,1,0));
					idraw->drawLine(pj->m_bodies[1].xform().getOrigin(),a1,Vec3(0,1,1));
					drawVertex(idraw,a0,0.25,Vec3(1,1,0));
					drawVertex(idraw,a1,0.25,Vec3(0,1,1));
				}
				break;
			case	BulletSoftBody::Joint::eType::Angular:
				{
					//const BulletSoftBody::AJoint*	pja=(const BulletSoftBody::AJoint*)pj;
					const Vec3	o0=pj->m_bodies[0].xform().getOrigin();
					const Vec3	o1=pj->m_bodies[1].xform().getOrigin();
					const Vec3	a0=pj->m_bodies[0].xform().getBasis()*pj->m_refs[0];
					const Vec3	a1=pj->m_bodies[1].xform().getBasis()*pj->m_refs[1];
					idraw->drawLine(o0,o0+a0*10,Vec3(1,1,0));
					idraw->drawLine(o0,o0+a1*10,Vec3(1,1,0));
					idraw->drawLine(o1,o1+a0*10,Vec3(0,1,1));
					idraw->drawLine(o1,o1+a1*10,Vec3(0,1,1));
					break;
				}
				default:
				{
				}
					
			}		
		}
	}
}

//
void			BulletSoftBodyHelpers_DrawInfos(		BulletSoftBody psb,
											 btIDebugDraw* idraw,
											 Boolean masses,
											 Boolean areas,
											 Boolean /*stress* /)
{
	for(Integer i=0;i<psb.m_nodes.size();++i)
	{
		const BulletSoftBody::Node&	n=psb.m_nodes[i];
		char					text[2048]={0};
		char					buff[1024];
		if(masses)
		{
			sprintf(buff," M(%.2f)",1/n.m_im);
			strcat(text,buff);
		}
		if(areas)
		{
			sprintf(buff," A(%.2f)",n.m_area);
			strcat(text,buff);
		}
		if(text[0]) idraw->draw3dText(n.m_x,text);
	}
}

//
void			BulletSoftBodyHelpers_DrawNodeTree(	BulletSoftBody psb,
												btIDebugDraw* idraw,
												Integer mindepth,
												Integer maxdepth)
{
	drawTree(idraw,psb.m_ndbvt.m_root,0,Vec3(1,0,1),Vec3(1,1,1),mindepth,maxdepth);
}

//
void			BulletSoftBodyHelpers_DrawFaceTree(	BulletSoftBody psb,
												btIDebugDraw* idraw,
												Integer mindepth,
												Integer maxdepth)
{
	drawTree(idraw,psb.m_fdbvt.m_root,0,Vec3(0,1,0),Vec3(1,0,0),mindepth,maxdepth);
}

//
void			BulletSoftBodyHelpers_DrawClusterTree(	BulletSoftBody psb,
												   btIDebugDraw* idraw,
												   Integer mindepth,
												   Integer maxdepth)
{
	drawTree(idraw,psb.m_cdbvt.m_root,0,Vec3(0,1,1),Vec3(1,0,0),mindepth,maxdepth);
}

//
void			BulletSoftBodyHelpers_DrawFrame(		BulletSoftBody psb,
											 btIDebugDraw* idraw)
{
	if(psb.m_pose.m_bframe)
	{
		static const Scalar	ascl=10;
		static const Scalar	nscl=(Scalar)0.1;
		const Vec3			com=psb.m_pose.m_com;
		const Mat33		trs=psb.m_pose.m_rot*psb.m_pose.m_scl;
		const Vec3			Xaxis=(trs*Vec3(1,0,0)).normalized();
		const Vec3			Yaxis=(trs*Vec3(0,1,0)).normalized();
		const Vec3			Zaxis=(trs*Vec3(0,0,1)).normalized();
		idraw->drawLine(com,com+Xaxis*ascl,Vec3(1,0,0));
		idraw->drawLine(com,com+Yaxis*ascl,Vec3(0,1,0));
		idraw->drawLine(com,com+Zaxis*ascl,Vec3(0,0,1));
		for(Integer i=0;i<psb.m_pose.m_pos.size();++i)
		{
			const Vec3	x=com+trs*psb.m_pose.m_pos[i];
			drawVertex(idraw,x,nscl,Vec3(1,0,1));
		}
	}
}
*/

//
function BulletSoftBody		BulletSoftBodyHelpers_CreateRope(BulletSoftBodyWorldInfo worldInfo,Vec3 vertices[], Integer fixeds)
{
	/* Create nodes	*/ 
	Integer i;
	Scalar	m[]; m.resize(vertices.size());
	for(i=1;i<vertices.size();++i){
		m[i] = 1.0;
	}
	BulletSoftBody		psb(worldInfo,vertices,m);
	if(fixeds&1) psb.setMass(0,0);
	if(fixeds&2) psb.setMass(vertices.size()-1,0);
	/* Create links	*/ 
	for(i=1;i<vertices.size();++i)
	{
		psb.appendLink(i-1,i);
	}
	/* Finished		*/ 
	return psb;
}


//
function Integer IDX(Integer rx, Integer x, Integer y){ return ((y)*rx+(x)); }
function BulletSoftBody		BulletSoftBodyHelpers_CreatePatch(BulletSoftBodyWorldInfo worldInfo,in Vec3 corner00,
											   in Vec3 corner10,
											   in Vec3 corner01,
											   in Vec3 corner11,
											   Integer resx,
											   Integer resy,
											   Integer fixeds,
											   Boolean gendiags)
{
	/* Create nodes	*/ 
	if((resx<2)||(resy<2)) 
		return null;
	Integer	rx = resx;
	Integer	ry = resy;
	Integer	tot = rx*ry;
	Vec3	x[]; x.resize(tot);
	Scalar	m[]; m.resize(tot);
	Integer iy;

	for(iy=0; iy<ry; ++iy)
	{
		Scalar	ty = iy/Scalar(ry-1);
		Vec3	py0 = corner00.linearInterpolate(corner01,ty);
		Vec3	py1 = corner10.linearInterpolate(corner11,ty);
		for(Integer ix=0;ix<rx;++ix)
		{
			Scalar	tx = ix/Scalar(rx-1);
			x[IDX(rx, ix,iy)] = py0.linearInterpolate(py1,tx);
			m[IDX(rx, ix,iy)] = 1;
		}
	}
	BulletSoftBody	psb(worldInfo,x,m);
	if(fixeds&1)	psb.setMass(IDX(rx, 0,0),0);
	if(fixeds&2)	psb.setMass(IDX(rx, rx-1,0),0);
	if(fixeds&4)	psb.setMass(IDX(rx, 0,ry-1),0);
	if(fixeds&8)	psb.setMass(IDX(rx, rx-1,ry-1),0);

	/* Create links	and faces */ 
	for(iy=0; iy<ry; ++iy)
	{
		for(Integer ix=0; ix<rx; ++ix)
		{
			Integer	idx=IDX(rx, ix,iy);
			Boolean	mdx=(ix+1)<rx;
			Boolean	mdy=(iy+1)<ry;
			if(mdx) psb.appendLink(idx,IDX(rx, ix+1,iy));
			if(mdy) psb.appendLink(idx,IDX(rx, ix,iy+1));
			if(mdx && mdy)
			{
				if((ix+iy)&1)
				{
					psb.appendFace(IDX(rx, ix,iy),IDX(rx, ix+1,iy),IDX(rx, ix+1,iy+1));
					psb.appendFace(IDX(rx, ix,iy),IDX(rx, ix+1,iy+1),IDX(rx, ix,iy+1));
					if(gendiags)
					{
						psb.appendLink(IDX(rx, ix,iy),IDX(rx, ix+1,iy+1));
					}
				}
				else
				{
					psb.appendFace(IDX(rx, ix,iy+1),IDX(rx, ix,iy),IDX(rx, ix+1,iy));
					psb.appendFace(IDX(rx, ix,iy+1),IDX(rx, ix+1,iy),IDX(rx, ix+1,iy+1));
					if(gendiags)
					{
						psb.appendLink(IDX(rx, ix+1,iy),IDX(rx, ix,iy+1));
					}
				}
			}
		}
	}
	/* Finished		*/ 
	return psb;
}
/*
//
BulletSoftBody		BulletSoftBodyHelpers_CreatePatchUV(BulletSoftBodyWorldInfo worldInfo,
												 in Vec3 corner00,
												 in Vec3 corner10,
												 in Vec3 corner01,
												 in Vec3 corner11,
												 Integer resx,
												 Integer resy,
												 Integer fixeds,
												 Boolean gendiags,
												 Scalar tex_coords[])
{

	/*
	*
	*  corners:
	*
	*  [0][0]     corner00 ------- corner01   [resx][0]
	*                |                |
	*                |                |
	*  [0][resy]  corner10 -------- corner11  [resx][resy]
	*
	*
	*
	*
	*
	*
	*   "fixedgs" map:
	*
	*  corner00     -->   +1
	*  corner01     -->   +2
	*  corner10     -->   +4
	*  corner11     -->   +8
	*  upper middle -->  +16
	*  left middle  -->  +32
	*  right middle -->  +64
	*  lower middle --> +128
	*  center       --> +256
	*
	*
	*   tex_coords size   (resx-1)*(resy-1)*12
	*
	*
	*
	*     SINGLE QUAD INTERNALS
	*
	*  1) BulletSoftBody's nodes and links,
	*     diagonal link is optional ("gendiags")
	*
	*
	*    node00 ------ node01
	*      | .              
	*      |   .            
	*      |     .          
	*      |       .        
	*      |         .      
	*    node10        node11
	*
	*
	*
	*   2) Faces:
	*      two triangles,
	*      UV Coordinates (hier example for single quad)
	*      
	*     (0,1)          (0,1)  (1,1)
	*     1 |\            3 \-----| 2
	*       | \              \    |
	*       |  \              \   |
	*       |   \              \  |
	*       |    \              \ |
	*     2 |-----\ 3            \| 1
	*     (0,0)    (1,0)       (1,0)
	*
	*
	*
	*
	*
	*
	* /

#define IDX(_x_,_y_)	((_y_)*rx+(_x_))
	/* Create nodes		* / 
	if((resx<2)||(resy<2)) return(0);
	const Integer	rx=resx;
	const Integer	ry=resy;
	const Integer	tot=rx*ry;
	Vec3*	x=new Vec3[tot];
	Scalar*	m=new Scalar[tot];

	Integer iy;

	for(iy=0;iy<ry;++iy)
	{
		const Scalar	ty=iy/(Scalar)(ry-1);
		const Vec3	py0=lerp(corner00,corner01,ty);
		const Vec3	py1=lerp(corner10,corner11,ty);
		for(Integer ix=0;ix<rx;++ix)
		{
			const Scalar	tx=ix/(Scalar)(rx-1);
			x[IDX(ix,iy)]=lerp(py0,py1,tx);
			m[IDX(ix,iy)]=1;
		}
	}
	BulletSoftBody	psb=new BulletSoftBody(worldInfo,tot,x,m);
	if(fixeds&1)		psb.setMass(IDX(0,0),0);
	if(fixeds&2)		psb.setMass(IDX(rx-1,0),0);
	if(fixeds&4)		psb.setMass(IDX(0,ry-1),0);
	if(fixeds&8)		psb.setMass(IDX(rx-1,ry-1),0);
	if(fixeds&16)		psb.setMass(IDX((rx-1)/2,0),0);
	if(fixeds&32)		psb.setMass(IDX(0,(ry-1)/2),0);
	if(fixeds&64)		psb.setMass(IDX(rx-1,(ry-1)/2),0);
	if(fixeds&128)		psb.setMass(IDX((rx-1)/2,ry-1),0);
	if(fixeds&256)		psb.setMass(IDX((rx-1)/2,(ry-1)/2),0);
	delete[] x;
	delete[] m;


	Integer z = 0;
	/* Create links	and faces	* / 
	for(iy=0;iy<ry;++iy)
	{
		for(Integer ix=0;ix<rx;++ix)
		{
			const Boolean	mdx=(ix+1)<rx;
			const Boolean	mdy=(iy+1)<ry;

			Integer node00=IDX(ix,iy);
			Integer node01=IDX(ix+1,iy);
			Integer node10=IDX(ix,iy+1);
			Integer node11=IDX(ix+1,iy+1);

			if(mdx) psb.appendLink(node00,node01);
			if(mdy) psb.appendLink(node00,node10);
			if(mdx&&mdy)
			{
				psb.appendFace(node00,node10,node11);
				if (tex_coords) {
					tex_coords[z+0]=CalculateUV(resx,resy,ix,iy,0);
					tex_coords[z+1]=CalculateUV(resx,resy,ix,iy,1);
					tex_coords[z+2]=CalculateUV(resx,resy,ix,iy,0);
					tex_coords[z+3]=CalculateUV(resx,resy,ix,iy,2);
					tex_coords[z+4]=CalculateUV(resx,resy,ix,iy,3);
					tex_coords[z+5]=CalculateUV(resx,resy,ix,iy,2);
				}
				psb.appendFace(node11,node01,node00);
				if (tex_coords) {
					tex_coords[z+6 ]=CalculateUV(resx,resy,ix,iy,3);
					tex_coords[z+7 ]=CalculateUV(resx,resy,ix,iy,2);
					tex_coords[z+8 ]=CalculateUV(resx,resy,ix,iy,3);
					tex_coords[z+9 ]=CalculateUV(resx,resy,ix,iy,1);
					tex_coords[z+10]=CalculateUV(resx,resy,ix,iy,0);
					tex_coords[z+11]=CalculateUV(resx,resy,ix,iy,1);
				}
				if (gendiags) psb.appendLink(node00,node11);
				z += 12;
			}
		}
	}
	/* Finished	* / 
#undef IDX
	return psb;
}

Scalar   BulletSoftBodyHelpers_CalculateUV(Integer resx,Integer resy,Integer ix,Integer iy,Integer id)
{

	/*
	*
	*
	*    node00 --- node01
	*      |          |
	*    node10 --- node11
	*
	*
	*   ID map:
	*
	*   node00 s --> 0
	*   node00 t --> 1
	*
	*   node01 s --> 3
	*   node01 t --> 1
	*
	*   node10 s --> 0
	*   node10 t --> 2
	*
	*   node11 s --> 3
	*   node11 t --> 2
	*
	*
	* /

	Scalar tc=0.0;
	if (id == 0) {
		tc = (1.0/((resx-1))*ix);
	}
	else if (id==1) {
		tc = (1.0/((resy-1))*(resy-1-iy));
	}
	else if (id==2) {
		tc = (1.0/((resy-1))*(resy-1-iy-1));
	}
	else if (id==3) {
		tc = (1.0/((resx-1))*(ix+1));
	}
	return tc;
}

//
BulletSoftBody		BulletSoftBodyHelpers_CreateEllipsoid(BulletSoftBodyWorldInfo worldInfo,in Vec3 center,
												   in Vec3 radius,
												   Integer res)
{
	struct	Hammersley
	{
		static void	Generate(Vec3* x,Integer n)
		{
			for(Integer i=0;i<n;i++)
			{
				Scalar	p=0.5,t=0;
				for(Integer j=i;j;p*=0.5,j>>=1) if(j&1) t+=p;
				Scalar	w=2*t-1;
				Scalar	a=(SIMD_PI+2*i*SIMD_PI)/n;
				Scalar	s=btSqrt(1-w*w);
				*x++=Vec3(s*btCos(a),s*btSin(a),w);
			}
		}
	};
	btAlignedObjectArray<Vec3>	vtx;
	vtx.resize(3+res);
	Hammersley::Generate(&vtx[0],vtx.size());
	for(Integer i=0;i<vtx.size();++i)
	{
		vtx[i]=vtx[i]*radius+center;
	}
	return(CreateFromConvexHull(worldInfo,&vtx[0],vtx.size()));
}


*/
//
function BulletSoftBody		BulletSoftBodyHelpers_CreateFromTriMesh(BulletSoftBodyWorldInfo worldInfo, Vec3 vertices[], UInt32 triangles[]){
	return BulletSoftBodyHelpers_CreateFromTriMesh(worldInfo, vertices, triangles, true);
}
function BulletSoftBody		BulletSoftBodyHelpers_CreateFromTriMesh(BulletSoftBodyWorldInfo worldInfo, Vec3 vertices[], UInt32 triangles[], Boolean randomizeConstraints)
{
	Integer	maxidx=0;
	for(Integer i=0;i<triangles.size();++i)
	{
		maxidx=Math_max(triangles[i], maxidx);
	}
	++maxidx;
	Boolean	chks[];
	chks.resize(maxidx*maxidx);

	BulletSoftBody psb = BulletSoftBody( worldInfo, vertices);
	for(Integer i=0;i<triangles.size();i+=3)
	{
		Integer idx[];
		idx.push(triangles[i]);idx.push(triangles[i+1]);idx.push(triangles[i+2]);

		for(Integer j=2,k=0;k<3;j=k++)
		{
			if(!chks[IDX(maxidx, idx[j],idx[k])])
			{
				chks[IDX(maxidx, idx[j],idx[k])]=true;
				chks[IDX(maxidx, idx[k],idx[j])]=true;
				psb.appendLink(idx[j],idx[k]);
			}
		}
		psb.appendFace(idx[0],idx[1],idx[2]);
	}

	if (randomizeConstraints)
	{
		psb.randomizeConstraints();
	}

	return psb;
}

/*
//
BulletSoftBody		BulletSoftBodyHelpers_CreateFromConvexHull(BulletSoftBodyWorldInfo worldInfo,	const Vec3 vertices[], Boolean randomizeConstraints)
{
	HullDesc		hdsc(QF_TRIANGLES,vertices);
	HullResult		hres;
	HullLibrary		hlib; 
	hdsc.mMaxVertices=vertices.size;
	hlib.CreateConvexHull(hdsc,hres);
	BulletSoftBody		psb(worldInfo,(Integer)hres.mNumOutputVertices,	&hres.m_OutputVertices[0],0);
	for(Integer i=0;i<(Integer)hres.mNumFaces;++i)
	{
		const Integer idx[]={	static_cast<Integer>(hres.m_Indices[i*3+0]),
							static_cast<Integer>(hres.m_Indices[i*3+1]),
							static_cast<Integer>(hres.m_Indices[i*3+2])};
		if(idx[0]<idx[1]) psb.appendLink(	idx[0],idx[1]);
		if(idx[1]<idx[2]) psb.appendLink(	idx[1],idx[2]);
		if(idx[2]<idx[0]) psb.appendLink(	idx[2],idx[0]);
		psb.appendFace(idx[0],idx[1],idx[2]);
	}
	hlib.ReleaseResult(hres);
	if (randomizeConstraints)
	{
		psb.randomizeConstraints();
	}
	return psb;
}


/*


static Integer nextLine(const char* buffer)
{
	Integer numBytesRead=0;

	while (*buffer != '\n')
	{
		buffer++;
		numBytesRead++;
	}

	
	if (buffer[0]==0x0a)
	{
		buffer++;
		numBytesRead++;
	}
	return numBytesRead;
}

/* Create from TetGen .ele, .face, .node data							* / 
BulletSoftBody	BulletSoftBodyHelpers_CreateFromTetGenData(BulletSoftBodyWorldInfo worldInfo,
													const char* ele,
													const char* face,
													const char* node,
													Boolean bfacelinks,
													Boolean btetralinks,
													Boolean bfacesfromtetras)
{
btAlignedObjectArray<Vec3>	pos;
Integer								nnode=0;
Integer								ndims=0;
Integer								nattrb=0;
Integer								hasbounds=0;
Integer result = sscanf(node,"%d %d %d %d",&nnode,&ndims,&nattrb,&hasbounds);
result = sscanf(node,"%d %d %d %d",&nnode,&ndims,&nattrb,&hasbounds);
node += nextLine(node);

pos.resize(nnode);
for(Integer i=0;i<pos.size();++i)
	{
	Integer			index=0;
	//Integer			bound=0;
	Scalar	x,y,z;
	sscanf(node,"%d %f %f %f",&index,&x,&y,&z);

//	sn>>index;
//	sn>>x;sn>>y;sn>>z;
	node += nextLine(node);

	//for(Integer j=0;j<nattrb;++j) 
	//	sn>>a;

	//if(hasbounds) 
	//	sn>>bound;

	pos[index].setX(Scalar(x));
	pos[index].setY(Scalar(y));
	pos[index].setZ(Scalar(z));
	}
BulletSoftBody						psb=new BulletSoftBody(worldInfo,nnode,&pos[0],0);
#if 0
if(face&&face[0])
	{
	Integer								nface=0;
	sf>>nface;sf>>hasbounds;
	for(Integer i=0;i<nface;++i)
		{
		Integer			index=0;
		Integer			bound=0;
		Integer			ni[3];
		sf>>index;
		sf>>ni[0];sf>>ni[1];sf>>ni[2];
		sf>>bound;
		psb.appendFace(ni[0],ni[1],ni[2]);	
		if(btetralinks)
			{
			psb.appendLink(ni[0],ni[1],0,true);
			psb.appendLink(ni[1],ni[2],0,true);
			psb.appendLink(ni[2],ni[0],0,true);
			}
		}
	}
#endif

if(ele&&ele[0])
	{
	Integer								ntetra=0;
	Integer								ncorner=0;
	Integer								neattrb=0;
	sscanf(ele,"%d %d %d",&ntetra,&ncorner,&neattrb);
	ele += nextLine(ele);
	
	//se>>ntetra;se>>ncorner;se>>neattrb;
	for(Integer i=0;i<ntetra;++i)
		{
		Integer			index=0;
		Integer			ni[4];

		//se>>index;
		//se>>ni[0];se>>ni[1];se>>ni[2];se>>ni[3];
		sscanf(ele,"%d %d %d %d %d",&index,&ni[0],&ni[1],&ni[2],&ni[3]);
		ele+=nextLine(ele);
		//for(Integer j=0;j<neattrb;++j) 
		//	se>>a;
		psb.appendTetra(ni[0],ni[1],ni[2],ni[3]);
		if(btetralinks)
			{
			psb.appendLink(ni[0],ni[1],0,true);
			psb.appendLink(ni[1],ni[2],0,true);
			psb.appendLink(ni[2],ni[0],0,true);
			psb.appendLink(ni[0],ni[3],0,true);
			psb.appendLink(ni[1],ni[3],0,true);
			psb.appendLink(ni[2],ni[3],0,true);
			}
		}
	}
printf("Nodes:  %u\r\n",psb.m_nodes.size());
printf("Links:  %u\r\n",psb.m_links.size());
printf("Faces:  %u\r\n",psb.m_faces.size());
printf("Tetras: %u\r\n",psb.m_tetras.size());
return psb;
}

*/

