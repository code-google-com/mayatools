
//
// Copyright 2010-2014 Fabric Software Inc. All rights reserved.
//
/*SPHINX-description
The :ref:`box2` represents a 2 dimensional bounding box. It uses :ref:`vec2` types for each of the 2 elements.

Example
---------

.. code-block:: js

    // create a box2
    Vec2 min(0.0, 0.0);
    Vec2 max(1.0, 1.0);
    Box2 box(min, max);
*/

struct Box2
{
  Vec2 min;
  Vec2 max;
};

// constructor from vectors
inline Box2(
  Vec2 min, Vec2 max
) {
  this.min = min;
  this.max = max;
}

// returns true if this box has no content
inline Boolean Box2.isEmpty() {
  return this.min == Vec2() && this.max == Vec2();
}

// setting this box to an empty box
inline Box2.setEmpty!() {
  this.min = this.max = Vec2();
}

// merging a vector into this box
inline Box2.merge!(Vec2 v) {
  if(this.isEmpty())
    this.min = this.max = v;
  else {
    if(this.min.x > v.x) this.min.x = v.x;
    if(this.min.y > v.y) this.min.y = v.y;
    if(this.max.x < v.x) this.max.x = v.x;
    if(this.max.y < v.y) this.max.y = v.y;
  }
}

// merging a box into this box
inline Box2.merge!(Box2 v) {
  this.merge(v.min);
  this.merge(v.max);
}

// returns the merge of two boxes
inline Box2 + (Box2 a, Box2 b) {
  Box2 r;
  r.merge(b);
  return r;
}

// merges another box to this one
inline Box2. += (Box2 other) {
  this = this + other;
}

// equals operator
inline Boolean == (Box2 a, Box2 b) {
  return a.min == b.min && a.max == b.max;
}

// not equals operator
inline Boolean != (Box2 a, Box2 b) {
  return a.min != b.min || a.max != b.max;
}
