/*
 *  Copyright 2010-2012 Fabric Engine Inc. All rights reserved.


/*SPHINX-description
The Skeleton stores an array of bones encoding the hiearchy into this simple data structure. 

*/
require Math;


object Skeleton : ISkeleton {
  String name;
  Bone bones[];
  Xfo referenceLocalPoses[];
  UInt64 version;
  Size deformerIndices[];
};

function Skeleton(String name){
  this.name = name;
}

function Skeleton(String name, Bone bones[]){
  this.name = name;
  this.bones = bones;
  this.recomputeHierarchy();
}

function String Skeleton.getName(){
  return this.name;
}

function Skeleton.incrementVersion!(){
  this.version += 1;
}

function UInt64 Skeleton.getVersion(){
  return this.version;
}

function Size Skeleton.getNumBones(){
  return this.bones.size();
}

function Skeleton.addBone!(Bone bone){
  this.bones.resize(this.bones.size()+1);
  this.bones[this.bones.size()-1] = bone;
  this.recomputeHierarchy();
}

function Bone Skeleton.getBone(Index index){
  return this.bones[index];
}


function Xfo Skeleton.getReferencePose(Index index){
  return this.bones[index].referencePose;
}

function Xfo Skeleton.getReferenceLocalPose(Index index){
  return this.referenceLocalPoses[index];
}

function Skeleton.recomputeHierarchy!(){
  this.referenceLocalPoses.resize(this.bones.size());
  this.deformerIndices.resize(0);
  for(Index i=0; i<this.bones.size(); i++) {
    if(this.bones[i].parent == -1){
      this.referenceLocalPoses[i] = this.bones[i].referencePose;
    }
    else{
      this.referenceLocalPoses[i] = this.bones[this.bones[i].parent].referencePose.inverse() * this.bones[i].referencePose;
    }
    this.bones[i].children.resize(0);
    for(Index j=i+1; j<this.bones.size(); j++) {
      if(this.bones[j].parent == i){
        this.bones[i].children.push(j);
      }
    }

    this.bones[i].calcInvRefPose();

    if(this.bones[i].testFlag(BONEFLAG_DEFORMER)){
      this.deformerIndices.push(i);
    }
  }
  this.incrementVersion();
}

function Integer Skeleton.findBone(String boneName, Index startingPoint){
  for(Integer i=startingPoint; i < this.bones.size; i++){
    if(this.bones[i].name == boneName){
      return i;
    }
  }
  return -1;
}

function Integer Skeleton.findBone(String boneName){
  return this.findBone(boneName, 0);
}

function Size[] Skeleton.getDeformerIndices(){
  return this.deformerIndices;
}

function Bone[] Skeleton.getDeformers(){
  Bone deformers[];
  for(Integer i=0; i < this.deformerIndices.size; i++){
    if(this.bones[this.deformerIndices[i]].testFlag(BONEFLAG_DEFORMER)){
      deformers.push(this.bones[this.deformerIndices[i]]);
    }
  }
  return deformers;
}

function Skeleton.computeSymmetry!(){
  /////////////////////////////////////////////
  // Compute Skeleton Symmetry
  for(Integer i=0; i < this.bones.size; i++){
    // We can only mirror bones that have a length, and a radius.
    // This is a way to filter out bones that were collected by
    // the FbxCharacterSkeleton that were not seed bones.
    if(this.bones[i].mirrorBoneID == -1 && this.bones[i].length > 0.0 && this.bones[i].radius > 0.0){
      Vec3 boneCenter = this.bones[i].referencePose.transformVector(Vec3(this.bones[i].length * 0.5, 0, 0));
      Vec3 mirrorBoneCenter = boneCenter;
      mirrorBoneCenter.x = -mirrorBoneCenter.x;
      Integer closestMirror = -1;
      Scalar closestMirrorBoneDist = 9999999.0;
      for(Integer j=0; j<this.bones.size; j++){
        if(i!=j && this.bones[j].length > 0.0 && this.bones[j].radius > 0.0){
          Vec3 otherBoneCenter = this.bones[j].referencePose.transformVector(Vec3(this.bones[j].length * 0.5, 0, 0));
          Scalar dist = mirrorBoneCenter.distanceTo(otherBoneCenter);
          // The mirror bone must be the closes bone on the opposite side of the character.
          // We also filter this.bones taht are not within a reasonable range of the search bone.
          if(((mirrorBoneCenter.x < 0.0 && otherBoneCenter.x < 0.0) || (mirrorBoneCenter.x > 0.0 && otherBoneCenter.x > 0.0)) && 
            dist < (this.bones[i].length * 0.2) &&
            dist < closestMirrorBoneDist){
            closestMirror = j;
            closestMirrorBoneDist = dist;
          }
        }
      }
      if(closestMirror >= 0){
        this.bones[i].mirrorBoneID = closestMirror;
        this.bones[closestMirror].mirrorBoneID = i;
      }
    }
  }
}
  
  

function String Skeleton.getDesc(String indent, Boolean includeBones) {
  String desc;
  desc += indent + "Skeleton { \n";
  desc += indent + "  name: " + this.name + " \n";
  if(includeBones){
    desc += indent + "  bones:[ \n";
    for(Integer i=0; i<this.bones.size; i++){
      desc += this.bones[i].getDesc(indent+"  ") + " \n";
    }
    desc += indent + "  ]\n";
  }
  return desc;
}

function String Skeleton.getDesc() {
  return this.getDesc("", true);
}


require InlineDrawing;



function drawSkeleton(ISkeleton skeleton, io IPose pose, io InlineTransform rootTransform) {
  InlineDrawing drawing = OGLInlineDrawing_GetInstance();
  InlineShader shader = drawing.registerShader(OGLSurfaceShader('surface'));
  InlineMaterial phong = shader.getOrCreateMaterial("phong");

  for(Integer i=0; i<skeleton.getNumBones(); i++){
    InlineTransform boneTransform = null;
    if(i < rootTransform.getChildCount())
      boneTransform = rootTransform.getChild(i);

    if(boneTransform == null){
      Bone bone = skeleton.getBone(i);
      boneTransform = StaticInlineTransform(skeleton.getName() + bone.name, pose.getBoneXfo(i));
      rootTransform.addChild(boneTransform);

      InlineMeshShape boneShape = constructBoneShape(bone);
      InlineInstance boneInstance = SimpleInlineInstance(skeleton.getName() + bone.name + 'Instance', boneTransform, boneShape, phong);
      boneInstance.setInstanceUniform(InlineUniform('u_diffuseColor', bone.color));
    }
    else{
      boneTransform.setLocalXfo(0, pose.getBoneXfo(i));
    }
  }
}

