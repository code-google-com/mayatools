
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */


///The btOverlappingPairCache provides an interface for overlapping pair management (add, remove, storage), used by the btBroadphaseInterface broadphases.
///The btHashedOverlappingPairCache and btSortedOverlappingPairCache classes are two implementations.
object BulletOverlappingPairCache : BulletTypedObject
{
	Data pointer;
};

function Data BulletOverlappingPairCache.getPointer(){
	return this.pointer;
}


function BulletBroadphasePair BulletOverlappingPairCache.getOverlappingPairArrayPtr() = 'BulletOverlappingPairCache_getOverlappingPairArrayPtr';

function BulletBroadphasePair[] BulletOverlappingPairCache.getOverlappingPairArray() = 'BulletOverlappingPairCache_getOverlappingPairArray';

function BulletOverlappingPairCache.cleanOverlappingPair!(BulletBroadphasePair pair, BulletDispatcher dispatcher) = 'BulletOverlappingPairCache_cleanOverlappingPair';

function Integer BulletOverlappingPairCache.getNumOverlappingPairs() = 'BulletOverlappingPairCache_getNumOverlappingPairs';

function BulletOverlappingPairCache.cleanProxyFromPairs!(BulletBroadphaseProxy proxy,BulletDispatcher dispatcher) = 'BulletOverlappingPairCache_cleanProxyFromPairs';

// function BulletOverlappingPairCache.setOverlapFilterCallback(BulletOverlapFilterCallback callback) = 'BulletOverlappingPairCache_setOverlapFilterCallback';

// function BulletOverlappingPairCache.processAllOverlappingPairs(BulletOverlapCallback callback, BulletDispatcher dispatcher) = 'BulletOverlappingPairCache_processAllOverlappingPairs';

function BulletBroadphasePair BulletOverlappingPairCache.findPair(BulletBroadphaseProxy proxy0, BulletBroadphaseProxy proxy1) = 'BulletOverlappingPairCache_findPair';

function Boolean BulletOverlappingPairCache.hasDeferredRemoval() = 'BulletOverlappingPairCache_hasDeferredRemoval';

// function BulletOverlappingPairCache.setInternalGhostPairCallback(BulletOverlappingPairCallback ghostPairCallback) = 'BulletOverlappingPairCache_setInternalGhostPairCallback';

function BulletOverlappingPairCache.sortOverlappingPairs!(BulletDispatcher dispatcher) = 'BulletOverlappingPairCache_sortOverlappingPairs';



/*
/// Hash-space based Pair Cache, thanks to Erin Catto, Box2D, http://www.box2d.org, and Pierre Terdiman, Codercorner, http://codercorner.com
class btHashedOverlappingPairCache : public btOverlappingPairCache
{
public:
	btHashedOverlappingPairCache();
	virtual ~btHashedOverlappingPairCache();

	
	void	removeOverlappingPairsContainingProxy(btBroadphaseProxy* proxy,btDispatcher* dispatcher);

	virtual void*	removeOverlappingPair(btBroadphaseProxy* proxy0,btBroadphaseProxy* proxy1,btDispatcher* dispatcher);
	
	SIMD_FORCE_INLINE Boolean needsBroadphaseCollision(btBroadphaseProxy* proxy0,btBroadphaseProxy* proxy1) const;

	// Add a pair and return the new pair. If the pair already exists,
	// no new pair is created and the old one is returned.
	virtual btBroadphasePair* 	addOverlappingPair(btBroadphaseProxy* proxy0,btBroadphaseProxy* proxy1);

	void	cleanProxyFromPairs(btBroadphaseProxy* proxy,btDispatcher* dispatcher);

	virtual void	processAllOverlappingPairs(btOverlapCallback*,btDispatcher* dispatcher);

	virtual btBroadphasePair*	getOverlappingPairArrayPtr();

	const btBroadphasePair*	getOverlappingPairArrayPtr() const;

	btBroadphasePairArray&	getOverlappingPairArray();

	const btBroadphasePairArray&	getOverlappingPairArray() const;
	void	cleanOverlappingPair(btBroadphasePair& pair,btDispatcher* dispatcher);

	btBroadphasePair* findPair(btBroadphaseProxy* proxy0, btBroadphaseProxy* proxy1);

	Integer GetCount() const { return m_overlappingPairArray.size(); }
//	btBroadphasePair* GetPairs() { return m_pairs; }

	btOverlapFilterCallback* getOverlapFilterCallback();

	void setOverlapFilterCallback(btOverlapFilterCallback* callback);

	Integer	getNumOverlappingPairs() const;

};




///btSortedOverlappingPairCache maintains the objects with overlapping AABB
///Typically managed by the Broadphase, Axis3Sweep or btSimpleBroadphase
class	btSortedOverlappingPairCache : public btOverlappingPairCache
{
		btSortedOverlappingPairCache();	
		virtual ~btSortedOverlappingPairCache();

		virtual void	processAllOverlappingPairs(btOverlapCallback*,btDispatcher* dispatcher);

		void*	removeOverlappingPair(btBroadphaseProxy* proxy0,btBroadphaseProxy* proxy1,btDispatcher* dispatcher);

		void	cleanOverlappingPair(btBroadphasePair& pair,btDispatcher* dispatcher);
		
		btBroadphasePair*	addOverlappingPair(btBroadphaseProxy* proxy0,btBroadphaseProxy* proxy1);

		btBroadphasePair*	findPair(btBroadphaseProxy* proxy0,btBroadphaseProxy* proxy1);
			
		
		void	cleanProxyFromPairs(btBroadphaseProxy* proxy,btDispatcher* dispatcher);

		void	removeOverlappingPairsContainingProxy(btBroadphaseProxy* proxy,btDispatcher* dispatcher);


		inline Boolean needsBroadphaseCollision(btBroadphaseProxy* proxy0,btBroadphaseProxy* proxy1) const;
		
		btBroadphasePairArray&	getOverlappingPairArray();

		const btBroadphasePairArray&	getOverlappingPairArray() const;

		btBroadphasePair*	getOverlappingPairArrayPtr();

		const btBroadphasePair*	getOverlappingPairArrayPtr() const;

		Integer	getNumOverlappingPairs() const;
		
		btOverlapFilterCallback* getOverlapFilterCallback();

		void setOverlapFilterCallback(btOverlapFilterCallback* callback);
		virtual Boolean	hasDeferredRemoval();

		virtual	void	setInternalGhostPairCallback(btOverlappingPairCallback* ghostPairCallback);

		virtual void	sortOverlappingPairs(btDispatcher* dispatcher);
};



///btNullPairCache skips add/removal of overlapping pairs. Userful for benchmarking and unit testing.
class btNullPairCache : public btOverlappingPairCache
{

	btBroadphasePairArray	m_overlappingPairArray;

public:

	virtual btBroadphasePair*	getOverlappingPairArrayPtr();
	const btBroadphasePair*	getOverlappingPairArrayPtr() const;
	btBroadphasePairArray&	getOverlappingPairArray();
	
	virtual	void	cleanOverlappingPair(btBroadphasePair& /*pair* /,btDispatcher* /*dispatcher* /);
	virtual Integer getNumOverlappingPairs() const;

	virtual void	cleanProxyFromPairs(btBroadphaseProxy* /*proxy* /,btDispatcher* /*dispatcher* /);

	virtual	void setOverlapFilterCallback(btOverlapFilterCallback* /*callback* /);

	virtual void	processAllOverlappingPairs(btOverlapCallback*,btDispatcher* /*dispatcher* /);

	virtual btBroadphasePair* findPair(btBroadphaseProxy* /*proxy0* /, btBroadphaseProxy* /*proxy1* /);

	virtual Boolean	hasDeferredRemoval();

	virtual	void	setInternalGhostPairCallback(btOverlappingPairCallback* /* ghostPairCallback * /);

	virtual btBroadphasePair*	addOverlappingPair(btBroadphaseProxy* /*proxy0* /,btBroadphaseProxy* /*proxy1* /);

	virtual void*	removeOverlappingPair(btBroadphaseProxy* /*proxy0* /,btBroadphaseProxy* /*proxy1* /,btDispatcher* /*dispatcher* /);
	virtual void	removeOverlappingPairsContainingProxy(btBroadphaseProxy* /*proxy0* /,btDispatcher* /*dispatcher* /);
	
	virtual void	sortOverlappingPairs(btDispatcher* dispatcher);
};

*/


