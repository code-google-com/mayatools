

/*
 *  Copyright 2010-2013 Fabric Engine Inc. All rights reserved.
 */

/*SPHINX-description
The :ref:`MultiChannelWeightAttributePaintManipulator `

*/


require Singletons;
require InlineDrawing;
require Geometry;


//////////////////////////////////////
// MultiChannelWeightAttributePaintManipulator_PaintData
//

struct MultiChannelWeightAttributePaintManipulator_PaintData {
    PolygonMesh mesh;
    ScalarConstantArrayAttribute weightsAttr;
    UInt16ConstantArrayAttribute indicesAttr;
    ColorAttribute displayAttr;
    Color indexColors[];
    Integer pointIds[];
    LocalL16ScalarArray oldWeightValues[];
    LocalL16UInt32Array oldIndexValues[];
    LocalL16ScalarArray newWeightValues[];
    LocalL16UInt32Array newIndexValues[];
};

function MultiChannelWeightAttributePaintManipulator_PaintData(
  PolygonMesh mesh, 
  ScalarConstantArrayAttribute weightsAttr, 
  UInt16ConstantArrayAttribute indicesAttr, 
  ColorAttribute displayAttr,
  Color indexColors[],
  Integer pointIds[]
){
    this.mesh = mesh;
    this.weightsAttr = weightsAttr;
    this.indicesAttr = indicesAttr;
    this.displayAttr = displayAttr;
    this.indexColors = indexColors;

    this.pointIds = pointIds;
    this.oldWeightValues.resize(pointIds.size);
    this.oldIndexValues.resize(pointIds.size);
    this.newWeightValues.resize(pointIds.size);
    this.newIndexValues.resize(pointIds.size);
}

// Merge the new patin data into the existing paint data to create one set that can be undone/redone
function MultiChannelWeightAttributePaintManipulator_PaintData.mergeIn!(MultiChannelWeightAttributePaintManipulator_PaintData paintData){
    for (Integer i = 0; i < paintData.pointIds.size(); i++) {
        Integer id = -1;
        for (Integer j = 0; j < this.pointIds.size(); j++) {
            if(paintData.pointIds[i] == this.pointIds[j]){
                id = j;
                break;
            }
        }
        if(id != -1){
            this.newWeightValues[id] = paintData.newWeightValues[i];
            this.newIndexValues[id] = paintData.newIndexValues[i];
        }
        else{
            this.pointIds.push(paintData.pointIds[i]);
            this.oldWeightValues.push(paintData.oldWeightValues[i]);
            this.oldIndexValues.push(paintData.oldIndexValues[i]);
            this.newWeightValues.push(paintData.newWeightValues[i]);
            this.newIndexValues.push(paintData.newIndexValues[i]);
        }
    }
}

function MultiChannelWeightAttributePaintManipulator_PaintData.doAction!(){

    Ref<ScalarConstantArrayAttribute> weightsAttrRef = this.weightsAttr;
    Ref<UInt16ConstantArrayAttribute> indicesAttrRef = this.indicesAttr;
    Ref<ColorAttribute> displayAttrRef = this.displayAttr;
    for (Integer i = 0; i < this.pointIds.size(); i++) {
        this.mesh.setPointAttribute(this.pointIds[i], weightsAttrRef, this.newWeightValues[i]);
        this.mesh.setPointAttribute(this.pointIds[i], indicesAttrRef, this.newIndexValues[i]);

        Color color(0.0, 0.0, 0.0, 0.0);
        for (Integer j = 0; j < this.newWeightValues[i].size(); j++) {
            Size index = this.newIndexValues[i].get(j);
            color += this.indexColors[index] * this.newWeightValues[i].get(j);
        }
        this.mesh.setPointAttribute(this.pointIds[i], displayAttrRef, color);
    }
    weightsAttrRef.incrementVersion();
    indicesAttrRef.incrementVersion();
    displayAttrRef.incrementVersion();
}


function MultiChannelWeightAttributePaintManipulator_PaintData.undoAction!(){
    Ref<ScalarConstantArrayAttribute> weightsAttrRef = this.weightsAttr;
    Ref<UInt16ConstantArrayAttribute> indicesAttrRef = this.indicesAttr;
    Ref<ColorAttribute> displayAttrRef = this.displayAttr;
    for (Integer i = 0; i < this.pointIds.size(); i++) {
        this.mesh.setPointAttribute(this.pointIds[i], weightsAttrRef, this.oldWeightValues[i]);
        this.mesh.setPointAttribute(this.pointIds[i], indicesAttrRef, this.oldIndexValues[i]);

        Color color(0.0, 0.0, 0.0, 0.0);
        for (Integer j = 0; j < this.oldWeightValues[i].size(); j++) {
            Size index = this.oldIndexValues[i].get(j);
            color += this.indexColors[index] * this.oldWeightValues[i].get(j);
        }
        this.mesh.setPointAttribute(this.pointIds[i], displayAttrRef, color);
    }
    weightsAttrRef.incrementVersion();
    indicesAttrRef.incrementVersion();
    displayAttrRef.incrementVersion();
}

//////////////////////////////////////
// MultiChannelWeightAttributePaintCommand
// The MultiChannelWeightAttributePaintCommand contains a dictionary of
// MultiChannelWeightAttributePaintManipulator_PaintData object. One for
// each geometry. As a paint stoke moves from one geometry to another
// the paint data is added to the relevant container in the 
// MultiChannelWeightAttributePaintCommand
object MultiChannelWeightAttributePaintCommand : UndoRedoCommand {
    MultiChannelWeightAttributePaintManipulator_PaintData paintData[PolygonMesh];
};

function MultiChannelWeightAttributePaintCommand(){
}

function MultiChannelWeightAttributePaintCommand.doAction!(){
    for(mesh in this.paintData){
        this.paintData[mesh].doAction();
    }
}

function MultiChannelWeightAttributePaintCommand.undoAction!(){
    for(mesh in this.paintData){
        this.paintData[mesh].undoAction();
    }
}

function MultiChannelWeightAttributePaintCommand.addPaintData!(MultiChannelWeightAttributePaintManipulator_PaintData paintData){
    if(this.paintData.has(paintData.mesh)){
        this.paintData[paintData.mesh].mergeIn(paintData); 
    }
    else{
        this.paintData[paintData.mesh] = paintData;
    }
}

//////////////////////////////////////
// Smooth Points


function LocalL16ScalarArray ScalarConstantArrayAttribute_getValue( Scalar values[], Size arraySize, Size index ) {
  LocalL16ScalarArray resultVector;
  resultVector.resize(arraySize);
  for(Size i = 0; i < arraySize; ++i) {
    resultVector.set(i, values[(index*arraySize)+i]);
  }
  return resultVector;
}

function LocalL16UInt32Array UInt16ConstantArrayAttribute_getValue( UInt16 values[], Size arraySize, Size index ) {
  LocalL16UInt32Array resultVector;
  resultVector.resize(arraySize);
  for(Size i = 0; i < arraySize; ++i) {
    resultVector.set(i, values[(index*arraySize)+i]);
  }
  return resultVector;
}

// When modifying a given channel, the other channles must be conpensated, and re-normalized.
function compensateAndNormalizeWeights(io LocalL16ScalarArray result, Integer channel, Scalar delta){
  Scalar sum;
  for(Integer j=0; j<result.size; j++)
    sum += result.get(j);

  if(sum < DIVIDEPRECISION)
    return;
  // Only normalize if the weight is > 1.0
  // in many cases(such as skinning), this won't
  // be desirable, so potentially should be an option.
  if(sum < 1.0)
    return;

  // When adding data to one channel, we remove weighting from the other channels
  // else due to normalization, the weight of a given channel can never reach 1.0.
  sum = 0.0;
  Scalar appliedDelta = delta/Scalar(result.size);
  for(Integer j=0; j<result.size; j++){
    Scalar value = result.get(j);
    if(j!=channel){
      value = value - appliedDelta;
      if(value < 0.0)
        value = 0.0;
      else if(value > 1.0)// Can happen when subtracting weights. 
        value = 1.0;
      result.set(j, value);
    }
    sum += value;
  }

  // Now normalize the weghts. 
  for(Integer j=0; j<result.size; j++){
    result.set(j, result.get(j) / sum);
  }
}


  // find the channel of the index we are modifying.
  // If no channel is bound to the currently painted index, then replace the lowest weighted channel.
function Integer findOrSetChannel(Integer currentIndex, io LocalL16ScalarArray weights, io LocalL16UInt32Array indices){
  Integer channel = -1;
  Integer minWeightChannel = 0;
  Scalar minWeight = 999.0;
  Scalar oldValue;
  for(Integer j=0; j<4; j++){
    if(indices.get(j) == currentIndex)
        channel = j;
    if(weights.get(j) < minWeight){
        minWeightChannel = j;
        minWeight = weights.get(j);
    }
  }
  // If this vertex is not currently weighted to the current index, then we replace the minimum weighted index with this new one. 
  if(channel == -1){
    channel = minWeightChannel;
    oldValue = weights.get(channel);
    indices.set(channel, currentIndex);
    weights.set(channel, 0.0);
  }
  return channel;
}


operator smoothMultiChannelWeightValues<<<index>>>(
  PolygonMesh mesh,
  Scalar weightsAttrValues[],
  UInt16 indicesAttrValues[],
  Integer arraySize,
  Integer currentIndex,
  SurfacePaintManipulator_PointCollection collectedPoints,
  io MultiChannelWeightAttributePaintManipulator_PaintData paintData
 ) {

  //Pseudo-gaussian: center weight = 0.5, neighbor weights sum = 0.5
  Index pointId = collectedPoints.pointIds[index];
  Scalar paintWeight = collectedPoints.weights[index];
  LocalL16ScalarArray oldWeights = ScalarConstantArrayAttribute_getValue(weightsAttrValues, arraySize, pointId);
  LocalL16UInt32Array oldIndices = UInt16ConstantArrayAttribute_getValue(indicesAttrValues, arraySize, pointId);
  LocalL16ScalarArray newWeights = oldWeights;
  LocalL16UInt32Array newIndices = oldIndices;

  Integer channel = findOrSetChannel(currentIndex, newWeights, newIndices);
  Scalar oldValue = oldWeights.get(channel);
  Scalar newValue = oldValue;

  LocalL16UInt32Array surroundingPoints;
  mesh.getPointSurroundingPoints(pointId, false, surroundingPoints);
  UInt32 nbNei = surroundingPoints.size();
  
  if( nbNei ) {
    Scalar neiSum = 0.0;
    for( UInt32 i = 0; i < nbNei; ++i ) {
      UInt32 neiPt = surroundingPoints.get(i);

      LocalL16ScalarArray neiWeights = ScalarConstantArrayAttribute_getValue(weightsAttrValues, arraySize, neiPt);
      LocalL16UInt32Array neiIndices = UInt16ConstantArrayAttribute_getValue(indicesAttrValues, arraySize, neiPt);

      // find the channel of the index we are modifying.
      // If no channel is bound to the currently painted index, then replace the lowest weighted channel.
      Integer neiChannel = -1;
      for(Integer j=0; j<4; j++){
          if(neiIndices.get(j) == currentIndex)
              neiChannel = j;
      }
      // If this vertex is not currently weighted to the current index, then we replace the minimum weighted index with this new one. 
      if(neiChannel == -1){
        continue;
      }

      neiSum += neiWeights.get(neiChannel);
    }
    neiSum /= Scalar(nbNei);
    newValue = Math_linearInterpolate(newValue, (newValue + neiSum) * 0.5, paintWeight);
  }

  newWeights.set(channel, newValue);
  compensateAndNormalizeWeights(newWeights, channel, newValue - oldValue);


  paintData.oldWeightValues[index] = oldWeights;
  paintData.oldIndexValues[index] = oldIndices;
  paintData.newWeightValues[index] = newWeights;
  paintData.newIndexValues[index] = newIndices;
}


///////////////////////////////////////////////
// MultiChannelWeightAttributePaintManipulator_Callback

object MultiChannelWeightAttributePaintManipulator_Callback : SurfacePaintManipulator_Callback {
    Integer paintMode;
    String weightsAttributeName;
    String indicesAttributeName;
    String displayAttributeName;
    Integer numChannelsPerVertex;

    MultiChannelWeightAttributePaintCommand command;

    Integer currentIndex;
    Color indexColors[];
};

function MultiChannelWeightAttributePaintManipulator_Callback.onStrokeBegin!(io MouseEvent mouseEvent){

    // On MouseMove/Mousedown.
    if(mouseEvent.button == MouseButton_LeftButton)
        this.paintMode = 0; // Paint
    else if(mouseEvent.button == MouseButton_RightButton)
        this.paintMode = 1; // Erase
    else if(mouseEvent.button == MouseButton_MiddleButton)
        this.paintMode = 2; // Smooth

    this.command = MultiChannelWeightAttributePaintCommand();
    mouseEvent.accept();
}

function MultiChannelWeightAttributePaintManipulator_Callback.onStrokeEnd!(io MouseEvent mouseEvent){
    // Register a command only if painting actually occured.
    // There should be at least one geometry added to the paint data. 
    if(this.command.paintData.size() > 0)
        mouseEvent.getHost().addUndoRedoCommand(this.command);
}




function MultiChannelWeightAttributePaintManipulator_Callback.onPaint!(SurfacePaintManipulator_PointCollection collectedPoints){

    Ref<ScalarConstantArrayAttribute> weightsAttr = collectedPoints.mesh.getAttribute(this.weightsAttributeName);
    Ref<UInt16ConstantArrayAttribute> indicesAttr = collectedPoints.mesh.getAttribute(this.indicesAttributeName);

    if(weightsAttr == null){
        report("ERROR: Geometry Does not have the attribute:" + this.weightsAttributeName );
        return;
    }
    if(indicesAttr == null){
        report("ERROR: Geometry Does not have the attribute:" + this.indicesAttributeName );
        return;
    }
    if(weightsAttr.arraySize != this.numChannelsPerVertex || indicesAttr.arraySize != this.numChannelsPerVertex ){
        report("ERROR: Weights attribute array size does not match indices attribute array size" );
        return;
    }

    Ref<ColorAttribute> displayAttr = collectedPoints.mesh.getAttribute(this.displayAttributeName);

    MultiChannelWeightAttributePaintManipulator_PaintData paintData(collectedPoints.mesh, weightsAttr, indicesAttr, displayAttr, this.indexColors, collectedPoints.pointIds);

    switch(this.paintMode){
    case 0: // Paint
        for (Integer i = 0; i < collectedPoints.pointIds.size(); i++) {
            Scalar paintWeight = collectedPoints.weights[i];
            Integer pointId = collectedPoints.pointIds[i];
            LocalL16ScalarArray oldWeights = ScalarConstantArrayAttribute_getValue(weightsAttr.values, this.numChannelsPerVertex, pointId);
            LocalL16UInt32Array oldIndices = UInt16ConstantArrayAttribute_getValue(indicesAttr.values, this.numChannelsPerVertex, pointId);
            LocalL16ScalarArray newWeights = oldWeights;
            LocalL16UInt32Array newIndices = oldIndices;

            Integer channel = findOrSetChannel(this.currentIndex, newWeights, newIndices);
            Scalar oldValue = oldWeights.get(channel); 
            Scalar newValue = Math_linearInterpolate(oldValue, Scalar(1.0), paintWeight);

            newWeights.set(channel, newValue);
            compensateAndNormalizeWeights(newWeights, channel, newValue - oldValue);

            paintData.oldWeightValues[i] = oldWeights;
            paintData.oldIndexValues[i] = oldIndices;
            paintData.newWeightValues[i] = newWeights;
            paintData.newIndexValues[i] = newIndices;
        }
        break;
    case 1: // Erase
        for (Integer i = 0; i < collectedPoints.pointIds.size(); i++) {
            Scalar paintWeight = collectedPoints.weights[i];
            Integer pointId = collectedPoints.pointIds[i];
            LocalL16ScalarArray oldWeights = ScalarConstantArrayAttribute_getValue(weightsAttr.values, this.numChannelsPerVertex, pointId);
            LocalL16UInt32Array oldIndices = UInt16ConstantArrayAttribute_getValue(indicesAttr.values, this.numChannelsPerVertex, pointId);
            LocalL16ScalarArray newWeights = oldWeights;
            LocalL16UInt32Array newIndices = oldIndices;

            Integer channel = findOrSetChannel(this.currentIndex, newWeights, newIndices);
            Scalar oldValue = oldWeights.get(channel); 
            Scalar newValue = Math_linearInterpolate(oldValue, Scalar(0.0), paintWeight);

            newWeights.set(channel, newValue);
            compensateAndNormalizeWeights(newWeights, channel, newValue - oldValue);

            paintData.oldWeightValues[i] = oldWeights;
            paintData.oldIndexValues[i] = oldIndices;
            paintData.newWeightValues[i] = newWeights;
            paintData.newIndexValues[i] = newIndices;
        }
        break;
    case 2: // Smooth
        UInt32 nbPoints = collectedPoints.pointIds.size();
        smoothMultiChannelWeightValues<<<nbPoints>>>(
            collectedPoints.mesh,
            weightsAttr.values,
            indicesAttr.values,
            this.numChannelsPerVertex,
            this.currentIndex,
            collectedPoints,
            paintData
        );
        break;
    }
    // do the command immedietly...
    paintData.doAction();
    // Merge this paintData with the command so that we only generate one undo command 
    // for the entire paint stroke, even if we cross multipel geometries. 
    this.command.addPaintData(paintData);
}

///////////////////////////////////////////////
// MultiChannelWeightAttributePaintManipulator

object MultiChannelWeightAttributePaintManipulator : Manipulator {

    SurfacePaintManipulator surfacePaintManipulator;
    String weightsAttributeName;
    String indicesAttributeName;
    String displayAttributeName;

    Integer numChannelsPerVertex;
    Integer currentIndex;
    Color indexColors[];

    MultiChannelWeightAttributePaintManipulator_Callback callback;
};


function MultiChannelWeightAttributePaintManipulator(){

    this.surfacePaintManipulator = SurfacePaintManipulator();
    this.callback = MultiChannelWeightAttributePaintManipulator_Callback();

    this.surfacePaintManipulator.setCallbackObj(this.callback);

    this.weightsAttributeName = 'weights';
    this.indicesAttributeName = 'indices';
    this.displayAttributeName = 'vertexColors';//String(this.type()) + '_displayAttribute' + this.weightsAttributeName;
    this.numChannelsPerVertex = 4;
}

function MultiChannelWeightAttributePaintManipulator.setAttributeName!(String weightsAttributeName, String indicesAttributeName, Size numChannelsPerVertex){
    this.weightsAttributeName = weightsAttributeName;
    this.indicesAttributeName = indicesAttributeName;
    this.numChannelsPerVertex = numChannelsPerVertex;
}


function MultiChannelWeightAttributePaintManipulator.setActiveChannel!( Size currentIndex){
    this.currentIndex = currentIndex;
    this.callback.currentIndex = this.currentIndex;
}

function MultiChannelWeightAttributePaintManipulator.setIndexColors!(Color indexColors[]){
    this.indexColors = indexColors;
}

function MultiChannelWeightAttributePaintManipulator.onEnable!(){
    if(this.currentIndex >= this.indexColors.size){
        report("WARNING: currentIndex >= this.indexColors.size.");
    }

    this.surfacePaintManipulator.onEnable();

    if(this.weightsAttributeName == ""){
        report("WARNING: No paint attribute set.");
    }
    // Check that all the target geometries support the geometry attribute.
    for(Integer i=0; i< this.surfacePaintManipulator.targetGeometries.size(); i++){
        InlineShape shape = this.surfacePaintManipulator.targetGeometries[i].getShape();
        PolygonMesh mesh = shape.getGeometry();
        if(mesh == null){
            report("WARNING: Geometry is not a PolygonMesh:" + this.surfacePaintManipulator.targetGeometries[i].getName() );
            continue;
        }
        Ref<ScalarConstantArrayAttribute> weightsAttr = mesh.getAttribute(this.weightsAttributeName);
        if(weightsAttr == null){
            report("WARNING: Geometry: " + this.surfacePaintManipulator.targetGeometries[i].getName() + " Does not have the attribute:" + this.weightsAttributeName );
        }
        Ref<UInt16ConstantArrayAttribute> indicesAttr = mesh.getAttribute(this.indicesAttributeName);
        if(indicesAttr == null){
            report("WARNING: Geometry: " + this.surfacePaintManipulator.targetGeometries[i].getName() + " Does not have the attribute:" + this.indicesAttributeName );
        }
        Ref<ColorAttribute> displayAttr = mesh.getAttribute(this.displayAttributeName);
        if(displayAttr == null){
            report("WARNING: Geometry: " + this.surfacePaintManipulator.targetGeometries[i].getName() + " Does not have the attribute:" + this.displayAttributeName );
        }
    }
    this.callback.weightsAttributeName = this.weightsAttributeName;
    this.callback.indicesAttributeName = this.indicesAttributeName;
    this.callback.displayAttributeName = this.displayAttributeName;
    this.callback.numChannelsPerVertex = this.numChannelsPerVertex;

    this.callback.currentIndex = this.currentIndex;
    this.callback.indexColors = this.indexColors;
}

function MultiChannelWeightAttributePaintManipulator.onDisable!(){
    this.surfacePaintManipulator.onDisable();
}

function MultiChannelWeightAttributePaintManipulator.addTargetGeometry!(InlineInstance instance){

    this.surfacePaintManipulator.addTargetGeometry(instance);

    for(Integer i=0; i<this.surfacePaintManipulator.targetGeometries.size; i++){
        InlineShape shape = this.surfacePaintManipulator.targetGeometries[i].getShape();
        PolygonMesh mesh = shape.getGeometry();

        Ref<ScalarConstantArrayAttribute> weightsAttr = mesh.getOrCreateAttribute(this.weightsAttributeName, ScalarConstantArrayAttribute);
        weightsAttr.setArraySize(this.numChannelsPerVertex);

        Ref<UInt16ConstantArrayAttribute> indicesAttr = mesh.getOrCreateAttribute(this.indicesAttributeName, UInt16ConstantArrayAttribute);
        indicesAttr.setArraySize(this.numChannelsPerVertex);

        Ref<ColorAttribute> displayAttr = mesh.getOrCreateAttribute(this.displayAttributeName, ColorAttribute);
    }
}

function MultiChannelWeightAttributePaintManipulator.setTargetGeometries!(InlineInstance instances[]){
    this.surfacePaintManipulator.setTargetGeometries(instances);
}

function MultiChannelWeightAttributePaintManipulator.onEvent!(io Event event){
    this.surfacePaintManipulator.onEvent(event);

    if(event.type() == KeyEvent){
      KeyEvent keyEvent = event;
      if(keyEvent.key >= Key_Key_0 && keyEvent.key <= Key_Key_9 && keyEvent.key - Key_Key_0 > this.numChannelsPerVertex ){
        this.currentIndex = keyEvent.key - Key_Key_0;
        this.callback.currentIndex = this.currentIndex;
        event.getHost().requestRedraw();
        event.accept();
      }
    }
}
