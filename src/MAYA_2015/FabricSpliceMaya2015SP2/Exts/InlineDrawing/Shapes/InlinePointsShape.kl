/*
 *  Copyright 2010-2013 Fabric Engine Inc. All rights reserved.
 */

/*SPHINX-description
.. versionadded:: 1.12.0

The :ref:`inlinepointsshape` implements the :ref:`inlineshape` interface. It provides a shape type for :ref:`points` objects for OpenGL direct rendering. The :ref:`inlinepointsshape` keeps a reference to the points, so if the points change (being deformed etc) the shape will updates its buffers automatically.

Example
---------

.. code-block:: kl

    // create some points
    Points points = Points();
    points.addPoints(12);

    // create a shape
    InlineShape shape = InlinePointsShape('points', points);
*/

require Geometry;

object InlinePointsShape : InlineShape {
  String _name;
  Points _points;
  Scalar _pointSize;
  Object _metaData[String];
  Ref<InlineShapeAdaptor> _shapeAdaptor;
};

// returns the name of the shape
function String InlinePointsShape.getName() {
  return this._name;
}

// default constructor, taking a name and a Points
function InlinePointsShape(String name, Points points) {
  this._name = name;
  this._points = points;
  this._pointSize = 3;
}

  // Returns the geometry associated with this shape. 
function Geometry InlinePointsShape.getGeometry() {
  return this._points;
}

// returns the Points used by this shape
function Points InlinePointsShape.getPoints() {
  return this._points;
}

// returns the point size used for rendering
function Scalar InlinePointsShape.getPointSize() {
  return this._pointSize;
}

// sets the point size used for rendering
function InlinePointsShape.setPointSize!(Scalar pointSize) {
  this._pointSize = pointSize;
}

// stores an arbitrary meta data object on the Shape
function InlinePointsShape.setMetaData!(String key, Object metaData){
  this._metaData[key] = metaData;
}

// retrieves meta data from the Shape
function Object InlinePointsShape.getMetaData(String key){
  Object nullObj = null;
  return this._metaData.get(key, nullObj);
}

// draws the instance on screen. this is used by the 
// material and should not be called manually.
function Boolean InlinePointsShape._draw!(io DrawContext context, Index index, Size count) {

  if(!this._shapeAdaptor) {
    InlineDrawing drawing = context.getObject('drawing');
    this._shapeAdaptor = drawing.getShapeAdaptor(this.type());
  }
  Ref<InlineShape> thisShape = this;
  if(!this._shapeAdaptor || !this._shapeAdaptor._draw(context, thisShape, index, count))
    return false;

  return true;
}

