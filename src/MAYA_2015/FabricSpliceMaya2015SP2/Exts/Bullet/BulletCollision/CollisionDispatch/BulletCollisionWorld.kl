
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */



///CollisionWorld is interface and container for the collision detection
interface BulletCollisionWorld
{
	//this constructor doesn't own the dispatcher and paircache/broadphase
	// btCollisionWorld(btDispatcher* dispatcher, btBroadphaseInterface* broadphasePairCache, btCollisionConfiguration* collisionConfiguration);

	// ~btCollisionWorld();

	setBroadphase!(BulletBroadphaseInterface	pairCache);

	BulletBroadphaseInterface	getBroadphase();

	// btOverlappingPairCache	getPairCache();

	// btDispatcher	getDispatcher();

	// btDispatcher	getDispatcher();

	// updateSingleAabb(BulletICollisionObject colObj);

	// updateAabbs();
	
	// setDebugDrawer(btIDebugDraw	debugDrawer);

	// btIDebugDraw	getDebugDrawer();

	// debugDrawWorld();

	// void debugDrawObject(Xfo worldTransform, btCollisionShape shape, Vec3 color);

	Integer	getNumCollisionObjects();

	// /// rayTest performs a raycast on all objects in the btCollisionWorld, and calls the resultCallback
	// /// This allows for several queries: first hit, all hits, any hit, dependent on the value returned by the callback.
	// rayTest(Vec3 rayFromWorld, Vec3 rayToWorld, RayResultCallback resultCallback)  

	// /// convexTest performs a swept convex cast on all objects in the btCollisionWorld, and calls the resultCallback
	// /// This allows for several queries: first hit, all hits, any hit, dependent on the value return by the callback.
	// convexSweepTest (btConvexShape castShape, Xfo from, Xfo to, ConvexResultCallback resultCallback,  Scalar allowedCcdPenetration = Scalar(0.));

	// ///contactTest performs a discrete collision test between colObj against all objects in the btCollisionWorld, and calls the resultCallback.
	// ///it reports one or more contact points for every overlapping object (including the one with deepest penetration)
	// contactTest(BulletICollisionObject colObj, ContactResultCallback resultCallback);

	// ///contactTest performs a discrete collision test between two collision objects and calls the resultCallback if overlap if detected.
	// ///it reports one or more contact points (including the one with deepest penetration)
	// contactPairTest(BulletICollisionObject colObjA, BulletICollisionObject colObjB, ContactResultCallback resultCallback);


	// /// rayTestSingle performs a raycast call and calls the resultCallback. It is used internally by rayTest.
	// /// In a future implementation, we consider moving the ray test as a method in btCollisionShape.
	// /// This allows more customization.
	// static rayTestSingle(Xfo rayFromTrans, Xfo rayToTrans,
	// 				  BulletICollisionObject collisionObject,
	// 				  btCollisionShape collisionShape,
	// 				  Xfo colObjWorldTransform,
	// 				  RayResultCallback resultCallback);

	// /// objectQuerySingle performs a collision detection query and calls the resultCallback. It is used internally by rayTest.
	// static objectQuerySingle(btConvexShape castShape, Xfo rayFromTrans,Xfo rayToTrans,
	// 				  BulletICollisionObject collisionObject,
	// 				  btCollisionShape collisionShape,
	// 				  Xfo colObjWorldTransform,
	// 				  ConvexResultCallback resultCallback, Scalar	allowedPenetration);

	addCollisionObject!(BulletICollisionObject collisionObject);
	// addCollisionObject(BulletICollisionObject collisionObject, SInt16 collisionFilterGroup, SInt16 collisionFilterMask);

	BulletICollisionObject[] getCollisionObjectArray();

	removeCollisionObject!(BulletICollisionObject collisionObject);

	// performDiscreteCollisionDetection();

	// btDispatcherInfo getDispatchInfo();

	// btDispatcherInfo getDispatchInfo();
	
	// Boolean	getForceUpdateAllAabbs();
	// void setForceUpdateAllAabbs( Boolean forceUpdateAllAabbs);

	// ///Preliminary serialization test for Bullet 2.76. Loading those files requires a separate parser (Bullet/Demos/SerializeDemo)
	// virtual	serialize(btSerializer serializer);

};

