/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicCameraSample {
  Data handle;
};

function AlembicCameraSample() = "AlembicCameraSample_construct";
function ~AlembicCameraSample() = "AlembicCameraSample_free";

function AlembicCameraSample(Float64 top, Float64 bottom, Float64 left, Float64 right) = "AlembicCameraSample_construct4Args";

function AlembicCameraSample.getScreenWindow?(io Float64 top, io Float64 bottom, io Float64 left, io Float64 right) = "AlembicCameraSample_getScreenWindow";
function Float64 AlembicCameraSample.getFocalLength() = "AlembicCameraSample_getFocalLength";
function AlembicCameraSample.setFocalLength!(Float64 value) = "AlembicCameraSample_setFocalLength";
function Float64 AlembicCameraSample.getHorizontalAperture() = "AlembicCameraSample_getHorizontalAperture";
function AlembicCameraSample.setHorizontalAperture!(Float64 value) = "AlembicCameraSample_setHorizontalAperture";
function Float64 AlembicCameraSample.getHorizontalFilmOffset() = "AlembicCameraSample_getHorizontalFilmOffset";
function AlembicCameraSample.setHorizontalFilmOffset!(Float64 value) = "AlembicCameraSample_setHorizontalFilmOffset";
function Float64 AlembicCameraSample.getVerticalAperture() = "AlembicCameraSample_getVerticalAperture";
function AlembicCameraSample.setVerticalAperture!(Float64 value) = "AlembicCameraSample_setVerticalAperture";
function Float64 AlembicCameraSample.getVerticalFilmOffset() = "AlembicCameraSample_getVerticalFilmOffset";
function AlembicCameraSample.setVerticalFilmOffset!(Float64 value) = "AlembicCameraSample_setVerticalFilmOffset";
function Float64 AlembicCameraSample.getLensSqueezeRatio() = "AlembicCameraSample_getLensSqueezeRatio";
function AlembicCameraSample.setLensSqueezeRatio!(Float64 value) = "AlembicCameraSample_setLensSqueezeRatio";
function Float64 AlembicCameraSample.getOverScanLeft() = "AlembicCameraSample_getOverScanLeft";
function AlembicCameraSample.setOverScanLeft!(Float64 value) = "AlembicCameraSample_setOverScanLeft";
function Float64 AlembicCameraSample.getOverScanRight() = "AlembicCameraSample_getOverScanRight";
function AlembicCameraSample.setOverScanRight!(Float64 value) = "AlembicCameraSample_setOverScanRight";
function Float64 AlembicCameraSample.getOverScanTop() = "AlembicCameraSample_getOverScanTop";
function AlembicCameraSample.setOverScanTop!(Float64 value) = "AlembicCameraSample_setOverScanTop";
function Float64 AlembicCameraSample.getOverScanBottom() = "AlembicCameraSample_getOverScanBottom";
function AlembicCameraSample.setOverScanBottom!(Float64 value) = "AlembicCameraSample_setOverScanBottom";
function Float64 AlembicCameraSample.getFStop() = "AlembicCameraSample_getFStop";
function AlembicCameraSample.setFStop!(Float64 value) = "AlembicCameraSample_setFStop";
function Float64 AlembicCameraSample.getFocusDistance() = "AlembicCameraSample_getFocusDistance";
function AlembicCameraSample.setFocusDistance!(Float64 value) = "AlembicCameraSample_setFocusDistance";
function Float64 AlembicCameraSample.getShutterOpen() = "AlembicCameraSample_getShutterOpen";
function AlembicCameraSample.setShutterOpen!(Float64 value) = "AlembicCameraSample_setShutterOpen";
function Float64 AlembicCameraSample.getShutterClose() = "AlembicCameraSample_getShutterClose";
function AlembicCameraSample.setShutterClose!(Float64 value) = "AlembicCameraSample_setShutterClose";
function Float64 AlembicCameraSample.getNearClippingPlane() = "AlembicCameraSample_getNearClippingPlane";
function AlembicCameraSample.setNearClippingPlane!(Float64 value) = "AlembicCameraSample_setNearClippingPlane";
function Float64 AlembicCameraSample.getFarClippingPlane() = "AlembicCameraSample_getFarClippingPlane";
function AlembicCameraSample.setFarClippingPlane!(Float64 value) = "AlembicCameraSample_setFarClippingPlane";
function Box3 AlembicCameraSample.getChildBounds() = "AlembicCameraSample_getChildBounds";
function AlembicCameraSample.setChildBounds!(Box3 childBounds) = "AlembicCameraSample_setChildBounds";
function Float64 AlembicCameraSample.getCoreValue(UInt32 index) = "AlembicCameraSample_getCoreValue";
function Float64 AlembicCameraSample.getFieldOfView() = "AlembicCameraSample_getFieldOfView";
function Mat33 AlembicCameraSample.getFilmBackMatrix() = "AlembicCameraSample_getFilmBackMatrix";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicDataType {
  Data handle;
};

alias UInt32 AlembicPOD;
const AlembicPOD Alembic_kBooleanPOD = 0;
const AlembicPOD Alembic_kUint8POD = 1;
const AlembicPOD Alembic_kInt8POD = 2;
const AlembicPOD Alembic_kUint16POD = 3;
const AlembicPOD Alembic_kInt16POD = 4;
const AlembicPOD Alembic_kUint32POD = 5;
const AlembicPOD Alembic_kInt32POD = 6;
const AlembicPOD Alembic_kUint64POD = 7;
const AlembicPOD Alembic_kInt64POD = 8;
const AlembicPOD Alembic_kFloat16POD = 9;
const AlembicPOD Alembic_kFloat32POD = 10;
const AlembicPOD Alembic_kFloat64POD = 11;
const AlembicPOD Alembic_kStringPOD = 12;
const AlembicPOD Alembic_kWstringPOD = 13;
const AlembicPOD Alembic_kNumPlainOldDataTypes = 14;
const AlembicPOD Alembic_kUnknownPOD = 127;

function AlembicDataType() = "AlembicDataType_construct";
function ~AlembicDataType() = "AlembicDataType_free";

function AlembicDataType(AlembicPOD pod, UInt32 extent) = "AlembicDataType_construct2Args";
inline AlembicDataType(AlembicPOD pod) {
  this = AlembicDataType(pod, 1);
}

function AlembicPOD AlembicDataType.getPod() = "AlembicDataType_getPod";
function String AlembicDataType.getPodName() = "AlembicDataType_getPodName";
function AlembicDataType.setPod!(AlembicPOD pod) = "AlembicDataType_setPod";
function UInt32 AlembicDataType.getExtent() = "AlembicDataType_getExtent";
function AlembicDataType.setExtent!(UInt32 extent) = "AlembicDataType_setExtent";
function UInt32 AlembicDataType.getNumBytes() = "AlembicDataType_getNumBytes";

function Boolean == (AlembicDataType a, AlembicDataType b) = "AlembicDataType_operatorEquals";
function Boolean < (AlembicDataType a, AlembicDataType b) = "AlembicDataType_operatorLess";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

alias UInt32 AlembicGeometryScope;
const AlembicGeometryScope Alembic_kConstantScope = 0;
const AlembicGeometryScope Alembic_kUniformScope = 1;
const AlembicGeometryScope Alembic_kVaryingScope = 2;
const AlembicGeometryScope Alembic_kVertexScope = 3;
const AlembicGeometryScope Alembic_kFacevaryingScope = 4;
const AlembicGeometryScope Alembic_kUnknownScope = 127;
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIArchive {
  Data handle;
};

function AlembicIArchive() = "AlembicIArchive_construct";
function ~AlembicIArchive() = "AlembicIArchive_free";
function Boolean AlembicIArchive.valid() = "AlembicIArchive_valid";
function AlembicIArchive.reset!() = "AlembicIArchive_free";

function AlembicIArchive(in String fileName) = "AlembicIArchive_constructFromString";

function String AlembicIArchive.getName() = "AlembicIArchive_getName";
function AlembicIObject AlembicIArchive.getTop() = "AlembicIArchive_getTop";
function UInt32 AlembicIArchive.getNumTimeSamplings() = "AlembicIArchive_getNumTimeSamplings";
function AlembicTimeSampling AlembicIArchive.getTimeSampling(UInt32 index) = "AlembicIArchive_getTimeSampling";
function UInt32 AlembicIArchive.getMaxNumSamplesForTimeSamplingIndex(UInt32 iIndex) = "AlembicIArchive_getMaxNumSamplesForTimeSamplingIndex";
function UInt32 AlembicIArchive.getArchiveVersion() = "AlembicIArchive_getArchiveVersion";/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIArrayProperty {
  Data handle;
};

function AlembicIArrayProperty() = "AlembicIArrayProperty_construct";
function ~AlembicIArrayProperty() = "AlembicIArrayProperty_free";
function Boolean AlembicIArrayProperty.valid() = "AlembicIArrayProperty_valid";
function AlembicIArrayProperty.reset!() = "AlembicIArrayProperty_free";

function AlembicPropertyHeader AlembicIArrayProperty.getHeader() = "AlembicIArrayProperty_getHeader";
function String AlembicIArrayProperty.getName() = "AlembicIArrayProperty_getName";
function AlembicPropertyType AlembicIArrayProperty.getPropertyType() = "AlembicIArrayProperty_getPropertyType";
function Boolean AlembicIArrayProperty.isScalar() = "AlembicIArrayProperty_isScalar";
function Boolean AlembicIArrayProperty.isArray() = "AlembicIArrayProperty_isArray";
function Boolean AlembicIArrayProperty.isCompound() = "AlembicIArrayProperty_isCompound";
function Boolean AlembicIArrayProperty.isSimple() = "AlembicIArrayProperty_isSimple";
function AlembicMetaData AlembicIArrayProperty.getMetaData() = "AlembicIArrayProperty_getMetaData";
function AlembicDataType AlembicIArrayProperty.getDataType() = "AlembicIArrayProperty_getDataType";
function AlembicTimeSampling AlembicIArrayProperty.getTimeSampling() = "AlembicIArrayProperty_getTimeSampling";
function AlembicIObject AlembicIArrayProperty.getObject() = "AlembicIArrayProperty_getObject";

function AlembicIArrayProperty(AlembicICompoundProperty parent, String name) = "AlembicIArrayProperty_construct2Args";

function UInt32 AlembicIArrayProperty.getNumSamples() = "AlembicIArrayProperty_getNumSamples";
function Boolean AlembicIArrayProperty.isConstant() = "AlembicIArrayProperty_isConstant";
function Boolean AlembicIArrayProperty.isScalarLike() = "AlembicIArrayProperty_isScalarLike";
function AlembicICompoundProperty AlembicIArrayProperty.getParent() = "AlembicIArrayProperty_getParent";

function Boolean[] AlembicIArrayProperty.getAsBoolean() = "AlembicIArrayProperty_getAsBoolean";
function Boolean[] AlembicIArrayProperty.getAsBoolean(AlembicISampleSelector iSS) = "AlembicIArrayProperty_getAsBooleanWithISS";
function UInt8[] AlembicIArrayProperty.getAsUInt8() = "AlembicIArrayProperty_getAsUInt8";
function UInt8[] AlembicIArrayProperty.getAsUInt8(AlembicISampleSelector iSS) = "AlembicIArrayProperty_getAsUInt8WithISS";
function SInt8[] AlembicIArrayProperty.getAsSInt8() = "AlembicIArrayProperty_getAsSInt8";
function SInt8[] AlembicIArrayProperty.getAsSInt8(AlembicISampleSelector iSS) = "AlembicIArrayProperty_getAsSInt8WithISS";
function UInt16[] AlembicIArrayProperty.getAsUInt16() = "AlembicIArrayProperty_getAsUInt16";
function UInt16[] AlembicIArrayProperty.getAsUInt16(AlembicISampleSelector iSS) = "AlembicIArrayProperty_getAsUInt16WithISS";
function SInt16[] AlembicIArrayProperty.getAsSInt16() = "AlembicIArrayProperty_getAsSInt16";
function SInt16[] AlembicIArrayProperty.getAsSInt16(AlembicISampleSelector iSS) = "AlembicIArrayProperty_getAsSInt16WithISS";
function UInt32[] AlembicIArrayProperty.getAsUInt32() = "AlembicIArrayProperty_getAsUInt32";
function UInt32[] AlembicIArrayProperty.getAsUInt32(AlembicISampleSelector iSS) = "AlembicIArrayProperty_getAsUInt32WithISS";
function SInt32[] AlembicIArrayProperty.getAsSInt32() = "AlembicIArrayProperty_getAsSInt32";
function SInt32[] AlembicIArrayProperty.getAsSInt32(AlembicISampleSelector iSS) = "AlembicIArrayProperty_getAsSInt32WithISS";
function UInt64[] AlembicIArrayProperty.getAsUInt64() = "AlembicIArrayProperty_getAsUInt64";
function UInt64[] AlembicIArrayProperty.getAsUInt64(AlembicISampleSelector iSS) = "AlembicIArrayProperty_getAsUInt64WithISS";
function SInt64[] AlembicIArrayProperty.getAsSInt64() = "AlembicIArrayProperty_getAsSInt64";
function SInt64[] AlembicIArrayProperty.getAsSInt64(AlembicISampleSelector iSS) = "AlembicIArrayProperty_getAsSInt64WithISS";
function Float32[] AlembicIArrayProperty.getAsFloat16() = "AlembicIArrayProperty_getAsFloat16";
function Float32[] AlembicIArrayProperty.getAsFloat16(AlembicISampleSelector iSS) = "AlembicIArrayProperty_getAsFloat16WithISS";
function Float32[] AlembicIArrayProperty.getAsFloat32() = "AlembicIArrayProperty_getAsFloat32";
function Float32[] AlembicIArrayProperty.getAsFloat32(AlembicISampleSelector iSS) = "AlembicIArrayProperty_getAsFloat32WithISS";
function Float64[] AlembicIArrayProperty.getAsFloat64() = "AlembicIArrayProperty_getAsFloat64";
function Float64[] AlembicIArrayProperty.getAsFloat64(AlembicISampleSelector iSS) = "AlembicIArrayProperty_getAsFloat64WithISS";
function String[] AlembicIArrayProperty.getAsString() = "AlembicIArrayProperty_getAsString";
function String[] AlembicIArrayProperty.getAsString(AlembicISampleSelector iSS) = "AlembicIArrayProperty_getAsStringWithISS";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicICamera {
  Data handle;
};

function AlembicICamera() = "AlembicICamera_construct";
function ~AlembicICamera() = "AlembicICamera_free";
function Boolean AlembicICamera.valid() = "AlembicICamera_valid";
function AlembicICamera.reset!() = "AlembicICamera_free";

function AlembicICamera(AlembicIObject obj) = "AlembicICamera_constructFromIObject";
function AlembicIObject(AlembicICamera camera) = "AlembicIObject_constructFromICamera";
inline AlembicIObject AlembicICamera.asIObject() { return AlembicIObject(this); }

function Boolean AlembicICamera.matches(AlembicMetaData metaData) = "AlembicICamera_matches";
function AlembicICameraSchema AlembicICamera.getSchema() = "AlembicICamera_getSchema";
function AlembicICompoundProperty AlembicICamera.getProperties() = "AlembicICamera_getProperties";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicICameraSchema {
  Data handle;
};

function AlembicICameraSchema() = "AlembicICameraSchema_construct";
function ~AlembicICameraSchema() = "AlembicICameraSchema_free";
function Boolean AlembicICameraSchema.valid() = "AlembicICameraSchema_valid";
function AlembicICameraSchema.reset!() = "AlembicICameraSchema_free";

function Boolean AlembicICameraSchema.isConstant() = "AlembicICameraSchema_isConstant";
function AlembicICameraSchema.get?(io AlembicCameraSample sample, AlembicISampleSelector ss) = "AlembicICameraSchema_get";
inline AlembicICameraSchema.get?(io AlembicCameraSample sample) { this.get(sample, AlembicISampleSelector(UInt32(0))); }
function AlembicTimeSampling AlembicICameraSchema.getTimeSampling() = "AlembicICameraSchema_getTimeSampling";
function UInt32 AlembicICameraSchema.getNumSamples() = "AlembicICameraSchema_getNumSamples";
function AlembicICompoundProperty AlembicICameraSchema.getArbGeomParams() = "AlembicICameraSchema_getArbGeomParams";
function AlembicICompoundProperty AlembicICameraSchema.getUserProperties() = "AlembicICameraSchema_getUserProperties";
function AlembicIScalarProperty AlembicICameraSchema.getChildBoundsProperty() = "AlembicICameraSchema_getChildBoundsProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicICompoundProperty {
  Data handle;
};

function AlembicICompoundProperty() = "AlembicICompoundProperty_construct";
function ~AlembicICompoundProperty() = "AlembicICompoundProperty_free";
function Boolean AlembicICompoundProperty.valid() = "AlembicICompoundProperty_valid";
function AlembicICompoundProperty.reset!() = "AlembicICompoundProperty_free";

function AlembicICompoundProperty(AlembicICompoundProperty parent, String name) = "AlembicICompoundProperty_construct2Args";

function AlembicPropertyHeader AlembicICompoundProperty.getHeader() = "AlembicICompoundProperty_getHeader";
function String AlembicICompoundProperty.getName() = "AlembicICompoundProperty_getName";
function AlembicPropertyType AlembicICompoundProperty.getPropertyType() = "AlembicICompoundProperty_getPropertyType";
function Boolean AlembicICompoundProperty.isScalar() = "AlembicICompoundProperty_isScalar";
function Boolean AlembicICompoundProperty.isArray() = "AlembicICompoundProperty_isArray";
function Boolean AlembicICompoundProperty.isCompound() = "AlembicICompoundProperty_isCompound";
function Boolean AlembicICompoundProperty.isSimple() = "AlembicICompoundProperty_isSimple";
function AlembicMetaData AlembicICompoundProperty.getMetaData() = "AlembicICompoundProperty_getMetaData";
function AlembicDataType AlembicICompoundProperty.getDataType() = "AlembicICompoundProperty_getDataType";
function AlembicTimeSampling AlembicICompoundProperty.getTimeSampling() = "AlembicICompoundProperty_getTimeSampling";
function AlembicIObject AlembicICompoundProperty.getObject() = "AlembicICompoundProperty_getObject";

function UInt32 AlembicICompoundProperty.getNumProperties() = "AlembicICompoundProperty_getNumProperties";
function AlembicPropertyHeader AlembicICompoundProperty.getPropertyHeader( UInt32 propertyIndex ) = "AlembicICompoundProperty_getPropertyHeader";
function AlembicPropertyHeader AlembicICompoundProperty.getPropertyHeader( String propertyName ) = "AlembicICompoundProperty_getPropertyHeaderByName";
function AlembicICompoundProperty AlembicICompoundProperty.getParent() = "AlembicICompoundProperty_getParent";

/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicICurves {
  Data handle;
};

function AlembicICurves() = "AlembicICurves_construct";
function ~AlembicICurves() = "AlembicICurves_free";
function Boolean AlembicICurves.valid() = "AlembicICurves_valid";
function AlembicICurves.reset!() = "AlembicICurves_free";

function AlembicICurves(AlembicIObject obj) = "AlembicICurves_constructFromIObject";
function AlembicIObject(AlembicICurves curves) = "AlembicIObject_constructFromICurves";

inline AlembicIObject AlembicICurves.asIObject() { return AlembicIObject(this); }

function Boolean AlembicICurves.matches(AlembicMetaData metaData) = "AlembicICurves_matches";
function AlembicICurvesSchema AlembicICurves.getSchema() = "AlembicICurves_getSchema";
function AlembicICompoundProperty AlembicICurves.getProperties() = "AlembicICurves_getProperties";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicICurvesSample {
  Data handle;
};

alias UInt32 AlembicCurvePeriodicity;
const AlembicCurvePeriodicity Alembic_kNonPeriodic = 0;
const AlembicCurvePeriodicity Alembic_kPeriodic = 1;

alias UInt32 AlembicCurveType;
const AlembicCurveType Alembic_kCubic = 0;
const AlembicCurveType Alembic_kLinear = 1;
const AlembicCurveType Alembic_kVariableOrder = 2;

alias UInt32 AlembicBasisType;
const AlembicBasisType Alembic_kNoBasis = 0;
const AlembicBasisType Alembic_kBezierBasis = 1;
const AlembicBasisType Alembic_kBsplineBasis = 2;
const AlembicBasisType Alembic_kCatmullromBasis = 3;
const AlembicBasisType Alembic_kHermiteBasis = 4;
const AlembicBasisType Alembic_kPowerBasis = 5;

function AlembicICurvesSample() = "AlembicICurvesSample_construct";
function ~AlembicICurvesSample() = "AlembicICurvesSample_free";
function Boolean AlembicICurvesSample.valid() = "AlembicICurvesSample_valid";
function AlembicICurvesSample.reset!() = "AlembicICurvesSample_free";

function Vec3<> AlembicICurvesSample.getPositions() = "AlembicICurvesSample_getPositions";
function AlembicCurveType AlembicICurvesSample.getType() = "AlembicICurvesSample_getType";
function AlembicCurvePeriodicity AlembicICurvesSample.getWrap() = "AlembicICurvesSample_getWrap";
function UInt32 AlembicICurvesSample.getNumCurves() = "AlembicICurvesSample_getNumCurves";
function SInt32<> AlembicICurvesSample.getCurvesNumVertices() = "AlembicICurvesSample_getCurvesNumVertices";
function Box3 AlembicICurvesSample.getSelfBounds() = "AlembicICurvesSample_getSelfBounds";
function Vec3<> AlembicICurvesSample.getVelocities() = "AlembicICurvesSample_getVelocities";
function AlembicBasisType AlembicICurvesSample.getBasis() = "AlembicICurvesSample_getBasis";
function Float32<> AlembicICurvesSample.getKnots() = "AlembicICurvesSample_getKnots";
function UInt8<> AlembicICurvesSample.getOrders() = "AlembicICurvesSample_getOrders";

/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicICurvesSchema {
  Data handle;
};

function AlembicICurvesSchema() = "AlembicICurvesSchema_construct";
function ~AlembicICurvesSchema() = "AlembicICurvesSchema_free";
function Boolean AlembicICurvesSchema.valid() = "AlembicICurvesSchema_valid";
function AlembicICurvesSchema.reset!() = "AlembicICurvesSchema_free";

function AlembicMeshTopologyVariance AlembicICurvesSchema.getTopologyVariance() = "AlembicICurvesSchema_getTopologyVariance";
function Boolean AlembicICurvesSchema.isConstant() = "AlembicICurvesSchema_isConstant";
function AlembicICurvesSchema.get?(io AlembicICurvesSample sample, AlembicISampleSelector ss) = "AlembicICurvesSchema_get";
inline AlembicICurvesSchema.get?(io AlembicICurvesSample sample) { this.get(sample, AlembicISampleSelector(UInt32(0))); }
function AlembicTimeSampling AlembicICurvesSchema.getTimeSampling() = "AlembicICurvesSchema_getTimeSampling";
function UInt32 AlembicICurvesSchema.getNumSamples() = "AlembicICurvesSchema_getNumSamples";
function AlembicICompoundProperty AlembicICurvesSchema.getArbGeomParams() = "AlembicICurvesSchema_getArbGeomParams";
function AlembicICompoundProperty AlembicICurvesSchema.getUserProperties() = "AlembicICurvesSchema_getUserProperties";
function AlembicIScalarProperty AlembicICurvesSchema.getChildBoundsProperty() = "AlembicICurvesSchema_getChildBoundsProperty";
function AlembicIVec2VfGeomParam AlembicICurvesSchema.getUVsParam() = "AlembicICurvesSchema_getUVsParam";
function AlembicIVec3NfGeomParam AlembicICurvesSchema.getNormalsParam() = "AlembicICurvesSchema_getNormalsParam";
function AlembicIFloat32GeomParam AlembicICurvesSchema.getWidthsParam() = "AlembicICurvesSchema_getWidthsParam";
function AlembicIArrayProperty AlembicICurvesSchema.getPositionsProperty() = "AlembicICurvesSchema_getPositionsProperty";
function AlembicIArrayProperty AlembicICurvesSchema.getVelocitiesProperty() = "AlembicICurvesSchema_getVelocitiesProperty";
function AlembicIArrayProperty AlembicICurvesSchema.getNumVerticesProperty() = "AlembicICurvesSchema_getNumVerticesProperty";
function AlembicIArrayProperty AlembicICurvesSchema.getOrdersProperty() = "AlembicICurvesSchema_getOrdersProperty";
function AlembicIArrayProperty AlembicICurvesSchema.getKnotsProperty() = "AlembicICurvesSchema_getKnotsProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIFaceSet {
  Data handle;
};

function AlembicIFaceSet() = "AlembicIFaceSet_construct";
function ~AlembicIFaceSet() = "AlembicIFaceSet_free";
function Boolean AlembicIFaceSet.valid() = "AlembicIFaceSet_valid";
function AlembicIFaceSet.reset!() = "AlembicIFaceSet_free";

function AlembicIFaceSetSchema AlembicIFaceSet.getSchema() = "AlembicIFaceSet_getSchema";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIFaceSetSample {
  Data handle;
};

function AlembicIFaceSetSample() = "AlembicIFaceSetSample_construct";
function ~AlembicIFaceSetSample() = "AlembicIFaceSetSample_free";
function Boolean AlembicIFaceSetSample.valid() = "AlembicIFaceSetSample_valid";
function AlembicIFaceSetSample.reset!() = "AlembicIFaceSetSample_free";

function SInt32<> AlembicIFaceSetSample.getFaces() = "AlembicIFaceSetSample_getFaces";
function Box3 AlembicIFaceSetSample.getSelfBounds() = "AlembicIFaceSetSample_getSelfBounds";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIFaceSetSchema {
  Data handle;
};

alias UInt32 AlembicFaceSetExclusivity;
const AlembicFaceSetExclusivity Alembic_kFaceSetNonExclusive = 0;
const AlembicFaceSetExclusivity Alembic_kFaceSetExclusive = 1;

function AlembicIFaceSetSchema() = "AlembicIFaceSetSchema_construct";
function ~AlembicIFaceSetSchema() = "AlembicIFaceSetSchema_free";
function Boolean AlembicIFaceSetSchema.valid() = "AlembicIFaceSetSchema_valid";
function AlembicIFaceSetSchema.reset!() = "AlembicIFaceSetSchema_free";

function Boolean AlembicIFaceSetSchema.isConstant() = "AlembicIFaceSetSchema_isConstant";
function AlembicIFaceSetSchema.get?(io AlembicIFaceSetSample sample, AlembicISampleSelector ss) = "AlembicIFaceSetSchema_get";
inline AlembicIFaceSetSchema.get?(io AlembicIFaceSetSample sample) { this.get(sample, AlembicISampleSelector(UInt32(0))); }
function AlembicTimeSampling AlembicIFaceSetSchema.getTimeSampling() = "AlembicIFaceSetSchema_getTimeSampling";
function UInt32 AlembicIFaceSetSchema.getNumSamples() = "AlembicIFaceSetSchema_getNumSamples";
function AlembicICompoundProperty AlembicIFaceSetSchema.getArbGeomParams() = "AlembicIFaceSetSchema_getArbGeomParams";
function AlembicICompoundProperty AlembicIFaceSetSchema.getUserProperties() = "AlembicIFaceSetSchema_getUserProperties";
function AlembicIScalarProperty AlembicIFaceSetSchema.getChildBoundsProperty() = "AlembicIFaceSetSchema_getChildBoundsProperty";
function AlembicFaceSetExclusivity AlembicIFaceSetSchema.getFaceExclusivity() = "AlembicIFaceSetSchema_getFaceExclusivity";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicILight {
  Data handle;
};

function AlembicILight() = "AlembicILight_construct";
function ~AlembicILight() = "AlembicILight_free";
function Boolean AlembicILight.valid() = "AlembicILight_valid";
function AlembicILight.reset!() = "AlembicILight_free";

function AlembicILight(AlembicIObject obj) = "AlembicILight_constructFromIObject";
function AlembicIObject(AlembicILight light) = "AlembicIObject_constructFromILight";
inline AlembicIObject AlembicILight.asIObject() { return AlembicIObject(this); }

function Boolean AlembicILight.matches(AlembicMetaData metaData) = "AlembicILight_matches";
function AlembicILightSchema AlembicILight.getSchema() = "AlembicILight_getSchema";
function AlembicICompoundProperty AlembicILight.getProperties() = "AlembicILight_getProperties";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicILightSchema {
  Data handle;
};

function AlembicILightSchema() = "AlembicILightSchema_construct";
function ~AlembicILightSchema() = "AlembicILightSchema_free";
function Boolean AlembicILightSchema.valid() = "AlembicILightSchema_valid";
function AlembicILightSchema.reset!() = "AlembicILightSchema_free";

function Boolean AlembicILightSchema.isConstant() = "AlembicILightSchema_isConstant";
function AlembicTimeSampling AlembicILightSchema.getTimeSampling() = "AlembicILightSchema_getTimeSampling";
function UInt32 AlembicILightSchema.getNumSamples() = "AlembicILightSchema_getNumSamples";
function AlembicICompoundProperty AlembicILightSchema.getArbGeomParams() = "AlembicILightSchema_getArbGeomParams";
function AlembicICompoundProperty AlembicILightSchema.getUserProperties() = "AlembicILightSchema_getUserProperties";
function AlembicIScalarProperty AlembicILightSchema.getChildBoundsProperty() = "AlembicILightSchema_getChildBoundsProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicINuPatch {
  Data handle;
};

function AlembicINuPatch() = "AlembicINuPatch_construct";
function ~AlembicINuPatch() = "AlembicINuPatch_free";
function Boolean AlembicINuPatch.valid() = "AlembicINuPatch_valid";
function AlembicINuPatch.reset!() = "AlembicINuPatch_free";

function AlembicINuPatch(AlembicIObject obj) = "AlembicINuPatch_constructFromIObject";
function AlembicIObject(AlembicINuPatch patch) = "AlembicIObject_constructFromINuPatch";
inline AlembicIObject AlembicINuPatch.asIObject() { return AlembicIObject(this); }

function Boolean AlembicINuPatch.matches(AlembicMetaData metaData) = "AlembicINuPatch_matches";
function AlembicICompoundProperty AlembicINuPatch.getProperties() = "AlembicINuPatch_getProperties";
function AlembicINuPatchSchema AlembicINuPatch.getSchema() = "AlembicINuPatch_getSchema";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicINuPatchSample {
  Data handle;
};

function AlembicINuPatchSample() = "AlembicINuPatchSample_construct";
function ~AlembicINuPatchSample() = "AlembicINuPatchSample_free";
function Boolean AlembicINuPatchSample.valid() = "AlembicINuPatchSample_valid";
function AlembicINuPatchSample.reset!() = "AlembicINuPatchSample_free";

function Vec3<> AlembicINuPatchSample.getPositions() = "AlembicINuPatchSample_getPositions";
function Float32<> AlembicINuPatchSample.getPositionWeights() = "AlembicINuPatchSample_getPositionWeights";
function SInt32 AlembicINuPatchSample.getNumU() = "AlembicINuPatchSample_getNumU";
function SInt32 AlembicINuPatchSample.getNumV() = "AlembicINuPatchSample_getNumV";
function SInt32 AlembicINuPatchSample.getUOrder() = "AlembicINuPatchSample_getUOrder";
function SInt32 AlembicINuPatchSample.getVOrder() = "AlembicINuPatchSample_getVOrder";
function Float32<> AlembicINuPatchSample.getUKnot() = "AlembicINuPatchSample_getUKnot";
function Float32<> AlembicINuPatchSample.getVKnot() = "AlembicINuPatchSample_getVKnot";
function Box3 AlembicINuPatchSample.getSelfBounds() = "AlembicINuPatchSample_getSelfBounds";
function Vec3<> AlembicINuPatchSample.getVelocities() = "AlembicINuPatchSample_getVelocities";
function SInt32 AlembicINuPatchSample.getTrimNumLoops() = "AlembicINuPatchSample_getTrimNumLoops";
function SInt32<> AlembicINuPatchSample.getTrimNumCurves() = "AlembicINuPatchSample_getTrimNumCurves";
function SInt32<> AlembicINuPatchSample.getTrimNumVertices() = "AlembicINuPatchSample_getTrimNumVertices";
function SInt32<> AlembicINuPatchSample.getTrimOrders() = "AlembicINuPatchSample_getTrimOrders";
function Float32<> AlembicINuPatchSample.getTrimKnots() = "AlembicINuPatchSample_getTrimKnots";
function Float32<> AlembicINuPatchSample.getTrimMins() = "AlembicINuPatchSample_getTrimMins";
function Float32<> AlembicINuPatchSample.getTrimMaxes() = "AlembicINuPatchSample_getTrimMaxes";
function Float32<> AlembicINuPatchSample.getTrimU() = "AlembicINuPatchSample_getTrimU";
function Float32<> AlembicINuPatchSample.getTrimV() = "AlembicINuPatchSample_getTrimV";
function Float32<> AlembicINuPatchSample.getTrimW() = "AlembicINuPatchSample_getTrimW";
function Boolean AlembicINuPatchSample.hasTrimCurve() = "AlembicINuPatchSample_hasTrimCurve";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicINuPatchSchema {
  Data handle;
};

function AlembicINuPatchSchema() = "AlembicINuPatchSchema_construct";
function ~AlembicINuPatchSchema() = "AlembicINuPatchSchema_free";
function Boolean AlembicINuPatchSchema.valid() = "AlembicINuPatchSchema_valid";
function AlembicINuPatchSchema.reset!() = "AlembicINuPatchSchema_free";

function AlembicMeshTopologyVariance AlembicINuPatchSchema.getTopologyVariance() = "AlembicINuPatchSchema_getTopologyVariance";
function Boolean AlembicINuPatchSchema.isConstant() = "AlembicINuPatchSchema_isConstant";
function AlembicINuPatchSchema.get?(io AlembicINuPatchSample sample, AlembicISampleSelector ss) = "AlembicINuPatchSchema_get";
inline AlembicINuPatchSchema.get?(io AlembicINuPatchSample sample) { this.get(sample, AlembicISampleSelector(UInt32(0))); }
function AlembicTimeSampling AlembicINuPatchSchema.getTimeSampling() = "AlembicINuPatchSchema_getTimeSampling";
function UInt32 AlembicINuPatchSchema.getNumSamples() = "AlembicINuPatchSchema_getNumSamples";
function AlembicICompoundProperty AlembicINuPatchSchema.getArbGeomParams() = "AlembicINuPatchSchema_getArbGeomParams";
function AlembicICompoundProperty AlembicINuPatchSchema.getUserProperties() = "AlembicINuPatchSchema_getUserProperties";
function AlembicIScalarProperty AlembicINuPatchSchema.getChildBoundsProperty() = "AlembicINuPatchSchema_getChildBoundsProperty";
function AlembicIArrayProperty AlembicINuPatchSchema.getPositionsProperty() = "AlembicINuPatchSchema_getPositionsProperty";
function AlembicIArrayProperty AlembicINuPatchSchema.getUKnotsProperty() = "AlembicINuPatchSchema_getUKnotsProperty";
function AlembicIArrayProperty AlembicINuPatchSchema.getVKnotsProperty() = "AlembicINuPatchSchema_getVKnotsProperty";
function AlembicIArrayProperty AlembicINuPatchSchema.getVelocitiesProperty() = "AlembicINuPatchSchema_getVelocitiesProperty";
function AlembicIArrayProperty AlembicINuPatchSchema.getPositionWeightsProperty() = "AlembicINuPatchSchema_getPositionWeightsProperty";
function AlembicIVec2VfGeomParam AlembicINuPatchSchema.getUVsParam() = "AlembicINuPatchSchema_getUVsParam";
function AlembicIVec3NfGeomParam AlembicINuPatchSchema.getNormalsParam() = "AlembicINuPatchSchema_getNormalsParam";
function Boolean AlembicINuPatchSchema.hasTrimCurve() = "AlembicINuPatchSchema_hasTrimCurve";
function Boolean AlembicINuPatchSchema.trimCurveTopologyIsHomogenous() = "AlembicINuPatchSchema_trimCurveTopologyIsHomogenous";
function Boolean AlembicINuPatchSchema.trimCurveTopologyIsConstant() = "AlembicINuPatchSchema_trimCurveTopologyIsConstant";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIObject {
  Data handle;
};

function AlembicIObject() = "AlembicIObject_construct";
function ~AlembicIObject() = "AlembicIObject_free";
function Boolean AlembicIObject.valid() = "AlembicIObject_valid";
function AlembicIObject.reset!() = "AlembicIObject_free";

function String AlembicIObject.getName() = "AlembicIObject_getName";
function String AlembicIObject.getFullName() = "AlembicIObject_getFullName";
function AlembicMetaData AlembicIObject.getMetaData() = "AlembicIObject_getMetaData";
function AlembicIArchive AlembicIObject.getArchive() = "AlembicIObject_getArchive";
function AlembicIObject AlembicIObject.getParent() = "AlembicIObject_getParent";
function UInt32 AlembicIObject.getNumChildren() = "AlembicIObject_getNumChildren";
function AlembicICompoundProperty AlembicIObject.getProperties() = "AlembicIObject_getProperties";
function AlembicIObject AlembicIObject.getChild(UInt32 childIndex ) = "AlembicIObject_getChild";
function AlembicIObject AlembicIObject.getChild(String childName ) = "AlembicIObject_getChild_byName";
function Boolean AlembicIObject.isInstanceRoot() = "AlembicIObject_isInstanceRoot";
function Boolean AlembicIObject.isInstanceDescendant() = "AlembicIObject_isInstanceDescendant";
function String AlembicIObject.instanceSourcePath() = "AlembicIObject_instanceSourcePath";
function Boolean AlembicIObject.isChildInstance(UInt32 childIndex) = "AlembicIObject_isChildInstance";
function Boolean AlembicIObject.isChildInstance(String childName) = "AlembicIObject_isChildInstance_byName";

/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIPoints {
  Data handle;
};

function AlembicIPoints() = "AlembicIPoints_construct";
function ~AlembicIPoints() = "AlembicIPoints_free";
function Boolean AlembicIPoints.valid() = "AlembicIPoints_valid";
function AlembicIPoints.reset!() = "AlembicIPoints_free";

function AlembicIPoints(AlembicIObject obj) = "AlembicIPoints_constructFromIObject";
function AlembicIObject(AlembicIPoints points) = "AlembicIObject_constructFromIPoints";
inline AlembicIObject AlembicIPoints.asIObject() { return AlembicIObject(this); }

function Boolean AlembicIPoints.matches(AlembicMetaData metaData) = "AlembicIPoints_matches";
function AlembicIPointsSchema AlembicIPoints.getSchema() = "AlembicIPoints_getSchema";
function AlembicICompoundProperty AlembicIPoints.getProperties() = "AlembicIPoints_getProperties";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIPointsSample {
  Data handle;
};

function AlembicIPointsSample() = "AlembicIPointsSample_construct";
function ~AlembicIPointsSample() = "AlembicIPointsSample_free";
function Boolean AlembicIPointsSample.valid() = "AlembicIPointsSample_valid";
function AlembicIPointsSample.reset!() = "AlembicIPointsSample_free";

function Vec3<> AlembicIPointsSample.getPositions() = "AlembicIPointsSample_getPositions";
function UInt64<> AlembicIPointsSample.getIds() = "AlembicIPointsSample_getIds";
function Vec3<> AlembicIPointsSample.getVelocities() = "AlembicIPointsSample_getVelocities";
function Box3 AlembicIPointsSample.getSelfBounds() = "AlembicIPointsSample_getSelfBounds";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIPointsSchema {
  Data handle;
};

function AlembicIPointsSchema() = "AlembicIPointsSchema_construct";
function ~AlembicIPointsSchema() = "AlembicIPointsSchema_free";
function Boolean AlembicIPointsSchema.valid() = "AlembicIPointsSchema_valid";
function AlembicIPointsSchema.reset!() = "AlembicIPointsSchema_free";

function Boolean AlembicIPointsSchema.isConstant() = "AlembicIPointsSchema_isConstant";
function AlembicIPointsSchema.get?(io AlembicIPointsSample sample, AlembicISampleSelector ss) = "AlembicIPointsSchema_get";
inline AlembicIPointsSchema.get?(io AlembicIPointsSample sample) { this.get(sample, AlembicISampleSelector(UInt32(0))); }
function AlembicTimeSampling AlembicIPointsSchema.getTimeSampling() = "AlembicIPointsSchema_getTimeSampling";
function UInt32 AlembicIPointsSchema.getNumSamples() = "AlembicIPointsSchema_getNumSamples";
function AlembicICompoundProperty AlembicIPointsSchema.getArbGeomParams() = "AlembicIPointsSchema_getArbGeomParams";
function AlembicICompoundProperty AlembicIPointsSchema.getUserProperties() = "AlembicIPointsSchema_getUserProperties";
function AlembicIScalarProperty AlembicIPointsSchema.getChildBoundsProperty() = "AlembicIPointsSchema_getChildBoundsProperty";
function AlembicIArrayProperty AlembicIPointsSchema.getPositionsProperty() = "AlembicIPointsSchema_getPositionsProperty";
function AlembicIArrayProperty AlembicIPointsSchema.getVelocitiesProperty() = "AlembicIPointsSchema_getVelocitiesProperty";
function AlembicIArrayProperty AlembicIPointsSchema.getIdsProperty() = "AlembicIPointsSchema_getIdsProperty";
function AlembicIFloat32GeomParam AlembicIPointsSchema.getWidthsParam() = "AlembicIPointsSchema_getWidthsParam";/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIPolyMesh {
  Data handle;
};

function AlembicIPolyMesh() = "AlembicIPolyMesh_construct";
function ~AlembicIPolyMesh() = "AlembicIPolyMesh_free";
function Boolean AlembicIPolyMesh.valid() = "AlembicIPolyMesh_valid";
function AlembicIPolyMesh.reset!() = "AlembicIPolyMesh_free";

function AlembicIPolyMesh(AlembicIObject obj) = "AlembicIPolyMesh_constructFromIObject";
function AlembicIObject(AlembicIPolyMesh polyMesh) = "AlembicIObject_constructFromIPolyMesh";

inline AlembicIObject AlembicIPolyMesh.asIObject() { return AlembicIObject(this); }

function Boolean AlembicIPolyMesh.matches(AlembicMetaData metaData) = "AlembicIPolyMesh_matches";
function AlembicICompoundProperty AlembicIPolyMesh.getProperties() = "AlembicIPolyMesh_getProperties";
function AlembicIPolyMeshSchema AlembicIPolyMesh.getSchema() = "AlembicIPolyMesh_getSchema";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIPolyMeshSample {
  Data handle;
};

function AlembicIPolyMeshSample() = "AlembicIPolyMeshSample_construct";
function ~AlembicIPolyMeshSample() = "AlembicIPolyMeshSample_free";
function Boolean AlembicIPolyMeshSample.valid() = "AlembicIPolyMeshSample_valid";
function AlembicIPolyMeshSample.reset!() = "AlembicIPolyMeshSample_free";

function Vec3<> AlembicIPolyMeshSample.getPositions() = "AlembicIPolyMeshSample_getPositions";
function Vec3<> AlembicIPolyMeshSample.getVelocities() = "AlembicIPolyMeshSample_getVelocities";
function Box3 AlembicIPolyMeshSample.getSelfBounds() = "AlembicIPolyMeshSample_getSelfBounds";
function SInt32<> AlembicIPolyMeshSample.getFaceIndices() = "AlembicIPolyMeshSample_getFaceIndices";
function SInt32<> AlembicIPolyMeshSample.getFaceCounts() = "AlembicIPolyMeshSample_getFaceCounts";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIPolyMeshSchema {
  Data handle;
};

alias UInt32 AlembicMeshTopologyVariance;
const AlembicMeshTopologyVariance Alembic_kConstantTopology = 0;
const AlembicMeshTopologyVariance Alembic_kHomogenousTopology = 1;
const AlembicMeshTopologyVariance Alembic_kHeterogenousTopology = 2;

function AlembicIPolyMeshSchema() = "AlembicIPolyMeshSchema_construct";
function ~AlembicIPolyMeshSchema() = "AlembicIPolyMeshSchema_free";
function Boolean AlembicIPolyMeshSchema.valid() = "AlembicIPolyMeshSchema_valid";
function AlembicIPolyMeshSchema.reset!() = "AlembicIPolyMeshSchema_free";

function AlembicMeshTopologyVariance AlembicIPolyMeshSchema.getTopologyVariance() = "AlembicIPolyMeshSchema_getTopologyVariance";
function Boolean AlembicIPolyMeshSchema.isConstant() = "AlembicIPolyMeshSchema_isConstant";
function AlembicIPolyMeshSchema.get?(io AlembicIPolyMeshSample sample, AlembicISampleSelector ss) = "AlembicIPolyMeshSchema_get";
inline AlembicIPolyMeshSchema.get?(io AlembicIPolyMeshSample sample) { this.get(sample, AlembicISampleSelector(UInt32(0))); }
function AlembicTimeSampling AlembicIPolyMeshSchema.getTimeSampling() = "AlembicIPolyMeshSchema_getTimeSampling";
function UInt32 AlembicIPolyMeshSchema.getNumSamples() = "AlembicIPolyMeshSchema_getNumSamples";
function AlembicICompoundProperty AlembicIPolyMeshSchema.getArbGeomParams() = "AlembicIPolyMeshSchema_getArbGeomParams";
function AlembicICompoundProperty AlembicIPolyMeshSchema.getUserProperties() = "AlembicIPolyMeshSchema_getUserProperties";
function AlembicIScalarProperty AlembicIPolyMeshSchema.getChildBoundsProperty() = "AlembicIPolyMeshSchema_getChildBoundsProperty";
function AlembicIVec2VfGeomParam AlembicIPolyMeshSchema.getUVsParam() = "AlembicIPolyMeshSchema_getUVsParam";
function AlembicIVec3NfGeomParam AlembicIPolyMeshSchema.getNormalsParam() = "AlembicIPolyMeshSchema_getNormalsParam";
function AlembicIArrayProperty AlembicIPolyMeshSchema.getFaceCountsProperty() = "AlembicIPolyMeshSchema_getFaceCountsProperty";
function AlembicIArrayProperty AlembicIPolyMeshSchema.getFaceIndicesProperty() = "AlembicIPolyMeshSchema_getFaceIndicesProperty";
function AlembicIArrayProperty AlembicIPolyMeshSchema.getPositionsProperty() = "AlembicIPolyMeshSchema_getPositionsProperty";
function AlembicIArrayProperty AlembicIPolyMeshSchema.getVelocitiesProperty() = "AlembicIPolyMeshSchema_getVelocitiesProperty";
function String[] AlembicIPolyMeshSchema.getFaceSetNames() = "AlembicIPolyMeshSchema_getFaceSetNames";
function AlembicIFaceSet AlembicIPolyMeshSchema.getFaceSet(String name) = "AlembicIPolyMeshSchema_getFaceSet";
function Boolean AlembicIPolyMeshSchema.hasFaceSet(String name) = "AlembicIPolyMeshSchema_hasFaceSet";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicISampleSelector {
  Data handle;
};

alias UInt32 AlembicTimeIndexType;
const AlembicTimeIndexType Alembic_kFloorIndex = 0;
const AlembicTimeIndexType Alembic_kCeilIndex = 1;
const AlembicTimeIndexType Alembic_kNearIndex = 2;

function AlembicISampleSelector() = "AlembicISampleSelector_construct";
function ~AlembicISampleSelector() = "AlembicISampleSelector_free";

function AlembicISampleSelector(UInt32 reqIdx) = "AlembicISampleSelector_constructFromReqIdx";
function AlembicISampleSelector(Float64 reqTime, AlembicTimeIndexType reqIdxType) = "AlembicISampleSelector_constructFromReqTime";
inline AlembicISampleSelector(Float32 reqTime) { this = AlembicISampleSelector(reqTime, Alembic_kNearIndex); }
inline AlembicISampleSelector(Float64 reqTime) { this = AlembicISampleSelector(reqTime, Alembic_kNearIndex); }
inline AlembicISampleSelector(Integer reqIdx) { this = AlembicISampleSelector(UInt32(reqIdx)); }

function UInt32 AlembicISampleSelector.getRequestedIndex() = "AlembicISampleSelector_getRequestedIndex";
function Float64 AlembicISampleSelector.getRequestedTime() = "AlembicISampleSelector_getRequestedTime";
function AlembicTimeIndexType AlembicISampleSelector.getRequestedTimeIndexType() = "AlembicISampleSelector_getRequestedTimeIndexType";
function UInt32 AlembicISampleSelector.getIndex(AlembicTimeSampling timeSampling, UInt32 numSamples) = "AlembicISampleSelector_getIndex";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIScalarProperty {
  Data handle;
};

function AlembicIScalarProperty() = "AlembicIScalarProperty_construct";
function ~AlembicIScalarProperty() = "AlembicIScalarProperty_free";
function Boolean AlembicIScalarProperty.valid() = "AlembicIScalarProperty_valid";
function AlembicIScalarProperty.reset!() = "AlembicIScalarProperty_free";

function AlembicPropertyHeader AlembicIScalarProperty.getHeader() = "AlembicIScalarProperty_getHeader";
function String AlembicIScalarProperty.getName() = "AlembicIScalarProperty_getName";
function AlembicPropertyType AlembicIScalarProperty.getPropertyType() = "AlembicIScalarProperty_getPropertyType";
function Boolean AlembicIScalarProperty.isScalar() = "AlembicIScalarProperty_isScalar";
function Boolean AlembicIScalarProperty.isArray() = "AlembicIScalarProperty_isArray";
function Boolean AlembicIScalarProperty.isCompound() = "AlembicIScalarProperty_isCompound";
function Boolean AlembicIScalarProperty.isSimple() = "AlembicIScalarProperty_isSimple";
function AlembicMetaData AlembicIScalarProperty.getMetaData() = "AlembicIScalarProperty_getMetaData";
function AlembicDataType AlembicIScalarProperty.getDataType() = "AlembicIScalarProperty_getDataType";
function AlembicTimeSampling AlembicIScalarProperty.getTimeSampling() = "AlembicIScalarProperty_getTimeSampling";
function AlembicIObject AlembicIScalarProperty.getObject() = "AlembicIScalarProperty_getObject";

function AlembicIScalarProperty(AlembicICompoundProperty parent, String name) = "AlembicIScalarProperty_construct2Args";

function UInt32 AlembicIScalarProperty.getNumSamples() = "AlembicIScalarProperty_getNumSamples";
function Boolean AlembicIScalarProperty.isConstant() = "AlembicIScalarProperty_isConstant";
function AlembicICompoundProperty AlembicIScalarProperty.getParent() = "AlembicIScalarProperty_getParent";

function Boolean[] AlembicIScalarProperty.getAsBoolean() = "AlembicIScalarProperty_getAsBoolean";
function Boolean[] AlembicIScalarProperty.getAsBoolean(AlembicISampleSelector iSS) = "AlembicIScalarProperty_getAsBooleanWithISS";
function UInt8[] AlembicIScalarProperty.getAsUInt8() = "AlembicIScalarProperty_getAsUInt8";
function UInt8[] AlembicIScalarProperty.getAsUInt8(AlembicISampleSelector iSS) = "AlembicIScalarProperty_getAsUInt8WithISS";
function SInt8[] AlembicIScalarProperty.getAsSInt8() = "AlembicIScalarProperty_getAsSInt8";
function SInt8[] AlembicIScalarProperty.getAsSInt8(AlembicISampleSelector iSS) = "AlembicIScalarProperty_getAsSInt8WithISS";
function UInt16[] AlembicIScalarProperty.getAsUInt16() = "AlembicIScalarProperty_getAsUInt16";
function UInt16[] AlembicIScalarProperty.getAsUInt16(AlembicISampleSelector iSS) = "AlembicIScalarProperty_getAsUInt16WithISS";
function SInt16[] AlembicIScalarProperty.getAsSInt16() = "AlembicIScalarProperty_getAsSInt16";
function SInt16[] AlembicIScalarProperty.getAsSInt16(AlembicISampleSelector iSS) = "AlembicIScalarProperty_getAsSInt16WithISS";
function UInt32[] AlembicIScalarProperty.getAsUInt32() = "AlembicIScalarProperty_getAsUInt32";
function UInt32[] AlembicIScalarProperty.getAsUInt32(AlembicISampleSelector iSS) = "AlembicIScalarProperty_getAsUInt32WithISS";
function SInt32[] AlembicIScalarProperty.getAsSInt32() = "AlembicIScalarProperty_getAsSInt32";
function SInt32[] AlembicIScalarProperty.getAsSInt32(AlembicISampleSelector iSS) = "AlembicIScalarProperty_getAsSInt32WithISS";
function UInt64[] AlembicIScalarProperty.getAsUInt64() = "AlembicIScalarProperty_getAsUInt64";
function UInt64[] AlembicIScalarProperty.getAsUInt64(AlembicISampleSelector iSS) = "AlembicIScalarProperty_getAsUInt64WithISS";
function SInt64[] AlembicIScalarProperty.getAsSInt64() = "AlembicIScalarProperty_getAsSInt64";
function SInt64[] AlembicIScalarProperty.getAsSInt64(AlembicISampleSelector iSS) = "AlembicIScalarProperty_getAsSInt64WithISS";
function Float32[] AlembicIScalarProperty.getAsFloat16() = "AlembicIScalarProperty_getAsFloat16";
function Float32[] AlembicIScalarProperty.getAsFloat16(AlembicISampleSelector iSS) = "AlembicIScalarProperty_getAsFloat16WithISS";
function Float32[] AlembicIScalarProperty.getAsFloat32() = "AlembicIScalarProperty_getAsFloat32";
function Float32[] AlembicIScalarProperty.getAsFloat32(AlembicISampleSelector iSS) = "AlembicIScalarProperty_getAsFloat32WithISS";
function Float64[] AlembicIScalarProperty.getAsFloat64() = "AlembicIScalarProperty_getAsFloat64";
function Float64[] AlembicIScalarProperty.getAsFloat64(AlembicISampleSelector iSS) = "AlembicIScalarProperty_getAsFloat64WithISS";
function String[] AlembicIScalarProperty.getAsString() = "AlembicIScalarProperty_getAsString";
function String[] AlembicIScalarProperty.getAsString(AlembicISampleSelector iSS) = "AlembicIScalarProperty_getAsStringWithISS";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicISubD {
  Data handle;
};

function AlembicISubD() = "AlembicISubD_construct";
function ~AlembicISubD() = "AlembicISubD_free";
function Boolean AlembicISubD.valid() = "AlembicISubD_valid";
function AlembicISubD.reset!() = "AlembicISubD_free";

function AlembicISubD(AlembicIObject obj) = "AlembicISubD_constructFromIObject";
function AlembicIObject(AlembicISubD subd) = "AlembicIObject_constructFromISubD";
inline AlembicIObject AlembicISubD.asIObject() { return AlembicIObject(this); }

function Boolean AlembicISubD.matches(AlembicMetaData metaData) = "AlembicISubD_matches";
function AlembicICompoundProperty AlembicISubD.getProperties() = "AlembicISubD_getProperties";
function AlembicISubDSchema AlembicISubD.getSchema() = "AlembicISubD_getSchema";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicISubDSample {
  Data handle;
};

function AlembicISubDSample() = "AlembicISubDSample_construct";
function ~AlembicISubDSample() = "AlembicISubDSample_free";
function Boolean AlembicISubDSample.valid() = "AlembicISubDSample_valid";
function AlembicISubDSample.reset!() = "AlembicISubDSample_free";

function Vec3<> AlembicISubDSample.getPositions() = "AlembicISubDSample_getPositions";
function SInt32<> AlembicISubDSample.getFaceIndices() = "AlembicISubDSample_getFaceIndices";
function SInt32<> AlembicISubDSample.getFaceCounts() = "AlembicISubDSample_getFaceCounts";
function SInt32 AlembicISubDSample.getFaceVaryingInterpolateBoundary() = "AlembicISubDSample_getFaceVaryingInterpolateBoundary";
function SInt32 AlembicISubDSample.getFaceVaryingPropagateCorners() = "AlembicISubDSample_getFaceVaryingPropagateCorners";
function SInt32 AlembicISubDSample.getInterpolateBoundary() = "AlembicISubDSample_getInterpolateBoundary";
function SInt32<> AlembicISubDSample.getCreaseIndices() = "AlembicISubDSample_getCreaseIndices";
function SInt32<> AlembicISubDSample.getCreaseLengths() = "AlembicISubDSample_getCreaseLengths";
function Float32<> AlembicISubDSample.getCreaseSharpnesses() = "AlembicISubDSample_getCreaseSharpnesses";
function SInt32<> AlembicISubDSample.getCornerIndices() = "AlembicISubDSample_getCornerIndices";
function Float32<> AlembicISubDSample.getCornerSharpnesses() = "AlembicISubDSample_getCornerSharpnesses";
function SInt32<> AlembicISubDSample.getHoles() = "AlembicISubDSample_getHoles";
function String AlembicISubDSample.getSubdivisionScheme() = "AlembicISubDSample_getSubdivisionScheme";
function Box3 AlembicISubDSample.getSelfBounds() = "AlembicISubDSample_getSelfBounds";
function Vec3<> AlembicISubDSample.getVelocities() = "AlembicISubDSample_getVelocities";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicISubDSchema {
  Data handle;
};

function AlembicISubDSchema() = "AlembicISubDSchema_construct";
function ~AlembicISubDSchema() = "AlembicISubDSchema_free";
function Boolean AlembicISubDSchema.valid() = "AlembicISubDSchema_valid";
function AlembicISubDSchema.reset!() = "AlembicISubDSchema_free";

function AlembicMeshTopologyVariance AlembicISubDSchema.getTopologyVariance() = "AlembicISubDSchema_getTopologyVariance";
function Boolean AlembicISubDSchema.isConstant() = "AlembicISubDSchema_isConstant";
function AlembicISubDSchema.get?(io AlembicISubDSample sample, AlembicISampleSelector ss) = "AlembicISubDSchema_get";
inline AlembicISubDSchema.get?(io AlembicISubDSample sample) { this.get(sample, AlembicISampleSelector(UInt32(0))); }
function AlembicTimeSampling AlembicISubDSchema.getTimeSampling() = "AlembicISubDSchema_getTimeSampling";
function UInt32 AlembicISubDSchema.getNumSamples() = "AlembicISubDSchema_getNumSamples";
function AlembicICompoundProperty AlembicISubDSchema.getArbGeomParams() = "AlembicISubDSchema_getArbGeomParams";
function AlembicICompoundProperty AlembicISubDSchema.getUserProperties() = "AlembicISubDSchema_getUserProperties";
function AlembicIScalarProperty AlembicISubDSchema.getChildBoundsProperty() = "AlembicISubDSchema_getChildBoundsProperty";
function AlembicIVec2VfGeomParam AlembicISubDSchema.getUVsParam() = "AlembicISubDSchema_getUVsParam";
function AlembicIArrayProperty AlembicISubDSchema.getFaceCountsProperty() = "AlembicISubDSchema_getFaceCountsProperty";
function AlembicIArrayProperty AlembicISubDSchema.getFaceIndicesProperty() = "AlembicISubDSchema_getFaceIndicesProperty";
function AlembicIArrayProperty AlembicISubDSchema.getPositionsProperty() = "AlembicISubDSchema_getPositionsProperty";
function AlembicIArrayProperty AlembicISubDSchema.getVelocitiesProperty() = "AlembicISubDSchema_getVelocitiesProperty";
function AlembicIScalarProperty AlembicISubDSchema.getFaceVaryingInterpolateBoundaryProperty() = "AlembicISubDSchema_getFaceVaryingInterpolateBoundaryProperty";
function AlembicIScalarProperty AlembicISubDSchema.getFaceVaryingPropagateCornersProperty() = "AlembicISubDSchema_getFaceVaryingPropagateCornersProperty";
function AlembicIScalarProperty AlembicISubDSchema.getInterpolateBoundaryProperty() = "AlembicISubDSchema_getInterpolateBoundaryProperty";
function AlembicIArrayProperty AlembicISubDSchema.getCreaseIndicesProperty() = "AlembicISubDSchema_getCreaseIndicesProperty";
function AlembicIArrayProperty AlembicISubDSchema.getCreaseLengthsProperty() = "AlembicISubDSchema_getCreaseLengthsProperty";
function AlembicIArrayProperty AlembicISubDSchema.getCreaseSharpnessesProperty() = "AlembicISubDSchema_getCreaseSharpnessesProperty";
function AlembicIArrayProperty AlembicISubDSchema.getCornerIndicesProperty() = "AlembicISubDSchema_getCornerIndicesProperty";
function AlembicIArrayProperty AlembicISubDSchema.getCornerSharpnessesProperty() = "AlembicISubDSchema_getCornerSharpnessesProperty";
function AlembicIArrayProperty AlembicISubDSchema.getHolesProperty() = "AlembicISubDSchema_getHolesProperty";
function AlembicIScalarProperty AlembicISubDSchema.getSubdivisionSchemeProperty() = "AlembicISubDSchema_getSubdivisionSchemeProperty";
function String[] AlembicISubDSchema.getFaceSetNames() = "AlembicISubDSchema_getFaceSetNames";
function AlembicIFaceSet AlembicISubDSchema.getFaceSet(String name) = "AlembicISubDSchema_getFaceSet";
function Boolean AlembicISubDSchema.hasFaceSet(String name) = "AlembicISubDSchema_hasFaceSet";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIXform {
  Data handle;
};

function AlembicIXform() = "AlembicIXform_construct";
function ~AlembicIXform() = "AlembicIXform_free";
function Boolean AlembicIXform.valid() = "AlembicIXform_valid";
function AlembicIXform.reset!() = "AlembicIXform_free";

function AlembicIXform(AlembicIObject obj) = "AlembicIXform_constructFromIObject";
function AlembicIObject(AlembicIXform xform) = "AlembicIObject_constructFromIXform";
inline AlembicIObject AlembicIXform.asIObject() { return AlembicIObject(this); }

function Boolean AlembicIXform.matches(AlembicMetaData metaData) = "AlembicIXform_matches";
function AlembicICompoundProperty AlembicIXform.getProperties() = "AlembicIXform_getProperties";
function AlembicIXformSchema AlembicIXform.getSchema() = "AlembicIXform_getSchema";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicIXformSchema {
  Data handle;
};

function AlembicIXformSchema() = "AlembicIXformSchema_construct";
function ~AlembicIXformSchema() = "AlembicIXformSchema_free";
function Boolean AlembicIXformSchema.valid() = "AlembicIXformSchema_valid";
function AlembicIXformSchema.reset!() = "AlembicIXformSchema_free";

function Boolean AlembicIXformSchema.isConstant() = "AlembicIXformSchema_isConstant";
function Boolean AlembicIXformSchema.isConstantIdentity() = "AlembicIXformSchema_isConstantIdentity";
function AlembicIXformSchema.get?(io AlembicXformSample sample, AlembicISampleSelector ss) = "AlembicIXformSchema_get";
inline AlembicIXformSchema.get?(io AlembicXformSample sample) { this.get(sample, AlembicISampleSelector(0)); }
function AlembicTimeSampling AlembicIXformSchema.getTimeSampling() = "AlembicIXformSchema_getTimeSampling";
function UInt32 AlembicIXformSchema.getNumSamples() = "AlembicIXformSchema_getNumSamples";
function AlembicICompoundProperty AlembicIXformSchema.getArbGeomParams() = "AlembicIXformSchema_getArbGeomParams";
function AlembicICompoundProperty AlembicIXformSchema.getUserProperties() = "AlembicIXformSchema_getUserProperties";
function AlembicIScalarProperty AlembicIXformSchema.getChildBoundsProperty() = "AlembicIXformSchema_getChildBoundsProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicMetaData {
  Data handle;
};

function AlembicMetaData() = "AlembicMetaData_construct";
function ~AlembicMetaData() = "AlembicMetaData_free";

function AlembicMetaData.deserialize!(String from) = "AlembicMetaData_deserialize";
function String AlembicMetaData.serialize() = "AlembicMetaData_serialize";
function UInt32 AlembicMetaData.size() = "AlembicMetaData_size";
function String[] AlembicMetaData.keys() = "AlembicMetaData_keys";
function AlembicMetaData.set!(String key, String data) = "AlembicMetaData_set";
function AlembicMetaData.setUnique!(String key, String data) = "AlembicMetaData_setUnique";
function String AlembicMetaData.get(String key) = "AlembicMetaData_get";
function String AlembicMetaData.getRequired(String key) = "AlembicMetaData_getRequired";
function AlembicMetaData.append!(AlembicMetaData metaData) = "AlembicMetaData_append";
function AlembicMetaData.appendUnique!(AlembicMetaData metaData) = "AlembicMetaData_appendUnique";
function Boolean AlembicMetaData.matches(AlembicMetaData metaData) = "AlembicMetaData_matches";
function Boolean AlembicMetaData.matchesOverlap(AlembicMetaData metaData) = "AlembicMetaData_matchesOverlap";
function Boolean AlembicMetaData.matchesExactly(AlembicMetaData metaData) = "AlembicMetaData_matchesExactly";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOArchive {
  Data handle;
};

function AlembicOArchive() = "AlembicOArchive_construct";
function ~AlembicOArchive() = "AlembicOArchive_free";
function Boolean AlembicOArchive.valid() = "AlembicOArchive_valid";
function AlembicOArchive.reset!() = "AlembicOArchive_free";

function AlembicOArchive(in String coreType, in String fileName) = "AlembicOArchive_constructFrom2Args";
inline AlembicOArchive(in String fileName) {
  this = AlembicOArchive('Ogawa', fileName);
}

function String AlembicOArchive.getName() = "AlembicOArchive_getName";
function AlembicOObject AlembicOArchive.getTop() = "AlembicOArchive_getTop";
function UInt32 AlembicOArchive.addTimeSampling!(AlembicTimeSampling timeSampling) = "AlembicOArchive_addTimeSampling";
function UInt32 AlembicOArchive.getNumTimeSamplings() = "AlembicOArchive_getNumTimeSamplings";
function AlembicTimeSampling AlembicOArchive.getTimeSampling(UInt32 index) = "AlembicOArchive_getTimeSampling";
function UInt32 AlembicOArchive.getCompressionHint() = "AlembicOArchive_getCompressionHint";
function AlembicOArchive.setCompressionHint!(UInt32 hint) = "AlembicOArchive_setCompressionHint";/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOArrayProperty {
  Data handle;
};

function AlembicOArrayProperty() = "AlembicOArrayProperty_construct";
function ~AlembicOArrayProperty() = "AlembicOArrayProperty_free";
function Boolean AlembicOArrayProperty.valid() = "AlembicOArrayProperty_valid";
function AlembicOArrayProperty.reset!() = "AlembicOArrayProperty_free";

function AlembicPropertyHeader AlembicOArrayProperty.getHeader() = "AlembicOArrayProperty_getHeader";
function String AlembicOArrayProperty.getName() = "AlembicOArrayProperty_getName";
function AlembicPropertyType AlembicOArrayProperty.getPropertyType() = "AlembicOArrayProperty_getPropertyType";
function Boolean AlembicOArrayProperty.isScalar() = "AlembicOArrayProperty_isScalar";
function Boolean AlembicOArrayProperty.isArray() = "AlembicOArrayProperty_isArray";
function Boolean AlembicOArrayProperty.isCompound() = "AlembicOArrayProperty_isCompound";
function Boolean AlembicOArrayProperty.isSimple() = "AlembicOArrayProperty_isSimple";
function AlembicMetaData AlembicOArrayProperty.getMetaData() = "AlembicOArrayProperty_getMetaData";
function AlembicDataType AlembicOArrayProperty.getDataType() = "AlembicOArrayProperty_getDataType";
function AlembicTimeSampling AlembicOArrayProperty.getTimeSampling() = "AlembicOArrayProperty_getTimeSampling";
function AlembicOObject AlembicOArrayProperty.getObject() = "AlembicOArrayProperty_getObject";

function AlembicOArrayProperty(AlembicOCompoundProperty parent, String name, AlembicDataType dataType) = "AlembicOArrayProperty_construct3Args";

function UInt32 AlembicOArrayProperty.getNumSamples() = "AlembicOArrayProperty_getNumSamples";
function AlembicOCompoundProperty AlembicOArrayProperty.getParent() = "AlembicOArrayProperty_getParent";
function AlembicOArrayProperty.setTimeSampling!(UInt32 index) = "AlembicOArrayProperty_setTimeSampling";

function AlembicOArrayProperty.setFromPrevious!() = "AlembicOArrayProperty_setFromPrevious";
function AlembicOArrayProperty.setAsBoolean!(Boolean values<>) = "AlembicOArrayProperty_setAsBoolean";
function AlembicOArrayProperty.setAsUInt8!(UInt8 values<>) = "AlembicOArrayProperty_setAsUInt8";
function AlembicOArrayProperty.setAsSInt8!(SInt8 values<>) = "AlembicOArrayProperty_setAsSInt8";
function AlembicOArrayProperty.setAsUInt16!(UInt16 values<>) = "AlembicOArrayProperty_setAsUInt16";
function AlembicOArrayProperty.setAsSInt16!(SInt16 values<>) = "AlembicOArrayProperty_setAsSInt16";
function AlembicOArrayProperty.setAsUInt32!(UInt32 values<>) = "AlembicOArrayProperty_setAsUInt32";
function AlembicOArrayProperty.setAsSInt32!(SInt32 values<>) = "AlembicOArrayProperty_setAsSInt32";
function AlembicOArrayProperty.setAsUInt64!(UInt64 values<>) = "AlembicOArrayProperty_setAsUInt64";
function AlembicOArrayProperty.setAsSInt64!(SInt64 values<>) = "AlembicOArrayProperty_setAsSInt64";
function AlembicOArrayProperty.setAsFloat16!(Float32 values<>) = "AlembicOArrayProperty_setAsFloat16";
function AlembicOArrayProperty.setAsFloat32!(Float32 values<>) = "AlembicOArrayProperty_setAsFloat32";
function AlembicOArrayProperty.setAsFloat64!(Float64 values<>) = "AlembicOArrayProperty_setAsFloat64";
function AlembicOArrayProperty.setAsString!(String values<>) = "AlembicOArrayProperty_setAsString";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOCamera {
  Data handle;
};

function AlembicOCamera() = "AlembicOCamera_construct";
function ~AlembicOCamera() = "AlembicOCamera_free";
function Boolean AlembicOCamera.valid() = "AlembicOCamera_valid";
function AlembicOCamera.reset!() = "AlembicOCamera_free";

function AlembicOCamera(AlembicOObject parent, String name, UInt32 timeSampling) = "AlembicOCamera_construct3Args";
function AlembicOObject(AlembicOCamera camera) = "AlembicOObject_constructFromOCamera";
inline AlembicOObject AlembicOCamera.asOObject() { return AlembicOObject(this); }

function Boolean AlembicOCamera.matches(AlembicMetaData metaData) = "AlembicOCamera_matches";
function AlembicOCameraSchema AlembicOCamera.getSchema() = "AlembicOCamera_getSchema";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOCameraSchema {
  Data handle;
};

function AlembicOCameraSchema() = "AlembicOCameraSchema_construct";
function ~AlembicOCameraSchema() = "AlembicOCameraSchema_free";
function Boolean AlembicOCameraSchema.valid() = "AlembicOCameraSchema_valid";
function AlembicOCameraSchema.reset!() = "AlembicOCameraSchema_free";

function AlembicTimeSampling AlembicOCameraSchema.getTimeSampling() = "AlembicOCameraSchema_getTimeSampling";
function UInt32 AlembicOCameraSchema.getNumSamples() = "AlembicOCameraSchema_getNumSamples";
function AlembicOCameraSchema.set!(AlembicCameraSample sample) = "AlembicOCameraSchema_set";
function AlembicOCameraSchema.setFromPrevious!() = "AlembicOCameraSchema_setFromPrevious";
function AlembicOCameraSchema.setTimeSampling!(UInt32 index) = "AlembicOCameraSchema_setTimeSampling";
function AlembicOCompoundProperty AlembicOCameraSchema.getArbGeomParams() = "AlembicOCameraSchema_getArbGeomParams";
function AlembicOCompoundProperty AlembicOCameraSchema.getUserProperties() = "AlembicOCameraSchema_getUserProperties";
function AlembicOScalarProperty AlembicOCameraSchema.getChildBoundsProperty() = "AlembicOCameraSchema_getChildBoundsProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOCompoundProperty {
  Data handle;
};

function AlembicOCompoundProperty() = "AlembicOCompoundProperty_construct";
function ~AlembicOCompoundProperty() = "AlembicOCompoundProperty_free";
function Boolean AlembicOCompoundProperty.valid() = "AlembicOCompoundProperty_valid";
function AlembicOCompoundProperty.reset!() = "AlembicOCompoundProperty_free";

function AlembicOCompoundProperty(AlembicOCompoundProperty parent, String name) = "AlembicOCompoundProperty_construct2Args";

function AlembicPropertyHeader AlembicOCompoundProperty.getHeader() = "AlembicOCompoundProperty_getHeader";
function String AlembicOCompoundProperty.getName() = "AlembicOCompoundProperty_getName";
function AlembicPropertyType AlembicOCompoundProperty.getPropertyType() = "AlembicOCompoundProperty_getPropertyType";
function Boolean AlembicOCompoundProperty.isScalar() = "AlembicOCompoundProperty_isScalar";
function Boolean AlembicOCompoundProperty.isArray() = "AlembicOCompoundProperty_isArray";
function Boolean AlembicOCompoundProperty.isCompound() = "AlembicOCompoundProperty_isCompound";
function Boolean AlembicOCompoundProperty.isSimple() = "AlembicOCompoundProperty_isSimple";
function AlembicMetaData AlembicOCompoundProperty.getMetaData() = "AlembicOCompoundProperty_getMetaData";
function AlembicDataType AlembicOCompoundProperty.getDataType() = "AlembicOCompoundProperty_getDataType";
function AlembicTimeSampling AlembicOCompoundProperty.getTimeSampling() = "AlembicOCompoundProperty_getTimeSampling";
function AlembicOObject AlembicOCompoundProperty.getObject() = "AlembicOCompoundProperty_getObject";

function UInt32 AlembicOCompoundProperty.getNumProperties() = "AlembicOCompoundProperty_getNumProperties";
function AlembicPropertyHeader AlembicOCompoundProperty.getPropertyHeader( UInt32 propertyIndex ) = "AlembicOCompoundProperty_getPropertyHeader";
function AlembicPropertyHeader AlembicOCompoundProperty.getPropertyHeader( String propertyName ) = "AlembicOCompoundProperty_getPropertyHeaderByName";
function AlembicOCompoundProperty AlembicOCompoundProperty.getParent() = "AlembicOCompoundProperty_getParent";

/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOCurves {
  Data handle;
};

function AlembicOCurves() = "AlembicOCurves_construct";
function ~AlembicOCurves() = "AlembicOCurves_free";
function Boolean AlembicOCurves.valid() = "AlembicOCurves_valid";
function AlembicOCurves.reset!() = "AlembicOCurves_free";

function AlembicOCurves(AlembicOObject parent, String name, UInt32 timeSampling) = "AlembicOCurves_construct3Args";
function AlembicOObject(AlembicOCurves curves) = "AlembicOObject_constructFromOCurves";

inline AlembicOObject AlembicOCurves.asOObject() { return AlembicOObject(this); }

function Boolean AlembicOCurves.matches(AlembicMetaData metaData) = "AlembicOCurves_matches";
function AlembicOCurvesSchema AlembicOCurves.getSchema() = "AlembicOCurves_getSchema";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOCurvesSample {
  Data handle;
};

function AlembicOCurvesSample() = "AlembicOCurvesSample_construct";
function ~AlembicOCurvesSample() = "AlembicOCurvesSample_free";

function AlembicOFloat32GeomParamSample AlembicOCurvesSample.getWidths() = "AlembicOCurvesSample_getWidths";
function AlembicOCurvesSample.setWidths!(AlembicOFloat32GeomParamSample values) = "AlembicOCurvesSample_setWidths";
function Vec3<> AlembicOCurvesSample.getPositions() = "AlembicOCurvesSample_getPositions";
function AlembicOCurvesSample.setPositions!(Vec3 values<>) = "AlembicOCurvesSample_setPositions";
function AlembicOCurvesSample.setType!(AlembicCurveType curveType) = "AlembicOCurvesSample_setType";
function AlembicCurveType AlembicOCurvesSample.getType() = "AlembicOCurvesSample_getType";
function AlembicOCurvesSample.setWrap!(AlembicCurvePeriodicity wrap) = "AlembicOCurvesSample_setWrap";
function AlembicCurvePeriodicity AlembicOCurvesSample.getWrap() = "AlembicOCurvesSample_getWrap";
function UInt32 AlembicOCurvesSample.getNumCurves() = "AlembicOCurvesSample_getNumCurves";
function AlembicOCurvesSample.setCurvesNumVertices!(SInt32 values<>) = "AlembicOCurvesSample_setCurvesNumVertices";
function SInt32<> AlembicOCurvesSample.getCurvesNumVertices() = "AlembicOCurvesSample_getCurvesNumVertices";
function AlembicOVec2VfGeomParamSample AlembicOCurvesSample.getUVs() = "AlembicOCurvesSample_getUVs";
function AlembicOCurvesSample.setUVs!(AlembicOVec2VfGeomParamSample values) = "AlembicOCurvesSample_setUVs";
function Box3 AlembicOCurvesSample.getSelfBounds() = "AlembicOCurvesSample_getSelfBounds";
function AlembicOCurvesSample.setSelfBounds!(Box3 bounds) = "AlembicOCurvesSample_setSelfBounds";
function Vec3<> AlembicOCurvesSample.getVelocities() = "AlembicOCurvesSample_getVelocities";
function AlembicOCurvesSample.setVelocities!(Vec3 values<>) = "AlembicOCurvesSample_setVelocities";
function AlembicOVec3NfGeomParamSample AlembicOCurvesSample.getNormals() = "AlembicOCurvesSample_getNormals";
function AlembicOCurvesSample.setNormals!(AlembicOVec3NfGeomParamSample values) = "AlembicOCurvesSample_setNormals";
function AlembicOCurvesSample.setBasis!(AlembicBasisType basis) = "AlembicOCurvesSample_setBasis";
function AlembicBasisType AlembicOCurvesSample.getBasis() = "AlembicOCurvesSample_getBasis";
function AlembicOCurvesSample.setKnots!(Float32 values<>) = "AlembicOCurvesSample_setKnots";
function Float32<> AlembicOCurvesSample.getKnots() = "AlembicOCurvesSample_getKnots";
function AlembicOCurvesSample.setOrders!(UInt8 values<>) = "AlembicOCurvesSample_setOrders";
function UInt8<> AlembicOCurvesSample.getOrders() = "AlembicOCurvesSample_getOrders";

/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOCurvesSchema {
  Data handle;
};

function AlembicOCurvesSchema() = "AlembicOCurvesSchema_construct";
function ~AlembicOCurvesSchema() = "AlembicOCurvesSchema_free";
function Boolean AlembicOCurvesSchema.valid() = "AlembicOCurvesSchema_valid";
function AlembicOCurvesSchema.reset!() = "AlembicOCurvesSchema_free";

function AlembicTimeSampling AlembicOCurvesSchema.getTimeSampling() = "AlembicOCurvesSchema_getTimeSampling";
function UInt32 AlembicOCurvesSchema.getNumSamples() = "AlembicOCurvesSchema_getNumSamples";
function AlembicOCurvesSchema.set!(AlembicOCurvesSample sample) = "AlembicOCurvesSchema_set";
function AlembicOCurvesSchema.setFromPrevious!() = "AlembicOCurvesSchema_setFromPrevious";
function AlembicOCurvesSchema.setTimeSampling!(UInt32 index) = "AlembicOCurvesSchema_setTimeSampling";
function AlembicOCompoundProperty AlembicOCurvesSchema.getArbGeomParams() = "AlembicOCurvesSchema_getArbGeomParams";
function AlembicOCompoundProperty AlembicOCurvesSchema.getUserProperties() = "AlembicOCurvesSchema_getUserProperties";
function AlembicOScalarProperty AlembicOCurvesSchema.getChildBoundsProperty() = "AlembicOCurvesSchema_getChildBoundsProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOFaceSet {
  Data handle;
};

function AlembicOFaceSet() = "AlembicOFaceSet_construct";
function ~AlembicOFaceSet() = "AlembicOFaceSet_free";
function Boolean AlembicOFaceSet.valid() = "AlembicOFaceSet_valid";
function AlembicOFaceSet.reset!() = "AlembicOFaceSet_free";

function AlembicOFaceSetSchema AlembicOFaceSet.getSchema() = "AlembicOFaceSet_getSchema";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOFaceSetSample {
  Data handle;
};

function AlembicOFaceSetSample() = "AlembicOFaceSetSample_construct";
function ~AlembicOFaceSetSample() = "AlembicOFaceSetSample_free";

function AlembicOFaceSetSample(SInt32 faces<>) = "AlembicOFaceSetSample_constructFromFaces";

function SInt32<> AlembicOFaceSetSample.getFaces() = "AlembicOFaceSetSample_getFaces";
function AlembicOFaceSetSample.setFaces!(SInt32 values<>) = "AlembicOFaceSetSample_setFaces";
function Box3 AlembicOFaceSetSample.getSelfBounds() = "AlembicOFaceSetSample_getSelfBounds";
function AlembicOFaceSetSample.setSelfBounds!(Box3 bounds) = "AlembicOFaceSetSample_setSelfBounds";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOFaceSetSchema {
  Data handle;
};

function AlembicOFaceSetSchema() = "AlembicOFaceSetSchema_construct";
function ~AlembicOFaceSetSchema() = "AlembicOFaceSetSchema_free";
function Boolean AlembicOFaceSetSchema.valid() = "AlembicOFaceSetSchema_valid";
function AlembicOFaceSetSchema.reset!() = "AlembicOFaceSetSchema_free";

function UInt32 AlembicOFaceSetSchema.getNumSamples() = "AlembicOFaceSetSchema_getNumSamples";
function AlembicOFaceSetSchema.set!(AlembicOFaceSetSample sample) = "AlembicOFaceSetSchema_set";
function AlembicOFaceSetSchema.setTimeSampling!(UInt32 index) = "AlembicOFaceSetSchema_setTimeSampling";
function AlembicOFaceSetSchema.setFaceExclusivity!(AlembicFaceSetExclusivity facesExclusive) = "AlembicOFaceSetSchema_setFaceExclusivity";
function AlembicFaceSetExclusivity AlembicOFaceSetSchema.getFaceExclusivity() = "AlembicOFaceSetSchema_getFaceExclusivity";
function AlembicOCompoundProperty AlembicOFaceSetSchema.getArbGeomParams() = "AlembicOFaceSetSchema_getArbGeomParams";
function AlembicOCompoundProperty AlembicOFaceSetSchema.getUserProperties() = "AlembicOFaceSetSchema_getUserProperties";
function AlembicOScalarProperty AlembicOFaceSetSchema.getChildBoundsProperty() = "AlembicOFaceSetSchema_getChildBoundsProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOLight {
  Data handle;
};

function AlembicOLight() = "AlembicOLight_construct";
function ~AlembicOLight() = "AlembicOLight_free";
function Boolean AlembicOLight.valid() = "AlembicOLight_valid";
function AlembicOLight.reset!() = "AlembicOLight_free";

function AlembicOLight(AlembicOObject parent, String name, UInt32 timeSampling) = "AlembicOLight_construct3Args";
function AlembicOObject(AlembicOLight light) = "AlembicOObject_constructFromOLight";
inline AlembicOObject AlembicOLight.asOObject() { return AlembicOObject(this); }

function Boolean AlembicOLight.matches(AlembicMetaData metaData) = "AlembicOLight_matches";
function AlembicOLightSchema AlembicOLight.getSchema() = "AlembicOLight_getSchema";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOLightSchema {
  Data handle;
};

function AlembicOLightSchema() = "AlembicOLightSchema_construct";
function ~AlembicOLightSchema() = "AlembicOLightSchema_free";
function Boolean AlembicOLightSchema.valid() = "AlembicOLightSchema_valid";
function AlembicOLightSchema.reset!() = "AlembicOLightSchema_free";

function AlembicTimeSampling AlembicOLightSchema.getTimeSampling() = "AlembicOLightSchema_getTimeSampling";
function UInt32 AlembicOLightSchema.getNumSamples() = "AlembicOLightSchema_getNumSamples";
function AlembicOLightSchema.setTimeSampling!(UInt32 index) = "AlembicOLightSchema_setTimeSampling";
function AlembicOCompoundProperty AlembicOLightSchema.getArbGeomParams() = "AlembicOLightSchema_getArbGeomParams";
function AlembicOCompoundProperty AlembicOLightSchema.getUserProperties() = "AlembicOLightSchema_getUserProperties";
function AlembicOScalarProperty AlembicOLightSchema.getChildBoundsProperty() = "AlembicOLightSchema_getChildBoundsProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicONuPatch {
  Data handle;
};

function AlembicONuPatch() = "AlembicONuPatch_construct";
function ~AlembicONuPatch() = "AlembicONuPatch_free";
function Boolean AlembicONuPatch.valid() = "AlembicONuPatch_valid";
function AlembicONuPatch.reset!() = "AlembicONuPatch_free";

function AlembicONuPatch(AlembicOObject parent, String name, UInt32 timeSampling) = "AlembicONuPatch_construct3Args";
function AlembicOObject(AlembicONuPatch patch) = "AlembicOObject_constructFromONuPatch";
inline AlembicOObject AlembicONuPatch.asOObject() { return AlembicOObject(this); }

function Boolean AlembicONuPatch.matches(AlembicMetaData metaData) = "AlembicONuPatch_matches";
function AlembicONuPatchSchema AlembicONuPatch.getSchema() = "AlembicONuPatch_getSchema";

/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicONuPatchSample {
  Data handle;
};

function AlembicONuPatchSample() = "AlembicONuPatchSample_construct";
function ~AlembicONuPatchSample() = "AlembicONuPatchSample_free";

function Vec3<> AlembicONuPatchSample.getPositions() = "AlembicONuPatchSample_getPositions";
function AlembicONuPatchSample.setPositions!(Vec3 values<>) = "AlembicONuPatchSample_setPositions";
function Float32<> AlembicONuPatchSample.getPositionWeights() = "AlembicONuPatchSample_getPositionWeights";
function AlembicONuPatchSample.setPositionWeights!(Float32 values<>) = "AlembicONuPatchSample_setPositionWeights";
function SInt32 AlembicONuPatchSample.getNu() = "AlembicONuPatchSample_getNu";
function AlembicONuPatchSample.setNu!(SInt32 value) = "AlembicONuPatchSample_setNu";
function SInt32 AlembicONuPatchSample.getNv() = "AlembicONuPatchSample_getNv";
function AlembicONuPatchSample.setNv!(SInt32 value) = "AlembicONuPatchSample_setNv";
function SInt32 AlembicONuPatchSample.getUOrder() = "AlembicONuPatchSample_getUOrder";
function AlembicONuPatchSample.setUOrder!(SInt32 value) = "AlembicONuPatchSample_setUOrder";
function SInt32 AlembicONuPatchSample.getVOrder() = "AlembicONuPatchSample_getVOrder";
function AlembicONuPatchSample.setVOrder!(SInt32 value) = "AlembicONuPatchSample_setVOrder";
function Float32<> AlembicONuPatchSample.getUKnot() = "AlembicONuPatchSample_getUKnot";
function AlembicONuPatchSample.setUKnot!(Float32 values<>) = "AlembicONuPatchSample_setUKnot";
function Float32<> AlembicONuPatchSample.getVKnot() = "AlembicONuPatchSample_getVKnot";
function AlembicONuPatchSample.setVKnot!(Float32 values<>) = "AlembicONuPatchSample_setVKnot";
function AlembicOVec2VfGeomParamSample AlembicONuPatchSample.getUVs() = "AlembicONuPatchSample_getUVs";
function AlembicONuPatchSample.setUVs!(AlembicOVec2VfGeomParamSample values) = "AlembicONuPatchSample_setUVs";
function AlembicOVec3NfGeomParamSample AlembicONuPatchSample.getNormals() = "AlembicONuPatchSample_getNormals";
function AlembicONuPatchSample.setNormals!(AlembicOVec3NfGeomParamSample values) = "AlembicONuPatchSample_setNormals";
function Box3 AlembicONuPatchSample.getSelfBounds() = "AlembicONuPatchSample_getSelfBounds";
function AlembicONuPatchSample.setSelfBounds!(Box3 bounds) = "AlembicONuPatchSample_setSelfBounds";
function Vec3<> AlembicONuPatchSample.getVelocities() = "AlembicONuPatchSample_getVelocities";
function AlembicONuPatchSample.setVelocities!(Vec3 values<>) = "AlembicONuPatchSample_setVelocities";
function AlembicONuPatchSample.setTrimCurve!(SInt32 nLoops, SInt32 nCurves<>, SInt32 n<>, SInt32 order<>, Float32 knot<>, Float32 min<>, Float32 max<>, Float32 u<>, Float32 v<>, Float32 w<>) = "AlembicONuPatchSample_setTrimCurve";
function SInt32 AlembicONuPatchSample.getTrimNumLoops() = "AlembicONuPatchSample_getTrimNumLoops";
function SInt32<> AlembicONuPatchSample.getTrimNumCurves() = "AlembicONuPatchSample_getTrimNumCurves";
function SInt32<> AlembicONuPatchSample.getTrimNumVertices() = "AlembicONuPatchSample_getTrimNumVertices";
function SInt32<> AlembicONuPatchSample.getTrimOrder() = "AlembicONuPatchSample_getTrimOrder";
function Float32<> AlembicONuPatchSample.getTrimKnot() = "AlembicONuPatchSample_getTrimKnot";
function Float32<> AlembicONuPatchSample.getTrimMin() = "AlembicONuPatchSample_getTrimMin";
function Float32<> AlembicONuPatchSample.getTrimMax() = "AlembicONuPatchSample_getTrimMax";
function Float32<> AlembicONuPatchSample.getTrimU() = "AlembicONuPatchSample_getTrimU";
function Float32<> AlembicONuPatchSample.getTrimV() = "AlembicONuPatchSample_getTrimV";
function Float32<> AlembicONuPatchSample.getTrimW() = "AlembicONuPatchSample_getTrimW";
function Boolean AlembicONuPatchSample.hasTrimCurve() = "AlembicONuPatchSample_hasTrimCurve";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicONuPatchSchema {
  Data handle;
};

function AlembicONuPatchSchema() = "AlembicONuPatchSchema_construct";
function ~AlembicONuPatchSchema() = "AlembicONuPatchSchema_free";
function Boolean AlembicONuPatchSchema.valid() = "AlembicONuPatchSchema_valid";
function AlembicONuPatchSchema.reset!() = "AlembicONuPatchSchema_free";

function AlembicTimeSampling AlembicONuPatchSchema.getTimeSampling() = "AlembicONuPatchSchema_getTimeSampling";
function UInt32 AlembicONuPatchSchema.getNumSamples() = "AlembicONuPatchSchema_getNumSamples";
function AlembicONuPatchSchema.set!(AlembicONuPatchSample sample) = "AlembicONuPatchSchema_set";
function AlembicONuPatchSchema.setFromPrevious!() = "AlembicONuPatchSchema_setFromPrevious";
function AlembicONuPatchSchema.setTimeSampling!(UInt32 index) = "AlembicONuPatchSchema_setTimeSampling";
function AlembicOCompoundProperty AlembicONuPatchSchema.getArbGeomParams() = "AlembicONuPatchSchema_getArbGeomParams";
function AlembicOCompoundProperty AlembicONuPatchSchema.getUserProperties() = "AlembicONuPatchSchema_getUserProperties";
function AlembicOScalarProperty AlembicONuPatchSchema.getChildBoundsProperty() = "AlembicONuPatchSchema_getChildBoundsProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOObject {
  Data handle;
};

function AlembicOObject() = "AlembicOObject_construct";
function ~AlembicOObject() = "AlembicOObject_free";
function Boolean AlembicOObject.valid() = "AlembicOObject_valid";
function AlembicOObject.reset!() = "AlembicOObject_free";

function AlembicOObject(AlembicOObject parent, String name) = "AlembicOObject_constructFrom2Args";

function String AlembicOObject.getName() = "AlembicOObject_getName";
function String AlembicOObject.getFullName() = "AlembicOObject_getFullName";
function AlembicMetaData AlembicOObject.getMetaData() = "AlembicOObject_getMetaData";
function AlembicOArchive AlembicOObject.getArchive() = "AlembicOObject_getArchive";
function AlembicOObject AlembicOObject.getParent() = "AlembicOObject_getParent";
function UInt32 AlembicOObject.getNumChildren() = "AlembicOObject_getNumChildren";
function AlembicOCompoundProperty AlembicOObject.getProperties() = "AlembicOObject_getProperties";
function AlembicOObject AlembicOObject.getChild(UInt32 childIndex ) = "AlembicOObject_getChild";
function AlembicOObject AlembicOObject.getChild(String childName ) = "AlembicOObject_getChild_byName";
function AlembicOObject.addChildInstance!(AlembicOObject target, String name) = "AlembicOObject_addChildInstance";

/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOPoints {
  Data handle;
};

function AlembicOPoints() = "AlembicOPoints_construct";
function ~AlembicOPoints() = "AlembicOPoints_free";
function Boolean AlembicOPoints.valid() = "AlembicOPoints_valid";
function AlembicOPoints.reset!() = "AlembicOPoints_free";

function AlembicOPoints(AlembicOObject parent, String name, UInt32 timeSampling) = "AlembicOPoints_construct3Args";
function AlembicOObject(AlembicOPoints points) = "AlembicOObject_constructFromOPoints";
inline AlembicOObject AlembicOPoints.asOObject() { return AlembicOObject(this); }

function Boolean AlembicOPoints.matches(AlembicMetaData metaData) = "AlembicOPoints_matches";
function AlembicOPointsSchema AlembicOPoints.getSchema() = "AlembicOPoints_getSchema";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOPointsSample {
  Data handle;
};

function AlembicOPointsSample() = "AlembicOPointsSample_construct";
function ~AlembicOPointsSample() = "AlembicOPointsSample_free";

function Vec3<> AlembicOPointsSample.getPositions() = "AlembicOPointsSample_getPositions";
function AlembicOPointsSample.setPositions!(Vec3 values<>) = "AlembicOPointsSample_setPositions";
function UInt64<> AlembicOPointsSample.getIds() = "AlembicOPointsSample_getIds";
function AlembicOPointsSample.setIds!(UInt64 values<>) = "AlembicOPointsSample_setIds";
function Vec3<> AlembicOPointsSample.getVelocities() = "AlembicOPointsSample_getVelocities";
function AlembicOPointsSample.setVelocities!(Vec3 values<>) = "AlembicOPointsSample_setVelocities";
function AlembicOFloat32GeomParamSample AlembicOPointsSample.getWidths() = "AlembicOPointsSample_getWidths";
function AlembicOPointsSample.setWidths!(AlembicOFloat32GeomParamSample values) = "AlembicOPointsSample_setWidths";
function Box3 AlembicOPointsSample.getSelfBounds() = "AlembicOPointsSample_getSelfBounds";
function AlembicOPointsSample.setSelfBounds!(Box3 bounds) = "AlembicOPointsSample_setSelfBounds";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOPointsSchema {
  Data handle;
};

function AlembicOPointsSchema() = "AlembicOPointsSchema_construct";
function ~AlembicOPointsSchema() = "AlembicOPointsSchema_free";
function Boolean AlembicOPointsSchema.valid() = "AlembicOPointsSchema_valid";
function AlembicOPointsSchema.reset!() = "AlembicOPointsSchema_free";

function AlembicTimeSampling AlembicOPointsSchema.getTimeSampling() = "AlembicOPointsSchema_getTimeSampling";
function UInt32 AlembicOPointsSchema.getNumSamples() = "AlembicOPointsSchema_getNumSamples";
function AlembicOPointsSchema.set!(AlembicOPointsSample sample) = "AlembicOPointsSchema_set";
function AlembicOPointsSchema.setFromPrevious!() = "AlembicOPointsSchema_setFromPrevious";
function AlembicOPointsSchema.setTimeSampling!(UInt32 index) = "AlembicOPointsSchema_setTimeSampling";
function AlembicOCompoundProperty AlembicOPointsSchema.getArbGeomParams() = "AlembicOPointsSchema_getArbGeomParams";
function AlembicOCompoundProperty AlembicOPointsSchema.getUserProperties() = "AlembicOPointsSchema_getUserProperties";
function AlembicOScalarProperty AlembicOPointsSchema.getChildBoundsProperty() = "AlembicOPointsSchema_getChildBoundsProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOPolyMesh {
  Data handle;
};

function AlembicOPolyMesh() = "AlembicOPolyMesh_construct";
function ~AlembicOPolyMesh() = "AlembicOPolyMesh_free";
function Boolean AlembicOPolyMesh.valid() = "AlembicOPolyMesh_valid";
function AlembicOPolyMesh.reset!() = "AlembicOPolyMesh_free";

function AlembicOPolyMesh(AlembicOObject parent, String name, UInt32 timeSampling) = "AlembicOPolyMesh_construct3Args";
function AlembicOObject(AlembicOPolyMesh polyMesh) = "AlembicOObject_constructFromOPolyMesh";
inline AlembicOObject AlembicOPolyMesh.asOObject() { return AlembicOObject(this); }

function Boolean AlembicOPolyMesh.matches(AlembicMetaData metaData) = "AlembicOPolyMesh_matches";
function AlembicOPolyMeshSchema AlembicOPolyMesh.getSchema() = "AlembicOPolyMesh_getSchema";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOPolyMeshSample {
  Data handle;
};

function AlembicOPolyMeshSample() = "AlembicOPolyMeshSample_construct";
function ~AlembicOPolyMeshSample() = "AlembicOPolyMeshSample_free";

function Vec3<> AlembicOPolyMeshSample.getPositions() = "AlembicOPolyMeshSample_getPositions";
function AlembicOPolyMeshSample.setPositions!(Vec3 values<>) = "AlembicOPolyMeshSample_setPositions";
function Vec3<> AlembicOPolyMeshSample.getVelocities() = "AlembicOPolyMeshSample_getVelocities";
function AlembicOPolyMeshSample.setVelocities!(Vec3 values<>) = "AlembicOPolyMeshSample_setVelocities";
function Box3 AlembicOPolyMeshSample.getSelfBounds() = "AlembicOPolyMeshSample_getSelfBounds";
function AlembicOPolyMeshSample.setSelfBounds!(Box3 bounds) = "AlembicOPolyMeshSample_setSelfBounds";
function SInt32<> AlembicOPolyMeshSample.getFaceIndices() = "AlembicOPolyMeshSample_getFaceIndices";
function AlembicOPolyMeshSample.setFaceIndices!(SInt32 values<>) = "AlembicOPolyMeshSample_setFaceIndices";
function SInt32<> AlembicOPolyMeshSample.getFaceCounts() = "AlembicOPolyMeshSample_getFaceCounts";
function AlembicOPolyMeshSample.setFaceCounts!(SInt32 values<>) = "AlembicOPolyMeshSample_setFaceCounts";
function AlembicOVec2VfGeomParamSample AlembicOPolyMeshSample.getUVs() = "AlembicOPolyMeshSample_getUVs";
function AlembicOPolyMeshSample.setUVs!(AlembicOVec2VfGeomParamSample values) = "AlembicOPolyMeshSample_setUVs";
function AlembicOVec3NfGeomParamSample AlembicOPolyMeshSample.getNormals() = "AlembicOPolyMeshSample_getNormals";
function AlembicOPolyMeshSample.setNormals!(AlembicOVec3NfGeomParamSample values) = "AlembicOPolyMeshSample_setNormals";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOPolyMeshSchema {
  Data handle;
};

function AlembicOPolyMeshSchema() = "AlembicOPolyMeshSchema_construct";
function ~AlembicOPolyMeshSchema() = "AlembicOPolyMeshSchema_free";
function Boolean AlembicOPolyMeshSchema.valid() = "AlembicOPolyMeshSchema_valid";
function AlembicOPolyMeshSchema.reset!() = "AlembicOPolyMeshSchema_free";

function AlembicTimeSampling AlembicOPolyMeshSchema.getTimeSampling() = "AlembicOPolyMeshSchema_getTimeSampling";
function UInt32 AlembicOPolyMeshSchema.getNumSamples() = "AlembicOPolyMeshSchema_getNumSamples";
function AlembicOPolyMeshSchema.set!(AlembicOPolyMeshSample sample) = "AlembicOPolyMeshSchema_set";
function AlembicOPolyMeshSchema.setFromPrevious!() = "AlembicOPolyMeshSchema_setFromPrevious";
function AlembicOPolyMeshSchema.setTimeSampling!(UInt32 index) = "AlembicOPolyMeshSchema_setTimeSampling";
function AlembicOCompoundProperty AlembicOPolyMeshSchema.getArbGeomParams() = "AlembicOPolyMeshSchema_getArbGeomParams";
function AlembicOCompoundProperty AlembicOPolyMeshSchema.getUserProperties() = "AlembicOPolyMeshSchema_getUserProperties";
function AlembicOScalarProperty AlembicOPolyMeshSchema.getChildBoundsProperty() = "AlembicOPolyMeshSchema_getChildBoundsProperty";
function AlembicOFaceSet AlembicOPolyMeshSchema.createFaceSet(String name) = "AlembicOPolyMeshSchema_createFaceSet";
function String[] AlembicOPolyMeshSchema.getFaceSetNames() = "AlembicOPolyMeshSchema_getFaceSetNames";
function AlembicOFaceSet AlembicOPolyMeshSchema.getFaceSet(String name) = "AlembicOPolyMeshSchema_getFaceSet";
function Boolean AlembicOPolyMeshSchema.hasFaceSet(String name) = "AlembicOPolyMeshSchema_hasFaceSet";
function AlembicOPolyMeshSchema.setUVSourceName!(String name) = "AlembicOPolyMeshSchema_setUVSourceName";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOScalarProperty {
  Data handle;
};

function AlembicOScalarProperty() = "AlembicOScalarProperty_construct";
function ~AlembicOScalarProperty() = "AlembicOScalarProperty_free";
function Boolean AlembicOScalarProperty.valid() = "AlembicOScalarProperty_valid";
function AlembicOScalarProperty.reset!() = "AlembicOScalarProperty_free";

function AlembicPropertyHeader AlembicOScalarProperty.getHeader() = "AlembicOScalarProperty_getHeader";
function String AlembicOScalarProperty.getName() = "AlembicOScalarProperty_getName";
function AlembicPropertyType AlembicOScalarProperty.getPropertyType() = "AlembicOScalarProperty_getPropertyType";
function Boolean AlembicOScalarProperty.isScalar() = "AlembicOScalarProperty_isScalar";
function Boolean AlembicOScalarProperty.isArray() = "AlembicOScalarProperty_isArray";
function Boolean AlembicOScalarProperty.isCompound() = "AlembicOScalarProperty_isCompound";
function Boolean AlembicOScalarProperty.isSimple() = "AlembicOScalarProperty_isSimple";
function AlembicMetaData AlembicOScalarProperty.getMetaData() = "AlembicOScalarProperty_getMetaData";
function AlembicDataType AlembicOScalarProperty.getDataType() = "AlembicOScalarProperty_getDataType";
function AlembicTimeSampling AlembicOScalarProperty.getTimeSampling() = "AlembicOScalarProperty_getTimeSampling";
function AlembicOObject AlembicOScalarProperty.getObject() = "AlembicOScalarProperty_getObject";

function AlembicOScalarProperty(AlembicOCompoundProperty parent, String name, AlembicDataType dataType) = "AlembicOScalarProperty_construct3Args";

function UInt32 AlembicOScalarProperty.getNumSamples() = "AlembicOScalarProperty_getNumSamples";
function AlembicOCompoundProperty AlembicOScalarProperty.getParent() = "AlembicOScalarProperty_getParent";
function AlembicOScalarProperty.setTimeSampling!(UInt32 index) = "AlembicOScalarProperty_setTimeSampling";

function AlembicOScalarProperty.setFromPrevious!() = "AlembicOScalarProperty_setFromPrevious";
function AlembicOScalarProperty.setAsBoolean!(Boolean values<>) = "AlembicOScalarProperty_setAsBoolean";
function AlembicOScalarProperty.setAsUInt8!(UInt8 values<>) = "AlembicOScalarProperty_setAsUInt8";
function AlembicOScalarProperty.setAsSInt8!(SInt8 values<>) = "AlembicOScalarProperty_setAsSInt8";
function AlembicOScalarProperty.setAsUInt16!(UInt16 values<>) = "AlembicOScalarProperty_setAsUInt16";
function AlembicOScalarProperty.setAsSInt16!(SInt16 values<>) = "AlembicOScalarProperty_setAsSInt16";
function AlembicOScalarProperty.setAsUInt32!(UInt32 values<>) = "AlembicOScalarProperty_setAsUInt32";
function AlembicOScalarProperty.setAsSInt32!(SInt32 values<>) = "AlembicOScalarProperty_setAsSInt32";
function AlembicOScalarProperty.setAsUInt64!(UInt64 values<>) = "AlembicOScalarProperty_setAsUInt64";
function AlembicOScalarProperty.setAsSInt64!(SInt64 values<>) = "AlembicOScalarProperty_setAsSInt64";
function AlembicOScalarProperty.setAsFloat16!(Float32 values<>) = "AlembicOScalarProperty_setAsFloat16";
function AlembicOScalarProperty.setAsFloat32!(Float32 values<>) = "AlembicOScalarProperty_setAsFloat32";
function AlembicOScalarProperty.setAsFloat64!(Float64 values<>) = "AlembicOScalarProperty_setAsFloat64";
function AlembicOScalarProperty.setAsString!(String values<>) = "AlembicOScalarProperty_setAsString";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOSubD {
  Data handle;
};

function AlembicOSubD() = "AlembicOSubD_construct";
function ~AlembicOSubD() = "AlembicOSubD_free";
function Boolean AlembicOSubD.valid() = "AlembicOSubD_valid";
function AlembicOSubD.reset!() = "AlembicOSubD_free";

function AlembicOSubD(AlembicOObject parent, String name, UInt32 timeSampling) = "AlembicOSubD_construct3Args";
function AlembicOObject(AlembicOSubD subd) = "AlembicOObject_constructFromOSubD";
inline AlembicOObject AlembicOSubD.asOObject() { return AlembicOObject(this); }

function Boolean AlembicOSubD.matches(AlembicMetaData metaData) = "AlembicOSubD_matches";
function AlembicOSubDSchema AlembicOSubD.getSchema() = "AlembicOSubD_getSchema";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOSubDSample {
  Data handle;
};

function AlembicOSubDSample() = "AlembicOSubDSample_construct";
function ~AlembicOSubDSample() = "AlembicOSubDSample_free";

function Vec3<> AlembicOSubDSample.getPositions() = "AlembicOSubDSample_getPositions";
function AlembicOSubDSample.setPositions!(Vec3 values<>) = "AlembicOSubDSample_setPositions";
function SInt32<> AlembicOSubDSample.getFaceIndices() = "AlembicOSubDSample_getFaceIndices";
function AlembicOSubDSample.setFaceIndices!(SInt32 values<>) = "AlembicOSubDSample_setFaceIndices";
function SInt32<> AlembicOSubDSample.getFaceCounts() = "AlembicOSubDSample_getFaceCounts";
function AlembicOSubDSample.setFaceCounts!(SInt32 values<>) = "AlembicOSubDSample_setFaceCounts";
function SInt32 AlembicOSubDSample.getFaceVaryingInterpolateBoundary() = "AlembicOSubDSample_getFaceVaryingInterpolateBoundary";
function AlembicOSubDSample.setFaceVaryingInterpolateBoundary!( SInt32 i ) = "AlembicOSubDSample_setFaceVaryingInterpolateBoundary";
function SInt32 AlembicOSubDSample.getFaceVaryingPropagateCorners() = "AlembicOSubDSample_getFaceVaryingPropagateCorners";
function AlembicOSubDSample.setFaceVaryingPropagateCorners!( SInt32 i ) = "AlembicOSubDSample_setFaceVaryingPropagateCorners";
function SInt32 AlembicOSubDSample.getInterpolateBoundary() = "AlembicOSubDSample_getInterpolateBoundary";
function AlembicOSubDSample.setInterpolateBoundary!( SInt32 i ) = "AlembicOSubDSample_setInterpolateBoundary";
function SInt32<> AlembicOSubDSample.getCreaseIndices() = "AlembicOSubDSample_getCreaseIndices";
function AlembicOSubDSample.setCreaseIndices!(SInt32 values<>) = "AlembicOSubDSample_setCreaseIndices";
function SInt32<> AlembicOSubDSample.getCreaseLengths() = "AlembicOSubDSample_getCreaseLengths";
function AlembicOSubDSample.setCreaseLengths!(SInt32 values<>) = "AlembicOSubDSample_setCreaseLengths";
function Float32<> AlembicOSubDSample.getCreaseSharpnesses() = "AlembicOSubDSample_getCreaseSharpnesses";
function AlembicOSubDSample.setCreaseSharpnesses!(Float32 values<>) = "AlembicOSubDSample_setCreaseSharpnesses";
function AlembicOSubDSample.setCreases!(SInt32 indices<>, SInt32 lengths<>) = "AlembicOSubDSample_setCreases2Args";
function AlembicOSubDSample.setCreases!(SInt32 indices<>, SInt32 lengths<>, Float32 sharpnesses<>) = "AlembicOSubDSample_setCreases3Args";
function SInt32<> AlembicOSubDSample.getCornerIndices() = "AlembicOSubDSample_getCornerIndices";
function AlembicOSubDSample.setCornerIndices!(SInt32 values<>) = "AlembicOSubDSample_setCornerIndices";
function Float32<> AlembicOSubDSample.getCornerSharpnesses() = "AlembicOSubDSample_getCornerSharpnesses";
function AlembicOSubDSample.setCornerSharpnesses!(Float32 values<>) = "AlembicOSubDSample_setCornerSharpnesses";
function AlembicOSubDSample.setCorners!(SInt32 indices<>, Float32 sharpnesses<>) = "AlembicOSubDSample_setCorners2Args";
function SInt32<> AlembicOSubDSample.getHoles() = "AlembicOSubDSample_getHoles";
function AlembicOSubDSample.setHoles!(SInt32 values<>) = "AlembicOSubDSample_setHoles";
function String AlembicOSubDSample.getSubdivisionScheme() = "AlembicOSubDSample_getSubdivisionScheme";
function AlembicOSubDSample.setSubdivisionScheme!(String value) = "AlembicOSubDSample_setSubdivisionScheme";
function Box3 AlembicOSubDSample.getSelfBounds() = "AlembicOSubDSample_getSelfBounds";
function AlembicOSubDSample.setSelfBounds!(Box3 bounds) = "AlembicOSubDSample_setSelfBounds";
function Vec3<> AlembicOSubDSample.getVelocities() = "AlembicOSubDSample_getVelocities";
function AlembicOSubDSample.setVelocities!(Vec3 values<>) = "AlembicOSubDSample_setVelocities";
function AlembicOVec2VfGeomParamSample AlembicOSubDSample.getUVs() = "AlembicOSubDSample_getUVs";
function AlembicOSubDSample.setUVs!(AlembicOVec2VfGeomParamSample values) = "AlembicOSubDSample_setUVs";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOSubDSchema {
  Data handle;
};

function AlembicOSubDSchema() = "AlembicOSubDSchema_construct";
function ~AlembicOSubDSchema() = "AlembicOSubDSchema_free";
function Boolean AlembicOSubDSchema.valid() = "AlembicOSubDSchema_valid";
function AlembicOSubDSchema.reset!() = "AlembicOSubDSchema_free";

function AlembicTimeSampling AlembicOSubDSchema.getTimeSampling() = "AlembicOSubDSchema_getTimeSampling";
function UInt32 AlembicOSubDSchema.getNumSamples() = "AlembicOSubDSchema_getNumSamples";
function AlembicOSubDSchema.set!(AlembicOSubDSample sample) = "AlembicOSubDSchema_set";
function AlembicOSubDSchema.setFromPrevious!() = "AlembicOSubDSchema_setFromPrevious";
function AlembicOSubDSchema.setTimeSampling!(UInt32 index) = "AlembicOSubDSchema_setTimeSampling";
function AlembicOCompoundProperty AlembicOSubDSchema.getArbGeomParams() = "AlembicOSubDSchema_getArbGeomParams";
function AlembicOCompoundProperty AlembicOSubDSchema.getUserProperties() = "AlembicOSubDSchema_getUserProperties";
function AlembicOScalarProperty AlembicOSubDSchema.getChildBoundsProperty() = "AlembicOSubDSchema_getChildBoundsProperty";
function AlembicOFaceSet AlembicOSubDSchema.createFaceSet(String name) = "AlembicOSubDSchema_createFaceSet";
function String[] AlembicOSubDSchema.getFaceSetNames() = "AlembicOSubDSchema_getFaceSetNames";
function AlembicOFaceSet AlembicOSubDSchema.getFaceSet(String name) = "AlembicOSubDSchema_getFaceSet";
function Boolean AlembicOSubDSchema.hasFaceSet(String name) = "AlembicOSubDSchema_hasFaceSet";
function AlembicOSubDSchema.setUVSourceName!(String name) = "AlembicOSubDSchema_setUVSourceName";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOXform {
  Data handle;
};

function AlembicOXform() = "AlembicOXform_construct";
function ~AlembicOXform() = "AlembicOXform_free";
function Boolean AlembicOXform.valid() = "AlembicOXform_valid";
function AlembicOXform.reset!() = "AlembicOXform_free";

function AlembicOXform(AlembicOObject parent, String name, UInt32 timeSampling) = "AlembicOXform_construct3Args";
function AlembicOObject(AlembicOXform xform) = "AlembicOObject_constructFromOXform";
inline AlembicOObject AlembicOXform.asOObject() { return AlembicOObject(this); }

function Boolean AlembicOXform.matches(AlembicMetaData metaData) = "AlembicOXform_matches";
function AlembicOXformSchema AlembicOXform.getSchema() = "AlembicOXform_getSchema";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicOXformSchema {
  Data handle;
};

function AlembicOXformSchema() = "AlembicOXformSchema_construct";
function ~AlembicOXformSchema() = "AlembicOXformSchema_free";
function Boolean AlembicOXformSchema.valid() = "AlembicOXformSchema_valid";
function AlembicOXformSchema.reset!() = "AlembicOXformSchema_free";

function AlembicTimeSampling AlembicOXformSchema.getTimeSampling() = "AlembicOXformSchema_getTimeSampling";
function UInt32 AlembicOXformSchema.getNumSamples() = "AlembicOXformSchema_getNumSamples";
function AlembicOXformSchema.set!(AlembicXformSample sample) = "AlembicOXformSchema_set";
function AlembicOXformSchema.setFromPrevious!() = "AlembicOXformSchema_setFromPrevious";
function AlembicOXformSchema.setTimeSampling!(UInt32 index) = "AlembicOXformSchema_setTimeSampling";
function AlembicOCompoundProperty AlembicOXformSchema.getArbGeomParams() = "AlembicOXformSchema_getArbGeomParams";
function AlembicOCompoundProperty AlembicOXformSchema.getUserProperties() = "AlembicOXformSchema_getUserProperties";
function AlembicOScalarProperty AlembicOXformSchema.getChildBoundsProperty() = "AlembicOXformSchema_getChildBoundsProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicPropertyHeader {
  Data handle;
};

alias UInt32 AlembicPropertyType;
const AlembicPropertyType Alembic_kCompoundProperty = 0;
const AlembicPropertyType Alembic_kScalarProperty = 1;
const AlembicPropertyType Alembic_kArrayProperty = 2;

function AlembicPropertyHeader() = "AlembicPropertyHeader_construct";
function ~AlembicPropertyHeader() = "AlembicPropertyHeader_free";

function AlembicPropertyHeader(String name, AlembicMetaData metaData) = "AlembicPropertyHeader_construct2Args";
function AlembicPropertyHeader(String name, AlembicPropertyType propType, AlembicMetaData metaData, AlembicDataType dataType, AlembicTimeSampling timeSampling) = "AlembicPropertyHeader_construct5Args";

function String AlembicPropertyHeader.getName() = "AlembicPropertyHeader_getName";
function AlembicPropertyHeader.setName!(String name) = "AlembicPropertyHeader_setName";
function AlembicPropertyType AlembicPropertyHeader.getPropertyType() = "AlembicPropertyHeader_getPropertyType";
function AlembicPropertyHeader.setPropertyType!(AlembicPropertyType propType) = "AlembicPropertyHeader_setPropertyType";
function Boolean AlembicPropertyHeader.isScalar() = "AlembicPropertyHeader_isScalar";
function Boolean AlembicPropertyHeader.isArray() = "AlembicPropertyHeader_isArray";
function Boolean AlembicPropertyHeader.isCompound() = "AlembicPropertyHeader_isCompound";
function Boolean AlembicPropertyHeader.isSimple() = "AlembicPropertyHeader_isSimple";
function AlembicMetaData AlembicPropertyHeader.getMetaData() = "AlembicPropertyHeader_getMetaData";
function AlembicPropertyHeader.setMetaData!(AlembicMetaData metaData) = "AlembicPropertyHeader_setMetaData";
function AlembicDataType AlembicPropertyHeader.getDataType() = "AlembicPropertyHeader_getDataType";
function AlembicPropertyHeader.setDataType!(AlembicDataType dataType) = "AlembicPropertyHeader_setDataType";
function AlembicTimeSampling AlembicPropertyHeader.getTimeSampling() = "AlembicPropertyHeader_getTimeSampling";
function AlembicPropertyHeader.setTimeSampling!(AlembicTimeSampling timeSampling) = "AlembicPropertyHeader_setTimeSampling";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicTimeSampling {
  Data handle;
};

struct AlembicTimeSamplingPair {
  UInt32 index;
  Float64 time;
};

function Boolean == (AlembicTimeSamplingPair a, AlembicTimeSamplingPair b) {
  return a.index == b.index && abs(a.time - b.time) < 0.0001;
}

function Boolean != (AlembicTimeSamplingPair a, AlembicTimeSamplingPair b) {
  return a.index != b.index || abs(a.time - b.time) >= 0.0001;
}

const SInt32 Alembic_kConstantTimeSampling = 0;

function AlembicTimeSampling() = "AlembicTimeSampling_construct";
function ~AlembicTimeSampling() = "AlembicTimeSampling_free";

function AlembicTimeSampling( AlembicTimeSamplingType samplingType, Float64 sampleTimes[] ) = "AlembicTimeSampling_constructFromSamplingType";
function AlembicTimeSampling( Float64 timePerCycle, Float64 startTime ) = "AlembicTimeSampling_constructFromStartTime";

function UInt32 AlembicTimeSampling.getNumStoredTimes() = "AlembicTimeSampling_getNumStoredTimes";
function Float64[] AlembicTimeSampling.getStoredTimes() = "AlembicTimeSampling_getStoredTimes";
function AlembicTimeSamplingType AlembicTimeSampling.getTimeSamplingType() = "AlembicTimeSampling_getTimeSamplingType";
function Float64 AlembicTimeSampling.getSampleTime(UInt32 index) = "AlembicTimeSampling_getSampleTime";
function AlembicTimeSamplingPair AlembicTimeSampling.getFloorIndex(Float64 time, UInt32 numSamples) = "AlembicTimeSampling_getFloorIndex";
function AlembicTimeSamplingPair AlembicTimeSampling.getCeilIndex(Float64 time, UInt32 numSamples) = "AlembicTimeSampling_getCeilIndex";
function AlembicTimeSamplingPair AlembicTimeSampling.getNearIndex(Float64 time, UInt32 numSamples) = "AlembicTimeSampling_getNearIndex";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object AlembicTimeSamplingType {
  Data handle;
};

alias UInt32 AlembicAcyclicFlag;
const AlembicAcyclicFlag Alembic_kAcyclic = 0;

function AlembicTimeSamplingType() = "AlembicTimeSamplingType_construct";
function ~AlembicTimeSamplingType() = "AlembicTimeSamplingType_free";

function AlembicTimeSamplingType(Float64 timePerCycle) = "AlembicTimeSamplingType_constructFromFloat64";
function AlembicTimeSamplingType(UInt32 numSamplesPerCycle, Float64 timePerCycle) = "AlembicTimeSamplingType_constructFromUInt32Float64";
function AlembicTimeSamplingType(AlembicAcyclicFlag flag) = "AlembicTimeSamplingType_constructFromAcyclicFlag";

function Boolean AlembicTimeSamplingType.isUniform() = "AlembicTimeSamplingType_isUniform";
function Boolean AlembicTimeSamplingType.isCyclic() = "AlembicTimeSamplingType_isCyclic";
function Boolean AlembicTimeSamplingType.isAcyclic() = "AlembicTimeSamplingType_isAcyclic";
function UInt32 AlembicTimeSamplingType.getNumSamplesPerCycle() = "AlembicTimeSamplingType_getNumSamplesPerCycle";
function Float64 AlembicTimeSamplingType.getTimePerCycle() = "AlembicTimeSamplingType_getTimePerCycle";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

 require Math;

object AlembicXformSample {
  Data handle;
};

function AlembicXformSample() = "AlembicXformSample_construct";
function ~AlembicXformSample() = "AlembicXformSample_free";

function AlembicXformSample.setInheritsXforms!( Boolean inherits ) = "AlembicXformSample_setInheritsXforms";
function Boolean AlembicXformSample.getInheritsXforms() = "AlembicXformSample_getInheritsXforms";
function AlembicXformSample.setMatrix!(Mat44 matrix) = "AlembicXformSample_setMatrix";
function Mat44 AlembicXformSample.getMatrix() = "AlembicXformSample_getMatrix";
function Boolean AlembicXformSample.isTopologyEqual(AlembicXformSample otherSample) = "AlembicXformSample_isTopologyEqual";
function Boolean AlembicXformSample.getIsTopologyFrozen() = "AlembicXformSample_getIsTopologyFrozen";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIBooleanProperty {
  AlembicIScalarProperty prop;
};

function AlembicIBooleanProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIBooleanProperty(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIBooleanProperty prop) {
  this = prop.prop;
}

function Boolean AlembicIBooleanProperty.valid() {
  return this.prop.valid();
}

function AlembicIBooleanProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIBooleanProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIBooleanProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIBooleanProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIBooleanProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIBooleanProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIBooleanProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIBooleanProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIBooleanProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIBooleanProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIBooleanProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIBooleanProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIBooleanProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIBooleanProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIBooleanProperty.getParent() {
  return this.prop.getParent();
}

function Boolean AlembicIBooleanProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicIBooleanProperty.get: Extent != 1.');
    return Boolean();
  }
  if(dt.getPod() == Alembic_kBooleanPOD)
  {
    Boolean values[] = this.prop.getAsBoolean(iSS);
    if(values.size() != 1)
      return Boolean();
    return values[0];
  }
  setError('AlembicIBooleanProperty.get: Encapsulated AlembicIScalarProperty has invalid POD.');
  return Boolean();
}

function Boolean AlembicIBooleanProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOBooleanProperty {
  AlembicOScalarProperty prop;
};

function AlembicOBooleanProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kBooleanPOD, 1));
}

function AlembicOBooleanProperty(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOBooleanProperty prop) {
  this = prop.prop;
}

function Boolean AlembicOBooleanProperty.valid() {
  return this.prop.valid();
}

function AlembicOBooleanProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOBooleanProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOBooleanProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOBooleanProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOBooleanProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOBooleanProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOBooleanProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOBooleanProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOBooleanProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOBooleanProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOBooleanProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOBooleanProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOBooleanProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOBooleanProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOBooleanProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOBooleanProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOBooleanProperty.set!(Boolean value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOBooleanProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kBooleanPOD) {
    Boolean values[];
    values.push(value);
    this.prop.setAsBoolean(values);
  } else {
    setError('AlembicOBooleanProperty.set: Encapsulated AlembicOScalarProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIBooleanArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIBooleanArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIBooleanArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIBooleanArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIBooleanArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIBooleanArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIBooleanArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIBooleanArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIBooleanArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIBooleanArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIBooleanArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIBooleanArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIBooleanArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIBooleanArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIBooleanArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIBooleanArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIBooleanArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIBooleanArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIBooleanArrayProperty.getParent() {
  return this.prop.getParent();
}

function Boolean[] AlembicIBooleanArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  Boolean values[];
  if(dt.getExtent() != 1) {
    setError('AlembicIBooleanArrayProperty.get: Extent != 1.');
    return values;
  }
  if(dt.getPod() == Alembic_kBooleanPOD)
    values = this.prop.getAsBoolean(iSS);
  else
    setError('AlembicIBooleanArrayProperty.get: Encapsulated AlembicIArrayProperty has invalid POD.');
  return values;
}

function Boolean[] AlembicIBooleanArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOBooleanArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOBooleanArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kBooleanPOD, 1));
}

function AlembicOBooleanArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOBooleanArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOBooleanArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOBooleanArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOBooleanArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOBooleanArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOBooleanArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOBooleanArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOBooleanArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOBooleanArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOBooleanArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOBooleanArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOBooleanArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOBooleanArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOBooleanArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOBooleanArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOBooleanArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOBooleanArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOBooleanArrayProperty.set!(Boolean values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOBooleanArrayProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kBooleanPOD) {
    this.prop.setAsBoolean(values);
  } else {
    setError('AlembicOBooleanArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicISInt8Property {
  AlembicIScalarProperty prop;
};

function AlembicISInt8Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicISInt8Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicISInt8Property prop) {
  this = prop.prop;
}

function Boolean AlembicISInt8Property.valid() {
  return this.prop.valid();
}

function AlembicISInt8Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicISInt8Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicISInt8Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicISInt8Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicISInt8Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicISInt8Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicISInt8Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicISInt8Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicISInt8Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicISInt8Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicISInt8Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicISInt8Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicISInt8Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicISInt8Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicISInt8Property.getParent() {
  return this.prop.getParent();
}

function SInt8 AlembicISInt8Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicISInt8Property.get: Extent != 1.');
    return SInt8();
  }
  if(dt.getPod() == Alembic_kInt8POD)
  {
    SInt8 values[] = this.prop.getAsSInt8(iSS);
    if(values.size() != 1)
      return SInt8();
    return values[0];
  }
  setError('AlembicISInt8Property.get: Encapsulated AlembicIScalarProperty has invalid POD.');
  return SInt8();
}

function SInt8 AlembicISInt8Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOSInt8Property {
  AlembicOScalarProperty prop;
};

function AlembicOSInt8Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kInt8POD, 1));
}

function AlembicOSInt8Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOSInt8Property prop) {
  this = prop.prop;
}

function Boolean AlembicOSInt8Property.valid() {
  return this.prop.valid();
}

function AlembicOSInt8Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOSInt8Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOSInt8Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOSInt8Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOSInt8Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOSInt8Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOSInt8Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOSInt8Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOSInt8Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOSInt8Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOSInt8Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOSInt8Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOSInt8Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOSInt8Property.getParent() {
  return this.prop.getParent();
}

function AlembicOSInt8Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOSInt8Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOSInt8Property.set!(SInt8 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOSInt8Property.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kInt8POD) {
    SInt8 values[];
    values.push(value);
    this.prop.setAsSInt8(values);
  } else {
    setError('AlembicOSInt8Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicISInt8ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicISInt8ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicISInt8ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicISInt8ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicISInt8ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicISInt8ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicISInt8ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicISInt8ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicISInt8ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicISInt8ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicISInt8ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicISInt8ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicISInt8ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicISInt8ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicISInt8ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicISInt8ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicISInt8ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicISInt8ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicISInt8ArrayProperty.getParent() {
  return this.prop.getParent();
}

function SInt8[] AlembicISInt8ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  SInt8 values[];
  if(dt.getExtent() != 1) {
    setError('AlembicISInt8ArrayProperty.get: Extent != 1.');
    return values;
  }
  if(dt.getPod() == Alembic_kInt8POD)
    values = this.prop.getAsSInt8(iSS);
  else
    setError('AlembicISInt8ArrayProperty.get: Encapsulated AlembicIArrayProperty has invalid POD.');
  return values;
}

function SInt8[] AlembicISInt8ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOSInt8ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOSInt8ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kInt8POD, 1));
}

function AlembicOSInt8ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOSInt8ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOSInt8ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOSInt8ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOSInt8ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOSInt8ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOSInt8ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOSInt8ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOSInt8ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOSInt8ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOSInt8ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOSInt8ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOSInt8ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOSInt8ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOSInt8ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOSInt8ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOSInt8ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOSInt8ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOSInt8ArrayProperty.set!(SInt8 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOSInt8ArrayProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kInt8POD) {
    this.prop.setAsSInt8(values);
  } else {
    setError('AlembicOSInt8ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicISInt16Property {
  AlembicIScalarProperty prop;
};

function AlembicISInt16Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicISInt16Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicISInt16Property prop) {
  this = prop.prop;
}

function Boolean AlembicISInt16Property.valid() {
  return this.prop.valid();
}

function AlembicISInt16Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicISInt16Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicISInt16Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicISInt16Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicISInt16Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicISInt16Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicISInt16Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicISInt16Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicISInt16Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicISInt16Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicISInt16Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicISInt16Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicISInt16Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicISInt16Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicISInt16Property.getParent() {
  return this.prop.getParent();
}

function SInt16 AlembicISInt16Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicISInt16Property.get: Extent != 1.');
    return SInt16();
  }
  if(dt.getPod() == Alembic_kInt16POD)
  {
    SInt16 values[] = this.prop.getAsSInt16(iSS);
    if(values.size() != 1)
      return SInt16();
    return values[0];
  }
  setError('AlembicISInt16Property.get: Encapsulated AlembicIScalarProperty has invalid POD.');
  return SInt16();
}

function SInt16 AlembicISInt16Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOSInt16Property {
  AlembicOScalarProperty prop;
};

function AlembicOSInt16Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kInt16POD, 1));
}

function AlembicOSInt16Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOSInt16Property prop) {
  this = prop.prop;
}

function Boolean AlembicOSInt16Property.valid() {
  return this.prop.valid();
}

function AlembicOSInt16Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOSInt16Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOSInt16Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOSInt16Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOSInt16Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOSInt16Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOSInt16Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOSInt16Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOSInt16Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOSInt16Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOSInt16Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOSInt16Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOSInt16Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOSInt16Property.getParent() {
  return this.prop.getParent();
}

function AlembicOSInt16Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOSInt16Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOSInt16Property.set!(SInt16 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOSInt16Property.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kInt16POD) {
    SInt16 values[];
    values.push(value);
    this.prop.setAsSInt16(values);
  } else {
    setError('AlembicOSInt16Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicISInt16ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicISInt16ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicISInt16ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicISInt16ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicISInt16ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicISInt16ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicISInt16ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicISInt16ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicISInt16ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicISInt16ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicISInt16ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicISInt16ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicISInt16ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicISInt16ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicISInt16ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicISInt16ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicISInt16ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicISInt16ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicISInt16ArrayProperty.getParent() {
  return this.prop.getParent();
}

function SInt16[] AlembicISInt16ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  SInt16 values[];
  if(dt.getExtent() != 1) {
    setError('AlembicISInt16ArrayProperty.get: Extent != 1.');
    return values;
  }
  if(dt.getPod() == Alembic_kInt16POD)
    values = this.prop.getAsSInt16(iSS);
  else
    setError('AlembicISInt16ArrayProperty.get: Encapsulated AlembicIArrayProperty has invalid POD.');
  return values;
}

function SInt16[] AlembicISInt16ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOSInt16ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOSInt16ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kInt16POD, 1));
}

function AlembicOSInt16ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOSInt16ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOSInt16ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOSInt16ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOSInt16ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOSInt16ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOSInt16ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOSInt16ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOSInt16ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOSInt16ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOSInt16ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOSInt16ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOSInt16ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOSInt16ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOSInt16ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOSInt16ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOSInt16ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOSInt16ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOSInt16ArrayProperty.set!(SInt16 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOSInt16ArrayProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kInt16POD) {
    this.prop.setAsSInt16(values);
  } else {
    setError('AlembicOSInt16ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicISInt32Property {
  AlembicIScalarProperty prop;
};

function AlembicISInt32Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicISInt32Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicISInt32Property prop) {
  this = prop.prop;
}

function Boolean AlembicISInt32Property.valid() {
  return this.prop.valid();
}

function AlembicISInt32Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicISInt32Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicISInt32Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicISInt32Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicISInt32Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicISInt32Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicISInt32Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicISInt32Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicISInt32Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicISInt32Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicISInt32Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicISInt32Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicISInt32Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicISInt32Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicISInt32Property.getParent() {
  return this.prop.getParent();
}

function SInt32 AlembicISInt32Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicISInt32Property.get: Extent != 1.');
    return SInt32();
  }
  if(dt.getPod() == Alembic_kInt32POD)
  {
    SInt32 values[] = this.prop.getAsSInt32(iSS);
    if(values.size() != 1)
      return SInt32();
    return values[0];
  }
  setError('AlembicISInt32Property.get: Encapsulated AlembicIScalarProperty has invalid POD.');
  return SInt32();
}

function SInt32 AlembicISInt32Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOSInt32Property {
  AlembicOScalarProperty prop;
};

function AlembicOSInt32Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kInt32POD, 1));
}

function AlembicOSInt32Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOSInt32Property prop) {
  this = prop.prop;
}

function Boolean AlembicOSInt32Property.valid() {
  return this.prop.valid();
}

function AlembicOSInt32Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOSInt32Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOSInt32Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOSInt32Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOSInt32Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOSInt32Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOSInt32Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOSInt32Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOSInt32Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOSInt32Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOSInt32Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOSInt32Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOSInt32Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOSInt32Property.getParent() {
  return this.prop.getParent();
}

function AlembicOSInt32Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOSInt32Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOSInt32Property.set!(SInt32 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOSInt32Property.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kInt32POD) {
    SInt32 values[];
    values.push(value);
    this.prop.setAsSInt32(values);
  } else {
    setError('AlembicOSInt32Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicISInt32ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicISInt32ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicISInt32ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicISInt32ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicISInt32ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicISInt32ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicISInt32ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicISInt32ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicISInt32ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicISInt32ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicISInt32ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicISInt32ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicISInt32ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicISInt32ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicISInt32ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicISInt32ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicISInt32ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicISInt32ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicISInt32ArrayProperty.getParent() {
  return this.prop.getParent();
}

function SInt32[] AlembicISInt32ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  SInt32 values[];
  if(dt.getExtent() != 1) {
    setError('AlembicISInt32ArrayProperty.get: Extent != 1.');
    return values;
  }
  if(dt.getPod() == Alembic_kInt32POD)
    values = this.prop.getAsSInt32(iSS);
  else
    setError('AlembicISInt32ArrayProperty.get: Encapsulated AlembicIArrayProperty has invalid POD.');
  return values;
}

function SInt32[] AlembicISInt32ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOSInt32ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOSInt32ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kInt32POD, 1));
}

function AlembicOSInt32ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOSInt32ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOSInt32ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOSInt32ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOSInt32ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOSInt32ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOSInt32ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOSInt32ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOSInt32ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOSInt32ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOSInt32ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOSInt32ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOSInt32ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOSInt32ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOSInt32ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOSInt32ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOSInt32ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOSInt32ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOSInt32ArrayProperty.set!(SInt32 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOSInt32ArrayProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kInt32POD) {
    this.prop.setAsSInt32(values);
  } else {
    setError('AlembicOSInt32ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicISInt64Property {
  AlembicIScalarProperty prop;
};

function AlembicISInt64Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicISInt64Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicISInt64Property prop) {
  this = prop.prop;
}

function Boolean AlembicISInt64Property.valid() {
  return this.prop.valid();
}

function AlembicISInt64Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicISInt64Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicISInt64Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicISInt64Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicISInt64Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicISInt64Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicISInt64Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicISInt64Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicISInt64Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicISInt64Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicISInt64Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicISInt64Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicISInt64Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicISInt64Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicISInt64Property.getParent() {
  return this.prop.getParent();
}

function SInt64 AlembicISInt64Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicISInt64Property.get: Extent != 1.');
    return SInt64();
  }
  if(dt.getPod() == Alembic_kInt64POD)
  {
    SInt64 values[] = this.prop.getAsSInt64(iSS);
    if(values.size() != 1)
      return SInt64();
    return values[0];
  }
  setError('AlembicISInt64Property.get: Encapsulated AlembicIScalarProperty has invalid POD.');
  return SInt64();
}

function SInt64 AlembicISInt64Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOSInt64Property {
  AlembicOScalarProperty prop;
};

function AlembicOSInt64Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kInt64POD, 1));
}

function AlembicOSInt64Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOSInt64Property prop) {
  this = prop.prop;
}

function Boolean AlembicOSInt64Property.valid() {
  return this.prop.valid();
}

function AlembicOSInt64Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOSInt64Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOSInt64Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOSInt64Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOSInt64Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOSInt64Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOSInt64Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOSInt64Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOSInt64Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOSInt64Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOSInt64Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOSInt64Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOSInt64Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOSInt64Property.getParent() {
  return this.prop.getParent();
}

function AlembicOSInt64Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOSInt64Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOSInt64Property.set!(SInt64 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOSInt64Property.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kInt64POD) {
    SInt64 values[];
    values.push(value);
    this.prop.setAsSInt64(values);
  } else {
    setError('AlembicOSInt64Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicISInt64ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicISInt64ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicISInt64ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicISInt64ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicISInt64ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicISInt64ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicISInt64ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicISInt64ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicISInt64ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicISInt64ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicISInt64ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicISInt64ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicISInt64ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicISInt64ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicISInt64ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicISInt64ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicISInt64ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicISInt64ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicISInt64ArrayProperty.getParent() {
  return this.prop.getParent();
}

function SInt64[] AlembicISInt64ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  SInt64 values[];
  if(dt.getExtent() != 1) {
    setError('AlembicISInt64ArrayProperty.get: Extent != 1.');
    return values;
  }
  if(dt.getPod() == Alembic_kInt64POD)
    values = this.prop.getAsSInt64(iSS);
  else
    setError('AlembicISInt64ArrayProperty.get: Encapsulated AlembicIArrayProperty has invalid POD.');
  return values;
}

function SInt64[] AlembicISInt64ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOSInt64ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOSInt64ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kInt64POD, 1));
}

function AlembicOSInt64ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOSInt64ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOSInt64ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOSInt64ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOSInt64ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOSInt64ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOSInt64ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOSInt64ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOSInt64ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOSInt64ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOSInt64ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOSInt64ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOSInt64ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOSInt64ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOSInt64ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOSInt64ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOSInt64ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOSInt64ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOSInt64ArrayProperty.set!(SInt64 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOSInt64ArrayProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kInt64POD) {
    this.prop.setAsSInt64(values);
  } else {
    setError('AlembicOSInt64ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIUInt8Property {
  AlembicIScalarProperty prop;
};

function AlembicIUInt8Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIUInt8Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIUInt8Property prop) {
  this = prop.prop;
}

function Boolean AlembicIUInt8Property.valid() {
  return this.prop.valid();
}

function AlembicIUInt8Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIUInt8Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIUInt8Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIUInt8Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIUInt8Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIUInt8Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIUInt8Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIUInt8Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIUInt8Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIUInt8Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIUInt8Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIUInt8Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIUInt8Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIUInt8Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIUInt8Property.getParent() {
  return this.prop.getParent();
}

function UInt8 AlembicIUInt8Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicIUInt8Property.get: Extent != 1.');
    return UInt8();
  }
  if(dt.getPod() == Alembic_kUint8POD)
  {
    UInt8 values[] = this.prop.getAsUInt8(iSS);
    if(values.size() != 1)
      return UInt8();
    return values[0];
  }
  setError('AlembicIUInt8Property.get: Encapsulated AlembicIScalarProperty has invalid POD.');
  return UInt8();
}

function UInt8 AlembicIUInt8Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOUInt8Property {
  AlembicOScalarProperty prop;
};

function AlembicOUInt8Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kUint8POD, 1));
}

function AlembicOUInt8Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOUInt8Property prop) {
  this = prop.prop;
}

function Boolean AlembicOUInt8Property.valid() {
  return this.prop.valid();
}

function AlembicOUInt8Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOUInt8Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOUInt8Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOUInt8Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOUInt8Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOUInt8Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOUInt8Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOUInt8Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOUInt8Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOUInt8Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOUInt8Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOUInt8Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOUInt8Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOUInt8Property.getParent() {
  return this.prop.getParent();
}

function AlembicOUInt8Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOUInt8Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOUInt8Property.set!(UInt8 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOUInt8Property.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kUint8POD) {
    UInt8 values[];
    values.push(value);
    this.prop.setAsUInt8(values);
  } else {
    setError('AlembicOUInt8Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIUInt8ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIUInt8ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIUInt8ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIUInt8ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIUInt8ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIUInt8ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIUInt8ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIUInt8ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIUInt8ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIUInt8ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIUInt8ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIUInt8ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIUInt8ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIUInt8ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIUInt8ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIUInt8ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIUInt8ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIUInt8ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIUInt8ArrayProperty.getParent() {
  return this.prop.getParent();
}

function UInt8[] AlembicIUInt8ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  UInt8 values[];
  if(dt.getExtent() != 1) {
    setError('AlembicIUInt8ArrayProperty.get: Extent != 1.');
    return values;
  }
  if(dt.getPod() == Alembic_kUint8POD)
    values = this.prop.getAsUInt8(iSS);
  else
    setError('AlembicIUInt8ArrayProperty.get: Encapsulated AlembicIArrayProperty has invalid POD.');
  return values;
}

function UInt8[] AlembicIUInt8ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOUInt8ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOUInt8ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kUint8POD, 1));
}

function AlembicOUInt8ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOUInt8ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOUInt8ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOUInt8ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOUInt8ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOUInt8ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOUInt8ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOUInt8ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOUInt8ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOUInt8ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOUInt8ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOUInt8ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOUInt8ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOUInt8ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOUInt8ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOUInt8ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOUInt8ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOUInt8ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOUInt8ArrayProperty.set!(UInt8 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOUInt8ArrayProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kUint8POD) {
    this.prop.setAsUInt8(values);
  } else {
    setError('AlembicOUInt8ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIUInt16Property {
  AlembicIScalarProperty prop;
};

function AlembicIUInt16Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIUInt16Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIUInt16Property prop) {
  this = prop.prop;
}

function Boolean AlembicIUInt16Property.valid() {
  return this.prop.valid();
}

function AlembicIUInt16Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIUInt16Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIUInt16Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIUInt16Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIUInt16Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIUInt16Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIUInt16Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIUInt16Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIUInt16Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIUInt16Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIUInt16Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIUInt16Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIUInt16Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIUInt16Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIUInt16Property.getParent() {
  return this.prop.getParent();
}

function UInt16 AlembicIUInt16Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicIUInt16Property.get: Extent != 1.');
    return UInt16();
  }
  if(dt.getPod() == Alembic_kUint16POD)
  {
    UInt16 values[] = this.prop.getAsUInt16(iSS);
    if(values.size() != 1)
      return UInt16();
    return values[0];
  }
  setError('AlembicIUInt16Property.get: Encapsulated AlembicIScalarProperty has invalid POD.');
  return UInt16();
}

function UInt16 AlembicIUInt16Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOUInt16Property {
  AlembicOScalarProperty prop;
};

function AlembicOUInt16Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kUint16POD, 1));
}

function AlembicOUInt16Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOUInt16Property prop) {
  this = prop.prop;
}

function Boolean AlembicOUInt16Property.valid() {
  return this.prop.valid();
}

function AlembicOUInt16Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOUInt16Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOUInt16Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOUInt16Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOUInt16Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOUInt16Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOUInt16Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOUInt16Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOUInt16Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOUInt16Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOUInt16Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOUInt16Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOUInt16Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOUInt16Property.getParent() {
  return this.prop.getParent();
}

function AlembicOUInt16Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOUInt16Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOUInt16Property.set!(UInt16 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOUInt16Property.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kUint16POD) {
    UInt16 values[];
    values.push(value);
    this.prop.setAsUInt16(values);
  } else {
    setError('AlembicOUInt16Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIUInt16ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIUInt16ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIUInt16ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIUInt16ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIUInt16ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIUInt16ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIUInt16ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIUInt16ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIUInt16ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIUInt16ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIUInt16ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIUInt16ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIUInt16ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIUInt16ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIUInt16ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIUInt16ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIUInt16ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIUInt16ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIUInt16ArrayProperty.getParent() {
  return this.prop.getParent();
}

function UInt16[] AlembicIUInt16ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  UInt16 values[];
  if(dt.getExtent() != 1) {
    setError('AlembicIUInt16ArrayProperty.get: Extent != 1.');
    return values;
  }
  if(dt.getPod() == Alembic_kUint16POD)
    values = this.prop.getAsUInt16(iSS);
  else
    setError('AlembicIUInt16ArrayProperty.get: Encapsulated AlembicIArrayProperty has invalid POD.');
  return values;
}

function UInt16[] AlembicIUInt16ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOUInt16ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOUInt16ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kUint16POD, 1));
}

function AlembicOUInt16ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOUInt16ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOUInt16ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOUInt16ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOUInt16ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOUInt16ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOUInt16ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOUInt16ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOUInt16ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOUInt16ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOUInt16ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOUInt16ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOUInt16ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOUInt16ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOUInt16ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOUInt16ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOUInt16ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOUInt16ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOUInt16ArrayProperty.set!(UInt16 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOUInt16ArrayProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kUint16POD) {
    this.prop.setAsUInt16(values);
  } else {
    setError('AlembicOUInt16ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIUInt32Property {
  AlembicIScalarProperty prop;
};

function AlembicIUInt32Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIUInt32Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIUInt32Property prop) {
  this = prop.prop;
}

function Boolean AlembicIUInt32Property.valid() {
  return this.prop.valid();
}

function AlembicIUInt32Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIUInt32Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIUInt32Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIUInt32Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIUInt32Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIUInt32Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIUInt32Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIUInt32Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIUInt32Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIUInt32Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIUInt32Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIUInt32Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIUInt32Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIUInt32Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIUInt32Property.getParent() {
  return this.prop.getParent();
}

function UInt32 AlembicIUInt32Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicIUInt32Property.get: Extent != 1.');
    return UInt32();
  }
  if(dt.getPod() == Alembic_kUint32POD)
  {
    UInt32 values[] = this.prop.getAsUInt32(iSS);
    if(values.size() != 1)
      return UInt32();
    return values[0];
  }
  setError('AlembicIUInt32Property.get: Encapsulated AlembicIScalarProperty has invalid POD.');
  return UInt32();
}

function UInt32 AlembicIUInt32Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOUInt32Property {
  AlembicOScalarProperty prop;
};

function AlembicOUInt32Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kUint32POD, 1));
}

function AlembicOUInt32Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOUInt32Property prop) {
  this = prop.prop;
}

function Boolean AlembicOUInt32Property.valid() {
  return this.prop.valid();
}

function AlembicOUInt32Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOUInt32Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOUInt32Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOUInt32Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOUInt32Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOUInt32Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOUInt32Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOUInt32Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOUInt32Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOUInt32Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOUInt32Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOUInt32Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOUInt32Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOUInt32Property.getParent() {
  return this.prop.getParent();
}

function AlembicOUInt32Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOUInt32Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOUInt32Property.set!(UInt32 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOUInt32Property.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kUint32POD) {
    UInt32 values[];
    values.push(value);
    this.prop.setAsUInt32(values);
  } else {
    setError('AlembicOUInt32Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIUInt32ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIUInt32ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIUInt32ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIUInt32ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIUInt32ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIUInt32ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIUInt32ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIUInt32ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIUInt32ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIUInt32ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIUInt32ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIUInt32ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIUInt32ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIUInt32ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIUInt32ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIUInt32ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIUInt32ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIUInt32ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIUInt32ArrayProperty.getParent() {
  return this.prop.getParent();
}

function UInt32[] AlembicIUInt32ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  UInt32 values[];
  if(dt.getExtent() != 1) {
    setError('AlembicIUInt32ArrayProperty.get: Extent != 1.');
    return values;
  }
  if(dt.getPod() == Alembic_kUint32POD)
    values = this.prop.getAsUInt32(iSS);
  else
    setError('AlembicIUInt32ArrayProperty.get: Encapsulated AlembicIArrayProperty has invalid POD.');
  return values;
}

function UInt32[] AlembicIUInt32ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOUInt32ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOUInt32ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kUint32POD, 1));
}

function AlembicOUInt32ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOUInt32ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOUInt32ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOUInt32ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOUInt32ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOUInt32ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOUInt32ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOUInt32ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOUInt32ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOUInt32ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOUInt32ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOUInt32ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOUInt32ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOUInt32ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOUInt32ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOUInt32ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOUInt32ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOUInt32ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOUInt32ArrayProperty.set!(UInt32 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOUInt32ArrayProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kUint32POD) {
    this.prop.setAsUInt32(values);
  } else {
    setError('AlembicOUInt32ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIUInt64Property {
  AlembicIScalarProperty prop;
};

function AlembicIUInt64Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIUInt64Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIUInt64Property prop) {
  this = prop.prop;
}

function Boolean AlembicIUInt64Property.valid() {
  return this.prop.valid();
}

function AlembicIUInt64Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIUInt64Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIUInt64Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIUInt64Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIUInt64Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIUInt64Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIUInt64Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIUInt64Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIUInt64Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIUInt64Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIUInt64Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIUInt64Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIUInt64Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIUInt64Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIUInt64Property.getParent() {
  return this.prop.getParent();
}

function UInt64 AlembicIUInt64Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicIUInt64Property.get: Extent != 1.');
    return UInt64();
  }
  if(dt.getPod() == Alembic_kUint64POD)
  {
    UInt64 values[] = this.prop.getAsUInt64(iSS);
    if(values.size() != 1)
      return UInt64();
    return values[0];
  }
  setError('AlembicIUInt64Property.get: Encapsulated AlembicIScalarProperty has invalid POD.');
  return UInt64();
}

function UInt64 AlembicIUInt64Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOUInt64Property {
  AlembicOScalarProperty prop;
};

function AlembicOUInt64Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kUint64POD, 1));
}

function AlembicOUInt64Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOUInt64Property prop) {
  this = prop.prop;
}

function Boolean AlembicOUInt64Property.valid() {
  return this.prop.valid();
}

function AlembicOUInt64Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOUInt64Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOUInt64Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOUInt64Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOUInt64Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOUInt64Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOUInt64Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOUInt64Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOUInt64Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOUInt64Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOUInt64Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOUInt64Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOUInt64Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOUInt64Property.getParent() {
  return this.prop.getParent();
}

function AlembicOUInt64Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOUInt64Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOUInt64Property.set!(UInt64 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOUInt64Property.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kUint64POD) {
    UInt64 values[];
    values.push(value);
    this.prop.setAsUInt64(values);
  } else {
    setError('AlembicOUInt64Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIUInt64ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIUInt64ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIUInt64ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIUInt64ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIUInt64ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIUInt64ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIUInt64ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIUInt64ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIUInt64ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIUInt64ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIUInt64ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIUInt64ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIUInt64ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIUInt64ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIUInt64ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIUInt64ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIUInt64ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIUInt64ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIUInt64ArrayProperty.getParent() {
  return this.prop.getParent();
}

function UInt64[] AlembicIUInt64ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  UInt64 values[];
  if(dt.getExtent() != 1) {
    setError('AlembicIUInt64ArrayProperty.get: Extent != 1.');
    return values;
  }
  if(dt.getPod() == Alembic_kUint64POD)
    values = this.prop.getAsUInt64(iSS);
  else
    setError('AlembicIUInt64ArrayProperty.get: Encapsulated AlembicIArrayProperty has invalid POD.');
  return values;
}

function UInt64[] AlembicIUInt64ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOUInt64ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOUInt64ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kUint64POD, 1));
}

function AlembicOUInt64ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOUInt64ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOUInt64ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOUInt64ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOUInt64ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOUInt64ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOUInt64ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOUInt64ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOUInt64ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOUInt64ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOUInt64ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOUInt64ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOUInt64ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOUInt64ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOUInt64ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOUInt64ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOUInt64ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOUInt64ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOUInt64ArrayProperty.set!(UInt64 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOUInt64ArrayProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kUint64POD) {
    this.prop.setAsUInt64(values);
  } else {
    setError('AlembicOUInt64ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIFloat16Property {
  AlembicIScalarProperty prop;
};

function AlembicIFloat16Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIFloat16Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIFloat16Property prop) {
  this = prop.prop;
}

function Boolean AlembicIFloat16Property.valid() {
  return this.prop.valid();
}

function AlembicIFloat16Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIFloat16Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIFloat16Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIFloat16Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIFloat16Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIFloat16Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIFloat16Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIFloat16Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIFloat16Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIFloat16Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIFloat16Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIFloat16Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIFloat16Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIFloat16Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIFloat16Property.getParent() {
  return this.prop.getParent();
}

function Float32 AlembicIFloat16Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicIFloat16Property.get: Extent != 1.');
    return Float32();
  }
  if(dt.getPod() == Alembic_kFloat16POD)
  {
    Float32 values[] = this.prop.getAsFloat16(iSS);
    if(values.size() != 1)
      return Float32();
    return values[0];
  }
  setError('AlembicIFloat16Property.get: Encapsulated AlembicIScalarProperty has invalid POD.');
  return Float32();
}

function Float32 AlembicIFloat16Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOFloat16Property {
  AlembicOScalarProperty prop;
};

function AlembicOFloat16Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kFloat16POD, 1));
}

function AlembicOFloat16Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOFloat16Property prop) {
  this = prop.prop;
}

function Boolean AlembicOFloat16Property.valid() {
  return this.prop.valid();
}

function AlembicOFloat16Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOFloat16Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOFloat16Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOFloat16Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOFloat16Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOFloat16Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOFloat16Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOFloat16Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOFloat16Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOFloat16Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOFloat16Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOFloat16Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOFloat16Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOFloat16Property.getParent() {
  return this.prop.getParent();
}

function AlembicOFloat16Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOFloat16Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOFloat16Property.set!(Float32 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOFloat16Property.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kFloat16POD) {
    Float32 values[];
    values.push(value);
    this.prop.setAsFloat16(values);
  } else {
    setError('AlembicOFloat16Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIFloat16ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIFloat16ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIFloat16ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIFloat16ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIFloat16ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIFloat16ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIFloat16ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIFloat16ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIFloat16ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIFloat16ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIFloat16ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIFloat16ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIFloat16ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIFloat16ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIFloat16ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIFloat16ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIFloat16ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIFloat16ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIFloat16ArrayProperty.getParent() {
  return this.prop.getParent();
}

function Float32[] AlembicIFloat16ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  Float32 values[];
  if(dt.getExtent() != 1) {
    setError('AlembicIFloat16ArrayProperty.get: Extent != 1.');
    return values;
  }
  if(dt.getPod() == Alembic_kFloat16POD)
    values = this.prop.getAsFloat16(iSS);
  else
    setError('AlembicIFloat16ArrayProperty.get: Encapsulated AlembicIArrayProperty has invalid POD.');
  return values;
}

function Float32[] AlembicIFloat16ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOFloat16ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOFloat16ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kFloat16POD, 1));
}

function AlembicOFloat16ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOFloat16ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOFloat16ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOFloat16ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOFloat16ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOFloat16ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOFloat16ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOFloat16ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOFloat16ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOFloat16ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOFloat16ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOFloat16ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOFloat16ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOFloat16ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOFloat16ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOFloat16ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOFloat16ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOFloat16ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOFloat16ArrayProperty.set!(Float32 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOFloat16ArrayProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kFloat16POD) {
    this.prop.setAsFloat16(values);
  } else {
    setError('AlembicOFloat16ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIFloat32Property {
  AlembicIScalarProperty prop;
};

function AlembicIFloat32Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIFloat32Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIFloat32Property prop) {
  this = prop.prop;
}

function Boolean AlembicIFloat32Property.valid() {
  return this.prop.valid();
}

function AlembicIFloat32Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIFloat32Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIFloat32Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIFloat32Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIFloat32Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIFloat32Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIFloat32Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIFloat32Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIFloat32Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIFloat32Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIFloat32Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIFloat32Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIFloat32Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIFloat32Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIFloat32Property.getParent() {
  return this.prop.getParent();
}

function Float32 AlembicIFloat32Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicIFloat32Property.get: Extent != 1.');
    return Float32();
  }
  if(dt.getPod() == Alembic_kFloat32POD)
  {
    Float32 values[] = this.prop.getAsFloat32(iSS);
    if(values.size() != 1)
      return Float32();
    return values[0];
  }
  setError('AlembicIFloat32Property.get: Encapsulated AlembicIScalarProperty has invalid POD.');
  return Float32();
}

function Float32 AlembicIFloat32Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOFloat32Property {
  AlembicOScalarProperty prop;
};

function AlembicOFloat32Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 1));
}

function AlembicOFloat32Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOFloat32Property prop) {
  this = prop.prop;
}

function Boolean AlembicOFloat32Property.valid() {
  return this.prop.valid();
}

function AlembicOFloat32Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOFloat32Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOFloat32Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOFloat32Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOFloat32Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOFloat32Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOFloat32Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOFloat32Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOFloat32Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOFloat32Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOFloat32Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOFloat32Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOFloat32Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOFloat32Property.getParent() {
  return this.prop.getParent();
}

function AlembicOFloat32Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOFloat32Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOFloat32Property.set!(Float32 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOFloat32Property.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kFloat32POD) {
    Float32 values[];
    values.push(value);
    this.prop.setAsFloat32(values);
  } else {
    setError('AlembicOFloat32Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIFloat32ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIFloat32ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIFloat32ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIFloat32ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIFloat32ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIFloat32ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIFloat32ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIFloat32ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIFloat32ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIFloat32ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIFloat32ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIFloat32ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIFloat32ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIFloat32ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIFloat32ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIFloat32ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIFloat32ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIFloat32ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIFloat32ArrayProperty.getParent() {
  return this.prop.getParent();
}

function Float32[] AlembicIFloat32ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  Float32 values[];
  if(dt.getExtent() != 1) {
    setError('AlembicIFloat32ArrayProperty.get: Extent != 1.');
    return values;
  }
  if(dt.getPod() == Alembic_kFloat32POD)
    values = this.prop.getAsFloat32(iSS);
  else
    setError('AlembicIFloat32ArrayProperty.get: Encapsulated AlembicIArrayProperty has invalid POD.');
  return values;
}

function Float32[] AlembicIFloat32ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOFloat32ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOFloat32ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 1));
}

function AlembicOFloat32ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOFloat32ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOFloat32ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOFloat32ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOFloat32ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOFloat32ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOFloat32ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOFloat32ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOFloat32ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOFloat32ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOFloat32ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOFloat32ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOFloat32ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOFloat32ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOFloat32ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOFloat32ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOFloat32ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOFloat32ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOFloat32ArrayProperty.set!(Float32 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOFloat32ArrayProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kFloat32POD) {
    this.prop.setAsFloat32(values);
  } else {
    setError('AlembicOFloat32ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIFloat64Property {
  AlembicIScalarProperty prop;
};

function AlembicIFloat64Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIFloat64Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIFloat64Property prop) {
  this = prop.prop;
}

function Boolean AlembicIFloat64Property.valid() {
  return this.prop.valid();
}

function AlembicIFloat64Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIFloat64Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIFloat64Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIFloat64Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIFloat64Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIFloat64Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIFloat64Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIFloat64Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIFloat64Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIFloat64Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIFloat64Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIFloat64Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIFloat64Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIFloat64Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIFloat64Property.getParent() {
  return this.prop.getParent();
}

function Float64 AlembicIFloat64Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicIFloat64Property.get: Extent != 1.');
    return Float64();
  }
  if(dt.getPod() == Alembic_kFloat64POD)
  {
    Float64 values[] = this.prop.getAsFloat64(iSS);
    if(values.size() != 1)
      return Float64();
    return values[0];
  }
  setError('AlembicIFloat64Property.get: Encapsulated AlembicIScalarProperty has invalid POD.');
  return Float64();
}

function Float64 AlembicIFloat64Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOFloat64Property {
  AlembicOScalarProperty prop;
};

function AlembicOFloat64Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kFloat64POD, 1));
}

function AlembicOFloat64Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOFloat64Property prop) {
  this = prop.prop;
}

function Boolean AlembicOFloat64Property.valid() {
  return this.prop.valid();
}

function AlembicOFloat64Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOFloat64Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOFloat64Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOFloat64Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOFloat64Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOFloat64Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOFloat64Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOFloat64Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOFloat64Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOFloat64Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOFloat64Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOFloat64Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOFloat64Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOFloat64Property.getParent() {
  return this.prop.getParent();
}

function AlembicOFloat64Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOFloat64Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOFloat64Property.set!(Float64 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOFloat64Property.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kFloat64POD) {
    Float64 values[];
    values.push(value);
    this.prop.setAsFloat64(values);
  } else {
    setError('AlembicOFloat64Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIFloat64ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIFloat64ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIFloat64ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIFloat64ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIFloat64ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIFloat64ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIFloat64ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIFloat64ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIFloat64ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIFloat64ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIFloat64ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIFloat64ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIFloat64ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIFloat64ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIFloat64ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIFloat64ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIFloat64ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIFloat64ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIFloat64ArrayProperty.getParent() {
  return this.prop.getParent();
}

function Float64[] AlembicIFloat64ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  Float64 values[];
  if(dt.getExtent() != 1) {
    setError('AlembicIFloat64ArrayProperty.get: Extent != 1.');
    return values;
  }
  if(dt.getPod() == Alembic_kFloat64POD)
    values = this.prop.getAsFloat64(iSS);
  else
    setError('AlembicIFloat64ArrayProperty.get: Encapsulated AlembicIArrayProperty has invalid POD.');
  return values;
}

function Float64[] AlembicIFloat64ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOFloat64ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOFloat64ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kFloat64POD, 1));
}

function AlembicOFloat64ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOFloat64ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOFloat64ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOFloat64ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOFloat64ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOFloat64ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOFloat64ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOFloat64ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOFloat64ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOFloat64ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOFloat64ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOFloat64ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOFloat64ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOFloat64ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOFloat64ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOFloat64ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOFloat64ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOFloat64ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOFloat64ArrayProperty.set!(Float64 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOFloat64ArrayProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kFloat64POD) {
    this.prop.setAsFloat64(values);
  } else {
    setError('AlembicOFloat64ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIStringProperty {
  AlembicIScalarProperty prop;
};

function AlembicIStringProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIStringProperty(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIStringProperty prop) {
  this = prop.prop;
}

function Boolean AlembicIStringProperty.valid() {
  return this.prop.valid();
}

function AlembicIStringProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIStringProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIStringProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIStringProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIStringProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIStringProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIStringProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIStringProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIStringProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIStringProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIStringProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIStringProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIStringProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIStringProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIStringProperty.getParent() {
  return this.prop.getParent();
}

function String AlembicIStringProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicIStringProperty.get: Extent != 1.');
    return String();
  }
  if(dt.getPod() == Alembic_kStringPOD)
  {
    String values[] = this.prop.getAsString(iSS);
    if(values.size() != 1)
      return String();
    return values[0];
  }
  setError('AlembicIStringProperty.get: Encapsulated AlembicIScalarProperty has invalid POD.');
  return String();
}

function String AlembicIStringProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOStringProperty {
  AlembicOScalarProperty prop;
};

function AlembicOStringProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kStringPOD, 1));
}

function AlembicOStringProperty(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOStringProperty prop) {
  this = prop.prop;
}

function Boolean AlembicOStringProperty.valid() {
  return this.prop.valid();
}

function AlembicOStringProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOStringProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOStringProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOStringProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOStringProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOStringProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOStringProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOStringProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOStringProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOStringProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOStringProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOStringProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOStringProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOStringProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOStringProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOStringProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOStringProperty.set!(String value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOStringProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kStringPOD) {
    String values[];
    values.push(value);
    this.prop.setAsString(values);
  } else {
    setError('AlembicOStringProperty.set: Encapsulated AlembicOScalarProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIStringArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIStringArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIStringArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIStringArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIStringArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIStringArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIStringArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIStringArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIStringArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIStringArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIStringArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIStringArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIStringArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIStringArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIStringArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIStringArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIStringArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIStringArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIStringArrayProperty.getParent() {
  return this.prop.getParent();
}

function String[] AlembicIStringArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  String values[];
  if(dt.getExtent() != 1) {
    setError('AlembicIStringArrayProperty.get: Extent != 1.');
    return values;
  }
  if(dt.getPod() == Alembic_kStringPOD)
    values = this.prop.getAsString(iSS);
  else
    setError('AlembicIStringArrayProperty.get: Encapsulated AlembicIArrayProperty has invalid POD.');
  return values;
}

function String[] AlembicIStringArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOStringArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOStringArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kStringPOD, 1));
}

function AlembicOStringArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOStringArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOStringArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOStringArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOStringArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOStringArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOStringArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOStringArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOStringArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOStringArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOStringArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOStringArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOStringArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOStringArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOStringArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOStringArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOStringArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOStringArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOStringArrayProperty.set!(String values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 1) {
    setError('AlembicOStringArrayProperty.set: Extent != 1.');
    return;
  }
  if(dt.getPod() == Alembic_kStringPOD) {
    this.prop.setAsString(values);
  } else {
    setError('AlembicOStringArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIVec2Property {
  AlembicIScalarProperty prop;
};

function AlembicIVec2Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIVec2Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIVec2Property prop) {
  this = prop.prop;
}

function Boolean AlembicIVec2Property.valid() {
  return this.prop.valid();
}

function AlembicIVec2Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIVec2Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIVec2Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIVec2Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIVec2Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIVec2Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIVec2Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIVec2Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIVec2Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIVec2Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIVec2Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIVec2Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIVec2Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIVec2Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIVec2Property.getParent() {
  return this.prop.getParent();
}

function Vec2 AlembicIVec2Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 2) {
    setError('AlembicIVec2Property.get: Extent != 2.');
    return Vec2();
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() != 2)
        setError('AlembicOVec2Property.get: Packed values does not match extent, != 2.');
      else
        return Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() != 2)
        setError('AlembicOVec2Property.get: Packed values does not match extent, != 2.');
      else
        return Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() != 2)
        setError('AlembicOVec2Property.get: Packed values does not match extent, != 2.');
      else
        return Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() != 2)
        setError('AlembicOVec2Property.get: Packed values does not match extent, != 2.');
      else
        return Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() != 2)
        setError('AlembicOVec2Property.get: Packed values does not match extent, != 2.');
      else
        return Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() != 2)
        setError('AlembicOVec2Property.get: Packed values does not match extent, != 2.');
      else
        return Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() != 2)
        setError('AlembicOVec2Property.get: Packed values does not match extent, != 2.');
      else
        return Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() != 2)
        setError('AlembicOVec2Property.get: Packed values does not match extent, != 2.');
      else
        return Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() != 2)
        setError('AlembicOVec2Property.get: Packed values does not match extent, != 2.');
      else
        return Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() != 2)
        setError('AlembicOVec2Property.get: Packed values does not match extent, != 2.');
      else
        return Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() != 2)
        setError('AlembicOVec2Property.get: Packed values does not match extent, != 2.');
      else
        return Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
      break;
    }
    default:
    {
      setError('AlembicOVec2Property.get: Papsulated AlembicIScalarProperty has invalid POD.');
    }
  }
  return Vec2();
}

function Vec2 AlembicIVec2Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOVec2Property {
  AlembicOScalarProperty prop;
};

function AlembicOVec2Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 2));
}

function AlembicOVec2Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOVec2Property prop) {
  this = prop.prop;
}

function Boolean AlembicOVec2Property.valid() {
  return this.prop.valid();
}

function AlembicOVec2Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOVec2Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOVec2Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOVec2Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOVec2Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOVec2Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOVec2Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOVec2Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOVec2Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOVec2Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOVec2Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOVec2Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOVec2Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOVec2Property.getParent() {
  return this.prop.getParent();
}

function AlembicOVec2Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOVec2Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOVec2Property.set!(Vec2 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 2) {
    setError('AlembicOVec2Property.set: Extent != 2.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(2);
      packed[offset+0] = value.x; packed[offset+1] = value.y;
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(2);
      packed[offset+0] = value.x; packed[offset+1] = value.y;
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(2);
      packed[offset+0] = value.x; packed[offset+1] = value.y;
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(2);
      packed[offset+0] = value.x; packed[offset+1] = value.y;
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(2);
      packed[offset+0] = value.x; packed[offset+1] = value.y;
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(2);
      packed[offset+0] = value.x; packed[offset+1] = value.y;
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(2);
      packed[offset+0] = value.x; packed[offset+1] = value.y;
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(2);
      packed[offset+0] = value.x; packed[offset+1] = value.y;
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(2);
      packed[offset+0] = value.x; packed[offset+1] = value.y;
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(2);
      packed[offset+0] = value.x; packed[offset+1] = value.y;
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(2);
      packed[offset+0] = value.x; packed[offset+1] = value.y;
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOVec2Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIVec2ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIVec2ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIVec2ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIVec2ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIVec2ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIVec2ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIVec2ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIVec2ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIVec2ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIVec2ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIVec2ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIVec2ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIVec2ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIVec2ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIVec2ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIVec2ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIVec2ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIVec2ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIVec2ArrayProperty.getParent() {
  return this.prop.getParent();
}

function Vec2[] AlembicIVec2ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  Vec2 values[];
  if(dt.getExtent() != 2) {
    setError('AlembicIVec2ArrayProperty.get: Extent != 2.');
    return values;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() % 2 != 0)
        setError('AlembicOVec2ArrayProperty.get: Packed values does not match extent, != 2.');
      else {
        values.resize(packed.size() / 2);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
          offset+=2;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() % 2 != 0)
        setError('AlembicOVec2ArrayProperty.get: Packed values does not match extent, != 2.');
      else {
        values.resize(packed.size() / 2);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
          offset+=2;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() % 2 != 0)
        setError('AlembicOVec2ArrayProperty.get: Packed values does not match extent, != 2.');
      else {
        values.resize(packed.size() / 2);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
          offset+=2;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() % 2 != 0)
        setError('AlembicOVec2ArrayProperty.get: Packed values does not match extent, != 2.');
      else {
        values.resize(packed.size() / 2);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
          offset+=2;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() % 2 != 0)
        setError('AlembicOVec2ArrayProperty.get: Packed values does not match extent, != 2.');
      else {
        values.resize(packed.size() / 2);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
          offset+=2;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() % 2 != 0)
        setError('AlembicOVec2ArrayProperty.get: Packed values does not match extent, != 2.');
      else {
        values.resize(packed.size() / 2);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
          offset+=2;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() % 2 != 0)
        setError('AlembicOVec2ArrayProperty.get: Packed values does not match extent, != 2.');
      else {
        values.resize(packed.size() / 2);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
          offset+=2;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() % 2 != 0)
        setError('AlembicOVec2ArrayProperty.get: Packed values does not match extent, != 2.');
      else {
        values.resize(packed.size() / 2);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
          offset+=2;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() % 2 != 0)
        setError('AlembicOVec2ArrayProperty.get: Packed values does not match extent, != 2.');
      else {
        values.resize(packed.size() / 2);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
          offset+=2;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() % 2 != 0)
        setError('AlembicOVec2ArrayProperty.get: Packed values does not match extent, != 2.');
      else {
        values.resize(packed.size() / 2);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
          offset+=2;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() % 2 != 0)
        setError('AlembicOVec2ArrayProperty.get: Packed values does not match extent, != 2.');
      else {
        values.resize(packed.size() / 2);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec2(Float32(packed[offset+0]), Float32(packed[offset+1]));
          offset+=2;
        }
        return values;
      }
      break;
    }
    default:
    {
      setError('AlembicOVec2ArrayProperty.get: Papsulated AlembicIArrayProperty has invalid POD.');
    }
  }
  return values;
}

function Vec2[] AlembicIVec2ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOVec2ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOVec2ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 2));
}

function AlembicOVec2ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOVec2ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOVec2ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOVec2ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOVec2ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOVec2ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOVec2ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOVec2ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOVec2ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOVec2ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOVec2ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOVec2ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOVec2ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOVec2ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOVec2ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOVec2ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOVec2ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOVec2ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOVec2ArrayProperty.set!(Vec2 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 2) {
    setError('AlembicOVec2ArrayProperty.set: Extent != 2.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(2 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec2 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y;
        offset+=2;
      }
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(2 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec2 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y;
        offset+=2;
      }
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(2 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec2 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y;
        offset+=2;
      }
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(2 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec2 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y;
        offset+=2;
      }
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(2 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec2 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y;
        offset+=2;
      }
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(2 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec2 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y;
        offset+=2;
      }
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(2 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec2 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y;
        offset+=2;
      }
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(2 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec2 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y;
        offset+=2;
      }
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(2 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec2 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y;
        offset+=2;
      }
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(2 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec2 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y;
        offset+=2;
      }
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(2 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec2 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y;
        offset+=2;
      }
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOVec2ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIVec3Property {
  AlembicIScalarProperty prop;
};

function AlembicIVec3Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIVec3Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIVec3Property prop) {
  this = prop.prop;
}

function Boolean AlembicIVec3Property.valid() {
  return this.prop.valid();
}

function AlembicIVec3Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIVec3Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIVec3Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIVec3Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIVec3Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIVec3Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIVec3Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIVec3Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIVec3Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIVec3Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIVec3Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIVec3Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIVec3Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIVec3Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIVec3Property.getParent() {
  return this.prop.getParent();
}

function Vec3 AlembicIVec3Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 3) {
    setError('AlembicIVec3Property.get: Extent != 3.');
    return Vec3();
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() != 3)
        setError('AlembicOVec3Property.get: Packed values does not match extent, != 3.');
      else
        return Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() != 3)
        setError('AlembicOVec3Property.get: Packed values does not match extent, != 3.');
      else
        return Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() != 3)
        setError('AlembicOVec3Property.get: Packed values does not match extent, != 3.');
      else
        return Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() != 3)
        setError('AlembicOVec3Property.get: Packed values does not match extent, != 3.');
      else
        return Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() != 3)
        setError('AlembicOVec3Property.get: Packed values does not match extent, != 3.');
      else
        return Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() != 3)
        setError('AlembicOVec3Property.get: Packed values does not match extent, != 3.');
      else
        return Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() != 3)
        setError('AlembicOVec3Property.get: Packed values does not match extent, != 3.');
      else
        return Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() != 3)
        setError('AlembicOVec3Property.get: Packed values does not match extent, != 3.');
      else
        return Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() != 3)
        setError('AlembicOVec3Property.get: Packed values does not match extent, != 3.');
      else
        return Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() != 3)
        setError('AlembicOVec3Property.get: Packed values does not match extent, != 3.');
      else
        return Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() != 3)
        setError('AlembicOVec3Property.get: Packed values does not match extent, != 3.');
      else
        return Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
      break;
    }
    default:
    {
      setError('AlembicOVec3Property.get: Papsulated AlembicIScalarProperty has invalid POD.');
    }
  }
  return Vec3();
}

function Vec3 AlembicIVec3Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOVec3Property {
  AlembicOScalarProperty prop;
};

function AlembicOVec3Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 3));
}

function AlembicOVec3Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOVec3Property prop) {
  this = prop.prop;
}

function Boolean AlembicOVec3Property.valid() {
  return this.prop.valid();
}

function AlembicOVec3Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOVec3Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOVec3Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOVec3Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOVec3Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOVec3Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOVec3Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOVec3Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOVec3Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOVec3Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOVec3Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOVec3Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOVec3Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOVec3Property.getParent() {
  return this.prop.getParent();
}

function AlembicOVec3Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOVec3Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOVec3Property.set!(Vec3 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 3) {
    setError('AlembicOVec3Property.set: Extent != 3.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(3);
      packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(3);
      packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(3);
      packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(3);
      packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(3);
      packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(3);
      packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(3);
      packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(3);
      packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(3);
      packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(3);
      packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(3);
      packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOVec3Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIVec3ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIVec3ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIVec3ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIVec3ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIVec3ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIVec3ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIVec3ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIVec3ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIVec3ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIVec3ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIVec3ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIVec3ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIVec3ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIVec3ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIVec3ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIVec3ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIVec3ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIVec3ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIVec3ArrayProperty.getParent() {
  return this.prop.getParent();
}

function Vec3[] AlembicIVec3ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  Vec3 values[];
  if(dt.getExtent() != 3) {
    setError('AlembicIVec3ArrayProperty.get: Extent != 3.');
    return values;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() % 3 != 0)
        setError('AlembicOVec3ArrayProperty.get: Packed values does not match extent, != 3.');
      else {
        values.resize(packed.size() / 3);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
          offset+=3;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() % 3 != 0)
        setError('AlembicOVec3ArrayProperty.get: Packed values does not match extent, != 3.');
      else {
        values.resize(packed.size() / 3);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
          offset+=3;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() % 3 != 0)
        setError('AlembicOVec3ArrayProperty.get: Packed values does not match extent, != 3.');
      else {
        values.resize(packed.size() / 3);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
          offset+=3;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() % 3 != 0)
        setError('AlembicOVec3ArrayProperty.get: Packed values does not match extent, != 3.');
      else {
        values.resize(packed.size() / 3);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
          offset+=3;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() % 3 != 0)
        setError('AlembicOVec3ArrayProperty.get: Packed values does not match extent, != 3.');
      else {
        values.resize(packed.size() / 3);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
          offset+=3;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() % 3 != 0)
        setError('AlembicOVec3ArrayProperty.get: Packed values does not match extent, != 3.');
      else {
        values.resize(packed.size() / 3);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
          offset+=3;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() % 3 != 0)
        setError('AlembicOVec3ArrayProperty.get: Packed values does not match extent, != 3.');
      else {
        values.resize(packed.size() / 3);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
          offset+=3;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() % 3 != 0)
        setError('AlembicOVec3ArrayProperty.get: Packed values does not match extent, != 3.');
      else {
        values.resize(packed.size() / 3);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
          offset+=3;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() % 3 != 0)
        setError('AlembicOVec3ArrayProperty.get: Packed values does not match extent, != 3.');
      else {
        values.resize(packed.size() / 3);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
          offset+=3;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() % 3 != 0)
        setError('AlembicOVec3ArrayProperty.get: Packed values does not match extent, != 3.');
      else {
        values.resize(packed.size() / 3);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
          offset+=3;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() % 3 != 0)
        setError('AlembicOVec3ArrayProperty.get: Packed values does not match extent, != 3.');
      else {
        values.resize(packed.size() / 3);
        for(Size i=0;i<values.size();i++) {
          values[i] = Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]));
          offset+=3;
        }
        return values;
      }
      break;
    }
    default:
    {
      setError('AlembicOVec3ArrayProperty.get: Papsulated AlembicIArrayProperty has invalid POD.');
    }
  }
  return values;
}

function Vec3[] AlembicIVec3ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOVec3ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOVec3ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 3));
}

function AlembicOVec3ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOVec3ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOVec3ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOVec3ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOVec3ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOVec3ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOVec3ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOVec3ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOVec3ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOVec3ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOVec3ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOVec3ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOVec3ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOVec3ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOVec3ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOVec3ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOVec3ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOVec3ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOVec3ArrayProperty.set!(Vec3 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 3) {
    setError('AlembicOVec3ArrayProperty.set: Extent != 3.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(3 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec3 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
        offset+=3;
      }
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(3 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec3 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
        offset+=3;
      }
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(3 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec3 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
        offset+=3;
      }
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(3 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec3 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
        offset+=3;
      }
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(3 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec3 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
        offset+=3;
      }
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(3 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec3 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
        offset+=3;
      }
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(3 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec3 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
        offset+=3;
      }
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(3 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec3 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
        offset+=3;
      }
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(3 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec3 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
        offset+=3;
      }
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(3 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec3 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
        offset+=3;
      }
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(3 * values.size());
      for(Size i=0;i<values.size();i++) {
        Vec3 value = values[i];
        packed[offset+0] = value.x; packed[offset+1] = value.y; packed[offset+2] = value.z;
        offset+=3;
      }
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOVec3ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIQuatProperty {
  AlembicIScalarProperty prop;
};

function AlembicIQuatProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIQuatProperty(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIQuatProperty prop) {
  this = prop.prop;
}

function Boolean AlembicIQuatProperty.valid() {
  return this.prop.valid();
}

function AlembicIQuatProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIQuatProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIQuatProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIQuatProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIQuatProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIQuatProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIQuatProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIQuatProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIQuatProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIQuatProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIQuatProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIQuatProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIQuatProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIQuatProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIQuatProperty.getParent() {
  return this.prop.getParent();
}

function Quat AlembicIQuatProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 4) {
    setError('AlembicIQuatProperty.get: Extent != 4.');
    return Quat();
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() != 4)
        setError('AlembicOQuatProperty.get: Packed values does not match extent, != 4.');
      else
        return Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() != 4)
        setError('AlembicOQuatProperty.get: Packed values does not match extent, != 4.');
      else
        return Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() != 4)
        setError('AlembicOQuatProperty.get: Packed values does not match extent, != 4.');
      else
        return Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() != 4)
        setError('AlembicOQuatProperty.get: Packed values does not match extent, != 4.');
      else
        return Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() != 4)
        setError('AlembicOQuatProperty.get: Packed values does not match extent, != 4.');
      else
        return Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() != 4)
        setError('AlembicOQuatProperty.get: Packed values does not match extent, != 4.');
      else
        return Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() != 4)
        setError('AlembicOQuatProperty.get: Packed values does not match extent, != 4.');
      else
        return Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() != 4)
        setError('AlembicOQuatProperty.get: Packed values does not match extent, != 4.');
      else
        return Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() != 4)
        setError('AlembicOQuatProperty.get: Packed values does not match extent, != 4.');
      else
        return Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() != 4)
        setError('AlembicOQuatProperty.get: Packed values does not match extent, != 4.');
      else
        return Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() != 4)
        setError('AlembicOQuatProperty.get: Packed values does not match extent, != 4.');
      else
        return Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
      break;
    }
    default:
    {
      setError('AlembicOQuatProperty.get: Papsulated AlembicIScalarProperty has invalid POD.');
    }
  }
  return Quat();
}

function Quat AlembicIQuatProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOQuatProperty {
  AlembicOScalarProperty prop;
};

function AlembicOQuatProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 4));
}

function AlembicOQuatProperty(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOQuatProperty prop) {
  this = prop.prop;
}

function Boolean AlembicOQuatProperty.valid() {
  return this.prop.valid();
}

function AlembicOQuatProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOQuatProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOQuatProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOQuatProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOQuatProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOQuatProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOQuatProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOQuatProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOQuatProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOQuatProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOQuatProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOQuatProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOQuatProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOQuatProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOQuatProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOQuatProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOQuatProperty.set!(Quat value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 4) {
    setError('AlembicOQuatProperty.set: Extent != 4.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(4);
      packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(4);
      packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(4);
      packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(4);
      packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(4);
      packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(4);
      packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(4);
      packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(4);
      packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(4);
      packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(4);
      packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(4);
      packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOQuatProperty.set: Encapsulated AlembicOScalarProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIQuatArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIQuatArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIQuatArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIQuatArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIQuatArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIQuatArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIQuatArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIQuatArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIQuatArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIQuatArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIQuatArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIQuatArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIQuatArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIQuatArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIQuatArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIQuatArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIQuatArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIQuatArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIQuatArrayProperty.getParent() {
  return this.prop.getParent();
}

function Quat[] AlembicIQuatArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  Quat values[];
  if(dt.getExtent() != 4) {
    setError('AlembicIQuatArrayProperty.get: Extent != 4.');
    return values;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOQuatArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOQuatArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOQuatArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOQuatArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOQuatArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOQuatArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOQuatArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOQuatArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOQuatArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOQuatArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOQuatArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Quat(Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]), Float32(packed[offset+0]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    default:
    {
      setError('AlembicOQuatArrayProperty.get: Papsulated AlembicIArrayProperty has invalid POD.');
    }
  }
  return values;
}

function Quat[] AlembicIQuatArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOQuatArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOQuatArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 4));
}

function AlembicOQuatArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOQuatArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOQuatArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOQuatArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOQuatArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOQuatArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOQuatArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOQuatArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOQuatArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOQuatArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOQuatArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOQuatArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOQuatArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOQuatArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOQuatArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOQuatArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOQuatArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOQuatArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOQuatArrayProperty.set!(Quat values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 4) {
    setError('AlembicOQuatArrayProperty.set: Extent != 4.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Quat value = values[i];
        packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
        offset+=4;
      }
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Quat value = values[i];
        packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
        offset+=4;
      }
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Quat value = values[i];
        packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
        offset+=4;
      }
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Quat value = values[i];
        packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
        offset+=4;
      }
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Quat value = values[i];
        packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
        offset+=4;
      }
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Quat value = values[i];
        packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
        offset+=4;
      }
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Quat value = values[i];
        packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
        offset+=4;
      }
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Quat value = values[i];
        packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
        offset+=4;
      }
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Quat value = values[i];
        packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
        offset+=4;
      }
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Quat value = values[i];
        packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
        offset+=4;
      }
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Quat value = values[i];
        packed[offset+0] = value.w; packed[offset+1] = value.v.x; packed[offset+2] = value.v.y; packed[offset+3] = value.v.z;
        offset+=4;
      }
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOQuatArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIBox2Property {
  AlembicIScalarProperty prop;
};

function AlembicIBox2Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIBox2Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIBox2Property prop) {
  this = prop.prop;
}

function Boolean AlembicIBox2Property.valid() {
  return this.prop.valid();
}

function AlembicIBox2Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIBox2Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIBox2Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIBox2Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIBox2Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIBox2Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIBox2Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIBox2Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIBox2Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIBox2Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIBox2Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIBox2Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIBox2Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIBox2Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIBox2Property.getParent() {
  return this.prop.getParent();
}

function Box2 AlembicIBox2Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 4) {
    setError('AlembicIBox2Property.get: Extent != 4.');
    return Box2();
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() != 4)
        setError('AlembicOBox2Property.get: Packed values does not match extent, != 4.');
      else
        return Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() != 4)
        setError('AlembicOBox2Property.get: Packed values does not match extent, != 4.');
      else
        return Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() != 4)
        setError('AlembicOBox2Property.get: Packed values does not match extent, != 4.');
      else
        return Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() != 4)
        setError('AlembicOBox2Property.get: Packed values does not match extent, != 4.');
      else
        return Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() != 4)
        setError('AlembicOBox2Property.get: Packed values does not match extent, != 4.');
      else
        return Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() != 4)
        setError('AlembicOBox2Property.get: Packed values does not match extent, != 4.');
      else
        return Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() != 4)
        setError('AlembicOBox2Property.get: Packed values does not match extent, != 4.');
      else
        return Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() != 4)
        setError('AlembicOBox2Property.get: Packed values does not match extent, != 4.');
      else
        return Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() != 4)
        setError('AlembicOBox2Property.get: Packed values does not match extent, != 4.');
      else
        return Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() != 4)
        setError('AlembicOBox2Property.get: Packed values does not match extent, != 4.');
      else
        return Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() != 4)
        setError('AlembicOBox2Property.get: Packed values does not match extent, != 4.');
      else
        return Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
      break;
    }
    default:
    {
      setError('AlembicOBox2Property.get: Papsulated AlembicIScalarProperty has invalid POD.');
    }
  }
  return Box2();
}

function Box2 AlembicIBox2Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOBox2Property {
  AlembicOScalarProperty prop;
};

function AlembicOBox2Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 4));
}

function AlembicOBox2Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOBox2Property prop) {
  this = prop.prop;
}

function Boolean AlembicOBox2Property.valid() {
  return this.prop.valid();
}

function AlembicOBox2Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOBox2Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOBox2Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOBox2Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOBox2Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOBox2Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOBox2Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOBox2Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOBox2Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOBox2Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOBox2Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOBox2Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOBox2Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOBox2Property.getParent() {
  return this.prop.getParent();
}

function AlembicOBox2Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOBox2Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOBox2Property.set!(Box2 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 4) {
    setError('AlembicOBox2Property.set: Extent != 4.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(4);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(4);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(4);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(4);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(4);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(4);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(4);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(4);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(4);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(4);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(4);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOBox2Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIBox2ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIBox2ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIBox2ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIBox2ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIBox2ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIBox2ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIBox2ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIBox2ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIBox2ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIBox2ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIBox2ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIBox2ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIBox2ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIBox2ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIBox2ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIBox2ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIBox2ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIBox2ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIBox2ArrayProperty.getParent() {
  return this.prop.getParent();
}

function Box2[] AlembicIBox2ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  Box2 values[];
  if(dt.getExtent() != 4) {
    setError('AlembicIBox2ArrayProperty.get: Extent != 4.');
    return values;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOBox2ArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOBox2ArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOBox2ArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOBox2ArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOBox2ArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOBox2ArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOBox2ArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOBox2ArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOBox2ArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOBox2ArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOBox2ArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box2(Vec2(Float32(packed[offset+0]), Float32(packed[offset+1])), Vec2(Float32(packed[offset+2]), Float32(packed[offset+3])));
          offset+=4;
        }
        return values;
      }
      break;
    }
    default:
    {
      setError('AlembicOBox2ArrayProperty.get: Papsulated AlembicIArrayProperty has invalid POD.');
    }
  }
  return values;
}

function Box2[] AlembicIBox2ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOBox2ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOBox2ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 4));
}

function AlembicOBox2ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOBox2ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOBox2ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOBox2ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOBox2ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOBox2ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOBox2ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOBox2ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOBox2ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOBox2ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOBox2ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOBox2ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOBox2ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOBox2ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOBox2ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOBox2ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOBox2ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOBox2ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOBox2ArrayProperty.set!(Box2 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 4) {
    setError('AlembicOBox2ArrayProperty.set: Extent != 4.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box2 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
        offset+=4;
      }
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box2 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
        offset+=4;
      }
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box2 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
        offset+=4;
      }
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box2 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
        offset+=4;
      }
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box2 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
        offset+=4;
      }
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box2 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
        offset+=4;
      }
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box2 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
        offset+=4;
      }
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box2 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
        offset+=4;
      }
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box2 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
        offset+=4;
      }
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box2 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
        offset+=4;
      }
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box2 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.max.x; packed[offset+3] = value.max.y;
        offset+=4;
      }
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOBox2ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIBox3Property {
  AlembicIScalarProperty prop;
};

function AlembicIBox3Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIBox3Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIBox3Property prop) {
  this = prop.prop;
}

function Boolean AlembicIBox3Property.valid() {
  return this.prop.valid();
}

function AlembicIBox3Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIBox3Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIBox3Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIBox3Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIBox3Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIBox3Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIBox3Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIBox3Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIBox3Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIBox3Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIBox3Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIBox3Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIBox3Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIBox3Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIBox3Property.getParent() {
  return this.prop.getParent();
}

function Box3 AlembicIBox3Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 6) {
    setError('AlembicIBox3Property.get: Extent != 6.');
    return Box3();
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() != 6)
        setError('AlembicOBox3Property.get: Packed values does not match extent, != 6.');
      else
        return Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() != 6)
        setError('AlembicOBox3Property.get: Packed values does not match extent, != 6.');
      else
        return Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() != 6)
        setError('AlembicOBox3Property.get: Packed values does not match extent, != 6.');
      else
        return Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() != 6)
        setError('AlembicOBox3Property.get: Packed values does not match extent, != 6.');
      else
        return Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() != 6)
        setError('AlembicOBox3Property.get: Packed values does not match extent, != 6.');
      else
        return Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() != 6)
        setError('AlembicOBox3Property.get: Packed values does not match extent, != 6.');
      else
        return Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() != 6)
        setError('AlembicOBox3Property.get: Packed values does not match extent, != 6.');
      else
        return Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() != 6)
        setError('AlembicOBox3Property.get: Packed values does not match extent, != 6.');
      else
        return Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() != 6)
        setError('AlembicOBox3Property.get: Packed values does not match extent, != 6.');
      else
        return Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() != 6)
        setError('AlembicOBox3Property.get: Packed values does not match extent, != 6.');
      else
        return Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() != 6)
        setError('AlembicOBox3Property.get: Packed values does not match extent, != 6.');
      else
        return Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
      break;
    }
    default:
    {
      setError('AlembicOBox3Property.get: Papsulated AlembicIScalarProperty has invalid POD.');
    }
  }
  return Box3();
}

function Box3 AlembicIBox3Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOBox3Property {
  AlembicOScalarProperty prop;
};

function AlembicOBox3Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 6));
}

function AlembicOBox3Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOBox3Property prop) {
  this = prop.prop;
}

function Boolean AlembicOBox3Property.valid() {
  return this.prop.valid();
}

function AlembicOBox3Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOBox3Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOBox3Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOBox3Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOBox3Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOBox3Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOBox3Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOBox3Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOBox3Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOBox3Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOBox3Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOBox3Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOBox3Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOBox3Property.getParent() {
  return this.prop.getParent();
}

function AlembicOBox3Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOBox3Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOBox3Property.set!(Box3 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 6) {
    setError('AlembicOBox3Property.set: Extent != 6.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(6);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(6);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(6);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(6);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(6);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(6);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(6);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(6);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(6);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(6);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(6);
      packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOBox3Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIBox3ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIBox3ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIBox3ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIBox3ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIBox3ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIBox3ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIBox3ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIBox3ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIBox3ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIBox3ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIBox3ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIBox3ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIBox3ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIBox3ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIBox3ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIBox3ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIBox3ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIBox3ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIBox3ArrayProperty.getParent() {
  return this.prop.getParent();
}

function Box3[] AlembicIBox3ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  Box3 values[];
  if(dt.getExtent() != 6) {
    setError('AlembicIBox3ArrayProperty.get: Extent != 6.');
    return values;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() % 6 != 0)
        setError('AlembicOBox3ArrayProperty.get: Packed values does not match extent, != 6.');
      else {
        values.resize(packed.size() / 6);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
          offset+=6;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() % 6 != 0)
        setError('AlembicOBox3ArrayProperty.get: Packed values does not match extent, != 6.');
      else {
        values.resize(packed.size() / 6);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
          offset+=6;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() % 6 != 0)
        setError('AlembicOBox3ArrayProperty.get: Packed values does not match extent, != 6.');
      else {
        values.resize(packed.size() / 6);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
          offset+=6;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() % 6 != 0)
        setError('AlembicOBox3ArrayProperty.get: Packed values does not match extent, != 6.');
      else {
        values.resize(packed.size() / 6);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
          offset+=6;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() % 6 != 0)
        setError('AlembicOBox3ArrayProperty.get: Packed values does not match extent, != 6.');
      else {
        values.resize(packed.size() / 6);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
          offset+=6;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() % 6 != 0)
        setError('AlembicOBox3ArrayProperty.get: Packed values does not match extent, != 6.');
      else {
        values.resize(packed.size() / 6);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
          offset+=6;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() % 6 != 0)
        setError('AlembicOBox3ArrayProperty.get: Packed values does not match extent, != 6.');
      else {
        values.resize(packed.size() / 6);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
          offset+=6;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() % 6 != 0)
        setError('AlembicOBox3ArrayProperty.get: Packed values does not match extent, != 6.');
      else {
        values.resize(packed.size() / 6);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
          offset+=6;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() % 6 != 0)
        setError('AlembicOBox3ArrayProperty.get: Packed values does not match extent, != 6.');
      else {
        values.resize(packed.size() / 6);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
          offset+=6;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() % 6 != 0)
        setError('AlembicOBox3ArrayProperty.get: Packed values does not match extent, != 6.');
      else {
        values.resize(packed.size() / 6);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
          offset+=6;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() % 6 != 0)
        setError('AlembicOBox3ArrayProperty.get: Packed values does not match extent, != 6.');
      else {
        values.resize(packed.size() / 6);
        for(Size i=0;i<values.size();i++) {
          values[i] = Box3(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])));
          offset+=6;
        }
        return values;
      }
      break;
    }
    default:
    {
      setError('AlembicOBox3ArrayProperty.get: Papsulated AlembicIArrayProperty has invalid POD.');
    }
  }
  return values;
}

function Box3[] AlembicIBox3ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOBox3ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOBox3ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 6));
}

function AlembicOBox3ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOBox3ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOBox3ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOBox3ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOBox3ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOBox3ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOBox3ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOBox3ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOBox3ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOBox3ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOBox3ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOBox3ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOBox3ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOBox3ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOBox3ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOBox3ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOBox3ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOBox3ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOBox3ArrayProperty.set!(Box3 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 6) {
    setError('AlembicOBox3ArrayProperty.set: Extent != 6.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(6 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box3 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
        offset+=6;
      }
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(6 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box3 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
        offset+=6;
      }
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(6 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box3 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
        offset+=6;
      }
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(6 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box3 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
        offset+=6;
      }
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(6 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box3 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
        offset+=6;
      }
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(6 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box3 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
        offset+=6;
      }
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(6 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box3 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
        offset+=6;
      }
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(6 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box3 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
        offset+=6;
      }
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(6 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box3 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
        offset+=6;
      }
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(6 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box3 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
        offset+=6;
      }
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(6 * values.size());
      for(Size i=0;i<values.size();i++) {
        Box3 value = values[i];
        packed[offset+0] = value.min.x; packed[offset+1] = value.min.y; packed[offset+2] = value.min.z; packed[offset+3] = value.max.x; packed[offset+4] = value.max.y; packed[offset+5] = value.max.z;
        offset+=6;
      }
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOBox3ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIMat33Property {
  AlembicIScalarProperty prop;
};

function AlembicIMat33Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIMat33Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIMat33Property prop) {
  this = prop.prop;
}

function Boolean AlembicIMat33Property.valid() {
  return this.prop.valid();
}

function AlembicIMat33Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIMat33Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIMat33Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIMat33Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIMat33Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIMat33Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIMat33Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIMat33Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIMat33Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIMat33Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIMat33Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIMat33Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIMat33Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIMat33Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIMat33Property.getParent() {
  return this.prop.getParent();
}

function Mat33 AlembicIMat33Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 9) {
    setError('AlembicIMat33Property.get: Extent != 9.');
    return Mat33();
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() != 9)
        setError('AlembicOMat33Property.get: Packed values does not match extent, != 9.');
      else
        return Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() != 9)
        setError('AlembicOMat33Property.get: Packed values does not match extent, != 9.');
      else
        return Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() != 9)
        setError('AlembicOMat33Property.get: Packed values does not match extent, != 9.');
      else
        return Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() != 9)
        setError('AlembicOMat33Property.get: Packed values does not match extent, != 9.');
      else
        return Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() != 9)
        setError('AlembicOMat33Property.get: Packed values does not match extent, != 9.');
      else
        return Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() != 9)
        setError('AlembicOMat33Property.get: Packed values does not match extent, != 9.');
      else
        return Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() != 9)
        setError('AlembicOMat33Property.get: Packed values does not match extent, != 9.');
      else
        return Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() != 9)
        setError('AlembicOMat33Property.get: Packed values does not match extent, != 9.');
      else
        return Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() != 9)
        setError('AlembicOMat33Property.get: Packed values does not match extent, != 9.');
      else
        return Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() != 9)
        setError('AlembicOMat33Property.get: Packed values does not match extent, != 9.');
      else
        return Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() != 9)
        setError('AlembicOMat33Property.get: Packed values does not match extent, != 9.');
      else
        return Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
      break;
    }
    default:
    {
      setError('AlembicOMat33Property.get: Papsulated AlembicIScalarProperty has invalid POD.');
    }
  }
  return Mat33();
}

function Mat33 AlembicIMat33Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOMat33Property {
  AlembicOScalarProperty prop;
};

function AlembicOMat33Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 9));
}

function AlembicOMat33Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOMat33Property prop) {
  this = prop.prop;
}

function Boolean AlembicOMat33Property.valid() {
  return this.prop.valid();
}

function AlembicOMat33Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOMat33Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOMat33Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOMat33Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOMat33Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOMat33Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOMat33Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOMat33Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOMat33Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOMat33Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOMat33Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOMat33Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOMat33Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOMat33Property.getParent() {
  return this.prop.getParent();
}

function AlembicOMat33Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOMat33Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOMat33Property.set!(Mat33 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 9) {
    setError('AlembicOMat33Property.set: Extent != 9.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(9);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(9);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(9);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(9);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(9);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(9);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(9);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(9);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(9);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(9);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(9);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOMat33Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIMat33ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIMat33ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIMat33ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIMat33ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIMat33ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIMat33ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIMat33ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIMat33ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIMat33ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIMat33ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIMat33ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIMat33ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIMat33ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIMat33ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIMat33ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIMat33ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIMat33ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIMat33ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIMat33ArrayProperty.getParent() {
  return this.prop.getParent();
}

function Mat33[] AlembicIMat33ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  Mat33 values[];
  if(dt.getExtent() != 9) {
    setError('AlembicIMat33ArrayProperty.get: Extent != 9.');
    return values;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() % 9 != 0)
        setError('AlembicOMat33ArrayProperty.get: Packed values does not match extent, != 9.');
      else {
        values.resize(packed.size() / 9);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
          offset+=9;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() % 9 != 0)
        setError('AlembicOMat33ArrayProperty.get: Packed values does not match extent, != 9.');
      else {
        values.resize(packed.size() / 9);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
          offset+=9;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() % 9 != 0)
        setError('AlembicOMat33ArrayProperty.get: Packed values does not match extent, != 9.');
      else {
        values.resize(packed.size() / 9);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
          offset+=9;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() % 9 != 0)
        setError('AlembicOMat33ArrayProperty.get: Packed values does not match extent, != 9.');
      else {
        values.resize(packed.size() / 9);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
          offset+=9;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() % 9 != 0)
        setError('AlembicOMat33ArrayProperty.get: Packed values does not match extent, != 9.');
      else {
        values.resize(packed.size() / 9);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
          offset+=9;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() % 9 != 0)
        setError('AlembicOMat33ArrayProperty.get: Packed values does not match extent, != 9.');
      else {
        values.resize(packed.size() / 9);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
          offset+=9;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() % 9 != 0)
        setError('AlembicOMat33ArrayProperty.get: Packed values does not match extent, != 9.');
      else {
        values.resize(packed.size() / 9);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
          offset+=9;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() % 9 != 0)
        setError('AlembicOMat33ArrayProperty.get: Packed values does not match extent, != 9.');
      else {
        values.resize(packed.size() / 9);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
          offset+=9;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() % 9 != 0)
        setError('AlembicOMat33ArrayProperty.get: Packed values does not match extent, != 9.');
      else {
        values.resize(packed.size() / 9);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
          offset+=9;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() % 9 != 0)
        setError('AlembicOMat33ArrayProperty.get: Packed values does not match extent, != 9.');
      else {
        values.resize(packed.size() / 9);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
          offset+=9;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() % 9 != 0)
        setError('AlembicOMat33ArrayProperty.get: Packed values does not match extent, != 9.');
      else {
        values.resize(packed.size() / 9);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat33(Vec3(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2])), Vec3(Float32(packed[offset+3]), Float32(packed[offset+4]), Float32(packed[offset+5])), Vec3(Float32(packed[offset+6]), Float32(packed[offset+7]), Float32(packed[offset+8])));
          offset+=9;
        }
        return values;
      }
      break;
    }
    default:
    {
      setError('AlembicOMat33ArrayProperty.get: Papsulated AlembicIArrayProperty has invalid POD.');
    }
  }
  return values;
}

function Mat33[] AlembicIMat33ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOMat33ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOMat33ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 9));
}

function AlembicOMat33ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOMat33ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOMat33ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOMat33ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOMat33ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOMat33ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOMat33ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOMat33ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOMat33ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOMat33ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOMat33ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOMat33ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOMat33ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOMat33ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOMat33ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOMat33ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOMat33ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOMat33ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOMat33ArrayProperty.set!(Mat33 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 9) {
    setError('AlembicOMat33ArrayProperty.set: Extent != 9.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(9 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat33 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
        offset+=9;
      }
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(9 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat33 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
        offset+=9;
      }
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(9 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat33 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
        offset+=9;
      }
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(9 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat33 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
        offset+=9;
      }
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(9 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat33 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
        offset+=9;
      }
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(9 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat33 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
        offset+=9;
      }
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(9 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat33 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
        offset+=9;
      }
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(9 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat33 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
        offset+=9;
      }
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(9 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat33 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
        offset+=9;
      }
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(9 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat33 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
        offset+=9;
      }
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(9 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat33 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z; packed[offset+3] = value.row1.x; packed[offset+4] = value.row1.y; packed[offset+5] = value.row1.z; packed[offset+6] = value.row2.x; packed[offset+7] = value.row2.y; packed[offset+8] = value.row2.z;
        offset+=9;
      }
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOMat33ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIMat44Property {
  AlembicIScalarProperty prop;
};

function AlembicIMat44Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIMat44Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIMat44Property prop) {
  this = prop.prop;
}

function Boolean AlembicIMat44Property.valid() {
  return this.prop.valid();
}

function AlembicIMat44Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIMat44Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIMat44Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIMat44Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIMat44Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIMat44Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIMat44Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIMat44Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIMat44Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIMat44Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIMat44Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIMat44Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIMat44Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIMat44Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIMat44Property.getParent() {
  return this.prop.getParent();
}

function Mat44 AlembicIMat44Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 16) {
    setError('AlembicIMat44Property.get: Extent != 16.');
    return Mat44();
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() != 16)
        setError('AlembicOMat44Property.get: Packed values does not match extent, != 16.');
      else
        return Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() != 16)
        setError('AlembicOMat44Property.get: Packed values does not match extent, != 16.');
      else
        return Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() != 16)
        setError('AlembicOMat44Property.get: Packed values does not match extent, != 16.');
      else
        return Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() != 16)
        setError('AlembicOMat44Property.get: Packed values does not match extent, != 16.');
      else
        return Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() != 16)
        setError('AlembicOMat44Property.get: Packed values does not match extent, != 16.');
      else
        return Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() != 16)
        setError('AlembicOMat44Property.get: Packed values does not match extent, != 16.');
      else
        return Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() != 16)
        setError('AlembicOMat44Property.get: Packed values does not match extent, != 16.');
      else
        return Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() != 16)
        setError('AlembicOMat44Property.get: Packed values does not match extent, != 16.');
      else
        return Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() != 16)
        setError('AlembicOMat44Property.get: Packed values does not match extent, != 16.');
      else
        return Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() != 16)
        setError('AlembicOMat44Property.get: Packed values does not match extent, != 16.');
      else
        return Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() != 16)
        setError('AlembicOMat44Property.get: Packed values does not match extent, != 16.');
      else
        return Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
      break;
    }
    default:
    {
      setError('AlembicOMat44Property.get: Papsulated AlembicIScalarProperty has invalid POD.');
    }
  }
  return Mat44();
}

function Mat44 AlembicIMat44Property.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOMat44Property {
  AlembicOScalarProperty prop;
};

function AlembicOMat44Property(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 16));
}

function AlembicOMat44Property(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOMat44Property prop) {
  this = prop.prop;
}

function Boolean AlembicOMat44Property.valid() {
  return this.prop.valid();
}

function AlembicOMat44Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOMat44Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOMat44Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOMat44Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOMat44Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOMat44Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOMat44Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOMat44Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOMat44Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOMat44Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOMat44Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOMat44Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOMat44Property.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOMat44Property.getParent() {
  return this.prop.getParent();
}

function AlembicOMat44Property.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOMat44Property.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOMat44Property.set!(Mat44 value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 16) {
    setError('AlembicOMat44Property.set: Extent != 16.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(16);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(16);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(16);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(16);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(16);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(16);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(16);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(16);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(16);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(16);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(16);
      packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOMat44Property.set: Encapsulated AlembicOScalarProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIMat44ArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIMat44ArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIMat44ArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIMat44ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIMat44ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIMat44ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIMat44ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIMat44ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIMat44ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIMat44ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIMat44ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIMat44ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIMat44ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIMat44ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIMat44ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIMat44ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIMat44ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIMat44ArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIMat44ArrayProperty.getParent() {
  return this.prop.getParent();
}

function Mat44[] AlembicIMat44ArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  Mat44 values[];
  if(dt.getExtent() != 16) {
    setError('AlembicIMat44ArrayProperty.get: Extent != 16.');
    return values;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() % 16 != 0)
        setError('AlembicOMat44ArrayProperty.get: Packed values does not match extent, != 16.');
      else {
        values.resize(packed.size() / 16);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
          offset+=16;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() % 16 != 0)
        setError('AlembicOMat44ArrayProperty.get: Packed values does not match extent, != 16.');
      else {
        values.resize(packed.size() / 16);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
          offset+=16;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() % 16 != 0)
        setError('AlembicOMat44ArrayProperty.get: Packed values does not match extent, != 16.');
      else {
        values.resize(packed.size() / 16);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
          offset+=16;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() % 16 != 0)
        setError('AlembicOMat44ArrayProperty.get: Packed values does not match extent, != 16.');
      else {
        values.resize(packed.size() / 16);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
          offset+=16;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() % 16 != 0)
        setError('AlembicOMat44ArrayProperty.get: Packed values does not match extent, != 16.');
      else {
        values.resize(packed.size() / 16);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
          offset+=16;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() % 16 != 0)
        setError('AlembicOMat44ArrayProperty.get: Packed values does not match extent, != 16.');
      else {
        values.resize(packed.size() / 16);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
          offset+=16;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() % 16 != 0)
        setError('AlembicOMat44ArrayProperty.get: Packed values does not match extent, != 16.');
      else {
        values.resize(packed.size() / 16);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
          offset+=16;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() % 16 != 0)
        setError('AlembicOMat44ArrayProperty.get: Packed values does not match extent, != 16.');
      else {
        values.resize(packed.size() / 16);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
          offset+=16;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() % 16 != 0)
        setError('AlembicOMat44ArrayProperty.get: Packed values does not match extent, != 16.');
      else {
        values.resize(packed.size() / 16);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
          offset+=16;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() % 16 != 0)
        setError('AlembicOMat44ArrayProperty.get: Packed values does not match extent, != 16.');
      else {
        values.resize(packed.size() / 16);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
          offset+=16;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() % 16 != 0)
        setError('AlembicOMat44ArrayProperty.get: Packed values does not match extent, != 16.');
      else {
        values.resize(packed.size() / 16);
        for(Size i=0;i<values.size();i++) {
          values[i] = Mat44(Vec4(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3])), Vec4(Float32(packed[offset+4]), Float32(packed[offset+5]), Float32(packed[offset+6]), Float32(packed[offset+7])), Vec4(Float32(packed[offset+8]), Float32(packed[offset+9]), Float32(packed[offset+10]), Float32(packed[offset+11])), Vec4(Float32(packed[offset+12]), Float32(packed[offset+13]), Float32(packed[offset+14]), Float32(packed[offset+15])));
          offset+=16;
        }
        return values;
      }
      break;
    }
    default:
    {
      setError('AlembicOMat44ArrayProperty.get: Papsulated AlembicIArrayProperty has invalid POD.');
    }
  }
  return values;
}

function Mat44[] AlembicIMat44ArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOMat44ArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOMat44ArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 16));
}

function AlembicOMat44ArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOMat44ArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOMat44ArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOMat44ArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOMat44ArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOMat44ArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOMat44ArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOMat44ArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOMat44ArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOMat44ArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOMat44ArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOMat44ArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOMat44ArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOMat44ArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOMat44ArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOMat44ArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOMat44ArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOMat44ArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOMat44ArrayProperty.set!(Mat44 values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 16) {
    setError('AlembicOMat44ArrayProperty.set: Extent != 16.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(16 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat44 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
        offset+=16;
      }
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(16 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat44 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
        offset+=16;
      }
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(16 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat44 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
        offset+=16;
      }
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(16 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat44 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
        offset+=16;
      }
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(16 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat44 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
        offset+=16;
      }
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(16 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat44 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
        offset+=16;
      }
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(16 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat44 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
        offset+=16;
      }
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(16 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat44 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
        offset+=16;
      }
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(16 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat44 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
        offset+=16;
      }
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(16 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat44 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
        offset+=16;
      }
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(16 * values.size());
      for(Size i=0;i<values.size();i++) {
        Mat44 value = values[i];
        packed[offset+0] = value.row0.x; packed[offset+1] = value.row0.y; packed[offset+2] = value.row0.z;  packed[offset+3] = value.row0.t; packed[offset+4] = value.row1.x; packed[offset+5] = value.row1.y; packed[offset+6] = value.row1.z;  packed[offset+7] = value.row1.t; packed[offset+8] = value.row2.x; packed[offset+9] = value.row2.y; packed[offset+10] = value.row2.z;  packed[offset+11] = value.row2.t; packed[offset+12] = value.row3.x; packed[offset+13] = value.row3.y; packed[offset+14] = value.row3.z;  packed[offset+15] = value.row3.t;
        offset+=16;
      }
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOMat44ArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIColorProperty {
  AlembicIScalarProperty prop;
};

function AlembicIColorProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicIColorProperty(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicIColorProperty prop) {
  this = prop.prop;
}

function Boolean AlembicIColorProperty.valid() {
  return this.prop.valid();
}

function AlembicIColorProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIColorProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIColorProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIColorProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIColorProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIColorProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIColorProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIColorProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIColorProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIColorProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIColorProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIColorProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIColorProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIColorProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIColorProperty.getParent() {
  return this.prop.getParent();
}

function Color AlembicIColorProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 4) {
    setError('AlembicIColorProperty.get: Extent != 4.');
    return Color();
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() != 4)
        setError('AlembicOColorProperty.get: Packed values does not match extent, != 4.');
      else
        return Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() != 4)
        setError('AlembicOColorProperty.get: Packed values does not match extent, != 4.');
      else
        return Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() != 4)
        setError('AlembicOColorProperty.get: Packed values does not match extent, != 4.');
      else
        return Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() != 4)
        setError('AlembicOColorProperty.get: Packed values does not match extent, != 4.');
      else
        return Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() != 4)
        setError('AlembicOColorProperty.get: Packed values does not match extent, != 4.');
      else
        return Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() != 4)
        setError('AlembicOColorProperty.get: Packed values does not match extent, != 4.');
      else
        return Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() != 4)
        setError('AlembicOColorProperty.get: Packed values does not match extent, != 4.');
      else
        return Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() != 4)
        setError('AlembicOColorProperty.get: Packed values does not match extent, != 4.');
      else
        return Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() != 4)
        setError('AlembicOColorProperty.get: Packed values does not match extent, != 4.');
      else
        return Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() != 4)
        setError('AlembicOColorProperty.get: Packed values does not match extent, != 4.');
      else
        return Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() != 4)
        setError('AlembicOColorProperty.get: Packed values does not match extent, != 4.');
      else
        return Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
      break;
    }
    default:
    {
      setError('AlembicOColorProperty.get: Papsulated AlembicIScalarProperty has invalid POD.');
    }
  }
  return Color();
}

function Color AlembicIColorProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOColorProperty {
  AlembicOScalarProperty prop;
};

function AlembicOColorProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOScalarProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 4));
}

function AlembicOColorProperty(AlembicOScalarProperty prop) {
  this.prop = prop;
}

function AlembicOScalarProperty(AlembicOColorProperty prop) {
  this = prop.prop;
}

function Boolean AlembicOColorProperty.valid() {
  return this.prop.valid();
}

function AlembicOColorProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOColorProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOColorProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOColorProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOColorProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOColorProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOColorProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOColorProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOColorProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOColorProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOColorProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOColorProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOColorProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOColorProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOColorProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOColorProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOColorProperty.set!(Color value) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 4) {
    setError('AlembicOColorProperty.set: Extent != 4.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(4);
      packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(4);
      packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(4);
      packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(4);
      packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(4);
      packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(4);
      packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(4);
      packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(4);
      packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(4);
      packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(4);
      packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(4);
      packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOColorProperty.set: Encapsulated AlembicOScalarProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicIColorArrayProperty {
  AlembicIArrayProperty prop;
};

function AlembicIColorArrayProperty(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIArrayProperty(parent, name);
}

function AlembicIColorArrayProperty(AlembicIArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicIColorArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicIColorArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicIColorArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicIColorArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicIColorArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicIColorArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicIColorArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicIColorArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicIColorArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicIColorArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicIColorArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicIColorArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicIColorArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicIColorArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicIColorArrayProperty.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicIColorArrayProperty.getParent() {
  return this.prop.getParent();
}

function Color[] AlembicIColorArrayProperty.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  Color values[];
  if(dt.getExtent() != 4) {
    setError('AlembicIColorArrayProperty.get: Extent != 4.');
    return values;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOColorArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOColorArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOColorArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOColorArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOColorArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOColorArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOColorArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOColorArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOColorArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOColorArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() % 4 != 0)
        setError('AlembicOColorArrayProperty.get: Packed values does not match extent, != 4.');
      else {
        values.resize(packed.size() / 4);
        for(Size i=0;i<values.size();i++) {
          values[i] = Color(Float32(packed[offset+0]), Float32(packed[offset+1]), Float32(packed[offset+2]), Float32(packed[offset+3]));
          offset+=4;
        }
        return values;
      }
      break;
    }
    default:
    {
      setError('AlembicOColorArrayProperty.get: Papsulated AlembicIArrayProperty has invalid POD.');
    }
  }
  return values;
}

function Color[] AlembicIColorArrayProperty.get() {
  return this.get(AlembicISampleSelector(0));
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicOColorArrayProperty {
  AlembicOArrayProperty prop;
};

function AlembicOColorArrayProperty(AlembicOCompoundProperty parent, String name) {
  this.prop = AlembicOArrayProperty(parent, name, AlembicDataType(Alembic_kFloat32POD, 4));
}

function AlembicOColorArrayProperty(AlembicOArrayProperty prop) {
  this.prop = prop;
}

function Boolean AlembicOColorArrayProperty.valid() {
  return this.prop.valid();
}

function AlembicOColorArrayProperty.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicOColorArrayProperty.getHeader() {
  return this.prop.getHeader();
}

function String AlembicOColorArrayProperty.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicOColorArrayProperty.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicOColorArrayProperty.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicOColorArrayProperty.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicOColorArrayProperty.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicOColorArrayProperty.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicOColorArrayProperty.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicOColorArrayProperty.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicOColorArrayProperty.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicOObject AlembicOColorArrayProperty.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicOColorArrayProperty.getNumSamples() {
  return this.prop.getNumSamples();
}

function AlembicOCompoundProperty AlembicOColorArrayProperty.getParent() {
  return this.prop.getParent();
}

function AlembicOColorArrayProperty.setTimeSampling!(UInt32 index) {
  this.prop.setTimeSampling(index);
}

function AlembicOColorArrayProperty.setFromPrevious!() {
  this.prop.setFromPrevious();
}

function AlembicOColorArrayProperty.set!(Color values<>) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != 4) {
    setError('AlembicOColorArrayProperty.set: Extent != 4.');
    return;
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Color value = values[i];
        packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
        offset+=4;
      }
      this.prop.setAsSInt8(packed);
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Color value = values[i];
        packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
        offset+=4;
      }
      this.prop.setAsSInt16(packed);
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Color value = values[i];
        packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
        offset+=4;
      }
      this.prop.setAsSInt32(packed);
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Color value = values[i];
        packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
        offset+=4;
      }
      this.prop.setAsSInt64(packed);
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Color value = values[i];
        packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
        offset+=4;
      }
      this.prop.setAsUInt8(packed);
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Color value = values[i];
        packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
        offset+=4;
      }
      this.prop.setAsUInt16(packed);
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Color value = values[i];
        packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
        offset+=4;
      }
      this.prop.setAsUInt32(packed);
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Color value = values[i];
        packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
        offset+=4;
      }
      this.prop.setAsUInt64(packed);
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Color value = values[i];
        packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
        offset+=4;
      }
      this.prop.setAsFloat16(packed);
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Color value = values[i];
        packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
        offset+=4;
      }
      this.prop.setAsFloat32(packed);
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[];
      packed.resize(4 * values.size());
      for(Size i=0;i<values.size();i++) {
        Color value = values[i];
        packed[offset+0] = value.r; packed[offset+1] = value.g; packed[offset+2] = value.b; packed[offset+3] = value.a;
        offset+=4;
      }
      this.prop.setAsFloat64(packed);
      break;
    }
    default:
    {
      setError('AlembicOColorArrayProperty.set: Encapsulated AlembicOArrayProperty has invalid POD.');
    }
  }
}
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBooleanGeomParamSample {
  Data handle;
};

function AlembicIBooleanGeomParamSample() = "AlembicIBooleanGeomParamSample_construct";
function ~AlembicIBooleanGeomParamSample() = "AlembicIBooleanGeomParamSample_free";

function Boolean<> AlembicIBooleanGeomParamSample.getVals() = "AlembicIBooleanGeomParamSample_getVals";
function UInt32<> AlembicIBooleanGeomParamSample.getIndices() = "AlembicIBooleanGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIBooleanGeomParamSample.getScope() = "AlembicIBooleanGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBooleanGeomParamSample {
  Data handle;
};

function AlembicOBooleanGeomParamSample() = "AlembicOBooleanGeomParamSample_construct";
function ~AlembicOBooleanGeomParamSample() = "AlembicOBooleanGeomParamSample_free";

function AlembicOBooleanGeomParamSample(Boolean values<>, AlembicGeometryScope scope) = "AlembicOBooleanGeomParamSample_constructFromValuesAndScope";
function AlembicOBooleanGeomParamSample(Boolean values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOBooleanGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOBooleanGeomParamSample.setVals!(Boolean values<>) = "AlembicOBooleanGeomParamSample_setVals";
function Boolean<> AlembicOBooleanGeomParamSample.getVals() = "AlembicOBooleanGeomParamSample_getVals";
function AlembicOBooleanGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOBooleanGeomParamSample_setIndices";
function UInt32<> AlembicOBooleanGeomParamSample.getIndices() = "AlembicOBooleanGeomParamSample_getIndices";
function AlembicOBooleanGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOBooleanGeomParamSample_setScope";
function AlembicGeometryScope AlembicOBooleanGeomParamSample.getScope() = "AlembicOBooleanGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBooleanGeomParam {
  Data handle;
};

function AlembicIBooleanGeomParam() = "AlembicIBooleanGeomParam_construct";
function ~AlembicIBooleanGeomParam() = "AlembicIBooleanGeomParam_free";
function Boolean AlembicIBooleanGeomParam.valid() = "AlembicIBooleanGeomParam_valid";
function AlembicIBooleanGeomParam.reset!() = "AlembicIBooleanGeomParam_free";

function AlembicIBooleanGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIBooleanGeomParam_construct2Args";

function Boolean AlembicIBooleanGeomParam.matches(AlembicPropertyHeader header) = "AlembicIBooleanGeomParam_matches";
function AlembicIBooleanGeomParamSample AlembicIBooleanGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIBooleanGeomParam_getIndexed";
function AlembicIBooleanGeomParamSample AlembicIBooleanGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIBooleanGeomParamSample AlembicIBooleanGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIBooleanGeomParam_getExpanded";
function AlembicIBooleanGeomParamSample AlembicIBooleanGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIBooleanGeomParam.getNumSamples() = "AlembicIBooleanGeomParam_getNumSamples";
function AlembicDataType AlembicIBooleanGeomParam.getDataType() = "AlembicIBooleanGeomParam_getDataType";
function UInt32 AlembicIBooleanGeomParam.getArrayExtent() = "AlembicIBooleanGeomParam_getArrayExtent";
function Boolean AlembicIBooleanGeomParam.isIndexed() = "AlembicIBooleanGeomParam_isIndexed";
function AlembicGeometryScope AlembicIBooleanGeomParam.getScope() = "AlembicIBooleanGeomParam_getScope";
function AlembicTimeSampling AlembicIBooleanGeomParam.getTimeSampling() = "AlembicIBooleanGeomParam_getTimeSampling";
function String AlembicIBooleanGeomParam.getName() = "AlembicIBooleanGeomParam_getName";
function AlembicICompoundProperty AlembicIBooleanGeomParam.getParent() = "AlembicIBooleanGeomParam_getParent";
function Boolean AlembicIBooleanGeomParam.isConstant() = "AlembicIBooleanGeomParam_isConstant";
function AlembicIArrayProperty AlembicIBooleanGeomParam.getValueProperty() = "AlembicIBooleanGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIBooleanGeomParam.getIndexProperty() = "AlembicIBooleanGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBooleanGeomParam {
  Data handle;
};

function AlembicOBooleanGeomParam() = "AlembicOBooleanGeomParam_construct";
function ~AlembicOBooleanGeomParam() = "AlembicOBooleanGeomParam_free";
function Boolean AlembicOBooleanGeomParam.valid() = "AlembicOBooleanGeomParam_valid";
function AlembicOBooleanGeomParam.reset!() = "AlembicOBooleanGeomParam_free";

function AlembicOBooleanGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOBooleanGeomParam_construct5Args";

function Boolean AlembicOBooleanGeomParam.matches(AlembicPropertyHeader header) = "AlembicOBooleanGeomParam_matches";
function AlembicOBooleanGeomParam.set!(AlembicOBooleanGeomParamSample sample) = "AlembicOBooleanGeomParam_set";
function AlembicOBooleanGeomParam.setFromPrevious!() = "AlembicOBooleanGeomParam_setFromPrevious";
function AlembicOBooleanGeomParam.setTimeSampling!(UInt32 index) = "AlembicOBooleanGeomParam_setTimeSampling";
function UInt32 AlembicOBooleanGeomParam.getNumSamples() = "AlembicOBooleanGeomParam_getNumSamples";
function AlembicDataType AlembicOBooleanGeomParam.getDataType() = "AlembicOBooleanGeomParam_getDataType";
function Boolean AlembicOBooleanGeomParam.isIndexed() = "AlembicOBooleanGeomParam_isIndexed";
function AlembicGeometryScope AlembicOBooleanGeomParam.getScope() = "AlembicOBooleanGeomParam_getScope";
function String AlembicOBooleanGeomParam.getName() = "AlembicOBooleanGeomParam_getName";
function AlembicOArrayProperty AlembicOBooleanGeomParam.getValueProperty() = "AlembicOBooleanGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOBooleanGeomParam.getIndexProperty() = "AlembicOBooleanGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicISInt8GeomParamSample {
  Data handle;
};

function AlembicISInt8GeomParamSample() = "AlembicISInt8GeomParamSample_construct";
function ~AlembicISInt8GeomParamSample() = "AlembicISInt8GeomParamSample_free";

function SInt8<> AlembicISInt8GeomParamSample.getVals() = "AlembicISInt8GeomParamSample_getVals";
function UInt32<> AlembicISInt8GeomParamSample.getIndices() = "AlembicISInt8GeomParamSample_getIndices";
function AlembicGeometryScope AlembicISInt8GeomParamSample.getScope() = "AlembicISInt8GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOSInt8GeomParamSample {
  Data handle;
};

function AlembicOSInt8GeomParamSample() = "AlembicOSInt8GeomParamSample_construct";
function ~AlembicOSInt8GeomParamSample() = "AlembicOSInt8GeomParamSample_free";

function AlembicOSInt8GeomParamSample(SInt8 values<>, AlembicGeometryScope scope) = "AlembicOSInt8GeomParamSample_constructFromValuesAndScope";
function AlembicOSInt8GeomParamSample(SInt8 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOSInt8GeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOSInt8GeomParamSample.setVals!(SInt8 values<>) = "AlembicOSInt8GeomParamSample_setVals";
function SInt8<> AlembicOSInt8GeomParamSample.getVals() = "AlembicOSInt8GeomParamSample_getVals";
function AlembicOSInt8GeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOSInt8GeomParamSample_setIndices";
function UInt32<> AlembicOSInt8GeomParamSample.getIndices() = "AlembicOSInt8GeomParamSample_getIndices";
function AlembicOSInt8GeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOSInt8GeomParamSample_setScope";
function AlembicGeometryScope AlembicOSInt8GeomParamSample.getScope() = "AlembicOSInt8GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicISInt8GeomParam {
  Data handle;
};

function AlembicISInt8GeomParam() = "AlembicISInt8GeomParam_construct";
function ~AlembicISInt8GeomParam() = "AlembicISInt8GeomParam_free";
function Boolean AlembicISInt8GeomParam.valid() = "AlembicISInt8GeomParam_valid";
function AlembicISInt8GeomParam.reset!() = "AlembicISInt8GeomParam_free";

function AlembicISInt8GeomParam(AlembicICompoundProperty parent, String name) = "AlembicISInt8GeomParam_construct2Args";

function Boolean AlembicISInt8GeomParam.matches(AlembicPropertyHeader header) = "AlembicISInt8GeomParam_matches";
function AlembicISInt8GeomParamSample AlembicISInt8GeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicISInt8GeomParam_getIndexed";
function AlembicISInt8GeomParamSample AlembicISInt8GeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicISInt8GeomParamSample AlembicISInt8GeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicISInt8GeomParam_getExpanded";
function AlembicISInt8GeomParamSample AlembicISInt8GeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicISInt8GeomParam.getNumSamples() = "AlembicISInt8GeomParam_getNumSamples";
function AlembicDataType AlembicISInt8GeomParam.getDataType() = "AlembicISInt8GeomParam_getDataType";
function UInt32 AlembicISInt8GeomParam.getArrayExtent() = "AlembicISInt8GeomParam_getArrayExtent";
function Boolean AlembicISInt8GeomParam.isIndexed() = "AlembicISInt8GeomParam_isIndexed";
function AlembicGeometryScope AlembicISInt8GeomParam.getScope() = "AlembicISInt8GeomParam_getScope";
function AlembicTimeSampling AlembicISInt8GeomParam.getTimeSampling() = "AlembicISInt8GeomParam_getTimeSampling";
function String AlembicISInt8GeomParam.getName() = "AlembicISInt8GeomParam_getName";
function AlembicICompoundProperty AlembicISInt8GeomParam.getParent() = "AlembicISInt8GeomParam_getParent";
function Boolean AlembicISInt8GeomParam.isConstant() = "AlembicISInt8GeomParam_isConstant";
function AlembicIArrayProperty AlembicISInt8GeomParam.getValueProperty() = "AlembicISInt8GeomParam_getValueProperty";
function AlembicIArrayProperty AlembicISInt8GeomParam.getIndexProperty() = "AlembicISInt8GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOSInt8GeomParam {
  Data handle;
};

function AlembicOSInt8GeomParam() = "AlembicOSInt8GeomParam_construct";
function ~AlembicOSInt8GeomParam() = "AlembicOSInt8GeomParam_free";
function Boolean AlembicOSInt8GeomParam.valid() = "AlembicOSInt8GeomParam_valid";
function AlembicOSInt8GeomParam.reset!() = "AlembicOSInt8GeomParam_free";

function AlembicOSInt8GeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOSInt8GeomParam_construct5Args";

function Boolean AlembicOSInt8GeomParam.matches(AlembicPropertyHeader header) = "AlembicOSInt8GeomParam_matches";
function AlembicOSInt8GeomParam.set!(AlembicOSInt8GeomParamSample sample) = "AlembicOSInt8GeomParam_set";
function AlembicOSInt8GeomParam.setFromPrevious!() = "AlembicOSInt8GeomParam_setFromPrevious";
function AlembicOSInt8GeomParam.setTimeSampling!(UInt32 index) = "AlembicOSInt8GeomParam_setTimeSampling";
function UInt32 AlembicOSInt8GeomParam.getNumSamples() = "AlembicOSInt8GeomParam_getNumSamples";
function AlembicDataType AlembicOSInt8GeomParam.getDataType() = "AlembicOSInt8GeomParam_getDataType";
function Boolean AlembicOSInt8GeomParam.isIndexed() = "AlembicOSInt8GeomParam_isIndexed";
function AlembicGeometryScope AlembicOSInt8GeomParam.getScope() = "AlembicOSInt8GeomParam_getScope";
function String AlembicOSInt8GeomParam.getName() = "AlembicOSInt8GeomParam_getName";
function AlembicOArrayProperty AlembicOSInt8GeomParam.getValueProperty() = "AlembicOSInt8GeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOSInt8GeomParam.getIndexProperty() = "AlembicOSInt8GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicISInt16GeomParamSample {
  Data handle;
};

function AlembicISInt16GeomParamSample() = "AlembicISInt16GeomParamSample_construct";
function ~AlembicISInt16GeomParamSample() = "AlembicISInt16GeomParamSample_free";

function SInt16<> AlembicISInt16GeomParamSample.getVals() = "AlembicISInt16GeomParamSample_getVals";
function UInt32<> AlembicISInt16GeomParamSample.getIndices() = "AlembicISInt16GeomParamSample_getIndices";
function AlembicGeometryScope AlembicISInt16GeomParamSample.getScope() = "AlembicISInt16GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOSInt16GeomParamSample {
  Data handle;
};

function AlembicOSInt16GeomParamSample() = "AlembicOSInt16GeomParamSample_construct";
function ~AlembicOSInt16GeomParamSample() = "AlembicOSInt16GeomParamSample_free";

function AlembicOSInt16GeomParamSample(SInt16 values<>, AlembicGeometryScope scope) = "AlembicOSInt16GeomParamSample_constructFromValuesAndScope";
function AlembicOSInt16GeomParamSample(SInt16 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOSInt16GeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOSInt16GeomParamSample.setVals!(SInt16 values<>) = "AlembicOSInt16GeomParamSample_setVals";
function SInt16<> AlembicOSInt16GeomParamSample.getVals() = "AlembicOSInt16GeomParamSample_getVals";
function AlembicOSInt16GeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOSInt16GeomParamSample_setIndices";
function UInt32<> AlembicOSInt16GeomParamSample.getIndices() = "AlembicOSInt16GeomParamSample_getIndices";
function AlembicOSInt16GeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOSInt16GeomParamSample_setScope";
function AlembicGeometryScope AlembicOSInt16GeomParamSample.getScope() = "AlembicOSInt16GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicISInt16GeomParam {
  Data handle;
};

function AlembicISInt16GeomParam() = "AlembicISInt16GeomParam_construct";
function ~AlembicISInt16GeomParam() = "AlembicISInt16GeomParam_free";
function Boolean AlembicISInt16GeomParam.valid() = "AlembicISInt16GeomParam_valid";
function AlembicISInt16GeomParam.reset!() = "AlembicISInt16GeomParam_free";

function AlembicISInt16GeomParam(AlembicICompoundProperty parent, String name) = "AlembicISInt16GeomParam_construct2Args";

function Boolean AlembicISInt16GeomParam.matches(AlembicPropertyHeader header) = "AlembicISInt16GeomParam_matches";
function AlembicISInt16GeomParamSample AlembicISInt16GeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicISInt16GeomParam_getIndexed";
function AlembicISInt16GeomParamSample AlembicISInt16GeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicISInt16GeomParamSample AlembicISInt16GeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicISInt16GeomParam_getExpanded";
function AlembicISInt16GeomParamSample AlembicISInt16GeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicISInt16GeomParam.getNumSamples() = "AlembicISInt16GeomParam_getNumSamples";
function AlembicDataType AlembicISInt16GeomParam.getDataType() = "AlembicISInt16GeomParam_getDataType";
function UInt32 AlembicISInt16GeomParam.getArrayExtent() = "AlembicISInt16GeomParam_getArrayExtent";
function Boolean AlembicISInt16GeomParam.isIndexed() = "AlembicISInt16GeomParam_isIndexed";
function AlembicGeometryScope AlembicISInt16GeomParam.getScope() = "AlembicISInt16GeomParam_getScope";
function AlembicTimeSampling AlembicISInt16GeomParam.getTimeSampling() = "AlembicISInt16GeomParam_getTimeSampling";
function String AlembicISInt16GeomParam.getName() = "AlembicISInt16GeomParam_getName";
function AlembicICompoundProperty AlembicISInt16GeomParam.getParent() = "AlembicISInt16GeomParam_getParent";
function Boolean AlembicISInt16GeomParam.isConstant() = "AlembicISInt16GeomParam_isConstant";
function AlembicIArrayProperty AlembicISInt16GeomParam.getValueProperty() = "AlembicISInt16GeomParam_getValueProperty";
function AlembicIArrayProperty AlembicISInt16GeomParam.getIndexProperty() = "AlembicISInt16GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOSInt16GeomParam {
  Data handle;
};

function AlembicOSInt16GeomParam() = "AlembicOSInt16GeomParam_construct";
function ~AlembicOSInt16GeomParam() = "AlembicOSInt16GeomParam_free";
function Boolean AlembicOSInt16GeomParam.valid() = "AlembicOSInt16GeomParam_valid";
function AlembicOSInt16GeomParam.reset!() = "AlembicOSInt16GeomParam_free";

function AlembicOSInt16GeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOSInt16GeomParam_construct5Args";

function Boolean AlembicOSInt16GeomParam.matches(AlembicPropertyHeader header) = "AlembicOSInt16GeomParam_matches";
function AlembicOSInt16GeomParam.set!(AlembicOSInt16GeomParamSample sample) = "AlembicOSInt16GeomParam_set";
function AlembicOSInt16GeomParam.setFromPrevious!() = "AlembicOSInt16GeomParam_setFromPrevious";
function AlembicOSInt16GeomParam.setTimeSampling!(UInt32 index) = "AlembicOSInt16GeomParam_setTimeSampling";
function UInt32 AlembicOSInt16GeomParam.getNumSamples() = "AlembicOSInt16GeomParam_getNumSamples";
function AlembicDataType AlembicOSInt16GeomParam.getDataType() = "AlembicOSInt16GeomParam_getDataType";
function Boolean AlembicOSInt16GeomParam.isIndexed() = "AlembicOSInt16GeomParam_isIndexed";
function AlembicGeometryScope AlembicOSInt16GeomParam.getScope() = "AlembicOSInt16GeomParam_getScope";
function String AlembicOSInt16GeomParam.getName() = "AlembicOSInt16GeomParam_getName";
function AlembicOArrayProperty AlembicOSInt16GeomParam.getValueProperty() = "AlembicOSInt16GeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOSInt16GeomParam.getIndexProperty() = "AlembicOSInt16GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicISInt32GeomParamSample {
  Data handle;
};

function AlembicISInt32GeomParamSample() = "AlembicISInt32GeomParamSample_construct";
function ~AlembicISInt32GeomParamSample() = "AlembicISInt32GeomParamSample_free";

function SInt32<> AlembicISInt32GeomParamSample.getVals() = "AlembicISInt32GeomParamSample_getVals";
function UInt32<> AlembicISInt32GeomParamSample.getIndices() = "AlembicISInt32GeomParamSample_getIndices";
function AlembicGeometryScope AlembicISInt32GeomParamSample.getScope() = "AlembicISInt32GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOSInt32GeomParamSample {
  Data handle;
};

function AlembicOSInt32GeomParamSample() = "AlembicOSInt32GeomParamSample_construct";
function ~AlembicOSInt32GeomParamSample() = "AlembicOSInt32GeomParamSample_free";

function AlembicOSInt32GeomParamSample(SInt32 values<>, AlembicGeometryScope scope) = "AlembicOSInt32GeomParamSample_constructFromValuesAndScope";
function AlembicOSInt32GeomParamSample(SInt32 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOSInt32GeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOSInt32GeomParamSample.setVals!(SInt32 values<>) = "AlembicOSInt32GeomParamSample_setVals";
function SInt32<> AlembicOSInt32GeomParamSample.getVals() = "AlembicOSInt32GeomParamSample_getVals";
function AlembicOSInt32GeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOSInt32GeomParamSample_setIndices";
function UInt32<> AlembicOSInt32GeomParamSample.getIndices() = "AlembicOSInt32GeomParamSample_getIndices";
function AlembicOSInt32GeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOSInt32GeomParamSample_setScope";
function AlembicGeometryScope AlembicOSInt32GeomParamSample.getScope() = "AlembicOSInt32GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicISInt32GeomParam {
  Data handle;
};

function AlembicISInt32GeomParam() = "AlembicISInt32GeomParam_construct";
function ~AlembicISInt32GeomParam() = "AlembicISInt32GeomParam_free";
function Boolean AlembicISInt32GeomParam.valid() = "AlembicISInt32GeomParam_valid";
function AlembicISInt32GeomParam.reset!() = "AlembicISInt32GeomParam_free";

function AlembicISInt32GeomParam(AlembicICompoundProperty parent, String name) = "AlembicISInt32GeomParam_construct2Args";

function Boolean AlembicISInt32GeomParam.matches(AlembicPropertyHeader header) = "AlembicISInt32GeomParam_matches";
function AlembicISInt32GeomParamSample AlembicISInt32GeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicISInt32GeomParam_getIndexed";
function AlembicISInt32GeomParamSample AlembicISInt32GeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicISInt32GeomParamSample AlembicISInt32GeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicISInt32GeomParam_getExpanded";
function AlembicISInt32GeomParamSample AlembicISInt32GeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicISInt32GeomParam.getNumSamples() = "AlembicISInt32GeomParam_getNumSamples";
function AlembicDataType AlembicISInt32GeomParam.getDataType() = "AlembicISInt32GeomParam_getDataType";
function UInt32 AlembicISInt32GeomParam.getArrayExtent() = "AlembicISInt32GeomParam_getArrayExtent";
function Boolean AlembicISInt32GeomParam.isIndexed() = "AlembicISInt32GeomParam_isIndexed";
function AlembicGeometryScope AlembicISInt32GeomParam.getScope() = "AlembicISInt32GeomParam_getScope";
function AlembicTimeSampling AlembicISInt32GeomParam.getTimeSampling() = "AlembicISInt32GeomParam_getTimeSampling";
function String AlembicISInt32GeomParam.getName() = "AlembicISInt32GeomParam_getName";
function AlembicICompoundProperty AlembicISInt32GeomParam.getParent() = "AlembicISInt32GeomParam_getParent";
function Boolean AlembicISInt32GeomParam.isConstant() = "AlembicISInt32GeomParam_isConstant";
function AlembicIArrayProperty AlembicISInt32GeomParam.getValueProperty() = "AlembicISInt32GeomParam_getValueProperty";
function AlembicIArrayProperty AlembicISInt32GeomParam.getIndexProperty() = "AlembicISInt32GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOSInt32GeomParam {
  Data handle;
};

function AlembicOSInt32GeomParam() = "AlembicOSInt32GeomParam_construct";
function ~AlembicOSInt32GeomParam() = "AlembicOSInt32GeomParam_free";
function Boolean AlembicOSInt32GeomParam.valid() = "AlembicOSInt32GeomParam_valid";
function AlembicOSInt32GeomParam.reset!() = "AlembicOSInt32GeomParam_free";

function AlembicOSInt32GeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOSInt32GeomParam_construct5Args";

function Boolean AlembicOSInt32GeomParam.matches(AlembicPropertyHeader header) = "AlembicOSInt32GeomParam_matches";
function AlembicOSInt32GeomParam.set!(AlembicOSInt32GeomParamSample sample) = "AlembicOSInt32GeomParam_set";
function AlembicOSInt32GeomParam.setFromPrevious!() = "AlembicOSInt32GeomParam_setFromPrevious";
function AlembicOSInt32GeomParam.setTimeSampling!(UInt32 index) = "AlembicOSInt32GeomParam_setTimeSampling";
function UInt32 AlembicOSInt32GeomParam.getNumSamples() = "AlembicOSInt32GeomParam_getNumSamples";
function AlembicDataType AlembicOSInt32GeomParam.getDataType() = "AlembicOSInt32GeomParam_getDataType";
function Boolean AlembicOSInt32GeomParam.isIndexed() = "AlembicOSInt32GeomParam_isIndexed";
function AlembicGeometryScope AlembicOSInt32GeomParam.getScope() = "AlembicOSInt32GeomParam_getScope";
function String AlembicOSInt32GeomParam.getName() = "AlembicOSInt32GeomParam_getName";
function AlembicOArrayProperty AlembicOSInt32GeomParam.getValueProperty() = "AlembicOSInt32GeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOSInt32GeomParam.getIndexProperty() = "AlembicOSInt32GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicISInt64GeomParamSample {
  Data handle;
};

function AlembicISInt64GeomParamSample() = "AlembicISInt64GeomParamSample_construct";
function ~AlembicISInt64GeomParamSample() = "AlembicISInt64GeomParamSample_free";

function SInt64<> AlembicISInt64GeomParamSample.getVals() = "AlembicISInt64GeomParamSample_getVals";
function UInt32<> AlembicISInt64GeomParamSample.getIndices() = "AlembicISInt64GeomParamSample_getIndices";
function AlembicGeometryScope AlembicISInt64GeomParamSample.getScope() = "AlembicISInt64GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOSInt64GeomParamSample {
  Data handle;
};

function AlembicOSInt64GeomParamSample() = "AlembicOSInt64GeomParamSample_construct";
function ~AlembicOSInt64GeomParamSample() = "AlembicOSInt64GeomParamSample_free";

function AlembicOSInt64GeomParamSample(SInt64 values<>, AlembicGeometryScope scope) = "AlembicOSInt64GeomParamSample_constructFromValuesAndScope";
function AlembicOSInt64GeomParamSample(SInt64 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOSInt64GeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOSInt64GeomParamSample.setVals!(SInt64 values<>) = "AlembicOSInt64GeomParamSample_setVals";
function SInt64<> AlembicOSInt64GeomParamSample.getVals() = "AlembicOSInt64GeomParamSample_getVals";
function AlembicOSInt64GeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOSInt64GeomParamSample_setIndices";
function UInt32<> AlembicOSInt64GeomParamSample.getIndices() = "AlembicOSInt64GeomParamSample_getIndices";
function AlembicOSInt64GeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOSInt64GeomParamSample_setScope";
function AlembicGeometryScope AlembicOSInt64GeomParamSample.getScope() = "AlembicOSInt64GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicISInt64GeomParam {
  Data handle;
};

function AlembicISInt64GeomParam() = "AlembicISInt64GeomParam_construct";
function ~AlembicISInt64GeomParam() = "AlembicISInt64GeomParam_free";
function Boolean AlembicISInt64GeomParam.valid() = "AlembicISInt64GeomParam_valid";
function AlembicISInt64GeomParam.reset!() = "AlembicISInt64GeomParam_free";

function AlembicISInt64GeomParam(AlembicICompoundProperty parent, String name) = "AlembicISInt64GeomParam_construct2Args";

function Boolean AlembicISInt64GeomParam.matches(AlembicPropertyHeader header) = "AlembicISInt64GeomParam_matches";
function AlembicISInt64GeomParamSample AlembicISInt64GeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicISInt64GeomParam_getIndexed";
function AlembicISInt64GeomParamSample AlembicISInt64GeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicISInt64GeomParamSample AlembicISInt64GeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicISInt64GeomParam_getExpanded";
function AlembicISInt64GeomParamSample AlembicISInt64GeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicISInt64GeomParam.getNumSamples() = "AlembicISInt64GeomParam_getNumSamples";
function AlembicDataType AlembicISInt64GeomParam.getDataType() = "AlembicISInt64GeomParam_getDataType";
function UInt32 AlembicISInt64GeomParam.getArrayExtent() = "AlembicISInt64GeomParam_getArrayExtent";
function Boolean AlembicISInt64GeomParam.isIndexed() = "AlembicISInt64GeomParam_isIndexed";
function AlembicGeometryScope AlembicISInt64GeomParam.getScope() = "AlembicISInt64GeomParam_getScope";
function AlembicTimeSampling AlembicISInt64GeomParam.getTimeSampling() = "AlembicISInt64GeomParam_getTimeSampling";
function String AlembicISInt64GeomParam.getName() = "AlembicISInt64GeomParam_getName";
function AlembicICompoundProperty AlembicISInt64GeomParam.getParent() = "AlembicISInt64GeomParam_getParent";
function Boolean AlembicISInt64GeomParam.isConstant() = "AlembicISInt64GeomParam_isConstant";
function AlembicIArrayProperty AlembicISInt64GeomParam.getValueProperty() = "AlembicISInt64GeomParam_getValueProperty";
function AlembicIArrayProperty AlembicISInt64GeomParam.getIndexProperty() = "AlembicISInt64GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOSInt64GeomParam {
  Data handle;
};

function AlembicOSInt64GeomParam() = "AlembicOSInt64GeomParam_construct";
function ~AlembicOSInt64GeomParam() = "AlembicOSInt64GeomParam_free";
function Boolean AlembicOSInt64GeomParam.valid() = "AlembicOSInt64GeomParam_valid";
function AlembicOSInt64GeomParam.reset!() = "AlembicOSInt64GeomParam_free";

function AlembicOSInt64GeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOSInt64GeomParam_construct5Args";

function Boolean AlembicOSInt64GeomParam.matches(AlembicPropertyHeader header) = "AlembicOSInt64GeomParam_matches";
function AlembicOSInt64GeomParam.set!(AlembicOSInt64GeomParamSample sample) = "AlembicOSInt64GeomParam_set";
function AlembicOSInt64GeomParam.setFromPrevious!() = "AlembicOSInt64GeomParam_setFromPrevious";
function AlembicOSInt64GeomParam.setTimeSampling!(UInt32 index) = "AlembicOSInt64GeomParam_setTimeSampling";
function UInt32 AlembicOSInt64GeomParam.getNumSamples() = "AlembicOSInt64GeomParam_getNumSamples";
function AlembicDataType AlembicOSInt64GeomParam.getDataType() = "AlembicOSInt64GeomParam_getDataType";
function Boolean AlembicOSInt64GeomParam.isIndexed() = "AlembicOSInt64GeomParam_isIndexed";
function AlembicGeometryScope AlembicOSInt64GeomParam.getScope() = "AlembicOSInt64GeomParam_getScope";
function String AlembicOSInt64GeomParam.getName() = "AlembicOSInt64GeomParam_getName";
function AlembicOArrayProperty AlembicOSInt64GeomParam.getValueProperty() = "AlembicOSInt64GeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOSInt64GeomParam.getIndexProperty() = "AlembicOSInt64GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIUInt8GeomParamSample {
  Data handle;
};

function AlembicIUInt8GeomParamSample() = "AlembicIUInt8GeomParamSample_construct";
function ~AlembicIUInt8GeomParamSample() = "AlembicIUInt8GeomParamSample_free";

function UInt8<> AlembicIUInt8GeomParamSample.getVals() = "AlembicIUInt8GeomParamSample_getVals";
function UInt32<> AlembicIUInt8GeomParamSample.getIndices() = "AlembicIUInt8GeomParamSample_getIndices";
function AlembicGeometryScope AlembicIUInt8GeomParamSample.getScope() = "AlembicIUInt8GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOUInt8GeomParamSample {
  Data handle;
};

function AlembicOUInt8GeomParamSample() = "AlembicOUInt8GeomParamSample_construct";
function ~AlembicOUInt8GeomParamSample() = "AlembicOUInt8GeomParamSample_free";

function AlembicOUInt8GeomParamSample(UInt8 values<>, AlembicGeometryScope scope) = "AlembicOUInt8GeomParamSample_constructFromValuesAndScope";
function AlembicOUInt8GeomParamSample(UInt8 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOUInt8GeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOUInt8GeomParamSample.setVals!(UInt8 values<>) = "AlembicOUInt8GeomParamSample_setVals";
function UInt8<> AlembicOUInt8GeomParamSample.getVals() = "AlembicOUInt8GeomParamSample_getVals";
function AlembicOUInt8GeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOUInt8GeomParamSample_setIndices";
function UInt32<> AlembicOUInt8GeomParamSample.getIndices() = "AlembicOUInt8GeomParamSample_getIndices";
function AlembicOUInt8GeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOUInt8GeomParamSample_setScope";
function AlembicGeometryScope AlembicOUInt8GeomParamSample.getScope() = "AlembicOUInt8GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIUInt8GeomParam {
  Data handle;
};

function AlembicIUInt8GeomParam() = "AlembicIUInt8GeomParam_construct";
function ~AlembicIUInt8GeomParam() = "AlembicIUInt8GeomParam_free";
function Boolean AlembicIUInt8GeomParam.valid() = "AlembicIUInt8GeomParam_valid";
function AlembicIUInt8GeomParam.reset!() = "AlembicIUInt8GeomParam_free";

function AlembicIUInt8GeomParam(AlembicICompoundProperty parent, String name) = "AlembicIUInt8GeomParam_construct2Args";

function Boolean AlembicIUInt8GeomParam.matches(AlembicPropertyHeader header) = "AlembicIUInt8GeomParam_matches";
function AlembicIUInt8GeomParamSample AlembicIUInt8GeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIUInt8GeomParam_getIndexed";
function AlembicIUInt8GeomParamSample AlembicIUInt8GeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIUInt8GeomParamSample AlembicIUInt8GeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIUInt8GeomParam_getExpanded";
function AlembicIUInt8GeomParamSample AlembicIUInt8GeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIUInt8GeomParam.getNumSamples() = "AlembicIUInt8GeomParam_getNumSamples";
function AlembicDataType AlembicIUInt8GeomParam.getDataType() = "AlembicIUInt8GeomParam_getDataType";
function UInt32 AlembicIUInt8GeomParam.getArrayExtent() = "AlembicIUInt8GeomParam_getArrayExtent";
function Boolean AlembicIUInt8GeomParam.isIndexed() = "AlembicIUInt8GeomParam_isIndexed";
function AlembicGeometryScope AlembicIUInt8GeomParam.getScope() = "AlembicIUInt8GeomParam_getScope";
function AlembicTimeSampling AlembicIUInt8GeomParam.getTimeSampling() = "AlembicIUInt8GeomParam_getTimeSampling";
function String AlembicIUInt8GeomParam.getName() = "AlembicIUInt8GeomParam_getName";
function AlembicICompoundProperty AlembicIUInt8GeomParam.getParent() = "AlembicIUInt8GeomParam_getParent";
function Boolean AlembicIUInt8GeomParam.isConstant() = "AlembicIUInt8GeomParam_isConstant";
function AlembicIArrayProperty AlembicIUInt8GeomParam.getValueProperty() = "AlembicIUInt8GeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIUInt8GeomParam.getIndexProperty() = "AlembicIUInt8GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOUInt8GeomParam {
  Data handle;
};

function AlembicOUInt8GeomParam() = "AlembicOUInt8GeomParam_construct";
function ~AlembicOUInt8GeomParam() = "AlembicOUInt8GeomParam_free";
function Boolean AlembicOUInt8GeomParam.valid() = "AlembicOUInt8GeomParam_valid";
function AlembicOUInt8GeomParam.reset!() = "AlembicOUInt8GeomParam_free";

function AlembicOUInt8GeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOUInt8GeomParam_construct5Args";

function Boolean AlembicOUInt8GeomParam.matches(AlembicPropertyHeader header) = "AlembicOUInt8GeomParam_matches";
function AlembicOUInt8GeomParam.set!(AlembicOUInt8GeomParamSample sample) = "AlembicOUInt8GeomParam_set";
function AlembicOUInt8GeomParam.setFromPrevious!() = "AlembicOUInt8GeomParam_setFromPrevious";
function AlembicOUInt8GeomParam.setTimeSampling!(UInt32 index) = "AlembicOUInt8GeomParam_setTimeSampling";
function UInt32 AlembicOUInt8GeomParam.getNumSamples() = "AlembicOUInt8GeomParam_getNumSamples";
function AlembicDataType AlembicOUInt8GeomParam.getDataType() = "AlembicOUInt8GeomParam_getDataType";
function Boolean AlembicOUInt8GeomParam.isIndexed() = "AlembicOUInt8GeomParam_isIndexed";
function AlembicGeometryScope AlembicOUInt8GeomParam.getScope() = "AlembicOUInt8GeomParam_getScope";
function String AlembicOUInt8GeomParam.getName() = "AlembicOUInt8GeomParam_getName";
function AlembicOArrayProperty AlembicOUInt8GeomParam.getValueProperty() = "AlembicOUInt8GeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOUInt8GeomParam.getIndexProperty() = "AlembicOUInt8GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIUInt16GeomParamSample {
  Data handle;
};

function AlembicIUInt16GeomParamSample() = "AlembicIUInt16GeomParamSample_construct";
function ~AlembicIUInt16GeomParamSample() = "AlembicIUInt16GeomParamSample_free";

function UInt16<> AlembicIUInt16GeomParamSample.getVals() = "AlembicIUInt16GeomParamSample_getVals";
function UInt32<> AlembicIUInt16GeomParamSample.getIndices() = "AlembicIUInt16GeomParamSample_getIndices";
function AlembicGeometryScope AlembicIUInt16GeomParamSample.getScope() = "AlembicIUInt16GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOUInt16GeomParamSample {
  Data handle;
};

function AlembicOUInt16GeomParamSample() = "AlembicOUInt16GeomParamSample_construct";
function ~AlembicOUInt16GeomParamSample() = "AlembicOUInt16GeomParamSample_free";

function AlembicOUInt16GeomParamSample(UInt16 values<>, AlembicGeometryScope scope) = "AlembicOUInt16GeomParamSample_constructFromValuesAndScope";
function AlembicOUInt16GeomParamSample(UInt16 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOUInt16GeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOUInt16GeomParamSample.setVals!(UInt16 values<>) = "AlembicOUInt16GeomParamSample_setVals";
function UInt16<> AlembicOUInt16GeomParamSample.getVals() = "AlembicOUInt16GeomParamSample_getVals";
function AlembicOUInt16GeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOUInt16GeomParamSample_setIndices";
function UInt32<> AlembicOUInt16GeomParamSample.getIndices() = "AlembicOUInt16GeomParamSample_getIndices";
function AlembicOUInt16GeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOUInt16GeomParamSample_setScope";
function AlembicGeometryScope AlembicOUInt16GeomParamSample.getScope() = "AlembicOUInt16GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIUInt16GeomParam {
  Data handle;
};

function AlembicIUInt16GeomParam() = "AlembicIUInt16GeomParam_construct";
function ~AlembicIUInt16GeomParam() = "AlembicIUInt16GeomParam_free";
function Boolean AlembicIUInt16GeomParam.valid() = "AlembicIUInt16GeomParam_valid";
function AlembicIUInt16GeomParam.reset!() = "AlembicIUInt16GeomParam_free";

function AlembicIUInt16GeomParam(AlembicICompoundProperty parent, String name) = "AlembicIUInt16GeomParam_construct2Args";

function Boolean AlembicIUInt16GeomParam.matches(AlembicPropertyHeader header) = "AlembicIUInt16GeomParam_matches";
function AlembicIUInt16GeomParamSample AlembicIUInt16GeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIUInt16GeomParam_getIndexed";
function AlembicIUInt16GeomParamSample AlembicIUInt16GeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIUInt16GeomParamSample AlembicIUInt16GeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIUInt16GeomParam_getExpanded";
function AlembicIUInt16GeomParamSample AlembicIUInt16GeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIUInt16GeomParam.getNumSamples() = "AlembicIUInt16GeomParam_getNumSamples";
function AlembicDataType AlembicIUInt16GeomParam.getDataType() = "AlembicIUInt16GeomParam_getDataType";
function UInt32 AlembicIUInt16GeomParam.getArrayExtent() = "AlembicIUInt16GeomParam_getArrayExtent";
function Boolean AlembicIUInt16GeomParam.isIndexed() = "AlembicIUInt16GeomParam_isIndexed";
function AlembicGeometryScope AlembicIUInt16GeomParam.getScope() = "AlembicIUInt16GeomParam_getScope";
function AlembicTimeSampling AlembicIUInt16GeomParam.getTimeSampling() = "AlembicIUInt16GeomParam_getTimeSampling";
function String AlembicIUInt16GeomParam.getName() = "AlembicIUInt16GeomParam_getName";
function AlembicICompoundProperty AlembicIUInt16GeomParam.getParent() = "AlembicIUInt16GeomParam_getParent";
function Boolean AlembicIUInt16GeomParam.isConstant() = "AlembicIUInt16GeomParam_isConstant";
function AlembicIArrayProperty AlembicIUInt16GeomParam.getValueProperty() = "AlembicIUInt16GeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIUInt16GeomParam.getIndexProperty() = "AlembicIUInt16GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOUInt16GeomParam {
  Data handle;
};

function AlembicOUInt16GeomParam() = "AlembicOUInt16GeomParam_construct";
function ~AlembicOUInt16GeomParam() = "AlembicOUInt16GeomParam_free";
function Boolean AlembicOUInt16GeomParam.valid() = "AlembicOUInt16GeomParam_valid";
function AlembicOUInt16GeomParam.reset!() = "AlembicOUInt16GeomParam_free";

function AlembicOUInt16GeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOUInt16GeomParam_construct5Args";

function Boolean AlembicOUInt16GeomParam.matches(AlembicPropertyHeader header) = "AlembicOUInt16GeomParam_matches";
function AlembicOUInt16GeomParam.set!(AlembicOUInt16GeomParamSample sample) = "AlembicOUInt16GeomParam_set";
function AlembicOUInt16GeomParam.setFromPrevious!() = "AlembicOUInt16GeomParam_setFromPrevious";
function AlembicOUInt16GeomParam.setTimeSampling!(UInt32 index) = "AlembicOUInt16GeomParam_setTimeSampling";
function UInt32 AlembicOUInt16GeomParam.getNumSamples() = "AlembicOUInt16GeomParam_getNumSamples";
function AlembicDataType AlembicOUInt16GeomParam.getDataType() = "AlembicOUInt16GeomParam_getDataType";
function Boolean AlembicOUInt16GeomParam.isIndexed() = "AlembicOUInt16GeomParam_isIndexed";
function AlembicGeometryScope AlembicOUInt16GeomParam.getScope() = "AlembicOUInt16GeomParam_getScope";
function String AlembicOUInt16GeomParam.getName() = "AlembicOUInt16GeomParam_getName";
function AlembicOArrayProperty AlembicOUInt16GeomParam.getValueProperty() = "AlembicOUInt16GeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOUInt16GeomParam.getIndexProperty() = "AlembicOUInt16GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIUInt32GeomParamSample {
  Data handle;
};

function AlembicIUInt32GeomParamSample() = "AlembicIUInt32GeomParamSample_construct";
function ~AlembicIUInt32GeomParamSample() = "AlembicIUInt32GeomParamSample_free";

function UInt32<> AlembicIUInt32GeomParamSample.getVals() = "AlembicIUInt32GeomParamSample_getVals";
function UInt32<> AlembicIUInt32GeomParamSample.getIndices() = "AlembicIUInt32GeomParamSample_getIndices";
function AlembicGeometryScope AlembicIUInt32GeomParamSample.getScope() = "AlembicIUInt32GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOUInt32GeomParamSample {
  Data handle;
};

function AlembicOUInt32GeomParamSample() = "AlembicOUInt32GeomParamSample_construct";
function ~AlembicOUInt32GeomParamSample() = "AlembicOUInt32GeomParamSample_free";

function AlembicOUInt32GeomParamSample(UInt32 values<>, AlembicGeometryScope scope) = "AlembicOUInt32GeomParamSample_constructFromValuesAndScope";
function AlembicOUInt32GeomParamSample(UInt32 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOUInt32GeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOUInt32GeomParamSample.setVals!(UInt32 values<>) = "AlembicOUInt32GeomParamSample_setVals";
function UInt32<> AlembicOUInt32GeomParamSample.getVals() = "AlembicOUInt32GeomParamSample_getVals";
function AlembicOUInt32GeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOUInt32GeomParamSample_setIndices";
function UInt32<> AlembicOUInt32GeomParamSample.getIndices() = "AlembicOUInt32GeomParamSample_getIndices";
function AlembicOUInt32GeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOUInt32GeomParamSample_setScope";
function AlembicGeometryScope AlembicOUInt32GeomParamSample.getScope() = "AlembicOUInt32GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIUInt32GeomParam {
  Data handle;
};

function AlembicIUInt32GeomParam() = "AlembicIUInt32GeomParam_construct";
function ~AlembicIUInt32GeomParam() = "AlembicIUInt32GeomParam_free";
function Boolean AlembicIUInt32GeomParam.valid() = "AlembicIUInt32GeomParam_valid";
function AlembicIUInt32GeomParam.reset!() = "AlembicIUInt32GeomParam_free";

function AlembicIUInt32GeomParam(AlembicICompoundProperty parent, String name) = "AlembicIUInt32GeomParam_construct2Args";

function Boolean AlembicIUInt32GeomParam.matches(AlembicPropertyHeader header) = "AlembicIUInt32GeomParam_matches";
function AlembicIUInt32GeomParamSample AlembicIUInt32GeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIUInt32GeomParam_getIndexed";
function AlembicIUInt32GeomParamSample AlembicIUInt32GeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIUInt32GeomParamSample AlembicIUInt32GeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIUInt32GeomParam_getExpanded";
function AlembicIUInt32GeomParamSample AlembicIUInt32GeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIUInt32GeomParam.getNumSamples() = "AlembicIUInt32GeomParam_getNumSamples";
function AlembicDataType AlembicIUInt32GeomParam.getDataType() = "AlembicIUInt32GeomParam_getDataType";
function UInt32 AlembicIUInt32GeomParam.getArrayExtent() = "AlembicIUInt32GeomParam_getArrayExtent";
function Boolean AlembicIUInt32GeomParam.isIndexed() = "AlembicIUInt32GeomParam_isIndexed";
function AlembicGeometryScope AlembicIUInt32GeomParam.getScope() = "AlembicIUInt32GeomParam_getScope";
function AlembicTimeSampling AlembicIUInt32GeomParam.getTimeSampling() = "AlembicIUInt32GeomParam_getTimeSampling";
function String AlembicIUInt32GeomParam.getName() = "AlembicIUInt32GeomParam_getName";
function AlembicICompoundProperty AlembicIUInt32GeomParam.getParent() = "AlembicIUInt32GeomParam_getParent";
function Boolean AlembicIUInt32GeomParam.isConstant() = "AlembicIUInt32GeomParam_isConstant";
function AlembicIArrayProperty AlembicIUInt32GeomParam.getValueProperty() = "AlembicIUInt32GeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIUInt32GeomParam.getIndexProperty() = "AlembicIUInt32GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOUInt32GeomParam {
  Data handle;
};

function AlembicOUInt32GeomParam() = "AlembicOUInt32GeomParam_construct";
function ~AlembicOUInt32GeomParam() = "AlembicOUInt32GeomParam_free";
function Boolean AlembicOUInt32GeomParam.valid() = "AlembicOUInt32GeomParam_valid";
function AlembicOUInt32GeomParam.reset!() = "AlembicOUInt32GeomParam_free";

function AlembicOUInt32GeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOUInt32GeomParam_construct5Args";

function Boolean AlembicOUInt32GeomParam.matches(AlembicPropertyHeader header) = "AlembicOUInt32GeomParam_matches";
function AlembicOUInt32GeomParam.set!(AlembicOUInt32GeomParamSample sample) = "AlembicOUInt32GeomParam_set";
function AlembicOUInt32GeomParam.setFromPrevious!() = "AlembicOUInt32GeomParam_setFromPrevious";
function AlembicOUInt32GeomParam.setTimeSampling!(UInt32 index) = "AlembicOUInt32GeomParam_setTimeSampling";
function UInt32 AlembicOUInt32GeomParam.getNumSamples() = "AlembicOUInt32GeomParam_getNumSamples";
function AlembicDataType AlembicOUInt32GeomParam.getDataType() = "AlembicOUInt32GeomParam_getDataType";
function Boolean AlembicOUInt32GeomParam.isIndexed() = "AlembicOUInt32GeomParam_isIndexed";
function AlembicGeometryScope AlembicOUInt32GeomParam.getScope() = "AlembicOUInt32GeomParam_getScope";
function String AlembicOUInt32GeomParam.getName() = "AlembicOUInt32GeomParam_getName";
function AlembicOArrayProperty AlembicOUInt32GeomParam.getValueProperty() = "AlembicOUInt32GeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOUInt32GeomParam.getIndexProperty() = "AlembicOUInt32GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIUInt64GeomParamSample {
  Data handle;
};

function AlembicIUInt64GeomParamSample() = "AlembicIUInt64GeomParamSample_construct";
function ~AlembicIUInt64GeomParamSample() = "AlembicIUInt64GeomParamSample_free";

function UInt64<> AlembicIUInt64GeomParamSample.getVals() = "AlembicIUInt64GeomParamSample_getVals";
function UInt32<> AlembicIUInt64GeomParamSample.getIndices() = "AlembicIUInt64GeomParamSample_getIndices";
function AlembicGeometryScope AlembicIUInt64GeomParamSample.getScope() = "AlembicIUInt64GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOUInt64GeomParamSample {
  Data handle;
};

function AlembicOUInt64GeomParamSample() = "AlembicOUInt64GeomParamSample_construct";
function ~AlembicOUInt64GeomParamSample() = "AlembicOUInt64GeomParamSample_free";

function AlembicOUInt64GeomParamSample(UInt64 values<>, AlembicGeometryScope scope) = "AlembicOUInt64GeomParamSample_constructFromValuesAndScope";
function AlembicOUInt64GeomParamSample(UInt64 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOUInt64GeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOUInt64GeomParamSample.setVals!(UInt64 values<>) = "AlembicOUInt64GeomParamSample_setVals";
function UInt64<> AlembicOUInt64GeomParamSample.getVals() = "AlembicOUInt64GeomParamSample_getVals";
function AlembicOUInt64GeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOUInt64GeomParamSample_setIndices";
function UInt32<> AlembicOUInt64GeomParamSample.getIndices() = "AlembicOUInt64GeomParamSample_getIndices";
function AlembicOUInt64GeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOUInt64GeomParamSample_setScope";
function AlembicGeometryScope AlembicOUInt64GeomParamSample.getScope() = "AlembicOUInt64GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIUInt64GeomParam {
  Data handle;
};

function AlembicIUInt64GeomParam() = "AlembicIUInt64GeomParam_construct";
function ~AlembicIUInt64GeomParam() = "AlembicIUInt64GeomParam_free";
function Boolean AlembicIUInt64GeomParam.valid() = "AlembicIUInt64GeomParam_valid";
function AlembicIUInt64GeomParam.reset!() = "AlembicIUInt64GeomParam_free";

function AlembicIUInt64GeomParam(AlembicICompoundProperty parent, String name) = "AlembicIUInt64GeomParam_construct2Args";

function Boolean AlembicIUInt64GeomParam.matches(AlembicPropertyHeader header) = "AlembicIUInt64GeomParam_matches";
function AlembicIUInt64GeomParamSample AlembicIUInt64GeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIUInt64GeomParam_getIndexed";
function AlembicIUInt64GeomParamSample AlembicIUInt64GeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIUInt64GeomParamSample AlembicIUInt64GeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIUInt64GeomParam_getExpanded";
function AlembicIUInt64GeomParamSample AlembicIUInt64GeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIUInt64GeomParam.getNumSamples() = "AlembicIUInt64GeomParam_getNumSamples";
function AlembicDataType AlembicIUInt64GeomParam.getDataType() = "AlembicIUInt64GeomParam_getDataType";
function UInt32 AlembicIUInt64GeomParam.getArrayExtent() = "AlembicIUInt64GeomParam_getArrayExtent";
function Boolean AlembicIUInt64GeomParam.isIndexed() = "AlembicIUInt64GeomParam_isIndexed";
function AlembicGeometryScope AlembicIUInt64GeomParam.getScope() = "AlembicIUInt64GeomParam_getScope";
function AlembicTimeSampling AlembicIUInt64GeomParam.getTimeSampling() = "AlembicIUInt64GeomParam_getTimeSampling";
function String AlembicIUInt64GeomParam.getName() = "AlembicIUInt64GeomParam_getName";
function AlembicICompoundProperty AlembicIUInt64GeomParam.getParent() = "AlembicIUInt64GeomParam_getParent";
function Boolean AlembicIUInt64GeomParam.isConstant() = "AlembicIUInt64GeomParam_isConstant";
function AlembicIArrayProperty AlembicIUInt64GeomParam.getValueProperty() = "AlembicIUInt64GeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIUInt64GeomParam.getIndexProperty() = "AlembicIUInt64GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOUInt64GeomParam {
  Data handle;
};

function AlembicOUInt64GeomParam() = "AlembicOUInt64GeomParam_construct";
function ~AlembicOUInt64GeomParam() = "AlembicOUInt64GeomParam_free";
function Boolean AlembicOUInt64GeomParam.valid() = "AlembicOUInt64GeomParam_valid";
function AlembicOUInt64GeomParam.reset!() = "AlembicOUInt64GeomParam_free";

function AlembicOUInt64GeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOUInt64GeomParam_construct5Args";

function Boolean AlembicOUInt64GeomParam.matches(AlembicPropertyHeader header) = "AlembicOUInt64GeomParam_matches";
function AlembicOUInt64GeomParam.set!(AlembicOUInt64GeomParamSample sample) = "AlembicOUInt64GeomParam_set";
function AlembicOUInt64GeomParam.setFromPrevious!() = "AlembicOUInt64GeomParam_setFromPrevious";
function AlembicOUInt64GeomParam.setTimeSampling!(UInt32 index) = "AlembicOUInt64GeomParam_setTimeSampling";
function UInt32 AlembicOUInt64GeomParam.getNumSamples() = "AlembicOUInt64GeomParam_getNumSamples";
function AlembicDataType AlembicOUInt64GeomParam.getDataType() = "AlembicOUInt64GeomParam_getDataType";
function Boolean AlembicOUInt64GeomParam.isIndexed() = "AlembicOUInt64GeomParam_isIndexed";
function AlembicGeometryScope AlembicOUInt64GeomParam.getScope() = "AlembicOUInt64GeomParam_getScope";
function String AlembicOUInt64GeomParam.getName() = "AlembicOUInt64GeomParam_getName";
function AlembicOArrayProperty AlembicOUInt64GeomParam.getValueProperty() = "AlembicOUInt64GeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOUInt64GeomParam.getIndexProperty() = "AlembicOUInt64GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIFloat32GeomParamSample {
  Data handle;
};

function AlembicIFloat32GeomParamSample() = "AlembicIFloat32GeomParamSample_construct";
function ~AlembicIFloat32GeomParamSample() = "AlembicIFloat32GeomParamSample_free";

function Float32<> AlembicIFloat32GeomParamSample.getVals() = "AlembicIFloat32GeomParamSample_getVals";
function UInt32<> AlembicIFloat32GeomParamSample.getIndices() = "AlembicIFloat32GeomParamSample_getIndices";
function AlembicGeometryScope AlembicIFloat32GeomParamSample.getScope() = "AlembicIFloat32GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOFloat32GeomParamSample {
  Data handle;
};

function AlembicOFloat32GeomParamSample() = "AlembicOFloat32GeomParamSample_construct";
function ~AlembicOFloat32GeomParamSample() = "AlembicOFloat32GeomParamSample_free";

function AlembicOFloat32GeomParamSample(Float32 values<>, AlembicGeometryScope scope) = "AlembicOFloat32GeomParamSample_constructFromValuesAndScope";
function AlembicOFloat32GeomParamSample(Float32 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOFloat32GeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOFloat32GeomParamSample.setVals!(Float32 values<>) = "AlembicOFloat32GeomParamSample_setVals";
function Float32<> AlembicOFloat32GeomParamSample.getVals() = "AlembicOFloat32GeomParamSample_getVals";
function AlembicOFloat32GeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOFloat32GeomParamSample_setIndices";
function UInt32<> AlembicOFloat32GeomParamSample.getIndices() = "AlembicOFloat32GeomParamSample_getIndices";
function AlembicOFloat32GeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOFloat32GeomParamSample_setScope";
function AlembicGeometryScope AlembicOFloat32GeomParamSample.getScope() = "AlembicOFloat32GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIFloat32GeomParam {
  Data handle;
};

function AlembicIFloat32GeomParam() = "AlembicIFloat32GeomParam_construct";
function ~AlembicIFloat32GeomParam() = "AlembicIFloat32GeomParam_free";
function Boolean AlembicIFloat32GeomParam.valid() = "AlembicIFloat32GeomParam_valid";
function AlembicIFloat32GeomParam.reset!() = "AlembicIFloat32GeomParam_free";

function AlembicIFloat32GeomParam(AlembicICompoundProperty parent, String name) = "AlembicIFloat32GeomParam_construct2Args";

function Boolean AlembicIFloat32GeomParam.matches(AlembicPropertyHeader header) = "AlembicIFloat32GeomParam_matches";
function AlembicIFloat32GeomParamSample AlembicIFloat32GeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIFloat32GeomParam_getIndexed";
function AlembicIFloat32GeomParamSample AlembicIFloat32GeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIFloat32GeomParamSample AlembicIFloat32GeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIFloat32GeomParam_getExpanded";
function AlembicIFloat32GeomParamSample AlembicIFloat32GeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIFloat32GeomParam.getNumSamples() = "AlembicIFloat32GeomParam_getNumSamples";
function AlembicDataType AlembicIFloat32GeomParam.getDataType() = "AlembicIFloat32GeomParam_getDataType";
function UInt32 AlembicIFloat32GeomParam.getArrayExtent() = "AlembicIFloat32GeomParam_getArrayExtent";
function Boolean AlembicIFloat32GeomParam.isIndexed() = "AlembicIFloat32GeomParam_isIndexed";
function AlembicGeometryScope AlembicIFloat32GeomParam.getScope() = "AlembicIFloat32GeomParam_getScope";
function AlembicTimeSampling AlembicIFloat32GeomParam.getTimeSampling() = "AlembicIFloat32GeomParam_getTimeSampling";
function String AlembicIFloat32GeomParam.getName() = "AlembicIFloat32GeomParam_getName";
function AlembicICompoundProperty AlembicIFloat32GeomParam.getParent() = "AlembicIFloat32GeomParam_getParent";
function Boolean AlembicIFloat32GeomParam.isConstant() = "AlembicIFloat32GeomParam_isConstant";
function AlembicIArrayProperty AlembicIFloat32GeomParam.getValueProperty() = "AlembicIFloat32GeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIFloat32GeomParam.getIndexProperty() = "AlembicIFloat32GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOFloat32GeomParam {
  Data handle;
};

function AlembicOFloat32GeomParam() = "AlembicOFloat32GeomParam_construct";
function ~AlembicOFloat32GeomParam() = "AlembicOFloat32GeomParam_free";
function Boolean AlembicOFloat32GeomParam.valid() = "AlembicOFloat32GeomParam_valid";
function AlembicOFloat32GeomParam.reset!() = "AlembicOFloat32GeomParam_free";

function AlembicOFloat32GeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOFloat32GeomParam_construct5Args";

function Boolean AlembicOFloat32GeomParam.matches(AlembicPropertyHeader header) = "AlembicOFloat32GeomParam_matches";
function AlembicOFloat32GeomParam.set!(AlembicOFloat32GeomParamSample sample) = "AlembicOFloat32GeomParam_set";
function AlembicOFloat32GeomParam.setFromPrevious!() = "AlembicOFloat32GeomParam_setFromPrevious";
function AlembicOFloat32GeomParam.setTimeSampling!(UInt32 index) = "AlembicOFloat32GeomParam_setTimeSampling";
function UInt32 AlembicOFloat32GeomParam.getNumSamples() = "AlembicOFloat32GeomParam_getNumSamples";
function AlembicDataType AlembicOFloat32GeomParam.getDataType() = "AlembicOFloat32GeomParam_getDataType";
function Boolean AlembicOFloat32GeomParam.isIndexed() = "AlembicOFloat32GeomParam_isIndexed";
function AlembicGeometryScope AlembicOFloat32GeomParam.getScope() = "AlembicOFloat32GeomParam_getScope";
function String AlembicOFloat32GeomParam.getName() = "AlembicOFloat32GeomParam_getName";
function AlembicOArrayProperty AlembicOFloat32GeomParam.getValueProperty() = "AlembicOFloat32GeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOFloat32GeomParam.getIndexProperty() = "AlembicOFloat32GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIFloat64GeomParamSample {
  Data handle;
};

function AlembicIFloat64GeomParamSample() = "AlembicIFloat64GeomParamSample_construct";
function ~AlembicIFloat64GeomParamSample() = "AlembicIFloat64GeomParamSample_free";

function Float64<> AlembicIFloat64GeomParamSample.getVals() = "AlembicIFloat64GeomParamSample_getVals";
function UInt32<> AlembicIFloat64GeomParamSample.getIndices() = "AlembicIFloat64GeomParamSample_getIndices";
function AlembicGeometryScope AlembicIFloat64GeomParamSample.getScope() = "AlembicIFloat64GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOFloat64GeomParamSample {
  Data handle;
};

function AlembicOFloat64GeomParamSample() = "AlembicOFloat64GeomParamSample_construct";
function ~AlembicOFloat64GeomParamSample() = "AlembicOFloat64GeomParamSample_free";

function AlembicOFloat64GeomParamSample(Float64 values<>, AlembicGeometryScope scope) = "AlembicOFloat64GeomParamSample_constructFromValuesAndScope";
function AlembicOFloat64GeomParamSample(Float64 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOFloat64GeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOFloat64GeomParamSample.setVals!(Float64 values<>) = "AlembicOFloat64GeomParamSample_setVals";
function Float64<> AlembicOFloat64GeomParamSample.getVals() = "AlembicOFloat64GeomParamSample_getVals";
function AlembicOFloat64GeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOFloat64GeomParamSample_setIndices";
function UInt32<> AlembicOFloat64GeomParamSample.getIndices() = "AlembicOFloat64GeomParamSample_getIndices";
function AlembicOFloat64GeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOFloat64GeomParamSample_setScope";
function AlembicGeometryScope AlembicOFloat64GeomParamSample.getScope() = "AlembicOFloat64GeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIFloat64GeomParam {
  Data handle;
};

function AlembicIFloat64GeomParam() = "AlembicIFloat64GeomParam_construct";
function ~AlembicIFloat64GeomParam() = "AlembicIFloat64GeomParam_free";
function Boolean AlembicIFloat64GeomParam.valid() = "AlembicIFloat64GeomParam_valid";
function AlembicIFloat64GeomParam.reset!() = "AlembicIFloat64GeomParam_free";

function AlembicIFloat64GeomParam(AlembicICompoundProperty parent, String name) = "AlembicIFloat64GeomParam_construct2Args";

function Boolean AlembicIFloat64GeomParam.matches(AlembicPropertyHeader header) = "AlembicIFloat64GeomParam_matches";
function AlembicIFloat64GeomParamSample AlembicIFloat64GeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIFloat64GeomParam_getIndexed";
function AlembicIFloat64GeomParamSample AlembicIFloat64GeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIFloat64GeomParamSample AlembicIFloat64GeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIFloat64GeomParam_getExpanded";
function AlembicIFloat64GeomParamSample AlembicIFloat64GeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIFloat64GeomParam.getNumSamples() = "AlembicIFloat64GeomParam_getNumSamples";
function AlembicDataType AlembicIFloat64GeomParam.getDataType() = "AlembicIFloat64GeomParam_getDataType";
function UInt32 AlembicIFloat64GeomParam.getArrayExtent() = "AlembicIFloat64GeomParam_getArrayExtent";
function Boolean AlembicIFloat64GeomParam.isIndexed() = "AlembicIFloat64GeomParam_isIndexed";
function AlembicGeometryScope AlembicIFloat64GeomParam.getScope() = "AlembicIFloat64GeomParam_getScope";
function AlembicTimeSampling AlembicIFloat64GeomParam.getTimeSampling() = "AlembicIFloat64GeomParam_getTimeSampling";
function String AlembicIFloat64GeomParam.getName() = "AlembicIFloat64GeomParam_getName";
function AlembicICompoundProperty AlembicIFloat64GeomParam.getParent() = "AlembicIFloat64GeomParam_getParent";
function Boolean AlembicIFloat64GeomParam.isConstant() = "AlembicIFloat64GeomParam_isConstant";
function AlembicIArrayProperty AlembicIFloat64GeomParam.getValueProperty() = "AlembicIFloat64GeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIFloat64GeomParam.getIndexProperty() = "AlembicIFloat64GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOFloat64GeomParam {
  Data handle;
};

function AlembicOFloat64GeomParam() = "AlembicOFloat64GeomParam_construct";
function ~AlembicOFloat64GeomParam() = "AlembicOFloat64GeomParam_free";
function Boolean AlembicOFloat64GeomParam.valid() = "AlembicOFloat64GeomParam_valid";
function AlembicOFloat64GeomParam.reset!() = "AlembicOFloat64GeomParam_free";

function AlembicOFloat64GeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOFloat64GeomParam_construct5Args";

function Boolean AlembicOFloat64GeomParam.matches(AlembicPropertyHeader header) = "AlembicOFloat64GeomParam_matches";
function AlembicOFloat64GeomParam.set!(AlembicOFloat64GeomParamSample sample) = "AlembicOFloat64GeomParam_set";
function AlembicOFloat64GeomParam.setFromPrevious!() = "AlembicOFloat64GeomParam_setFromPrevious";
function AlembicOFloat64GeomParam.setTimeSampling!(UInt32 index) = "AlembicOFloat64GeomParam_setTimeSampling";
function UInt32 AlembicOFloat64GeomParam.getNumSamples() = "AlembicOFloat64GeomParam_getNumSamples";
function AlembicDataType AlembicOFloat64GeomParam.getDataType() = "AlembicOFloat64GeomParam_getDataType";
function Boolean AlembicOFloat64GeomParam.isIndexed() = "AlembicOFloat64GeomParam_isIndexed";
function AlembicGeometryScope AlembicOFloat64GeomParam.getScope() = "AlembicOFloat64GeomParam_getScope";
function String AlembicOFloat64GeomParam.getName() = "AlembicOFloat64GeomParam_getName";
function AlembicOArrayProperty AlembicOFloat64GeomParam.getValueProperty() = "AlembicOFloat64GeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOFloat64GeomParam.getIndexProperty() = "AlembicOFloat64GeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec2VsGeomParamSample {
  Data handle;
};

function AlembicIVec2VsGeomParamSample() = "AlembicIVec2VsGeomParamSample_construct";
function ~AlembicIVec2VsGeomParamSample() = "AlembicIVec2VsGeomParamSample_free";

function Vec2[] AlembicIVec2VsGeomParamSample.getVals() = "AlembicIVec2VsGeomParamSample_getVals";
function UInt32<> AlembicIVec2VsGeomParamSample.getIndices() = "AlembicIVec2VsGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIVec2VsGeomParamSample.getScope() = "AlembicIVec2VsGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec2VsGeomParamSample {
  Data handle;
};

function AlembicOVec2VsGeomParamSample() = "AlembicOVec2VsGeomParamSample_construct";
function ~AlembicOVec2VsGeomParamSample() = "AlembicOVec2VsGeomParamSample_free";

function AlembicOVec2VsGeomParamSample(Vec2 values<>, AlembicGeometryScope scope) = "AlembicOVec2VsGeomParamSample_constructFromValuesAndScope";
function AlembicOVec2VsGeomParamSample(Vec2 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOVec2VsGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOVec2VsGeomParamSample.setVals!(Vec2 values<>) = "AlembicOVec2VsGeomParamSample_setVals";
function Vec2[] AlembicOVec2VsGeomParamSample.getVals() = "AlembicOVec2VsGeomParamSample_getVals";
function AlembicOVec2VsGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOVec2VsGeomParamSample_setIndices";
function UInt32<> AlembicOVec2VsGeomParamSample.getIndices() = "AlembicOVec2VsGeomParamSample_getIndices";
function AlembicOVec2VsGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOVec2VsGeomParamSample_setScope";
function AlembicGeometryScope AlembicOVec2VsGeomParamSample.getScope() = "AlembicOVec2VsGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec2VsGeomParam {
  Data handle;
};

function AlembicIVec2VsGeomParam() = "AlembicIVec2VsGeomParam_construct";
function ~AlembicIVec2VsGeomParam() = "AlembicIVec2VsGeomParam_free";
function Boolean AlembicIVec2VsGeomParam.valid() = "AlembicIVec2VsGeomParam_valid";
function AlembicIVec2VsGeomParam.reset!() = "AlembicIVec2VsGeomParam_free";

function AlembicIVec2VsGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIVec2VsGeomParam_construct2Args";

function Boolean AlembicIVec2VsGeomParam.matches(AlembicPropertyHeader header) = "AlembicIVec2VsGeomParam_matches";
function AlembicIVec2VsGeomParamSample AlembicIVec2VsGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIVec2VsGeomParam_getIndexed";
function AlembicIVec2VsGeomParamSample AlembicIVec2VsGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIVec2VsGeomParamSample AlembicIVec2VsGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIVec2VsGeomParam_getExpanded";
function AlembicIVec2VsGeomParamSample AlembicIVec2VsGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIVec2VsGeomParam.getNumSamples() = "AlembicIVec2VsGeomParam_getNumSamples";
function AlembicDataType AlembicIVec2VsGeomParam.getDataType() = "AlembicIVec2VsGeomParam_getDataType";
function UInt32 AlembicIVec2VsGeomParam.getArrayExtent() = "AlembicIVec2VsGeomParam_getArrayExtent";
function Boolean AlembicIVec2VsGeomParam.isIndexed() = "AlembicIVec2VsGeomParam_isIndexed";
function AlembicGeometryScope AlembicIVec2VsGeomParam.getScope() = "AlembicIVec2VsGeomParam_getScope";
function AlembicTimeSampling AlembicIVec2VsGeomParam.getTimeSampling() = "AlembicIVec2VsGeomParam_getTimeSampling";
function String AlembicIVec2VsGeomParam.getName() = "AlembicIVec2VsGeomParam_getName";
function AlembicICompoundProperty AlembicIVec2VsGeomParam.getParent() = "AlembicIVec2VsGeomParam_getParent";
function Boolean AlembicIVec2VsGeomParam.isConstant() = "AlembicIVec2VsGeomParam_isConstant";
function AlembicIArrayProperty AlembicIVec2VsGeomParam.getValueProperty() = "AlembicIVec2VsGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIVec2VsGeomParam.getIndexProperty() = "AlembicIVec2VsGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec2VsGeomParam {
  Data handle;
};

function AlembicOVec2VsGeomParam() = "AlembicOVec2VsGeomParam_construct";
function ~AlembicOVec2VsGeomParam() = "AlembicOVec2VsGeomParam_free";
function Boolean AlembicOVec2VsGeomParam.valid() = "AlembicOVec2VsGeomParam_valid";
function AlembicOVec2VsGeomParam.reset!() = "AlembicOVec2VsGeomParam_free";

function AlembicOVec2VsGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOVec2VsGeomParam_construct5Args";

function Boolean AlembicOVec2VsGeomParam.matches(AlembicPropertyHeader header) = "AlembicOVec2VsGeomParam_matches";
function AlembicOVec2VsGeomParam.set!(AlembicOVec2VsGeomParamSample sample) = "AlembicOVec2VsGeomParam_set";
function AlembicOVec2VsGeomParam.setFromPrevious!() = "AlembicOVec2VsGeomParam_setFromPrevious";
function AlembicOVec2VsGeomParam.setTimeSampling!(UInt32 index) = "AlembicOVec2VsGeomParam_setTimeSampling";
function UInt32 AlembicOVec2VsGeomParam.getNumSamples() = "AlembicOVec2VsGeomParam_getNumSamples";
function AlembicDataType AlembicOVec2VsGeomParam.getDataType() = "AlembicOVec2VsGeomParam_getDataType";
function Boolean AlembicOVec2VsGeomParam.isIndexed() = "AlembicOVec2VsGeomParam_isIndexed";
function AlembicGeometryScope AlembicOVec2VsGeomParam.getScope() = "AlembicOVec2VsGeomParam_getScope";
function String AlembicOVec2VsGeomParam.getName() = "AlembicOVec2VsGeomParam_getName";
function AlembicOArrayProperty AlembicOVec2VsGeomParam.getValueProperty() = "AlembicOVec2VsGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOVec2VsGeomParam.getIndexProperty() = "AlembicOVec2VsGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec2ViGeomParamSample {
  Data handle;
};

function AlembicIVec2ViGeomParamSample() = "AlembicIVec2ViGeomParamSample_construct";
function ~AlembicIVec2ViGeomParamSample() = "AlembicIVec2ViGeomParamSample_free";

function Vec2[] AlembicIVec2ViGeomParamSample.getVals() = "AlembicIVec2ViGeomParamSample_getVals";
function UInt32<> AlembicIVec2ViGeomParamSample.getIndices() = "AlembicIVec2ViGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIVec2ViGeomParamSample.getScope() = "AlembicIVec2ViGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec2ViGeomParamSample {
  Data handle;
};

function AlembicOVec2ViGeomParamSample() = "AlembicOVec2ViGeomParamSample_construct";
function ~AlembicOVec2ViGeomParamSample() = "AlembicOVec2ViGeomParamSample_free";

function AlembicOVec2ViGeomParamSample(Vec2 values<>, AlembicGeometryScope scope) = "AlembicOVec2ViGeomParamSample_constructFromValuesAndScope";
function AlembicOVec2ViGeomParamSample(Vec2 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOVec2ViGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOVec2ViGeomParamSample.setVals!(Vec2 values<>) = "AlembicOVec2ViGeomParamSample_setVals";
function Vec2[] AlembicOVec2ViGeomParamSample.getVals() = "AlembicOVec2ViGeomParamSample_getVals";
function AlembicOVec2ViGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOVec2ViGeomParamSample_setIndices";
function UInt32<> AlembicOVec2ViGeomParamSample.getIndices() = "AlembicOVec2ViGeomParamSample_getIndices";
function AlembicOVec2ViGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOVec2ViGeomParamSample_setScope";
function AlembicGeometryScope AlembicOVec2ViGeomParamSample.getScope() = "AlembicOVec2ViGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec2ViGeomParam {
  Data handle;
};

function AlembicIVec2ViGeomParam() = "AlembicIVec2ViGeomParam_construct";
function ~AlembicIVec2ViGeomParam() = "AlembicIVec2ViGeomParam_free";
function Boolean AlembicIVec2ViGeomParam.valid() = "AlembicIVec2ViGeomParam_valid";
function AlembicIVec2ViGeomParam.reset!() = "AlembicIVec2ViGeomParam_free";

function AlembicIVec2ViGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIVec2ViGeomParam_construct2Args";

function Boolean AlembicIVec2ViGeomParam.matches(AlembicPropertyHeader header) = "AlembicIVec2ViGeomParam_matches";
function AlembicIVec2ViGeomParamSample AlembicIVec2ViGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIVec2ViGeomParam_getIndexed";
function AlembicIVec2ViGeomParamSample AlembicIVec2ViGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIVec2ViGeomParamSample AlembicIVec2ViGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIVec2ViGeomParam_getExpanded";
function AlembicIVec2ViGeomParamSample AlembicIVec2ViGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIVec2ViGeomParam.getNumSamples() = "AlembicIVec2ViGeomParam_getNumSamples";
function AlembicDataType AlembicIVec2ViGeomParam.getDataType() = "AlembicIVec2ViGeomParam_getDataType";
function UInt32 AlembicIVec2ViGeomParam.getArrayExtent() = "AlembicIVec2ViGeomParam_getArrayExtent";
function Boolean AlembicIVec2ViGeomParam.isIndexed() = "AlembicIVec2ViGeomParam_isIndexed";
function AlembicGeometryScope AlembicIVec2ViGeomParam.getScope() = "AlembicIVec2ViGeomParam_getScope";
function AlembicTimeSampling AlembicIVec2ViGeomParam.getTimeSampling() = "AlembicIVec2ViGeomParam_getTimeSampling";
function String AlembicIVec2ViGeomParam.getName() = "AlembicIVec2ViGeomParam_getName";
function AlembicICompoundProperty AlembicIVec2ViGeomParam.getParent() = "AlembicIVec2ViGeomParam_getParent";
function Boolean AlembicIVec2ViGeomParam.isConstant() = "AlembicIVec2ViGeomParam_isConstant";
function AlembicIArrayProperty AlembicIVec2ViGeomParam.getValueProperty() = "AlembicIVec2ViGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIVec2ViGeomParam.getIndexProperty() = "AlembicIVec2ViGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec2ViGeomParam {
  Data handle;
};

function AlembicOVec2ViGeomParam() = "AlembicOVec2ViGeomParam_construct";
function ~AlembicOVec2ViGeomParam() = "AlembicOVec2ViGeomParam_free";
function Boolean AlembicOVec2ViGeomParam.valid() = "AlembicOVec2ViGeomParam_valid";
function AlembicOVec2ViGeomParam.reset!() = "AlembicOVec2ViGeomParam_free";

function AlembicOVec2ViGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOVec2ViGeomParam_construct5Args";

function Boolean AlembicOVec2ViGeomParam.matches(AlembicPropertyHeader header) = "AlembicOVec2ViGeomParam_matches";
function AlembicOVec2ViGeomParam.set!(AlembicOVec2ViGeomParamSample sample) = "AlembicOVec2ViGeomParam_set";
function AlembicOVec2ViGeomParam.setFromPrevious!() = "AlembicOVec2ViGeomParam_setFromPrevious";
function AlembicOVec2ViGeomParam.setTimeSampling!(UInt32 index) = "AlembicOVec2ViGeomParam_setTimeSampling";
function UInt32 AlembicOVec2ViGeomParam.getNumSamples() = "AlembicOVec2ViGeomParam_getNumSamples";
function AlembicDataType AlembicOVec2ViGeomParam.getDataType() = "AlembicOVec2ViGeomParam_getDataType";
function Boolean AlembicOVec2ViGeomParam.isIndexed() = "AlembicOVec2ViGeomParam_isIndexed";
function AlembicGeometryScope AlembicOVec2ViGeomParam.getScope() = "AlembicOVec2ViGeomParam_getScope";
function String AlembicOVec2ViGeomParam.getName() = "AlembicOVec2ViGeomParam_getName";
function AlembicOArrayProperty AlembicOVec2ViGeomParam.getValueProperty() = "AlembicOVec2ViGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOVec2ViGeomParam.getIndexProperty() = "AlembicOVec2ViGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec2VfGeomParamSample {
  Data handle;
};

function AlembicIVec2VfGeomParamSample() = "AlembicIVec2VfGeomParamSample_construct";
function ~AlembicIVec2VfGeomParamSample() = "AlembicIVec2VfGeomParamSample_free";

function Vec2[] AlembicIVec2VfGeomParamSample.getVals() = "AlembicIVec2VfGeomParamSample_getVals";
function UInt32<> AlembicIVec2VfGeomParamSample.getIndices() = "AlembicIVec2VfGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIVec2VfGeomParamSample.getScope() = "AlembicIVec2VfGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec2VfGeomParamSample {
  Data handle;
};

function AlembicOVec2VfGeomParamSample() = "AlembicOVec2VfGeomParamSample_construct";
function ~AlembicOVec2VfGeomParamSample() = "AlembicOVec2VfGeomParamSample_free";

function AlembicOVec2VfGeomParamSample(Vec2 values<>, AlembicGeometryScope scope) = "AlembicOVec2VfGeomParamSample_constructFromValuesAndScope";
function AlembicOVec2VfGeomParamSample(Vec2 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOVec2VfGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOVec2VfGeomParamSample.setVals!(Vec2 values<>) = "AlembicOVec2VfGeomParamSample_setVals";
function Vec2[] AlembicOVec2VfGeomParamSample.getVals() = "AlembicOVec2VfGeomParamSample_getVals";
function AlembicOVec2VfGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOVec2VfGeomParamSample_setIndices";
function UInt32<> AlembicOVec2VfGeomParamSample.getIndices() = "AlembicOVec2VfGeomParamSample_getIndices";
function AlembicOVec2VfGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOVec2VfGeomParamSample_setScope";
function AlembicGeometryScope AlembicOVec2VfGeomParamSample.getScope() = "AlembicOVec2VfGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec2VfGeomParam {
  Data handle;
};

function AlembicIVec2VfGeomParam() = "AlembicIVec2VfGeomParam_construct";
function ~AlembicIVec2VfGeomParam() = "AlembicIVec2VfGeomParam_free";
function Boolean AlembicIVec2VfGeomParam.valid() = "AlembicIVec2VfGeomParam_valid";
function AlembicIVec2VfGeomParam.reset!() = "AlembicIVec2VfGeomParam_free";

function AlembicIVec2VfGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIVec2VfGeomParam_construct2Args";

function Boolean AlembicIVec2VfGeomParam.matches(AlembicPropertyHeader header) = "AlembicIVec2VfGeomParam_matches";
function AlembicIVec2VfGeomParamSample AlembicIVec2VfGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIVec2VfGeomParam_getIndexed";
function AlembicIVec2VfGeomParamSample AlembicIVec2VfGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIVec2VfGeomParamSample AlembicIVec2VfGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIVec2VfGeomParam_getExpanded";
function AlembicIVec2VfGeomParamSample AlembicIVec2VfGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIVec2VfGeomParam.getNumSamples() = "AlembicIVec2VfGeomParam_getNumSamples";
function AlembicDataType AlembicIVec2VfGeomParam.getDataType() = "AlembicIVec2VfGeomParam_getDataType";
function UInt32 AlembicIVec2VfGeomParam.getArrayExtent() = "AlembicIVec2VfGeomParam_getArrayExtent";
function Boolean AlembicIVec2VfGeomParam.isIndexed() = "AlembicIVec2VfGeomParam_isIndexed";
function AlembicGeometryScope AlembicIVec2VfGeomParam.getScope() = "AlembicIVec2VfGeomParam_getScope";
function AlembicTimeSampling AlembicIVec2VfGeomParam.getTimeSampling() = "AlembicIVec2VfGeomParam_getTimeSampling";
function String AlembicIVec2VfGeomParam.getName() = "AlembicIVec2VfGeomParam_getName";
function AlembicICompoundProperty AlembicIVec2VfGeomParam.getParent() = "AlembicIVec2VfGeomParam_getParent";
function Boolean AlembicIVec2VfGeomParam.isConstant() = "AlembicIVec2VfGeomParam_isConstant";
function AlembicIArrayProperty AlembicIVec2VfGeomParam.getValueProperty() = "AlembicIVec2VfGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIVec2VfGeomParam.getIndexProperty() = "AlembicIVec2VfGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec2VfGeomParam {
  Data handle;
};

function AlembicOVec2VfGeomParam() = "AlembicOVec2VfGeomParam_construct";
function ~AlembicOVec2VfGeomParam() = "AlembicOVec2VfGeomParam_free";
function Boolean AlembicOVec2VfGeomParam.valid() = "AlembicOVec2VfGeomParam_valid";
function AlembicOVec2VfGeomParam.reset!() = "AlembicOVec2VfGeomParam_free";

function AlembicOVec2VfGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOVec2VfGeomParam_construct5Args";

function Boolean AlembicOVec2VfGeomParam.matches(AlembicPropertyHeader header) = "AlembicOVec2VfGeomParam_matches";
function AlembicOVec2VfGeomParam.set!(AlembicOVec2VfGeomParamSample sample) = "AlembicOVec2VfGeomParam_set";
function AlembicOVec2VfGeomParam.setFromPrevious!() = "AlembicOVec2VfGeomParam_setFromPrevious";
function AlembicOVec2VfGeomParam.setTimeSampling!(UInt32 index) = "AlembicOVec2VfGeomParam_setTimeSampling";
function UInt32 AlembicOVec2VfGeomParam.getNumSamples() = "AlembicOVec2VfGeomParam_getNumSamples";
function AlembicDataType AlembicOVec2VfGeomParam.getDataType() = "AlembicOVec2VfGeomParam_getDataType";
function Boolean AlembicOVec2VfGeomParam.isIndexed() = "AlembicOVec2VfGeomParam_isIndexed";
function AlembicGeometryScope AlembicOVec2VfGeomParam.getScope() = "AlembicOVec2VfGeomParam_getScope";
function String AlembicOVec2VfGeomParam.getName() = "AlembicOVec2VfGeomParam_getName";
function AlembicOArrayProperty AlembicOVec2VfGeomParam.getValueProperty() = "AlembicOVec2VfGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOVec2VfGeomParam.getIndexProperty() = "AlembicOVec2VfGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec2VdGeomParamSample {
  Data handle;
};

function AlembicIVec2VdGeomParamSample() = "AlembicIVec2VdGeomParamSample_construct";
function ~AlembicIVec2VdGeomParamSample() = "AlembicIVec2VdGeomParamSample_free";

function Vec2[] AlembicIVec2VdGeomParamSample.getVals() = "AlembicIVec2VdGeomParamSample_getVals";
function UInt32<> AlembicIVec2VdGeomParamSample.getIndices() = "AlembicIVec2VdGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIVec2VdGeomParamSample.getScope() = "AlembicIVec2VdGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec2VdGeomParamSample {
  Data handle;
};

function AlembicOVec2VdGeomParamSample() = "AlembicOVec2VdGeomParamSample_construct";
function ~AlembicOVec2VdGeomParamSample() = "AlembicOVec2VdGeomParamSample_free";

function AlembicOVec2VdGeomParamSample(Vec2 values<>, AlembicGeometryScope scope) = "AlembicOVec2VdGeomParamSample_constructFromValuesAndScope";
function AlembicOVec2VdGeomParamSample(Vec2 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOVec2VdGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOVec2VdGeomParamSample.setVals!(Vec2 values<>) = "AlembicOVec2VdGeomParamSample_setVals";
function Vec2[] AlembicOVec2VdGeomParamSample.getVals() = "AlembicOVec2VdGeomParamSample_getVals";
function AlembicOVec2VdGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOVec2VdGeomParamSample_setIndices";
function UInt32<> AlembicOVec2VdGeomParamSample.getIndices() = "AlembicOVec2VdGeomParamSample_getIndices";
function AlembicOVec2VdGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOVec2VdGeomParamSample_setScope";
function AlembicGeometryScope AlembicOVec2VdGeomParamSample.getScope() = "AlembicOVec2VdGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec2VdGeomParam {
  Data handle;
};

function AlembicIVec2VdGeomParam() = "AlembicIVec2VdGeomParam_construct";
function ~AlembicIVec2VdGeomParam() = "AlembicIVec2VdGeomParam_free";
function Boolean AlembicIVec2VdGeomParam.valid() = "AlembicIVec2VdGeomParam_valid";
function AlembicIVec2VdGeomParam.reset!() = "AlembicIVec2VdGeomParam_free";

function AlembicIVec2VdGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIVec2VdGeomParam_construct2Args";

function Boolean AlembicIVec2VdGeomParam.matches(AlembicPropertyHeader header) = "AlembicIVec2VdGeomParam_matches";
function AlembicIVec2VdGeomParamSample AlembicIVec2VdGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIVec2VdGeomParam_getIndexed";
function AlembicIVec2VdGeomParamSample AlembicIVec2VdGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIVec2VdGeomParamSample AlembicIVec2VdGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIVec2VdGeomParam_getExpanded";
function AlembicIVec2VdGeomParamSample AlembicIVec2VdGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIVec2VdGeomParam.getNumSamples() = "AlembicIVec2VdGeomParam_getNumSamples";
function AlembicDataType AlembicIVec2VdGeomParam.getDataType() = "AlembicIVec2VdGeomParam_getDataType";
function UInt32 AlembicIVec2VdGeomParam.getArrayExtent() = "AlembicIVec2VdGeomParam_getArrayExtent";
function Boolean AlembicIVec2VdGeomParam.isIndexed() = "AlembicIVec2VdGeomParam_isIndexed";
function AlembicGeometryScope AlembicIVec2VdGeomParam.getScope() = "AlembicIVec2VdGeomParam_getScope";
function AlembicTimeSampling AlembicIVec2VdGeomParam.getTimeSampling() = "AlembicIVec2VdGeomParam_getTimeSampling";
function String AlembicIVec2VdGeomParam.getName() = "AlembicIVec2VdGeomParam_getName";
function AlembicICompoundProperty AlembicIVec2VdGeomParam.getParent() = "AlembicIVec2VdGeomParam_getParent";
function Boolean AlembicIVec2VdGeomParam.isConstant() = "AlembicIVec2VdGeomParam_isConstant";
function AlembicIArrayProperty AlembicIVec2VdGeomParam.getValueProperty() = "AlembicIVec2VdGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIVec2VdGeomParam.getIndexProperty() = "AlembicIVec2VdGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec2VdGeomParam {
  Data handle;
};

function AlembicOVec2VdGeomParam() = "AlembicOVec2VdGeomParam_construct";
function ~AlembicOVec2VdGeomParam() = "AlembicOVec2VdGeomParam_free";
function Boolean AlembicOVec2VdGeomParam.valid() = "AlembicOVec2VdGeomParam_valid";
function AlembicOVec2VdGeomParam.reset!() = "AlembicOVec2VdGeomParam_free";

function AlembicOVec2VdGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOVec2VdGeomParam_construct5Args";

function Boolean AlembicOVec2VdGeomParam.matches(AlembicPropertyHeader header) = "AlembicOVec2VdGeomParam_matches";
function AlembicOVec2VdGeomParam.set!(AlembicOVec2VdGeomParamSample sample) = "AlembicOVec2VdGeomParam_set";
function AlembicOVec2VdGeomParam.setFromPrevious!() = "AlembicOVec2VdGeomParam_setFromPrevious";
function AlembicOVec2VdGeomParam.setTimeSampling!(UInt32 index) = "AlembicOVec2VdGeomParam_setTimeSampling";
function UInt32 AlembicOVec2VdGeomParam.getNumSamples() = "AlembicOVec2VdGeomParam_getNumSamples";
function AlembicDataType AlembicOVec2VdGeomParam.getDataType() = "AlembicOVec2VdGeomParam_getDataType";
function Boolean AlembicOVec2VdGeomParam.isIndexed() = "AlembicOVec2VdGeomParam_isIndexed";
function AlembicGeometryScope AlembicOVec2VdGeomParam.getScope() = "AlembicOVec2VdGeomParam_getScope";
function String AlembicOVec2VdGeomParam.getName() = "AlembicOVec2VdGeomParam_getName";
function AlembicOArrayProperty AlembicOVec2VdGeomParam.getValueProperty() = "AlembicOVec2VdGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOVec2VdGeomParam.getIndexProperty() = "AlembicOVec2VdGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec2NfGeomParamSample {
  Data handle;
};

function AlembicIVec2NfGeomParamSample() = "AlembicIVec2NfGeomParamSample_construct";
function ~AlembicIVec2NfGeomParamSample() = "AlembicIVec2NfGeomParamSample_free";

function Vec2[] AlembicIVec2NfGeomParamSample.getVals() = "AlembicIVec2NfGeomParamSample_getVals";
function UInt32<> AlembicIVec2NfGeomParamSample.getIndices() = "AlembicIVec2NfGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIVec2NfGeomParamSample.getScope() = "AlembicIVec2NfGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec2NfGeomParamSample {
  Data handle;
};

function AlembicOVec2NfGeomParamSample() = "AlembicOVec2NfGeomParamSample_construct";
function ~AlembicOVec2NfGeomParamSample() = "AlembicOVec2NfGeomParamSample_free";

function AlembicOVec2NfGeomParamSample(Vec2 values<>, AlembicGeometryScope scope) = "AlembicOVec2NfGeomParamSample_constructFromValuesAndScope";
function AlembicOVec2NfGeomParamSample(Vec2 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOVec2NfGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOVec2NfGeomParamSample.setVals!(Vec2 values<>) = "AlembicOVec2NfGeomParamSample_setVals";
function Vec2[] AlembicOVec2NfGeomParamSample.getVals() = "AlembicOVec2NfGeomParamSample_getVals";
function AlembicOVec2NfGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOVec2NfGeomParamSample_setIndices";
function UInt32<> AlembicOVec2NfGeomParamSample.getIndices() = "AlembicOVec2NfGeomParamSample_getIndices";
function AlembicOVec2NfGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOVec2NfGeomParamSample_setScope";
function AlembicGeometryScope AlembicOVec2NfGeomParamSample.getScope() = "AlembicOVec2NfGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec2NfGeomParam {
  Data handle;
};

function AlembicIVec2NfGeomParam() = "AlembicIVec2NfGeomParam_construct";
function ~AlembicIVec2NfGeomParam() = "AlembicIVec2NfGeomParam_free";
function Boolean AlembicIVec2NfGeomParam.valid() = "AlembicIVec2NfGeomParam_valid";
function AlembicIVec2NfGeomParam.reset!() = "AlembicIVec2NfGeomParam_free";

function AlembicIVec2NfGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIVec2NfGeomParam_construct2Args";

function Boolean AlembicIVec2NfGeomParam.matches(AlembicPropertyHeader header) = "AlembicIVec2NfGeomParam_matches";
function AlembicIVec2NfGeomParamSample AlembicIVec2NfGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIVec2NfGeomParam_getIndexed";
function AlembicIVec2NfGeomParamSample AlembicIVec2NfGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIVec2NfGeomParamSample AlembicIVec2NfGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIVec2NfGeomParam_getExpanded";
function AlembicIVec2NfGeomParamSample AlembicIVec2NfGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIVec2NfGeomParam.getNumSamples() = "AlembicIVec2NfGeomParam_getNumSamples";
function AlembicDataType AlembicIVec2NfGeomParam.getDataType() = "AlembicIVec2NfGeomParam_getDataType";
function UInt32 AlembicIVec2NfGeomParam.getArrayExtent() = "AlembicIVec2NfGeomParam_getArrayExtent";
function Boolean AlembicIVec2NfGeomParam.isIndexed() = "AlembicIVec2NfGeomParam_isIndexed";
function AlembicGeometryScope AlembicIVec2NfGeomParam.getScope() = "AlembicIVec2NfGeomParam_getScope";
function AlembicTimeSampling AlembicIVec2NfGeomParam.getTimeSampling() = "AlembicIVec2NfGeomParam_getTimeSampling";
function String AlembicIVec2NfGeomParam.getName() = "AlembicIVec2NfGeomParam_getName";
function AlembicICompoundProperty AlembicIVec2NfGeomParam.getParent() = "AlembicIVec2NfGeomParam_getParent";
function Boolean AlembicIVec2NfGeomParam.isConstant() = "AlembicIVec2NfGeomParam_isConstant";
function AlembicIArrayProperty AlembicIVec2NfGeomParam.getValueProperty() = "AlembicIVec2NfGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIVec2NfGeomParam.getIndexProperty() = "AlembicIVec2NfGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec2NfGeomParam {
  Data handle;
};

function AlembicOVec2NfGeomParam() = "AlembicOVec2NfGeomParam_construct";
function ~AlembicOVec2NfGeomParam() = "AlembicOVec2NfGeomParam_free";
function Boolean AlembicOVec2NfGeomParam.valid() = "AlembicOVec2NfGeomParam_valid";
function AlembicOVec2NfGeomParam.reset!() = "AlembicOVec2NfGeomParam_free";

function AlembicOVec2NfGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOVec2NfGeomParam_construct5Args";

function Boolean AlembicOVec2NfGeomParam.matches(AlembicPropertyHeader header) = "AlembicOVec2NfGeomParam_matches";
function AlembicOVec2NfGeomParam.set!(AlembicOVec2NfGeomParamSample sample) = "AlembicOVec2NfGeomParam_set";
function AlembicOVec2NfGeomParam.setFromPrevious!() = "AlembicOVec2NfGeomParam_setFromPrevious";
function AlembicOVec2NfGeomParam.setTimeSampling!(UInt32 index) = "AlembicOVec2NfGeomParam_setTimeSampling";
function UInt32 AlembicOVec2NfGeomParam.getNumSamples() = "AlembicOVec2NfGeomParam_getNumSamples";
function AlembicDataType AlembicOVec2NfGeomParam.getDataType() = "AlembicOVec2NfGeomParam_getDataType";
function Boolean AlembicOVec2NfGeomParam.isIndexed() = "AlembicOVec2NfGeomParam_isIndexed";
function AlembicGeometryScope AlembicOVec2NfGeomParam.getScope() = "AlembicOVec2NfGeomParam_getScope";
function String AlembicOVec2NfGeomParam.getName() = "AlembicOVec2NfGeomParam_getName";
function AlembicOArrayProperty AlembicOVec2NfGeomParam.getValueProperty() = "AlembicOVec2NfGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOVec2NfGeomParam.getIndexProperty() = "AlembicOVec2NfGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec2NdGeomParamSample {
  Data handle;
};

function AlembicIVec2NdGeomParamSample() = "AlembicIVec2NdGeomParamSample_construct";
function ~AlembicIVec2NdGeomParamSample() = "AlembicIVec2NdGeomParamSample_free";

function Vec2[] AlembicIVec2NdGeomParamSample.getVals() = "AlembicIVec2NdGeomParamSample_getVals";
function UInt32<> AlembicIVec2NdGeomParamSample.getIndices() = "AlembicIVec2NdGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIVec2NdGeomParamSample.getScope() = "AlembicIVec2NdGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec2NdGeomParamSample {
  Data handle;
};

function AlembicOVec2NdGeomParamSample() = "AlembicOVec2NdGeomParamSample_construct";
function ~AlembicOVec2NdGeomParamSample() = "AlembicOVec2NdGeomParamSample_free";

function AlembicOVec2NdGeomParamSample(Vec2 values<>, AlembicGeometryScope scope) = "AlembicOVec2NdGeomParamSample_constructFromValuesAndScope";
function AlembicOVec2NdGeomParamSample(Vec2 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOVec2NdGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOVec2NdGeomParamSample.setVals!(Vec2 values<>) = "AlembicOVec2NdGeomParamSample_setVals";
function Vec2[] AlembicOVec2NdGeomParamSample.getVals() = "AlembicOVec2NdGeomParamSample_getVals";
function AlembicOVec2NdGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOVec2NdGeomParamSample_setIndices";
function UInt32<> AlembicOVec2NdGeomParamSample.getIndices() = "AlembicOVec2NdGeomParamSample_getIndices";
function AlembicOVec2NdGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOVec2NdGeomParamSample_setScope";
function AlembicGeometryScope AlembicOVec2NdGeomParamSample.getScope() = "AlembicOVec2NdGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec2NdGeomParam {
  Data handle;
};

function AlembicIVec2NdGeomParam() = "AlembicIVec2NdGeomParam_construct";
function ~AlembicIVec2NdGeomParam() = "AlembicIVec2NdGeomParam_free";
function Boolean AlembicIVec2NdGeomParam.valid() = "AlembicIVec2NdGeomParam_valid";
function AlembicIVec2NdGeomParam.reset!() = "AlembicIVec2NdGeomParam_free";

function AlembicIVec2NdGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIVec2NdGeomParam_construct2Args";

function Boolean AlembicIVec2NdGeomParam.matches(AlembicPropertyHeader header) = "AlembicIVec2NdGeomParam_matches";
function AlembicIVec2NdGeomParamSample AlembicIVec2NdGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIVec2NdGeomParam_getIndexed";
function AlembicIVec2NdGeomParamSample AlembicIVec2NdGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIVec2NdGeomParamSample AlembicIVec2NdGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIVec2NdGeomParam_getExpanded";
function AlembicIVec2NdGeomParamSample AlembicIVec2NdGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIVec2NdGeomParam.getNumSamples() = "AlembicIVec2NdGeomParam_getNumSamples";
function AlembicDataType AlembicIVec2NdGeomParam.getDataType() = "AlembicIVec2NdGeomParam_getDataType";
function UInt32 AlembicIVec2NdGeomParam.getArrayExtent() = "AlembicIVec2NdGeomParam_getArrayExtent";
function Boolean AlembicIVec2NdGeomParam.isIndexed() = "AlembicIVec2NdGeomParam_isIndexed";
function AlembicGeometryScope AlembicIVec2NdGeomParam.getScope() = "AlembicIVec2NdGeomParam_getScope";
function AlembicTimeSampling AlembicIVec2NdGeomParam.getTimeSampling() = "AlembicIVec2NdGeomParam_getTimeSampling";
function String AlembicIVec2NdGeomParam.getName() = "AlembicIVec2NdGeomParam_getName";
function AlembicICompoundProperty AlembicIVec2NdGeomParam.getParent() = "AlembicIVec2NdGeomParam_getParent";
function Boolean AlembicIVec2NdGeomParam.isConstant() = "AlembicIVec2NdGeomParam_isConstant";
function AlembicIArrayProperty AlembicIVec2NdGeomParam.getValueProperty() = "AlembicIVec2NdGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIVec2NdGeomParam.getIndexProperty() = "AlembicIVec2NdGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec2NdGeomParam {
  Data handle;
};

function AlembicOVec2NdGeomParam() = "AlembicOVec2NdGeomParam_construct";
function ~AlembicOVec2NdGeomParam() = "AlembicOVec2NdGeomParam_free";
function Boolean AlembicOVec2NdGeomParam.valid() = "AlembicOVec2NdGeomParam_valid";
function AlembicOVec2NdGeomParam.reset!() = "AlembicOVec2NdGeomParam_free";

function AlembicOVec2NdGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOVec2NdGeomParam_construct5Args";

function Boolean AlembicOVec2NdGeomParam.matches(AlembicPropertyHeader header) = "AlembicOVec2NdGeomParam_matches";
function AlembicOVec2NdGeomParam.set!(AlembicOVec2NdGeomParamSample sample) = "AlembicOVec2NdGeomParam_set";
function AlembicOVec2NdGeomParam.setFromPrevious!() = "AlembicOVec2NdGeomParam_setFromPrevious";
function AlembicOVec2NdGeomParam.setTimeSampling!(UInt32 index) = "AlembicOVec2NdGeomParam_setTimeSampling";
function UInt32 AlembicOVec2NdGeomParam.getNumSamples() = "AlembicOVec2NdGeomParam_getNumSamples";
function AlembicDataType AlembicOVec2NdGeomParam.getDataType() = "AlembicOVec2NdGeomParam_getDataType";
function Boolean AlembicOVec2NdGeomParam.isIndexed() = "AlembicOVec2NdGeomParam_isIndexed";
function AlembicGeometryScope AlembicOVec2NdGeomParam.getScope() = "AlembicOVec2NdGeomParam_getScope";
function String AlembicOVec2NdGeomParam.getName() = "AlembicOVec2NdGeomParam_getName";
function AlembicOArrayProperty AlembicOVec2NdGeomParam.getValueProperty() = "AlembicOVec2NdGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOVec2NdGeomParam.getIndexProperty() = "AlembicOVec2NdGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec3VsGeomParamSample {
  Data handle;
};

function AlembicIVec3VsGeomParamSample() = "AlembicIVec3VsGeomParamSample_construct";
function ~AlembicIVec3VsGeomParamSample() = "AlembicIVec3VsGeomParamSample_free";

function Vec3[] AlembicIVec3VsGeomParamSample.getVals() = "AlembicIVec3VsGeomParamSample_getVals";
function UInt32<> AlembicIVec3VsGeomParamSample.getIndices() = "AlembicIVec3VsGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIVec3VsGeomParamSample.getScope() = "AlembicIVec3VsGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec3VsGeomParamSample {
  Data handle;
};

function AlembicOVec3VsGeomParamSample() = "AlembicOVec3VsGeomParamSample_construct";
function ~AlembicOVec3VsGeomParamSample() = "AlembicOVec3VsGeomParamSample_free";

function AlembicOVec3VsGeomParamSample(Vec3 values<>, AlembicGeometryScope scope) = "AlembicOVec3VsGeomParamSample_constructFromValuesAndScope";
function AlembicOVec3VsGeomParamSample(Vec3 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOVec3VsGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOVec3VsGeomParamSample.setVals!(Vec3 values<>) = "AlembicOVec3VsGeomParamSample_setVals";
function Vec3[] AlembicOVec3VsGeomParamSample.getVals() = "AlembicOVec3VsGeomParamSample_getVals";
function AlembicOVec3VsGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOVec3VsGeomParamSample_setIndices";
function UInt32<> AlembicOVec3VsGeomParamSample.getIndices() = "AlembicOVec3VsGeomParamSample_getIndices";
function AlembicOVec3VsGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOVec3VsGeomParamSample_setScope";
function AlembicGeometryScope AlembicOVec3VsGeomParamSample.getScope() = "AlembicOVec3VsGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec3VsGeomParam {
  Data handle;
};

function AlembicIVec3VsGeomParam() = "AlembicIVec3VsGeomParam_construct";
function ~AlembicIVec3VsGeomParam() = "AlembicIVec3VsGeomParam_free";
function Boolean AlembicIVec3VsGeomParam.valid() = "AlembicIVec3VsGeomParam_valid";
function AlembicIVec3VsGeomParam.reset!() = "AlembicIVec3VsGeomParam_free";

function AlembicIVec3VsGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIVec3VsGeomParam_construct2Args";

function Boolean AlembicIVec3VsGeomParam.matches(AlembicPropertyHeader header) = "AlembicIVec3VsGeomParam_matches";
function AlembicIVec3VsGeomParamSample AlembicIVec3VsGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIVec3VsGeomParam_getIndexed";
function AlembicIVec3VsGeomParamSample AlembicIVec3VsGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIVec3VsGeomParamSample AlembicIVec3VsGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIVec3VsGeomParam_getExpanded";
function AlembicIVec3VsGeomParamSample AlembicIVec3VsGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIVec3VsGeomParam.getNumSamples() = "AlembicIVec3VsGeomParam_getNumSamples";
function AlembicDataType AlembicIVec3VsGeomParam.getDataType() = "AlembicIVec3VsGeomParam_getDataType";
function UInt32 AlembicIVec3VsGeomParam.getArrayExtent() = "AlembicIVec3VsGeomParam_getArrayExtent";
function Boolean AlembicIVec3VsGeomParam.isIndexed() = "AlembicIVec3VsGeomParam_isIndexed";
function AlembicGeometryScope AlembicIVec3VsGeomParam.getScope() = "AlembicIVec3VsGeomParam_getScope";
function AlembicTimeSampling AlembicIVec3VsGeomParam.getTimeSampling() = "AlembicIVec3VsGeomParam_getTimeSampling";
function String AlembicIVec3VsGeomParam.getName() = "AlembicIVec3VsGeomParam_getName";
function AlembicICompoundProperty AlembicIVec3VsGeomParam.getParent() = "AlembicIVec3VsGeomParam_getParent";
function Boolean AlembicIVec3VsGeomParam.isConstant() = "AlembicIVec3VsGeomParam_isConstant";
function AlembicIArrayProperty AlembicIVec3VsGeomParam.getValueProperty() = "AlembicIVec3VsGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIVec3VsGeomParam.getIndexProperty() = "AlembicIVec3VsGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec3VsGeomParam {
  Data handle;
};

function AlembicOVec3VsGeomParam() = "AlembicOVec3VsGeomParam_construct";
function ~AlembicOVec3VsGeomParam() = "AlembicOVec3VsGeomParam_free";
function Boolean AlembicOVec3VsGeomParam.valid() = "AlembicOVec3VsGeomParam_valid";
function AlembicOVec3VsGeomParam.reset!() = "AlembicOVec3VsGeomParam_free";

function AlembicOVec3VsGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOVec3VsGeomParam_construct5Args";

function Boolean AlembicOVec3VsGeomParam.matches(AlembicPropertyHeader header) = "AlembicOVec3VsGeomParam_matches";
function AlembicOVec3VsGeomParam.set!(AlembicOVec3VsGeomParamSample sample) = "AlembicOVec3VsGeomParam_set";
function AlembicOVec3VsGeomParam.setFromPrevious!() = "AlembicOVec3VsGeomParam_setFromPrevious";
function AlembicOVec3VsGeomParam.setTimeSampling!(UInt32 index) = "AlembicOVec3VsGeomParam_setTimeSampling";
function UInt32 AlembicOVec3VsGeomParam.getNumSamples() = "AlembicOVec3VsGeomParam_getNumSamples";
function AlembicDataType AlembicOVec3VsGeomParam.getDataType() = "AlembicOVec3VsGeomParam_getDataType";
function Boolean AlembicOVec3VsGeomParam.isIndexed() = "AlembicOVec3VsGeomParam_isIndexed";
function AlembicGeometryScope AlembicOVec3VsGeomParam.getScope() = "AlembicOVec3VsGeomParam_getScope";
function String AlembicOVec3VsGeomParam.getName() = "AlembicOVec3VsGeomParam_getName";
function AlembicOArrayProperty AlembicOVec3VsGeomParam.getValueProperty() = "AlembicOVec3VsGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOVec3VsGeomParam.getIndexProperty() = "AlembicOVec3VsGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec3ViGeomParamSample {
  Data handle;
};

function AlembicIVec3ViGeomParamSample() = "AlembicIVec3ViGeomParamSample_construct";
function ~AlembicIVec3ViGeomParamSample() = "AlembicIVec3ViGeomParamSample_free";

function Vec3[] AlembicIVec3ViGeomParamSample.getVals() = "AlembicIVec3ViGeomParamSample_getVals";
function UInt32<> AlembicIVec3ViGeomParamSample.getIndices() = "AlembicIVec3ViGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIVec3ViGeomParamSample.getScope() = "AlembicIVec3ViGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec3ViGeomParamSample {
  Data handle;
};

function AlembicOVec3ViGeomParamSample() = "AlembicOVec3ViGeomParamSample_construct";
function ~AlembicOVec3ViGeomParamSample() = "AlembicOVec3ViGeomParamSample_free";

function AlembicOVec3ViGeomParamSample(Vec3 values<>, AlembicGeometryScope scope) = "AlembicOVec3ViGeomParamSample_constructFromValuesAndScope";
function AlembicOVec3ViGeomParamSample(Vec3 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOVec3ViGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOVec3ViGeomParamSample.setVals!(Vec3 values<>) = "AlembicOVec3ViGeomParamSample_setVals";
function Vec3[] AlembicOVec3ViGeomParamSample.getVals() = "AlembicOVec3ViGeomParamSample_getVals";
function AlembicOVec3ViGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOVec3ViGeomParamSample_setIndices";
function UInt32<> AlembicOVec3ViGeomParamSample.getIndices() = "AlembicOVec3ViGeomParamSample_getIndices";
function AlembicOVec3ViGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOVec3ViGeomParamSample_setScope";
function AlembicGeometryScope AlembicOVec3ViGeomParamSample.getScope() = "AlembicOVec3ViGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec3ViGeomParam {
  Data handle;
};

function AlembicIVec3ViGeomParam() = "AlembicIVec3ViGeomParam_construct";
function ~AlembicIVec3ViGeomParam() = "AlembicIVec3ViGeomParam_free";
function Boolean AlembicIVec3ViGeomParam.valid() = "AlembicIVec3ViGeomParam_valid";
function AlembicIVec3ViGeomParam.reset!() = "AlembicIVec3ViGeomParam_free";

function AlembicIVec3ViGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIVec3ViGeomParam_construct2Args";

function Boolean AlembicIVec3ViGeomParam.matches(AlembicPropertyHeader header) = "AlembicIVec3ViGeomParam_matches";
function AlembicIVec3ViGeomParamSample AlembicIVec3ViGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIVec3ViGeomParam_getIndexed";
function AlembicIVec3ViGeomParamSample AlembicIVec3ViGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIVec3ViGeomParamSample AlembicIVec3ViGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIVec3ViGeomParam_getExpanded";
function AlembicIVec3ViGeomParamSample AlembicIVec3ViGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIVec3ViGeomParam.getNumSamples() = "AlembicIVec3ViGeomParam_getNumSamples";
function AlembicDataType AlembicIVec3ViGeomParam.getDataType() = "AlembicIVec3ViGeomParam_getDataType";
function UInt32 AlembicIVec3ViGeomParam.getArrayExtent() = "AlembicIVec3ViGeomParam_getArrayExtent";
function Boolean AlembicIVec3ViGeomParam.isIndexed() = "AlembicIVec3ViGeomParam_isIndexed";
function AlembicGeometryScope AlembicIVec3ViGeomParam.getScope() = "AlembicIVec3ViGeomParam_getScope";
function AlembicTimeSampling AlembicIVec3ViGeomParam.getTimeSampling() = "AlembicIVec3ViGeomParam_getTimeSampling";
function String AlembicIVec3ViGeomParam.getName() = "AlembicIVec3ViGeomParam_getName";
function AlembicICompoundProperty AlembicIVec3ViGeomParam.getParent() = "AlembicIVec3ViGeomParam_getParent";
function Boolean AlembicIVec3ViGeomParam.isConstant() = "AlembicIVec3ViGeomParam_isConstant";
function AlembicIArrayProperty AlembicIVec3ViGeomParam.getValueProperty() = "AlembicIVec3ViGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIVec3ViGeomParam.getIndexProperty() = "AlembicIVec3ViGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec3ViGeomParam {
  Data handle;
};

function AlembicOVec3ViGeomParam() = "AlembicOVec3ViGeomParam_construct";
function ~AlembicOVec3ViGeomParam() = "AlembicOVec3ViGeomParam_free";
function Boolean AlembicOVec3ViGeomParam.valid() = "AlembicOVec3ViGeomParam_valid";
function AlembicOVec3ViGeomParam.reset!() = "AlembicOVec3ViGeomParam_free";

function AlembicOVec3ViGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOVec3ViGeomParam_construct5Args";

function Boolean AlembicOVec3ViGeomParam.matches(AlembicPropertyHeader header) = "AlembicOVec3ViGeomParam_matches";
function AlembicOVec3ViGeomParam.set!(AlembicOVec3ViGeomParamSample sample) = "AlembicOVec3ViGeomParam_set";
function AlembicOVec3ViGeomParam.setFromPrevious!() = "AlembicOVec3ViGeomParam_setFromPrevious";
function AlembicOVec3ViGeomParam.setTimeSampling!(UInt32 index) = "AlembicOVec3ViGeomParam_setTimeSampling";
function UInt32 AlembicOVec3ViGeomParam.getNumSamples() = "AlembicOVec3ViGeomParam_getNumSamples";
function AlembicDataType AlembicOVec3ViGeomParam.getDataType() = "AlembicOVec3ViGeomParam_getDataType";
function Boolean AlembicOVec3ViGeomParam.isIndexed() = "AlembicOVec3ViGeomParam_isIndexed";
function AlembicGeometryScope AlembicOVec3ViGeomParam.getScope() = "AlembicOVec3ViGeomParam_getScope";
function String AlembicOVec3ViGeomParam.getName() = "AlembicOVec3ViGeomParam_getName";
function AlembicOArrayProperty AlembicOVec3ViGeomParam.getValueProperty() = "AlembicOVec3ViGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOVec3ViGeomParam.getIndexProperty() = "AlembicOVec3ViGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec3VfGeomParamSample {
  Data handle;
};

function AlembicIVec3VfGeomParamSample() = "AlembicIVec3VfGeomParamSample_construct";
function ~AlembicIVec3VfGeomParamSample() = "AlembicIVec3VfGeomParamSample_free";

function Vec3[] AlembicIVec3VfGeomParamSample.getVals() = "AlembicIVec3VfGeomParamSample_getVals";
function UInt32<> AlembicIVec3VfGeomParamSample.getIndices() = "AlembicIVec3VfGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIVec3VfGeomParamSample.getScope() = "AlembicIVec3VfGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec3VfGeomParamSample {
  Data handle;
};

function AlembicOVec3VfGeomParamSample() = "AlembicOVec3VfGeomParamSample_construct";
function ~AlembicOVec3VfGeomParamSample() = "AlembicOVec3VfGeomParamSample_free";

function AlembicOVec3VfGeomParamSample(Vec3 values<>, AlembicGeometryScope scope) = "AlembicOVec3VfGeomParamSample_constructFromValuesAndScope";
function AlembicOVec3VfGeomParamSample(Vec3 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOVec3VfGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOVec3VfGeomParamSample.setVals!(Vec3 values<>) = "AlembicOVec3VfGeomParamSample_setVals";
function Vec3[] AlembicOVec3VfGeomParamSample.getVals() = "AlembicOVec3VfGeomParamSample_getVals";
function AlembicOVec3VfGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOVec3VfGeomParamSample_setIndices";
function UInt32<> AlembicOVec3VfGeomParamSample.getIndices() = "AlembicOVec3VfGeomParamSample_getIndices";
function AlembicOVec3VfGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOVec3VfGeomParamSample_setScope";
function AlembicGeometryScope AlembicOVec3VfGeomParamSample.getScope() = "AlembicOVec3VfGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec3VfGeomParam {
  Data handle;
};

function AlembicIVec3VfGeomParam() = "AlembicIVec3VfGeomParam_construct";
function ~AlembicIVec3VfGeomParam() = "AlembicIVec3VfGeomParam_free";
function Boolean AlembicIVec3VfGeomParam.valid() = "AlembicIVec3VfGeomParam_valid";
function AlembicIVec3VfGeomParam.reset!() = "AlembicIVec3VfGeomParam_free";

function AlembicIVec3VfGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIVec3VfGeomParam_construct2Args";

function Boolean AlembicIVec3VfGeomParam.matches(AlembicPropertyHeader header) = "AlembicIVec3VfGeomParam_matches";
function AlembicIVec3VfGeomParamSample AlembicIVec3VfGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIVec3VfGeomParam_getIndexed";
function AlembicIVec3VfGeomParamSample AlembicIVec3VfGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIVec3VfGeomParamSample AlembicIVec3VfGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIVec3VfGeomParam_getExpanded";
function AlembicIVec3VfGeomParamSample AlembicIVec3VfGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIVec3VfGeomParam.getNumSamples() = "AlembicIVec3VfGeomParam_getNumSamples";
function AlembicDataType AlembicIVec3VfGeomParam.getDataType() = "AlembicIVec3VfGeomParam_getDataType";
function UInt32 AlembicIVec3VfGeomParam.getArrayExtent() = "AlembicIVec3VfGeomParam_getArrayExtent";
function Boolean AlembicIVec3VfGeomParam.isIndexed() = "AlembicIVec3VfGeomParam_isIndexed";
function AlembicGeometryScope AlembicIVec3VfGeomParam.getScope() = "AlembicIVec3VfGeomParam_getScope";
function AlembicTimeSampling AlembicIVec3VfGeomParam.getTimeSampling() = "AlembicIVec3VfGeomParam_getTimeSampling";
function String AlembicIVec3VfGeomParam.getName() = "AlembicIVec3VfGeomParam_getName";
function AlembicICompoundProperty AlembicIVec3VfGeomParam.getParent() = "AlembicIVec3VfGeomParam_getParent";
function Boolean AlembicIVec3VfGeomParam.isConstant() = "AlembicIVec3VfGeomParam_isConstant";
function AlembicIArrayProperty AlembicIVec3VfGeomParam.getValueProperty() = "AlembicIVec3VfGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIVec3VfGeomParam.getIndexProperty() = "AlembicIVec3VfGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec3VfGeomParam {
  Data handle;
};

function AlembicOVec3VfGeomParam() = "AlembicOVec3VfGeomParam_construct";
function ~AlembicOVec3VfGeomParam() = "AlembicOVec3VfGeomParam_free";
function Boolean AlembicOVec3VfGeomParam.valid() = "AlembicOVec3VfGeomParam_valid";
function AlembicOVec3VfGeomParam.reset!() = "AlembicOVec3VfGeomParam_free";

function AlembicOVec3VfGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOVec3VfGeomParam_construct5Args";

function Boolean AlembicOVec3VfGeomParam.matches(AlembicPropertyHeader header) = "AlembicOVec3VfGeomParam_matches";
function AlembicOVec3VfGeomParam.set!(AlembicOVec3VfGeomParamSample sample) = "AlembicOVec3VfGeomParam_set";
function AlembicOVec3VfGeomParam.setFromPrevious!() = "AlembicOVec3VfGeomParam_setFromPrevious";
function AlembicOVec3VfGeomParam.setTimeSampling!(UInt32 index) = "AlembicOVec3VfGeomParam_setTimeSampling";
function UInt32 AlembicOVec3VfGeomParam.getNumSamples() = "AlembicOVec3VfGeomParam_getNumSamples";
function AlembicDataType AlembicOVec3VfGeomParam.getDataType() = "AlembicOVec3VfGeomParam_getDataType";
function Boolean AlembicOVec3VfGeomParam.isIndexed() = "AlembicOVec3VfGeomParam_isIndexed";
function AlembicGeometryScope AlembicOVec3VfGeomParam.getScope() = "AlembicOVec3VfGeomParam_getScope";
function String AlembicOVec3VfGeomParam.getName() = "AlembicOVec3VfGeomParam_getName";
function AlembicOArrayProperty AlembicOVec3VfGeomParam.getValueProperty() = "AlembicOVec3VfGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOVec3VfGeomParam.getIndexProperty() = "AlembicOVec3VfGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec3VdGeomParamSample {
  Data handle;
};

function AlembicIVec3VdGeomParamSample() = "AlembicIVec3VdGeomParamSample_construct";
function ~AlembicIVec3VdGeomParamSample() = "AlembicIVec3VdGeomParamSample_free";

function Vec3[] AlembicIVec3VdGeomParamSample.getVals() = "AlembicIVec3VdGeomParamSample_getVals";
function UInt32<> AlembicIVec3VdGeomParamSample.getIndices() = "AlembicIVec3VdGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIVec3VdGeomParamSample.getScope() = "AlembicIVec3VdGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec3VdGeomParamSample {
  Data handle;
};

function AlembicOVec3VdGeomParamSample() = "AlembicOVec3VdGeomParamSample_construct";
function ~AlembicOVec3VdGeomParamSample() = "AlembicOVec3VdGeomParamSample_free";

function AlembicOVec3VdGeomParamSample(Vec3 values<>, AlembicGeometryScope scope) = "AlembicOVec3VdGeomParamSample_constructFromValuesAndScope";
function AlembicOVec3VdGeomParamSample(Vec3 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOVec3VdGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOVec3VdGeomParamSample.setVals!(Vec3 values<>) = "AlembicOVec3VdGeomParamSample_setVals";
function Vec3[] AlembicOVec3VdGeomParamSample.getVals() = "AlembicOVec3VdGeomParamSample_getVals";
function AlembicOVec3VdGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOVec3VdGeomParamSample_setIndices";
function UInt32<> AlembicOVec3VdGeomParamSample.getIndices() = "AlembicOVec3VdGeomParamSample_getIndices";
function AlembicOVec3VdGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOVec3VdGeomParamSample_setScope";
function AlembicGeometryScope AlembicOVec3VdGeomParamSample.getScope() = "AlembicOVec3VdGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec3VdGeomParam {
  Data handle;
};

function AlembicIVec3VdGeomParam() = "AlembicIVec3VdGeomParam_construct";
function ~AlembicIVec3VdGeomParam() = "AlembicIVec3VdGeomParam_free";
function Boolean AlembicIVec3VdGeomParam.valid() = "AlembicIVec3VdGeomParam_valid";
function AlembicIVec3VdGeomParam.reset!() = "AlembicIVec3VdGeomParam_free";

function AlembicIVec3VdGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIVec3VdGeomParam_construct2Args";

function Boolean AlembicIVec3VdGeomParam.matches(AlembicPropertyHeader header) = "AlembicIVec3VdGeomParam_matches";
function AlembicIVec3VdGeomParamSample AlembicIVec3VdGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIVec3VdGeomParam_getIndexed";
function AlembicIVec3VdGeomParamSample AlembicIVec3VdGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIVec3VdGeomParamSample AlembicIVec3VdGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIVec3VdGeomParam_getExpanded";
function AlembicIVec3VdGeomParamSample AlembicIVec3VdGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIVec3VdGeomParam.getNumSamples() = "AlembicIVec3VdGeomParam_getNumSamples";
function AlembicDataType AlembicIVec3VdGeomParam.getDataType() = "AlembicIVec3VdGeomParam_getDataType";
function UInt32 AlembicIVec3VdGeomParam.getArrayExtent() = "AlembicIVec3VdGeomParam_getArrayExtent";
function Boolean AlembicIVec3VdGeomParam.isIndexed() = "AlembicIVec3VdGeomParam_isIndexed";
function AlembicGeometryScope AlembicIVec3VdGeomParam.getScope() = "AlembicIVec3VdGeomParam_getScope";
function AlembicTimeSampling AlembicIVec3VdGeomParam.getTimeSampling() = "AlembicIVec3VdGeomParam_getTimeSampling";
function String AlembicIVec3VdGeomParam.getName() = "AlembicIVec3VdGeomParam_getName";
function AlembicICompoundProperty AlembicIVec3VdGeomParam.getParent() = "AlembicIVec3VdGeomParam_getParent";
function Boolean AlembicIVec3VdGeomParam.isConstant() = "AlembicIVec3VdGeomParam_isConstant";
function AlembicIArrayProperty AlembicIVec3VdGeomParam.getValueProperty() = "AlembicIVec3VdGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIVec3VdGeomParam.getIndexProperty() = "AlembicIVec3VdGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec3VdGeomParam {
  Data handle;
};

function AlembicOVec3VdGeomParam() = "AlembicOVec3VdGeomParam_construct";
function ~AlembicOVec3VdGeomParam() = "AlembicOVec3VdGeomParam_free";
function Boolean AlembicOVec3VdGeomParam.valid() = "AlembicOVec3VdGeomParam_valid";
function AlembicOVec3VdGeomParam.reset!() = "AlembicOVec3VdGeomParam_free";

function AlembicOVec3VdGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOVec3VdGeomParam_construct5Args";

function Boolean AlembicOVec3VdGeomParam.matches(AlembicPropertyHeader header) = "AlembicOVec3VdGeomParam_matches";
function AlembicOVec3VdGeomParam.set!(AlembicOVec3VdGeomParamSample sample) = "AlembicOVec3VdGeomParam_set";
function AlembicOVec3VdGeomParam.setFromPrevious!() = "AlembicOVec3VdGeomParam_setFromPrevious";
function AlembicOVec3VdGeomParam.setTimeSampling!(UInt32 index) = "AlembicOVec3VdGeomParam_setTimeSampling";
function UInt32 AlembicOVec3VdGeomParam.getNumSamples() = "AlembicOVec3VdGeomParam_getNumSamples";
function AlembicDataType AlembicOVec3VdGeomParam.getDataType() = "AlembicOVec3VdGeomParam_getDataType";
function Boolean AlembicOVec3VdGeomParam.isIndexed() = "AlembicOVec3VdGeomParam_isIndexed";
function AlembicGeometryScope AlembicOVec3VdGeomParam.getScope() = "AlembicOVec3VdGeomParam_getScope";
function String AlembicOVec3VdGeomParam.getName() = "AlembicOVec3VdGeomParam_getName";
function AlembicOArrayProperty AlembicOVec3VdGeomParam.getValueProperty() = "AlembicOVec3VdGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOVec3VdGeomParam.getIndexProperty() = "AlembicOVec3VdGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec3NfGeomParamSample {
  Data handle;
};

function AlembicIVec3NfGeomParamSample() = "AlembicIVec3NfGeomParamSample_construct";
function ~AlembicIVec3NfGeomParamSample() = "AlembicIVec3NfGeomParamSample_free";

function Vec3[] AlembicIVec3NfGeomParamSample.getVals() = "AlembicIVec3NfGeomParamSample_getVals";
function UInt32<> AlembicIVec3NfGeomParamSample.getIndices() = "AlembicIVec3NfGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIVec3NfGeomParamSample.getScope() = "AlembicIVec3NfGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec3NfGeomParamSample {
  Data handle;
};

function AlembicOVec3NfGeomParamSample() = "AlembicOVec3NfGeomParamSample_construct";
function ~AlembicOVec3NfGeomParamSample() = "AlembicOVec3NfGeomParamSample_free";

function AlembicOVec3NfGeomParamSample(Vec3 values<>, AlembicGeometryScope scope) = "AlembicOVec3NfGeomParamSample_constructFromValuesAndScope";
function AlembicOVec3NfGeomParamSample(Vec3 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOVec3NfGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOVec3NfGeomParamSample.setVals!(Vec3 values<>) = "AlembicOVec3NfGeomParamSample_setVals";
function Vec3[] AlembicOVec3NfGeomParamSample.getVals() = "AlembicOVec3NfGeomParamSample_getVals";
function AlembicOVec3NfGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOVec3NfGeomParamSample_setIndices";
function UInt32<> AlembicOVec3NfGeomParamSample.getIndices() = "AlembicOVec3NfGeomParamSample_getIndices";
function AlembicOVec3NfGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOVec3NfGeomParamSample_setScope";
function AlembicGeometryScope AlembicOVec3NfGeomParamSample.getScope() = "AlembicOVec3NfGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec3NfGeomParam {
  Data handle;
};

function AlembicIVec3NfGeomParam() = "AlembicIVec3NfGeomParam_construct";
function ~AlembicIVec3NfGeomParam() = "AlembicIVec3NfGeomParam_free";
function Boolean AlembicIVec3NfGeomParam.valid() = "AlembicIVec3NfGeomParam_valid";
function AlembicIVec3NfGeomParam.reset!() = "AlembicIVec3NfGeomParam_free";

function AlembicIVec3NfGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIVec3NfGeomParam_construct2Args";

function Boolean AlembicIVec3NfGeomParam.matches(AlembicPropertyHeader header) = "AlembicIVec3NfGeomParam_matches";
function AlembicIVec3NfGeomParamSample AlembicIVec3NfGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIVec3NfGeomParam_getIndexed";
function AlembicIVec3NfGeomParamSample AlembicIVec3NfGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIVec3NfGeomParamSample AlembicIVec3NfGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIVec3NfGeomParam_getExpanded";
function AlembicIVec3NfGeomParamSample AlembicIVec3NfGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIVec3NfGeomParam.getNumSamples() = "AlembicIVec3NfGeomParam_getNumSamples";
function AlembicDataType AlembicIVec3NfGeomParam.getDataType() = "AlembicIVec3NfGeomParam_getDataType";
function UInt32 AlembicIVec3NfGeomParam.getArrayExtent() = "AlembicIVec3NfGeomParam_getArrayExtent";
function Boolean AlembicIVec3NfGeomParam.isIndexed() = "AlembicIVec3NfGeomParam_isIndexed";
function AlembicGeometryScope AlembicIVec3NfGeomParam.getScope() = "AlembicIVec3NfGeomParam_getScope";
function AlembicTimeSampling AlembicIVec3NfGeomParam.getTimeSampling() = "AlembicIVec3NfGeomParam_getTimeSampling";
function String AlembicIVec3NfGeomParam.getName() = "AlembicIVec3NfGeomParam_getName";
function AlembicICompoundProperty AlembicIVec3NfGeomParam.getParent() = "AlembicIVec3NfGeomParam_getParent";
function Boolean AlembicIVec3NfGeomParam.isConstant() = "AlembicIVec3NfGeomParam_isConstant";
function AlembicIArrayProperty AlembicIVec3NfGeomParam.getValueProperty() = "AlembicIVec3NfGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIVec3NfGeomParam.getIndexProperty() = "AlembicIVec3NfGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec3NfGeomParam {
  Data handle;
};

function AlembicOVec3NfGeomParam() = "AlembicOVec3NfGeomParam_construct";
function ~AlembicOVec3NfGeomParam() = "AlembicOVec3NfGeomParam_free";
function Boolean AlembicOVec3NfGeomParam.valid() = "AlembicOVec3NfGeomParam_valid";
function AlembicOVec3NfGeomParam.reset!() = "AlembicOVec3NfGeomParam_free";

function AlembicOVec3NfGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOVec3NfGeomParam_construct5Args";

function Boolean AlembicOVec3NfGeomParam.matches(AlembicPropertyHeader header) = "AlembicOVec3NfGeomParam_matches";
function AlembicOVec3NfGeomParam.set!(AlembicOVec3NfGeomParamSample sample) = "AlembicOVec3NfGeomParam_set";
function AlembicOVec3NfGeomParam.setFromPrevious!() = "AlembicOVec3NfGeomParam_setFromPrevious";
function AlembicOVec3NfGeomParam.setTimeSampling!(UInt32 index) = "AlembicOVec3NfGeomParam_setTimeSampling";
function UInt32 AlembicOVec3NfGeomParam.getNumSamples() = "AlembicOVec3NfGeomParam_getNumSamples";
function AlembicDataType AlembicOVec3NfGeomParam.getDataType() = "AlembicOVec3NfGeomParam_getDataType";
function Boolean AlembicOVec3NfGeomParam.isIndexed() = "AlembicOVec3NfGeomParam_isIndexed";
function AlembicGeometryScope AlembicOVec3NfGeomParam.getScope() = "AlembicOVec3NfGeomParam_getScope";
function String AlembicOVec3NfGeomParam.getName() = "AlembicOVec3NfGeomParam_getName";
function AlembicOArrayProperty AlembicOVec3NfGeomParam.getValueProperty() = "AlembicOVec3NfGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOVec3NfGeomParam.getIndexProperty() = "AlembicOVec3NfGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec3NdGeomParamSample {
  Data handle;
};

function AlembicIVec3NdGeomParamSample() = "AlembicIVec3NdGeomParamSample_construct";
function ~AlembicIVec3NdGeomParamSample() = "AlembicIVec3NdGeomParamSample_free";

function Vec3[] AlembicIVec3NdGeomParamSample.getVals() = "AlembicIVec3NdGeomParamSample_getVals";
function UInt32<> AlembicIVec3NdGeomParamSample.getIndices() = "AlembicIVec3NdGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIVec3NdGeomParamSample.getScope() = "AlembicIVec3NdGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec3NdGeomParamSample {
  Data handle;
};

function AlembicOVec3NdGeomParamSample() = "AlembicOVec3NdGeomParamSample_construct";
function ~AlembicOVec3NdGeomParamSample() = "AlembicOVec3NdGeomParamSample_free";

function AlembicOVec3NdGeomParamSample(Vec3 values<>, AlembicGeometryScope scope) = "AlembicOVec3NdGeomParamSample_constructFromValuesAndScope";
function AlembicOVec3NdGeomParamSample(Vec3 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOVec3NdGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOVec3NdGeomParamSample.setVals!(Vec3 values<>) = "AlembicOVec3NdGeomParamSample_setVals";
function Vec3[] AlembicOVec3NdGeomParamSample.getVals() = "AlembicOVec3NdGeomParamSample_getVals";
function AlembicOVec3NdGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOVec3NdGeomParamSample_setIndices";
function UInt32<> AlembicOVec3NdGeomParamSample.getIndices() = "AlembicOVec3NdGeomParamSample_getIndices";
function AlembicOVec3NdGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOVec3NdGeomParamSample_setScope";
function AlembicGeometryScope AlembicOVec3NdGeomParamSample.getScope() = "AlembicOVec3NdGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIVec3NdGeomParam {
  Data handle;
};

function AlembicIVec3NdGeomParam() = "AlembicIVec3NdGeomParam_construct";
function ~AlembicIVec3NdGeomParam() = "AlembicIVec3NdGeomParam_free";
function Boolean AlembicIVec3NdGeomParam.valid() = "AlembicIVec3NdGeomParam_valid";
function AlembicIVec3NdGeomParam.reset!() = "AlembicIVec3NdGeomParam_free";

function AlembicIVec3NdGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIVec3NdGeomParam_construct2Args";

function Boolean AlembicIVec3NdGeomParam.matches(AlembicPropertyHeader header) = "AlembicIVec3NdGeomParam_matches";
function AlembicIVec3NdGeomParamSample AlembicIVec3NdGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIVec3NdGeomParam_getIndexed";
function AlembicIVec3NdGeomParamSample AlembicIVec3NdGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIVec3NdGeomParamSample AlembicIVec3NdGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIVec3NdGeomParam_getExpanded";
function AlembicIVec3NdGeomParamSample AlembicIVec3NdGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIVec3NdGeomParam.getNumSamples() = "AlembicIVec3NdGeomParam_getNumSamples";
function AlembicDataType AlembicIVec3NdGeomParam.getDataType() = "AlembicIVec3NdGeomParam_getDataType";
function UInt32 AlembicIVec3NdGeomParam.getArrayExtent() = "AlembicIVec3NdGeomParam_getArrayExtent";
function Boolean AlembicIVec3NdGeomParam.isIndexed() = "AlembicIVec3NdGeomParam_isIndexed";
function AlembicGeometryScope AlembicIVec3NdGeomParam.getScope() = "AlembicIVec3NdGeomParam_getScope";
function AlembicTimeSampling AlembicIVec3NdGeomParam.getTimeSampling() = "AlembicIVec3NdGeomParam_getTimeSampling";
function String AlembicIVec3NdGeomParam.getName() = "AlembicIVec3NdGeomParam_getName";
function AlembicICompoundProperty AlembicIVec3NdGeomParam.getParent() = "AlembicIVec3NdGeomParam_getParent";
function Boolean AlembicIVec3NdGeomParam.isConstant() = "AlembicIVec3NdGeomParam_isConstant";
function AlembicIArrayProperty AlembicIVec3NdGeomParam.getValueProperty() = "AlembicIVec3NdGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIVec3NdGeomParam.getIndexProperty() = "AlembicIVec3NdGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOVec3NdGeomParam {
  Data handle;
};

function AlembicOVec3NdGeomParam() = "AlembicOVec3NdGeomParam_construct";
function ~AlembicOVec3NdGeomParam() = "AlembicOVec3NdGeomParam_free";
function Boolean AlembicOVec3NdGeomParam.valid() = "AlembicOVec3NdGeomParam_valid";
function AlembicOVec3NdGeomParam.reset!() = "AlembicOVec3NdGeomParam_free";

function AlembicOVec3NdGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOVec3NdGeomParam_construct5Args";

function Boolean AlembicOVec3NdGeomParam.matches(AlembicPropertyHeader header) = "AlembicOVec3NdGeomParam_matches";
function AlembicOVec3NdGeomParam.set!(AlembicOVec3NdGeomParamSample sample) = "AlembicOVec3NdGeomParam_set";
function AlembicOVec3NdGeomParam.setFromPrevious!() = "AlembicOVec3NdGeomParam_setFromPrevious";
function AlembicOVec3NdGeomParam.setTimeSampling!(UInt32 index) = "AlembicOVec3NdGeomParam_setTimeSampling";
function UInt32 AlembicOVec3NdGeomParam.getNumSamples() = "AlembicOVec3NdGeomParam_getNumSamples";
function AlembicDataType AlembicOVec3NdGeomParam.getDataType() = "AlembicOVec3NdGeomParam_getDataType";
function Boolean AlembicOVec3NdGeomParam.isIndexed() = "AlembicOVec3NdGeomParam_isIndexed";
function AlembicGeometryScope AlembicOVec3NdGeomParam.getScope() = "AlembicOVec3NdGeomParam_getScope";
function String AlembicOVec3NdGeomParam.getName() = "AlembicOVec3NdGeomParam_getName";
function AlembicOArrayProperty AlembicOVec3NdGeomParam.getValueProperty() = "AlembicOVec3NdGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOVec3NdGeomParam.getIndexProperty() = "AlembicOVec3NdGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIQuatfGeomParamSample {
  Data handle;
};

function AlembicIQuatfGeomParamSample() = "AlembicIQuatfGeomParamSample_construct";
function ~AlembicIQuatfGeomParamSample() = "AlembicIQuatfGeomParamSample_free";

function Quat[] AlembicIQuatfGeomParamSample.getVals() = "AlembicIQuatfGeomParamSample_getVals";
function UInt32<> AlembicIQuatfGeomParamSample.getIndices() = "AlembicIQuatfGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIQuatfGeomParamSample.getScope() = "AlembicIQuatfGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOQuatfGeomParamSample {
  Data handle;
};

function AlembicOQuatfGeomParamSample() = "AlembicOQuatfGeomParamSample_construct";
function ~AlembicOQuatfGeomParamSample() = "AlembicOQuatfGeomParamSample_free";

function AlembicOQuatfGeomParamSample(Quat values<>, AlembicGeometryScope scope) = "AlembicOQuatfGeomParamSample_constructFromValuesAndScope";
function AlembicOQuatfGeomParamSample(Quat values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOQuatfGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOQuatfGeomParamSample.setVals!(Quat values<>) = "AlembicOQuatfGeomParamSample_setVals";
function Quat[] AlembicOQuatfGeomParamSample.getVals() = "AlembicOQuatfGeomParamSample_getVals";
function AlembicOQuatfGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOQuatfGeomParamSample_setIndices";
function UInt32<> AlembicOQuatfGeomParamSample.getIndices() = "AlembicOQuatfGeomParamSample_getIndices";
function AlembicOQuatfGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOQuatfGeomParamSample_setScope";
function AlembicGeometryScope AlembicOQuatfGeomParamSample.getScope() = "AlembicOQuatfGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIQuatfGeomParam {
  Data handle;
};

function AlembicIQuatfGeomParam() = "AlembicIQuatfGeomParam_construct";
function ~AlembicIQuatfGeomParam() = "AlembicIQuatfGeomParam_free";
function Boolean AlembicIQuatfGeomParam.valid() = "AlembicIQuatfGeomParam_valid";
function AlembicIQuatfGeomParam.reset!() = "AlembicIQuatfGeomParam_free";

function AlembicIQuatfGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIQuatfGeomParam_construct2Args";

function Boolean AlembicIQuatfGeomParam.matches(AlembicPropertyHeader header) = "AlembicIQuatfGeomParam_matches";
function AlembicIQuatfGeomParamSample AlembicIQuatfGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIQuatfGeomParam_getIndexed";
function AlembicIQuatfGeomParamSample AlembicIQuatfGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIQuatfGeomParamSample AlembicIQuatfGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIQuatfGeomParam_getExpanded";
function AlembicIQuatfGeomParamSample AlembicIQuatfGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIQuatfGeomParam.getNumSamples() = "AlembicIQuatfGeomParam_getNumSamples";
function AlembicDataType AlembicIQuatfGeomParam.getDataType() = "AlembicIQuatfGeomParam_getDataType";
function UInt32 AlembicIQuatfGeomParam.getArrayExtent() = "AlembicIQuatfGeomParam_getArrayExtent";
function Boolean AlembicIQuatfGeomParam.isIndexed() = "AlembicIQuatfGeomParam_isIndexed";
function AlembicGeometryScope AlembicIQuatfGeomParam.getScope() = "AlembicIQuatfGeomParam_getScope";
function AlembicTimeSampling AlembicIQuatfGeomParam.getTimeSampling() = "AlembicIQuatfGeomParam_getTimeSampling";
function String AlembicIQuatfGeomParam.getName() = "AlembicIQuatfGeomParam_getName";
function AlembicICompoundProperty AlembicIQuatfGeomParam.getParent() = "AlembicIQuatfGeomParam_getParent";
function Boolean AlembicIQuatfGeomParam.isConstant() = "AlembicIQuatfGeomParam_isConstant";
function AlembicIArrayProperty AlembicIQuatfGeomParam.getValueProperty() = "AlembicIQuatfGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIQuatfGeomParam.getIndexProperty() = "AlembicIQuatfGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOQuatfGeomParam {
  Data handle;
};

function AlembicOQuatfGeomParam() = "AlembicOQuatfGeomParam_construct";
function ~AlembicOQuatfGeomParam() = "AlembicOQuatfGeomParam_free";
function Boolean AlembicOQuatfGeomParam.valid() = "AlembicOQuatfGeomParam_valid";
function AlembicOQuatfGeomParam.reset!() = "AlembicOQuatfGeomParam_free";

function AlembicOQuatfGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOQuatfGeomParam_construct5Args";

function Boolean AlembicOQuatfGeomParam.matches(AlembicPropertyHeader header) = "AlembicOQuatfGeomParam_matches";
function AlembicOQuatfGeomParam.set!(AlembicOQuatfGeomParamSample sample) = "AlembicOQuatfGeomParam_set";
function AlembicOQuatfGeomParam.setFromPrevious!() = "AlembicOQuatfGeomParam_setFromPrevious";
function AlembicOQuatfGeomParam.setTimeSampling!(UInt32 index) = "AlembicOQuatfGeomParam_setTimeSampling";
function UInt32 AlembicOQuatfGeomParam.getNumSamples() = "AlembicOQuatfGeomParam_getNumSamples";
function AlembicDataType AlembicOQuatfGeomParam.getDataType() = "AlembicOQuatfGeomParam_getDataType";
function Boolean AlembicOQuatfGeomParam.isIndexed() = "AlembicOQuatfGeomParam_isIndexed";
function AlembicGeometryScope AlembicOQuatfGeomParam.getScope() = "AlembicOQuatfGeomParam_getScope";
function String AlembicOQuatfGeomParam.getName() = "AlembicOQuatfGeomParam_getName";
function AlembicOArrayProperty AlembicOQuatfGeomParam.getValueProperty() = "AlembicOQuatfGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOQuatfGeomParam.getIndexProperty() = "AlembicOQuatfGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIQuatdGeomParamSample {
  Data handle;
};

function AlembicIQuatdGeomParamSample() = "AlembicIQuatdGeomParamSample_construct";
function ~AlembicIQuatdGeomParamSample() = "AlembicIQuatdGeomParamSample_free";

function Quat[] AlembicIQuatdGeomParamSample.getVals() = "AlembicIQuatdGeomParamSample_getVals";
function UInt32<> AlembicIQuatdGeomParamSample.getIndices() = "AlembicIQuatdGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIQuatdGeomParamSample.getScope() = "AlembicIQuatdGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOQuatdGeomParamSample {
  Data handle;
};

function AlembicOQuatdGeomParamSample() = "AlembicOQuatdGeomParamSample_construct";
function ~AlembicOQuatdGeomParamSample() = "AlembicOQuatdGeomParamSample_free";

function AlembicOQuatdGeomParamSample(Quat values<>, AlembicGeometryScope scope) = "AlembicOQuatdGeomParamSample_constructFromValuesAndScope";
function AlembicOQuatdGeomParamSample(Quat values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOQuatdGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOQuatdGeomParamSample.setVals!(Quat values<>) = "AlembicOQuatdGeomParamSample_setVals";
function Quat[] AlembicOQuatdGeomParamSample.getVals() = "AlembicOQuatdGeomParamSample_getVals";
function AlembicOQuatdGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOQuatdGeomParamSample_setIndices";
function UInt32<> AlembicOQuatdGeomParamSample.getIndices() = "AlembicOQuatdGeomParamSample_getIndices";
function AlembicOQuatdGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOQuatdGeomParamSample_setScope";
function AlembicGeometryScope AlembicOQuatdGeomParamSample.getScope() = "AlembicOQuatdGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIQuatdGeomParam {
  Data handle;
};

function AlembicIQuatdGeomParam() = "AlembicIQuatdGeomParam_construct";
function ~AlembicIQuatdGeomParam() = "AlembicIQuatdGeomParam_free";
function Boolean AlembicIQuatdGeomParam.valid() = "AlembicIQuatdGeomParam_valid";
function AlembicIQuatdGeomParam.reset!() = "AlembicIQuatdGeomParam_free";

function AlembicIQuatdGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIQuatdGeomParam_construct2Args";

function Boolean AlembicIQuatdGeomParam.matches(AlembicPropertyHeader header) = "AlembicIQuatdGeomParam_matches";
function AlembicIQuatdGeomParamSample AlembicIQuatdGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIQuatdGeomParam_getIndexed";
function AlembicIQuatdGeomParamSample AlembicIQuatdGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIQuatdGeomParamSample AlembicIQuatdGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIQuatdGeomParam_getExpanded";
function AlembicIQuatdGeomParamSample AlembicIQuatdGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIQuatdGeomParam.getNumSamples() = "AlembicIQuatdGeomParam_getNumSamples";
function AlembicDataType AlembicIQuatdGeomParam.getDataType() = "AlembicIQuatdGeomParam_getDataType";
function UInt32 AlembicIQuatdGeomParam.getArrayExtent() = "AlembicIQuatdGeomParam_getArrayExtent";
function Boolean AlembicIQuatdGeomParam.isIndexed() = "AlembicIQuatdGeomParam_isIndexed";
function AlembicGeometryScope AlembicIQuatdGeomParam.getScope() = "AlembicIQuatdGeomParam_getScope";
function AlembicTimeSampling AlembicIQuatdGeomParam.getTimeSampling() = "AlembicIQuatdGeomParam_getTimeSampling";
function String AlembicIQuatdGeomParam.getName() = "AlembicIQuatdGeomParam_getName";
function AlembicICompoundProperty AlembicIQuatdGeomParam.getParent() = "AlembicIQuatdGeomParam_getParent";
function Boolean AlembicIQuatdGeomParam.isConstant() = "AlembicIQuatdGeomParam_isConstant";
function AlembicIArrayProperty AlembicIQuatdGeomParam.getValueProperty() = "AlembicIQuatdGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIQuatdGeomParam.getIndexProperty() = "AlembicIQuatdGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOQuatdGeomParam {
  Data handle;
};

function AlembicOQuatdGeomParam() = "AlembicOQuatdGeomParam_construct";
function ~AlembicOQuatdGeomParam() = "AlembicOQuatdGeomParam_free";
function Boolean AlembicOQuatdGeomParam.valid() = "AlembicOQuatdGeomParam_valid";
function AlembicOQuatdGeomParam.reset!() = "AlembicOQuatdGeomParam_free";

function AlembicOQuatdGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOQuatdGeomParam_construct5Args";

function Boolean AlembicOQuatdGeomParam.matches(AlembicPropertyHeader header) = "AlembicOQuatdGeomParam_matches";
function AlembicOQuatdGeomParam.set!(AlembicOQuatdGeomParamSample sample) = "AlembicOQuatdGeomParam_set";
function AlembicOQuatdGeomParam.setFromPrevious!() = "AlembicOQuatdGeomParam_setFromPrevious";
function AlembicOQuatdGeomParam.setTimeSampling!(UInt32 index) = "AlembicOQuatdGeomParam_setTimeSampling";
function UInt32 AlembicOQuatdGeomParam.getNumSamples() = "AlembicOQuatdGeomParam_getNumSamples";
function AlembicDataType AlembicOQuatdGeomParam.getDataType() = "AlembicOQuatdGeomParam_getDataType";
function Boolean AlembicOQuatdGeomParam.isIndexed() = "AlembicOQuatdGeomParam_isIndexed";
function AlembicGeometryScope AlembicOQuatdGeomParam.getScope() = "AlembicOQuatdGeomParam_getScope";
function String AlembicOQuatdGeomParam.getName() = "AlembicOQuatdGeomParam_getName";
function AlembicOArrayProperty AlembicOQuatdGeomParam.getValueProperty() = "AlembicOQuatdGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOQuatdGeomParam.getIndexProperty() = "AlembicOQuatdGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox2sGeomParamSample {
  Data handle;
};

function AlembicIBox2sGeomParamSample() = "AlembicIBox2sGeomParamSample_construct";
function ~AlembicIBox2sGeomParamSample() = "AlembicIBox2sGeomParamSample_free";

function Box2[] AlembicIBox2sGeomParamSample.getVals() = "AlembicIBox2sGeomParamSample_getVals";
function UInt32<> AlembicIBox2sGeomParamSample.getIndices() = "AlembicIBox2sGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIBox2sGeomParamSample.getScope() = "AlembicIBox2sGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox2sGeomParamSample {
  Data handle;
};

function AlembicOBox2sGeomParamSample() = "AlembicOBox2sGeomParamSample_construct";
function ~AlembicOBox2sGeomParamSample() = "AlembicOBox2sGeomParamSample_free";

function AlembicOBox2sGeomParamSample(Box2 values<>, AlembicGeometryScope scope) = "AlembicOBox2sGeomParamSample_constructFromValuesAndScope";
function AlembicOBox2sGeomParamSample(Box2 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOBox2sGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOBox2sGeomParamSample.setVals!(Box2 values<>) = "AlembicOBox2sGeomParamSample_setVals";
function Box2[] AlembicOBox2sGeomParamSample.getVals() = "AlembicOBox2sGeomParamSample_getVals";
function AlembicOBox2sGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOBox2sGeomParamSample_setIndices";
function UInt32<> AlembicOBox2sGeomParamSample.getIndices() = "AlembicOBox2sGeomParamSample_getIndices";
function AlembicOBox2sGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOBox2sGeomParamSample_setScope";
function AlembicGeometryScope AlembicOBox2sGeomParamSample.getScope() = "AlembicOBox2sGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox2sGeomParam {
  Data handle;
};

function AlembicIBox2sGeomParam() = "AlembicIBox2sGeomParam_construct";
function ~AlembicIBox2sGeomParam() = "AlembicIBox2sGeomParam_free";
function Boolean AlembicIBox2sGeomParam.valid() = "AlembicIBox2sGeomParam_valid";
function AlembicIBox2sGeomParam.reset!() = "AlembicIBox2sGeomParam_free";

function AlembicIBox2sGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIBox2sGeomParam_construct2Args";

function Boolean AlembicIBox2sGeomParam.matches(AlembicPropertyHeader header) = "AlembicIBox2sGeomParam_matches";
function AlembicIBox2sGeomParamSample AlembicIBox2sGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIBox2sGeomParam_getIndexed";
function AlembicIBox2sGeomParamSample AlembicIBox2sGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIBox2sGeomParamSample AlembicIBox2sGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIBox2sGeomParam_getExpanded";
function AlembicIBox2sGeomParamSample AlembicIBox2sGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIBox2sGeomParam.getNumSamples() = "AlembicIBox2sGeomParam_getNumSamples";
function AlembicDataType AlembicIBox2sGeomParam.getDataType() = "AlembicIBox2sGeomParam_getDataType";
function UInt32 AlembicIBox2sGeomParam.getArrayExtent() = "AlembicIBox2sGeomParam_getArrayExtent";
function Boolean AlembicIBox2sGeomParam.isIndexed() = "AlembicIBox2sGeomParam_isIndexed";
function AlembicGeometryScope AlembicIBox2sGeomParam.getScope() = "AlembicIBox2sGeomParam_getScope";
function AlembicTimeSampling AlembicIBox2sGeomParam.getTimeSampling() = "AlembicIBox2sGeomParam_getTimeSampling";
function String AlembicIBox2sGeomParam.getName() = "AlembicIBox2sGeomParam_getName";
function AlembicICompoundProperty AlembicIBox2sGeomParam.getParent() = "AlembicIBox2sGeomParam_getParent";
function Boolean AlembicIBox2sGeomParam.isConstant() = "AlembicIBox2sGeomParam_isConstant";
function AlembicIArrayProperty AlembicIBox2sGeomParam.getValueProperty() = "AlembicIBox2sGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIBox2sGeomParam.getIndexProperty() = "AlembicIBox2sGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox2sGeomParam {
  Data handle;
};

function AlembicOBox2sGeomParam() = "AlembicOBox2sGeomParam_construct";
function ~AlembicOBox2sGeomParam() = "AlembicOBox2sGeomParam_free";
function Boolean AlembicOBox2sGeomParam.valid() = "AlembicOBox2sGeomParam_valid";
function AlembicOBox2sGeomParam.reset!() = "AlembicOBox2sGeomParam_free";

function AlembicOBox2sGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOBox2sGeomParam_construct5Args";

function Boolean AlembicOBox2sGeomParam.matches(AlembicPropertyHeader header) = "AlembicOBox2sGeomParam_matches";
function AlembicOBox2sGeomParam.set!(AlembicOBox2sGeomParamSample sample) = "AlembicOBox2sGeomParam_set";
function AlembicOBox2sGeomParam.setFromPrevious!() = "AlembicOBox2sGeomParam_setFromPrevious";
function AlembicOBox2sGeomParam.setTimeSampling!(UInt32 index) = "AlembicOBox2sGeomParam_setTimeSampling";
function UInt32 AlembicOBox2sGeomParam.getNumSamples() = "AlembicOBox2sGeomParam_getNumSamples";
function AlembicDataType AlembicOBox2sGeomParam.getDataType() = "AlembicOBox2sGeomParam_getDataType";
function Boolean AlembicOBox2sGeomParam.isIndexed() = "AlembicOBox2sGeomParam_isIndexed";
function AlembicGeometryScope AlembicOBox2sGeomParam.getScope() = "AlembicOBox2sGeomParam_getScope";
function String AlembicOBox2sGeomParam.getName() = "AlembicOBox2sGeomParam_getName";
function AlembicOArrayProperty AlembicOBox2sGeomParam.getValueProperty() = "AlembicOBox2sGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOBox2sGeomParam.getIndexProperty() = "AlembicOBox2sGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox2iGeomParamSample {
  Data handle;
};

function AlembicIBox2iGeomParamSample() = "AlembicIBox2iGeomParamSample_construct";
function ~AlembicIBox2iGeomParamSample() = "AlembicIBox2iGeomParamSample_free";

function Box2[] AlembicIBox2iGeomParamSample.getVals() = "AlembicIBox2iGeomParamSample_getVals";
function UInt32<> AlembicIBox2iGeomParamSample.getIndices() = "AlembicIBox2iGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIBox2iGeomParamSample.getScope() = "AlembicIBox2iGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox2iGeomParamSample {
  Data handle;
};

function AlembicOBox2iGeomParamSample() = "AlembicOBox2iGeomParamSample_construct";
function ~AlembicOBox2iGeomParamSample() = "AlembicOBox2iGeomParamSample_free";

function AlembicOBox2iGeomParamSample(Box2 values<>, AlembicGeometryScope scope) = "AlembicOBox2iGeomParamSample_constructFromValuesAndScope";
function AlembicOBox2iGeomParamSample(Box2 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOBox2iGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOBox2iGeomParamSample.setVals!(Box2 values<>) = "AlembicOBox2iGeomParamSample_setVals";
function Box2[] AlembicOBox2iGeomParamSample.getVals() = "AlembicOBox2iGeomParamSample_getVals";
function AlembicOBox2iGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOBox2iGeomParamSample_setIndices";
function UInt32<> AlembicOBox2iGeomParamSample.getIndices() = "AlembicOBox2iGeomParamSample_getIndices";
function AlembicOBox2iGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOBox2iGeomParamSample_setScope";
function AlembicGeometryScope AlembicOBox2iGeomParamSample.getScope() = "AlembicOBox2iGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox2iGeomParam {
  Data handle;
};

function AlembicIBox2iGeomParam() = "AlembicIBox2iGeomParam_construct";
function ~AlembicIBox2iGeomParam() = "AlembicIBox2iGeomParam_free";
function Boolean AlembicIBox2iGeomParam.valid() = "AlembicIBox2iGeomParam_valid";
function AlembicIBox2iGeomParam.reset!() = "AlembicIBox2iGeomParam_free";

function AlembicIBox2iGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIBox2iGeomParam_construct2Args";

function Boolean AlembicIBox2iGeomParam.matches(AlembicPropertyHeader header) = "AlembicIBox2iGeomParam_matches";
function AlembicIBox2iGeomParamSample AlembicIBox2iGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIBox2iGeomParam_getIndexed";
function AlembicIBox2iGeomParamSample AlembicIBox2iGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIBox2iGeomParamSample AlembicIBox2iGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIBox2iGeomParam_getExpanded";
function AlembicIBox2iGeomParamSample AlembicIBox2iGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIBox2iGeomParam.getNumSamples() = "AlembicIBox2iGeomParam_getNumSamples";
function AlembicDataType AlembicIBox2iGeomParam.getDataType() = "AlembicIBox2iGeomParam_getDataType";
function UInt32 AlembicIBox2iGeomParam.getArrayExtent() = "AlembicIBox2iGeomParam_getArrayExtent";
function Boolean AlembicIBox2iGeomParam.isIndexed() = "AlembicIBox2iGeomParam_isIndexed";
function AlembicGeometryScope AlembicIBox2iGeomParam.getScope() = "AlembicIBox2iGeomParam_getScope";
function AlembicTimeSampling AlembicIBox2iGeomParam.getTimeSampling() = "AlembicIBox2iGeomParam_getTimeSampling";
function String AlembicIBox2iGeomParam.getName() = "AlembicIBox2iGeomParam_getName";
function AlembicICompoundProperty AlembicIBox2iGeomParam.getParent() = "AlembicIBox2iGeomParam_getParent";
function Boolean AlembicIBox2iGeomParam.isConstant() = "AlembicIBox2iGeomParam_isConstant";
function AlembicIArrayProperty AlembicIBox2iGeomParam.getValueProperty() = "AlembicIBox2iGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIBox2iGeomParam.getIndexProperty() = "AlembicIBox2iGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox2iGeomParam {
  Data handle;
};

function AlembicOBox2iGeomParam() = "AlembicOBox2iGeomParam_construct";
function ~AlembicOBox2iGeomParam() = "AlembicOBox2iGeomParam_free";
function Boolean AlembicOBox2iGeomParam.valid() = "AlembicOBox2iGeomParam_valid";
function AlembicOBox2iGeomParam.reset!() = "AlembicOBox2iGeomParam_free";

function AlembicOBox2iGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOBox2iGeomParam_construct5Args";

function Boolean AlembicOBox2iGeomParam.matches(AlembicPropertyHeader header) = "AlembicOBox2iGeomParam_matches";
function AlembicOBox2iGeomParam.set!(AlembicOBox2iGeomParamSample sample) = "AlembicOBox2iGeomParam_set";
function AlembicOBox2iGeomParam.setFromPrevious!() = "AlembicOBox2iGeomParam_setFromPrevious";
function AlembicOBox2iGeomParam.setTimeSampling!(UInt32 index) = "AlembicOBox2iGeomParam_setTimeSampling";
function UInt32 AlembicOBox2iGeomParam.getNumSamples() = "AlembicOBox2iGeomParam_getNumSamples";
function AlembicDataType AlembicOBox2iGeomParam.getDataType() = "AlembicOBox2iGeomParam_getDataType";
function Boolean AlembicOBox2iGeomParam.isIndexed() = "AlembicOBox2iGeomParam_isIndexed";
function AlembicGeometryScope AlembicOBox2iGeomParam.getScope() = "AlembicOBox2iGeomParam_getScope";
function String AlembicOBox2iGeomParam.getName() = "AlembicOBox2iGeomParam_getName";
function AlembicOArrayProperty AlembicOBox2iGeomParam.getValueProperty() = "AlembicOBox2iGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOBox2iGeomParam.getIndexProperty() = "AlembicOBox2iGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox2fGeomParamSample {
  Data handle;
};

function AlembicIBox2fGeomParamSample() = "AlembicIBox2fGeomParamSample_construct";
function ~AlembicIBox2fGeomParamSample() = "AlembicIBox2fGeomParamSample_free";

function Box2[] AlembicIBox2fGeomParamSample.getVals() = "AlembicIBox2fGeomParamSample_getVals";
function UInt32<> AlembicIBox2fGeomParamSample.getIndices() = "AlembicIBox2fGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIBox2fGeomParamSample.getScope() = "AlembicIBox2fGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox2fGeomParamSample {
  Data handle;
};

function AlembicOBox2fGeomParamSample() = "AlembicOBox2fGeomParamSample_construct";
function ~AlembicOBox2fGeomParamSample() = "AlembicOBox2fGeomParamSample_free";

function AlembicOBox2fGeomParamSample(Box2 values<>, AlembicGeometryScope scope) = "AlembicOBox2fGeomParamSample_constructFromValuesAndScope";
function AlembicOBox2fGeomParamSample(Box2 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOBox2fGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOBox2fGeomParamSample.setVals!(Box2 values<>) = "AlembicOBox2fGeomParamSample_setVals";
function Box2[] AlembicOBox2fGeomParamSample.getVals() = "AlembicOBox2fGeomParamSample_getVals";
function AlembicOBox2fGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOBox2fGeomParamSample_setIndices";
function UInt32<> AlembicOBox2fGeomParamSample.getIndices() = "AlembicOBox2fGeomParamSample_getIndices";
function AlembicOBox2fGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOBox2fGeomParamSample_setScope";
function AlembicGeometryScope AlembicOBox2fGeomParamSample.getScope() = "AlembicOBox2fGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox2fGeomParam {
  Data handle;
};

function AlembicIBox2fGeomParam() = "AlembicIBox2fGeomParam_construct";
function ~AlembicIBox2fGeomParam() = "AlembicIBox2fGeomParam_free";
function Boolean AlembicIBox2fGeomParam.valid() = "AlembicIBox2fGeomParam_valid";
function AlembicIBox2fGeomParam.reset!() = "AlembicIBox2fGeomParam_free";

function AlembicIBox2fGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIBox2fGeomParam_construct2Args";

function Boolean AlembicIBox2fGeomParam.matches(AlembicPropertyHeader header) = "AlembicIBox2fGeomParam_matches";
function AlembicIBox2fGeomParamSample AlembicIBox2fGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIBox2fGeomParam_getIndexed";
function AlembicIBox2fGeomParamSample AlembicIBox2fGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIBox2fGeomParamSample AlembicIBox2fGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIBox2fGeomParam_getExpanded";
function AlembicIBox2fGeomParamSample AlembicIBox2fGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIBox2fGeomParam.getNumSamples() = "AlembicIBox2fGeomParam_getNumSamples";
function AlembicDataType AlembicIBox2fGeomParam.getDataType() = "AlembicIBox2fGeomParam_getDataType";
function UInt32 AlembicIBox2fGeomParam.getArrayExtent() = "AlembicIBox2fGeomParam_getArrayExtent";
function Boolean AlembicIBox2fGeomParam.isIndexed() = "AlembicIBox2fGeomParam_isIndexed";
function AlembicGeometryScope AlembicIBox2fGeomParam.getScope() = "AlembicIBox2fGeomParam_getScope";
function AlembicTimeSampling AlembicIBox2fGeomParam.getTimeSampling() = "AlembicIBox2fGeomParam_getTimeSampling";
function String AlembicIBox2fGeomParam.getName() = "AlembicIBox2fGeomParam_getName";
function AlembicICompoundProperty AlembicIBox2fGeomParam.getParent() = "AlembicIBox2fGeomParam_getParent";
function Boolean AlembicIBox2fGeomParam.isConstant() = "AlembicIBox2fGeomParam_isConstant";
function AlembicIArrayProperty AlembicIBox2fGeomParam.getValueProperty() = "AlembicIBox2fGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIBox2fGeomParam.getIndexProperty() = "AlembicIBox2fGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox2fGeomParam {
  Data handle;
};

function AlembicOBox2fGeomParam() = "AlembicOBox2fGeomParam_construct";
function ~AlembicOBox2fGeomParam() = "AlembicOBox2fGeomParam_free";
function Boolean AlembicOBox2fGeomParam.valid() = "AlembicOBox2fGeomParam_valid";
function AlembicOBox2fGeomParam.reset!() = "AlembicOBox2fGeomParam_free";

function AlembicOBox2fGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOBox2fGeomParam_construct5Args";

function Boolean AlembicOBox2fGeomParam.matches(AlembicPropertyHeader header) = "AlembicOBox2fGeomParam_matches";
function AlembicOBox2fGeomParam.set!(AlembicOBox2fGeomParamSample sample) = "AlembicOBox2fGeomParam_set";
function AlembicOBox2fGeomParam.setFromPrevious!() = "AlembicOBox2fGeomParam_setFromPrevious";
function AlembicOBox2fGeomParam.setTimeSampling!(UInt32 index) = "AlembicOBox2fGeomParam_setTimeSampling";
function UInt32 AlembicOBox2fGeomParam.getNumSamples() = "AlembicOBox2fGeomParam_getNumSamples";
function AlembicDataType AlembicOBox2fGeomParam.getDataType() = "AlembicOBox2fGeomParam_getDataType";
function Boolean AlembicOBox2fGeomParam.isIndexed() = "AlembicOBox2fGeomParam_isIndexed";
function AlembicGeometryScope AlembicOBox2fGeomParam.getScope() = "AlembicOBox2fGeomParam_getScope";
function String AlembicOBox2fGeomParam.getName() = "AlembicOBox2fGeomParam_getName";
function AlembicOArrayProperty AlembicOBox2fGeomParam.getValueProperty() = "AlembicOBox2fGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOBox2fGeomParam.getIndexProperty() = "AlembicOBox2fGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox2dGeomParamSample {
  Data handle;
};

function AlembicIBox2dGeomParamSample() = "AlembicIBox2dGeomParamSample_construct";
function ~AlembicIBox2dGeomParamSample() = "AlembicIBox2dGeomParamSample_free";

function Box2[] AlembicIBox2dGeomParamSample.getVals() = "AlembicIBox2dGeomParamSample_getVals";
function UInt32<> AlembicIBox2dGeomParamSample.getIndices() = "AlembicIBox2dGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIBox2dGeomParamSample.getScope() = "AlembicIBox2dGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox2dGeomParamSample {
  Data handle;
};

function AlembicOBox2dGeomParamSample() = "AlembicOBox2dGeomParamSample_construct";
function ~AlembicOBox2dGeomParamSample() = "AlembicOBox2dGeomParamSample_free";

function AlembicOBox2dGeomParamSample(Box2 values<>, AlembicGeometryScope scope) = "AlembicOBox2dGeomParamSample_constructFromValuesAndScope";
function AlembicOBox2dGeomParamSample(Box2 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOBox2dGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOBox2dGeomParamSample.setVals!(Box2 values<>) = "AlembicOBox2dGeomParamSample_setVals";
function Box2[] AlembicOBox2dGeomParamSample.getVals() = "AlembicOBox2dGeomParamSample_getVals";
function AlembicOBox2dGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOBox2dGeomParamSample_setIndices";
function UInt32<> AlembicOBox2dGeomParamSample.getIndices() = "AlembicOBox2dGeomParamSample_getIndices";
function AlembicOBox2dGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOBox2dGeomParamSample_setScope";
function AlembicGeometryScope AlembicOBox2dGeomParamSample.getScope() = "AlembicOBox2dGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox2dGeomParam {
  Data handle;
};

function AlembicIBox2dGeomParam() = "AlembicIBox2dGeomParam_construct";
function ~AlembicIBox2dGeomParam() = "AlembicIBox2dGeomParam_free";
function Boolean AlembicIBox2dGeomParam.valid() = "AlembicIBox2dGeomParam_valid";
function AlembicIBox2dGeomParam.reset!() = "AlembicIBox2dGeomParam_free";

function AlembicIBox2dGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIBox2dGeomParam_construct2Args";

function Boolean AlembicIBox2dGeomParam.matches(AlembicPropertyHeader header) = "AlembicIBox2dGeomParam_matches";
function AlembicIBox2dGeomParamSample AlembicIBox2dGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIBox2dGeomParam_getIndexed";
function AlembicIBox2dGeomParamSample AlembicIBox2dGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIBox2dGeomParamSample AlembicIBox2dGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIBox2dGeomParam_getExpanded";
function AlembicIBox2dGeomParamSample AlembicIBox2dGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIBox2dGeomParam.getNumSamples() = "AlembicIBox2dGeomParam_getNumSamples";
function AlembicDataType AlembicIBox2dGeomParam.getDataType() = "AlembicIBox2dGeomParam_getDataType";
function UInt32 AlembicIBox2dGeomParam.getArrayExtent() = "AlembicIBox2dGeomParam_getArrayExtent";
function Boolean AlembicIBox2dGeomParam.isIndexed() = "AlembicIBox2dGeomParam_isIndexed";
function AlembicGeometryScope AlembicIBox2dGeomParam.getScope() = "AlembicIBox2dGeomParam_getScope";
function AlembicTimeSampling AlembicIBox2dGeomParam.getTimeSampling() = "AlembicIBox2dGeomParam_getTimeSampling";
function String AlembicIBox2dGeomParam.getName() = "AlembicIBox2dGeomParam_getName";
function AlembicICompoundProperty AlembicIBox2dGeomParam.getParent() = "AlembicIBox2dGeomParam_getParent";
function Boolean AlembicIBox2dGeomParam.isConstant() = "AlembicIBox2dGeomParam_isConstant";
function AlembicIArrayProperty AlembicIBox2dGeomParam.getValueProperty() = "AlembicIBox2dGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIBox2dGeomParam.getIndexProperty() = "AlembicIBox2dGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox2dGeomParam {
  Data handle;
};

function AlembicOBox2dGeomParam() = "AlembicOBox2dGeomParam_construct";
function ~AlembicOBox2dGeomParam() = "AlembicOBox2dGeomParam_free";
function Boolean AlembicOBox2dGeomParam.valid() = "AlembicOBox2dGeomParam_valid";
function AlembicOBox2dGeomParam.reset!() = "AlembicOBox2dGeomParam_free";

function AlembicOBox2dGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOBox2dGeomParam_construct5Args";

function Boolean AlembicOBox2dGeomParam.matches(AlembicPropertyHeader header) = "AlembicOBox2dGeomParam_matches";
function AlembicOBox2dGeomParam.set!(AlembicOBox2dGeomParamSample sample) = "AlembicOBox2dGeomParam_set";
function AlembicOBox2dGeomParam.setFromPrevious!() = "AlembicOBox2dGeomParam_setFromPrevious";
function AlembicOBox2dGeomParam.setTimeSampling!(UInt32 index) = "AlembicOBox2dGeomParam_setTimeSampling";
function UInt32 AlembicOBox2dGeomParam.getNumSamples() = "AlembicOBox2dGeomParam_getNumSamples";
function AlembicDataType AlembicOBox2dGeomParam.getDataType() = "AlembicOBox2dGeomParam_getDataType";
function Boolean AlembicOBox2dGeomParam.isIndexed() = "AlembicOBox2dGeomParam_isIndexed";
function AlembicGeometryScope AlembicOBox2dGeomParam.getScope() = "AlembicOBox2dGeomParam_getScope";
function String AlembicOBox2dGeomParam.getName() = "AlembicOBox2dGeomParam_getName";
function AlembicOArrayProperty AlembicOBox2dGeomParam.getValueProperty() = "AlembicOBox2dGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOBox2dGeomParam.getIndexProperty() = "AlembicOBox2dGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox3sGeomParamSample {
  Data handle;
};

function AlembicIBox3sGeomParamSample() = "AlembicIBox3sGeomParamSample_construct";
function ~AlembicIBox3sGeomParamSample() = "AlembicIBox3sGeomParamSample_free";

function Box3[] AlembicIBox3sGeomParamSample.getVals() = "AlembicIBox3sGeomParamSample_getVals";
function UInt32<> AlembicIBox3sGeomParamSample.getIndices() = "AlembicIBox3sGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIBox3sGeomParamSample.getScope() = "AlembicIBox3sGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox3sGeomParamSample {
  Data handle;
};

function AlembicOBox3sGeomParamSample() = "AlembicOBox3sGeomParamSample_construct";
function ~AlembicOBox3sGeomParamSample() = "AlembicOBox3sGeomParamSample_free";

function AlembicOBox3sGeomParamSample(Box3 values<>, AlembicGeometryScope scope) = "AlembicOBox3sGeomParamSample_constructFromValuesAndScope";
function AlembicOBox3sGeomParamSample(Box3 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOBox3sGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOBox3sGeomParamSample.setVals!(Box3 values<>) = "AlembicOBox3sGeomParamSample_setVals";
function Box3[] AlembicOBox3sGeomParamSample.getVals() = "AlembicOBox3sGeomParamSample_getVals";
function AlembicOBox3sGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOBox3sGeomParamSample_setIndices";
function UInt32<> AlembicOBox3sGeomParamSample.getIndices() = "AlembicOBox3sGeomParamSample_getIndices";
function AlembicOBox3sGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOBox3sGeomParamSample_setScope";
function AlembicGeometryScope AlembicOBox3sGeomParamSample.getScope() = "AlembicOBox3sGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox3sGeomParam {
  Data handle;
};

function AlembicIBox3sGeomParam() = "AlembicIBox3sGeomParam_construct";
function ~AlembicIBox3sGeomParam() = "AlembicIBox3sGeomParam_free";
function Boolean AlembicIBox3sGeomParam.valid() = "AlembicIBox3sGeomParam_valid";
function AlembicIBox3sGeomParam.reset!() = "AlembicIBox3sGeomParam_free";

function AlembicIBox3sGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIBox3sGeomParam_construct2Args";

function Boolean AlembicIBox3sGeomParam.matches(AlembicPropertyHeader header) = "AlembicIBox3sGeomParam_matches";
function AlembicIBox3sGeomParamSample AlembicIBox3sGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIBox3sGeomParam_getIndexed";
function AlembicIBox3sGeomParamSample AlembicIBox3sGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIBox3sGeomParamSample AlembicIBox3sGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIBox3sGeomParam_getExpanded";
function AlembicIBox3sGeomParamSample AlembicIBox3sGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIBox3sGeomParam.getNumSamples() = "AlembicIBox3sGeomParam_getNumSamples";
function AlembicDataType AlembicIBox3sGeomParam.getDataType() = "AlembicIBox3sGeomParam_getDataType";
function UInt32 AlembicIBox3sGeomParam.getArrayExtent() = "AlembicIBox3sGeomParam_getArrayExtent";
function Boolean AlembicIBox3sGeomParam.isIndexed() = "AlembicIBox3sGeomParam_isIndexed";
function AlembicGeometryScope AlembicIBox3sGeomParam.getScope() = "AlembicIBox3sGeomParam_getScope";
function AlembicTimeSampling AlembicIBox3sGeomParam.getTimeSampling() = "AlembicIBox3sGeomParam_getTimeSampling";
function String AlembicIBox3sGeomParam.getName() = "AlembicIBox3sGeomParam_getName";
function AlembicICompoundProperty AlembicIBox3sGeomParam.getParent() = "AlembicIBox3sGeomParam_getParent";
function Boolean AlembicIBox3sGeomParam.isConstant() = "AlembicIBox3sGeomParam_isConstant";
function AlembicIArrayProperty AlembicIBox3sGeomParam.getValueProperty() = "AlembicIBox3sGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIBox3sGeomParam.getIndexProperty() = "AlembicIBox3sGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox3sGeomParam {
  Data handle;
};

function AlembicOBox3sGeomParam() = "AlembicOBox3sGeomParam_construct";
function ~AlembicOBox3sGeomParam() = "AlembicOBox3sGeomParam_free";
function Boolean AlembicOBox3sGeomParam.valid() = "AlembicOBox3sGeomParam_valid";
function AlembicOBox3sGeomParam.reset!() = "AlembicOBox3sGeomParam_free";

function AlembicOBox3sGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOBox3sGeomParam_construct5Args";

function Boolean AlembicOBox3sGeomParam.matches(AlembicPropertyHeader header) = "AlembicOBox3sGeomParam_matches";
function AlembicOBox3sGeomParam.set!(AlembicOBox3sGeomParamSample sample) = "AlembicOBox3sGeomParam_set";
function AlembicOBox3sGeomParam.setFromPrevious!() = "AlembicOBox3sGeomParam_setFromPrevious";
function AlembicOBox3sGeomParam.setTimeSampling!(UInt32 index) = "AlembicOBox3sGeomParam_setTimeSampling";
function UInt32 AlembicOBox3sGeomParam.getNumSamples() = "AlembicOBox3sGeomParam_getNumSamples";
function AlembicDataType AlembicOBox3sGeomParam.getDataType() = "AlembicOBox3sGeomParam_getDataType";
function Boolean AlembicOBox3sGeomParam.isIndexed() = "AlembicOBox3sGeomParam_isIndexed";
function AlembicGeometryScope AlembicOBox3sGeomParam.getScope() = "AlembicOBox3sGeomParam_getScope";
function String AlembicOBox3sGeomParam.getName() = "AlembicOBox3sGeomParam_getName";
function AlembicOArrayProperty AlembicOBox3sGeomParam.getValueProperty() = "AlembicOBox3sGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOBox3sGeomParam.getIndexProperty() = "AlembicOBox3sGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox3iGeomParamSample {
  Data handle;
};

function AlembicIBox3iGeomParamSample() = "AlembicIBox3iGeomParamSample_construct";
function ~AlembicIBox3iGeomParamSample() = "AlembicIBox3iGeomParamSample_free";

function Box3[] AlembicIBox3iGeomParamSample.getVals() = "AlembicIBox3iGeomParamSample_getVals";
function UInt32<> AlembicIBox3iGeomParamSample.getIndices() = "AlembicIBox3iGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIBox3iGeomParamSample.getScope() = "AlembicIBox3iGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox3iGeomParamSample {
  Data handle;
};

function AlembicOBox3iGeomParamSample() = "AlembicOBox3iGeomParamSample_construct";
function ~AlembicOBox3iGeomParamSample() = "AlembicOBox3iGeomParamSample_free";

function AlembicOBox3iGeomParamSample(Box3 values<>, AlembicGeometryScope scope) = "AlembicOBox3iGeomParamSample_constructFromValuesAndScope";
function AlembicOBox3iGeomParamSample(Box3 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOBox3iGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOBox3iGeomParamSample.setVals!(Box3 values<>) = "AlembicOBox3iGeomParamSample_setVals";
function Box3[] AlembicOBox3iGeomParamSample.getVals() = "AlembicOBox3iGeomParamSample_getVals";
function AlembicOBox3iGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOBox3iGeomParamSample_setIndices";
function UInt32<> AlembicOBox3iGeomParamSample.getIndices() = "AlembicOBox3iGeomParamSample_getIndices";
function AlembicOBox3iGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOBox3iGeomParamSample_setScope";
function AlembicGeometryScope AlembicOBox3iGeomParamSample.getScope() = "AlembicOBox3iGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox3iGeomParam {
  Data handle;
};

function AlembicIBox3iGeomParam() = "AlembicIBox3iGeomParam_construct";
function ~AlembicIBox3iGeomParam() = "AlembicIBox3iGeomParam_free";
function Boolean AlembicIBox3iGeomParam.valid() = "AlembicIBox3iGeomParam_valid";
function AlembicIBox3iGeomParam.reset!() = "AlembicIBox3iGeomParam_free";

function AlembicIBox3iGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIBox3iGeomParam_construct2Args";

function Boolean AlembicIBox3iGeomParam.matches(AlembicPropertyHeader header) = "AlembicIBox3iGeomParam_matches";
function AlembicIBox3iGeomParamSample AlembicIBox3iGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIBox3iGeomParam_getIndexed";
function AlembicIBox3iGeomParamSample AlembicIBox3iGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIBox3iGeomParamSample AlembicIBox3iGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIBox3iGeomParam_getExpanded";
function AlembicIBox3iGeomParamSample AlembicIBox3iGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIBox3iGeomParam.getNumSamples() = "AlembicIBox3iGeomParam_getNumSamples";
function AlembicDataType AlembicIBox3iGeomParam.getDataType() = "AlembicIBox3iGeomParam_getDataType";
function UInt32 AlembicIBox3iGeomParam.getArrayExtent() = "AlembicIBox3iGeomParam_getArrayExtent";
function Boolean AlembicIBox3iGeomParam.isIndexed() = "AlembicIBox3iGeomParam_isIndexed";
function AlembicGeometryScope AlembicIBox3iGeomParam.getScope() = "AlembicIBox3iGeomParam_getScope";
function AlembicTimeSampling AlembicIBox3iGeomParam.getTimeSampling() = "AlembicIBox3iGeomParam_getTimeSampling";
function String AlembicIBox3iGeomParam.getName() = "AlembicIBox3iGeomParam_getName";
function AlembicICompoundProperty AlembicIBox3iGeomParam.getParent() = "AlembicIBox3iGeomParam_getParent";
function Boolean AlembicIBox3iGeomParam.isConstant() = "AlembicIBox3iGeomParam_isConstant";
function AlembicIArrayProperty AlembicIBox3iGeomParam.getValueProperty() = "AlembicIBox3iGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIBox3iGeomParam.getIndexProperty() = "AlembicIBox3iGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox3iGeomParam {
  Data handle;
};

function AlembicOBox3iGeomParam() = "AlembicOBox3iGeomParam_construct";
function ~AlembicOBox3iGeomParam() = "AlembicOBox3iGeomParam_free";
function Boolean AlembicOBox3iGeomParam.valid() = "AlembicOBox3iGeomParam_valid";
function AlembicOBox3iGeomParam.reset!() = "AlembicOBox3iGeomParam_free";

function AlembicOBox3iGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOBox3iGeomParam_construct5Args";

function Boolean AlembicOBox3iGeomParam.matches(AlembicPropertyHeader header) = "AlembicOBox3iGeomParam_matches";
function AlembicOBox3iGeomParam.set!(AlembicOBox3iGeomParamSample sample) = "AlembicOBox3iGeomParam_set";
function AlembicOBox3iGeomParam.setFromPrevious!() = "AlembicOBox3iGeomParam_setFromPrevious";
function AlembicOBox3iGeomParam.setTimeSampling!(UInt32 index) = "AlembicOBox3iGeomParam_setTimeSampling";
function UInt32 AlembicOBox3iGeomParam.getNumSamples() = "AlembicOBox3iGeomParam_getNumSamples";
function AlembicDataType AlembicOBox3iGeomParam.getDataType() = "AlembicOBox3iGeomParam_getDataType";
function Boolean AlembicOBox3iGeomParam.isIndexed() = "AlembicOBox3iGeomParam_isIndexed";
function AlembicGeometryScope AlembicOBox3iGeomParam.getScope() = "AlembicOBox3iGeomParam_getScope";
function String AlembicOBox3iGeomParam.getName() = "AlembicOBox3iGeomParam_getName";
function AlembicOArrayProperty AlembicOBox3iGeomParam.getValueProperty() = "AlembicOBox3iGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOBox3iGeomParam.getIndexProperty() = "AlembicOBox3iGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox3fGeomParamSample {
  Data handle;
};

function AlembicIBox3fGeomParamSample() = "AlembicIBox3fGeomParamSample_construct";
function ~AlembicIBox3fGeomParamSample() = "AlembicIBox3fGeomParamSample_free";

function Box3[] AlembicIBox3fGeomParamSample.getVals() = "AlembicIBox3fGeomParamSample_getVals";
function UInt32<> AlembicIBox3fGeomParamSample.getIndices() = "AlembicIBox3fGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIBox3fGeomParamSample.getScope() = "AlembicIBox3fGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox3fGeomParamSample {
  Data handle;
};

function AlembicOBox3fGeomParamSample() = "AlembicOBox3fGeomParamSample_construct";
function ~AlembicOBox3fGeomParamSample() = "AlembicOBox3fGeomParamSample_free";

function AlembicOBox3fGeomParamSample(Box3 values<>, AlembicGeometryScope scope) = "AlembicOBox3fGeomParamSample_constructFromValuesAndScope";
function AlembicOBox3fGeomParamSample(Box3 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOBox3fGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOBox3fGeomParamSample.setVals!(Box3 values<>) = "AlembicOBox3fGeomParamSample_setVals";
function Box3[] AlembicOBox3fGeomParamSample.getVals() = "AlembicOBox3fGeomParamSample_getVals";
function AlembicOBox3fGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOBox3fGeomParamSample_setIndices";
function UInt32<> AlembicOBox3fGeomParamSample.getIndices() = "AlembicOBox3fGeomParamSample_getIndices";
function AlembicOBox3fGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOBox3fGeomParamSample_setScope";
function AlembicGeometryScope AlembicOBox3fGeomParamSample.getScope() = "AlembicOBox3fGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox3fGeomParam {
  Data handle;
};

function AlembicIBox3fGeomParam() = "AlembicIBox3fGeomParam_construct";
function ~AlembicIBox3fGeomParam() = "AlembicIBox3fGeomParam_free";
function Boolean AlembicIBox3fGeomParam.valid() = "AlembicIBox3fGeomParam_valid";
function AlembicIBox3fGeomParam.reset!() = "AlembicIBox3fGeomParam_free";

function AlembicIBox3fGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIBox3fGeomParam_construct2Args";

function Boolean AlembicIBox3fGeomParam.matches(AlembicPropertyHeader header) = "AlembicIBox3fGeomParam_matches";
function AlembicIBox3fGeomParamSample AlembicIBox3fGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIBox3fGeomParam_getIndexed";
function AlembicIBox3fGeomParamSample AlembicIBox3fGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIBox3fGeomParamSample AlembicIBox3fGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIBox3fGeomParam_getExpanded";
function AlembicIBox3fGeomParamSample AlembicIBox3fGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIBox3fGeomParam.getNumSamples() = "AlembicIBox3fGeomParam_getNumSamples";
function AlembicDataType AlembicIBox3fGeomParam.getDataType() = "AlembicIBox3fGeomParam_getDataType";
function UInt32 AlembicIBox3fGeomParam.getArrayExtent() = "AlembicIBox3fGeomParam_getArrayExtent";
function Boolean AlembicIBox3fGeomParam.isIndexed() = "AlembicIBox3fGeomParam_isIndexed";
function AlembicGeometryScope AlembicIBox3fGeomParam.getScope() = "AlembicIBox3fGeomParam_getScope";
function AlembicTimeSampling AlembicIBox3fGeomParam.getTimeSampling() = "AlembicIBox3fGeomParam_getTimeSampling";
function String AlembicIBox3fGeomParam.getName() = "AlembicIBox3fGeomParam_getName";
function AlembicICompoundProperty AlembicIBox3fGeomParam.getParent() = "AlembicIBox3fGeomParam_getParent";
function Boolean AlembicIBox3fGeomParam.isConstant() = "AlembicIBox3fGeomParam_isConstant";
function AlembicIArrayProperty AlembicIBox3fGeomParam.getValueProperty() = "AlembicIBox3fGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIBox3fGeomParam.getIndexProperty() = "AlembicIBox3fGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox3fGeomParam {
  Data handle;
};

function AlembicOBox3fGeomParam() = "AlembicOBox3fGeomParam_construct";
function ~AlembicOBox3fGeomParam() = "AlembicOBox3fGeomParam_free";
function Boolean AlembicOBox3fGeomParam.valid() = "AlembicOBox3fGeomParam_valid";
function AlembicOBox3fGeomParam.reset!() = "AlembicOBox3fGeomParam_free";

function AlembicOBox3fGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOBox3fGeomParam_construct5Args";

function Boolean AlembicOBox3fGeomParam.matches(AlembicPropertyHeader header) = "AlembicOBox3fGeomParam_matches";
function AlembicOBox3fGeomParam.set!(AlembicOBox3fGeomParamSample sample) = "AlembicOBox3fGeomParam_set";
function AlembicOBox3fGeomParam.setFromPrevious!() = "AlembicOBox3fGeomParam_setFromPrevious";
function AlembicOBox3fGeomParam.setTimeSampling!(UInt32 index) = "AlembicOBox3fGeomParam_setTimeSampling";
function UInt32 AlembicOBox3fGeomParam.getNumSamples() = "AlembicOBox3fGeomParam_getNumSamples";
function AlembicDataType AlembicOBox3fGeomParam.getDataType() = "AlembicOBox3fGeomParam_getDataType";
function Boolean AlembicOBox3fGeomParam.isIndexed() = "AlembicOBox3fGeomParam_isIndexed";
function AlembicGeometryScope AlembicOBox3fGeomParam.getScope() = "AlembicOBox3fGeomParam_getScope";
function String AlembicOBox3fGeomParam.getName() = "AlembicOBox3fGeomParam_getName";
function AlembicOArrayProperty AlembicOBox3fGeomParam.getValueProperty() = "AlembicOBox3fGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOBox3fGeomParam.getIndexProperty() = "AlembicOBox3fGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox3dGeomParamSample {
  Data handle;
};

function AlembicIBox3dGeomParamSample() = "AlembicIBox3dGeomParamSample_construct";
function ~AlembicIBox3dGeomParamSample() = "AlembicIBox3dGeomParamSample_free";

function Box3[] AlembicIBox3dGeomParamSample.getVals() = "AlembicIBox3dGeomParamSample_getVals";
function UInt32<> AlembicIBox3dGeomParamSample.getIndices() = "AlembicIBox3dGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIBox3dGeomParamSample.getScope() = "AlembicIBox3dGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox3dGeomParamSample {
  Data handle;
};

function AlembicOBox3dGeomParamSample() = "AlembicOBox3dGeomParamSample_construct";
function ~AlembicOBox3dGeomParamSample() = "AlembicOBox3dGeomParamSample_free";

function AlembicOBox3dGeomParamSample(Box3 values<>, AlembicGeometryScope scope) = "AlembicOBox3dGeomParamSample_constructFromValuesAndScope";
function AlembicOBox3dGeomParamSample(Box3 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOBox3dGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOBox3dGeomParamSample.setVals!(Box3 values<>) = "AlembicOBox3dGeomParamSample_setVals";
function Box3[] AlembicOBox3dGeomParamSample.getVals() = "AlembicOBox3dGeomParamSample_getVals";
function AlembicOBox3dGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOBox3dGeomParamSample_setIndices";
function UInt32<> AlembicOBox3dGeomParamSample.getIndices() = "AlembicOBox3dGeomParamSample_getIndices";
function AlembicOBox3dGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOBox3dGeomParamSample_setScope";
function AlembicGeometryScope AlembicOBox3dGeomParamSample.getScope() = "AlembicOBox3dGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIBox3dGeomParam {
  Data handle;
};

function AlembicIBox3dGeomParam() = "AlembicIBox3dGeomParam_construct";
function ~AlembicIBox3dGeomParam() = "AlembicIBox3dGeomParam_free";
function Boolean AlembicIBox3dGeomParam.valid() = "AlembicIBox3dGeomParam_valid";
function AlembicIBox3dGeomParam.reset!() = "AlembicIBox3dGeomParam_free";

function AlembicIBox3dGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIBox3dGeomParam_construct2Args";

function Boolean AlembicIBox3dGeomParam.matches(AlembicPropertyHeader header) = "AlembicIBox3dGeomParam_matches";
function AlembicIBox3dGeomParamSample AlembicIBox3dGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIBox3dGeomParam_getIndexed";
function AlembicIBox3dGeomParamSample AlembicIBox3dGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIBox3dGeomParamSample AlembicIBox3dGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIBox3dGeomParam_getExpanded";
function AlembicIBox3dGeomParamSample AlembicIBox3dGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIBox3dGeomParam.getNumSamples() = "AlembicIBox3dGeomParam_getNumSamples";
function AlembicDataType AlembicIBox3dGeomParam.getDataType() = "AlembicIBox3dGeomParam_getDataType";
function UInt32 AlembicIBox3dGeomParam.getArrayExtent() = "AlembicIBox3dGeomParam_getArrayExtent";
function Boolean AlembicIBox3dGeomParam.isIndexed() = "AlembicIBox3dGeomParam_isIndexed";
function AlembicGeometryScope AlembicIBox3dGeomParam.getScope() = "AlembicIBox3dGeomParam_getScope";
function AlembicTimeSampling AlembicIBox3dGeomParam.getTimeSampling() = "AlembicIBox3dGeomParam_getTimeSampling";
function String AlembicIBox3dGeomParam.getName() = "AlembicIBox3dGeomParam_getName";
function AlembicICompoundProperty AlembicIBox3dGeomParam.getParent() = "AlembicIBox3dGeomParam_getParent";
function Boolean AlembicIBox3dGeomParam.isConstant() = "AlembicIBox3dGeomParam_isConstant";
function AlembicIArrayProperty AlembicIBox3dGeomParam.getValueProperty() = "AlembicIBox3dGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIBox3dGeomParam.getIndexProperty() = "AlembicIBox3dGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOBox3dGeomParam {
  Data handle;
};

function AlembicOBox3dGeomParam() = "AlembicOBox3dGeomParam_construct";
function ~AlembicOBox3dGeomParam() = "AlembicOBox3dGeomParam_free";
function Boolean AlembicOBox3dGeomParam.valid() = "AlembicOBox3dGeomParam_valid";
function AlembicOBox3dGeomParam.reset!() = "AlembicOBox3dGeomParam_free";

function AlembicOBox3dGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOBox3dGeomParam_construct5Args";

function Boolean AlembicOBox3dGeomParam.matches(AlembicPropertyHeader header) = "AlembicOBox3dGeomParam_matches";
function AlembicOBox3dGeomParam.set!(AlembicOBox3dGeomParamSample sample) = "AlembicOBox3dGeomParam_set";
function AlembicOBox3dGeomParam.setFromPrevious!() = "AlembicOBox3dGeomParam_setFromPrevious";
function AlembicOBox3dGeomParam.setTimeSampling!(UInt32 index) = "AlembicOBox3dGeomParam_setTimeSampling";
function UInt32 AlembicOBox3dGeomParam.getNumSamples() = "AlembicOBox3dGeomParam_getNumSamples";
function AlembicDataType AlembicOBox3dGeomParam.getDataType() = "AlembicOBox3dGeomParam_getDataType";
function Boolean AlembicOBox3dGeomParam.isIndexed() = "AlembicOBox3dGeomParam_isIndexed";
function AlembicGeometryScope AlembicOBox3dGeomParam.getScope() = "AlembicOBox3dGeomParam_getScope";
function String AlembicOBox3dGeomParam.getName() = "AlembicOBox3dGeomParam_getName";
function AlembicOArrayProperty AlembicOBox3dGeomParam.getValueProperty() = "AlembicOBox3dGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOBox3dGeomParam.getIndexProperty() = "AlembicOBox3dGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIMat33fGeomParamSample {
  Data handle;
};

function AlembicIMat33fGeomParamSample() = "AlembicIMat33fGeomParamSample_construct";
function ~AlembicIMat33fGeomParamSample() = "AlembicIMat33fGeomParamSample_free";

function Mat33[] AlembicIMat33fGeomParamSample.getVals() = "AlembicIMat33fGeomParamSample_getVals";
function UInt32<> AlembicIMat33fGeomParamSample.getIndices() = "AlembicIMat33fGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIMat33fGeomParamSample.getScope() = "AlembicIMat33fGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOMat33fGeomParamSample {
  Data handle;
};

function AlembicOMat33fGeomParamSample() = "AlembicOMat33fGeomParamSample_construct";
function ~AlembicOMat33fGeomParamSample() = "AlembicOMat33fGeomParamSample_free";

function AlembicOMat33fGeomParamSample(Mat33 values<>, AlembicGeometryScope scope) = "AlembicOMat33fGeomParamSample_constructFromValuesAndScope";
function AlembicOMat33fGeomParamSample(Mat33 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOMat33fGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOMat33fGeomParamSample.setVals!(Mat33 values<>) = "AlembicOMat33fGeomParamSample_setVals";
function Mat33[] AlembicOMat33fGeomParamSample.getVals() = "AlembicOMat33fGeomParamSample_getVals";
function AlembicOMat33fGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOMat33fGeomParamSample_setIndices";
function UInt32<> AlembicOMat33fGeomParamSample.getIndices() = "AlembicOMat33fGeomParamSample_getIndices";
function AlembicOMat33fGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOMat33fGeomParamSample_setScope";
function AlembicGeometryScope AlembicOMat33fGeomParamSample.getScope() = "AlembicOMat33fGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIMat33fGeomParam {
  Data handle;
};

function AlembicIMat33fGeomParam() = "AlembicIMat33fGeomParam_construct";
function ~AlembicIMat33fGeomParam() = "AlembicIMat33fGeomParam_free";
function Boolean AlembicIMat33fGeomParam.valid() = "AlembicIMat33fGeomParam_valid";
function AlembicIMat33fGeomParam.reset!() = "AlembicIMat33fGeomParam_free";

function AlembicIMat33fGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIMat33fGeomParam_construct2Args";

function Boolean AlembicIMat33fGeomParam.matches(AlembicPropertyHeader header) = "AlembicIMat33fGeomParam_matches";
function AlembicIMat33fGeomParamSample AlembicIMat33fGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIMat33fGeomParam_getIndexed";
function AlembicIMat33fGeomParamSample AlembicIMat33fGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIMat33fGeomParamSample AlembicIMat33fGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIMat33fGeomParam_getExpanded";
function AlembicIMat33fGeomParamSample AlembicIMat33fGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIMat33fGeomParam.getNumSamples() = "AlembicIMat33fGeomParam_getNumSamples";
function AlembicDataType AlembicIMat33fGeomParam.getDataType() = "AlembicIMat33fGeomParam_getDataType";
function UInt32 AlembicIMat33fGeomParam.getArrayExtent() = "AlembicIMat33fGeomParam_getArrayExtent";
function Boolean AlembicIMat33fGeomParam.isIndexed() = "AlembicIMat33fGeomParam_isIndexed";
function AlembicGeometryScope AlembicIMat33fGeomParam.getScope() = "AlembicIMat33fGeomParam_getScope";
function AlembicTimeSampling AlembicIMat33fGeomParam.getTimeSampling() = "AlembicIMat33fGeomParam_getTimeSampling";
function String AlembicIMat33fGeomParam.getName() = "AlembicIMat33fGeomParam_getName";
function AlembicICompoundProperty AlembicIMat33fGeomParam.getParent() = "AlembicIMat33fGeomParam_getParent";
function Boolean AlembicIMat33fGeomParam.isConstant() = "AlembicIMat33fGeomParam_isConstant";
function AlembicIArrayProperty AlembicIMat33fGeomParam.getValueProperty() = "AlembicIMat33fGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIMat33fGeomParam.getIndexProperty() = "AlembicIMat33fGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOMat33fGeomParam {
  Data handle;
};

function AlembicOMat33fGeomParam() = "AlembicOMat33fGeomParam_construct";
function ~AlembicOMat33fGeomParam() = "AlembicOMat33fGeomParam_free";
function Boolean AlembicOMat33fGeomParam.valid() = "AlembicOMat33fGeomParam_valid";
function AlembicOMat33fGeomParam.reset!() = "AlembicOMat33fGeomParam_free";

function AlembicOMat33fGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOMat33fGeomParam_construct5Args";

function Boolean AlembicOMat33fGeomParam.matches(AlembicPropertyHeader header) = "AlembicOMat33fGeomParam_matches";
function AlembicOMat33fGeomParam.set!(AlembicOMat33fGeomParamSample sample) = "AlembicOMat33fGeomParam_set";
function AlembicOMat33fGeomParam.setFromPrevious!() = "AlembicOMat33fGeomParam_setFromPrevious";
function AlembicOMat33fGeomParam.setTimeSampling!(UInt32 index) = "AlembicOMat33fGeomParam_setTimeSampling";
function UInt32 AlembicOMat33fGeomParam.getNumSamples() = "AlembicOMat33fGeomParam_getNumSamples";
function AlembicDataType AlembicOMat33fGeomParam.getDataType() = "AlembicOMat33fGeomParam_getDataType";
function Boolean AlembicOMat33fGeomParam.isIndexed() = "AlembicOMat33fGeomParam_isIndexed";
function AlembicGeometryScope AlembicOMat33fGeomParam.getScope() = "AlembicOMat33fGeomParam_getScope";
function String AlembicOMat33fGeomParam.getName() = "AlembicOMat33fGeomParam_getName";
function AlembicOArrayProperty AlembicOMat33fGeomParam.getValueProperty() = "AlembicOMat33fGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOMat33fGeomParam.getIndexProperty() = "AlembicOMat33fGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIMat33dGeomParamSample {
  Data handle;
};

function AlembicIMat33dGeomParamSample() = "AlembicIMat33dGeomParamSample_construct";
function ~AlembicIMat33dGeomParamSample() = "AlembicIMat33dGeomParamSample_free";

function Mat33[] AlembicIMat33dGeomParamSample.getVals() = "AlembicIMat33dGeomParamSample_getVals";
function UInt32<> AlembicIMat33dGeomParamSample.getIndices() = "AlembicIMat33dGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIMat33dGeomParamSample.getScope() = "AlembicIMat33dGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOMat33dGeomParamSample {
  Data handle;
};

function AlembicOMat33dGeomParamSample() = "AlembicOMat33dGeomParamSample_construct";
function ~AlembicOMat33dGeomParamSample() = "AlembicOMat33dGeomParamSample_free";

function AlembicOMat33dGeomParamSample(Mat33 values<>, AlembicGeometryScope scope) = "AlembicOMat33dGeomParamSample_constructFromValuesAndScope";
function AlembicOMat33dGeomParamSample(Mat33 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOMat33dGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOMat33dGeomParamSample.setVals!(Mat33 values<>) = "AlembicOMat33dGeomParamSample_setVals";
function Mat33[] AlembicOMat33dGeomParamSample.getVals() = "AlembicOMat33dGeomParamSample_getVals";
function AlembicOMat33dGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOMat33dGeomParamSample_setIndices";
function UInt32<> AlembicOMat33dGeomParamSample.getIndices() = "AlembicOMat33dGeomParamSample_getIndices";
function AlembicOMat33dGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOMat33dGeomParamSample_setScope";
function AlembicGeometryScope AlembicOMat33dGeomParamSample.getScope() = "AlembicOMat33dGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIMat33dGeomParam {
  Data handle;
};

function AlembicIMat33dGeomParam() = "AlembicIMat33dGeomParam_construct";
function ~AlembicIMat33dGeomParam() = "AlembicIMat33dGeomParam_free";
function Boolean AlembicIMat33dGeomParam.valid() = "AlembicIMat33dGeomParam_valid";
function AlembicIMat33dGeomParam.reset!() = "AlembicIMat33dGeomParam_free";

function AlembicIMat33dGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIMat33dGeomParam_construct2Args";

function Boolean AlembicIMat33dGeomParam.matches(AlembicPropertyHeader header) = "AlembicIMat33dGeomParam_matches";
function AlembicIMat33dGeomParamSample AlembicIMat33dGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIMat33dGeomParam_getIndexed";
function AlembicIMat33dGeomParamSample AlembicIMat33dGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIMat33dGeomParamSample AlembicIMat33dGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIMat33dGeomParam_getExpanded";
function AlembicIMat33dGeomParamSample AlembicIMat33dGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIMat33dGeomParam.getNumSamples() = "AlembicIMat33dGeomParam_getNumSamples";
function AlembicDataType AlembicIMat33dGeomParam.getDataType() = "AlembicIMat33dGeomParam_getDataType";
function UInt32 AlembicIMat33dGeomParam.getArrayExtent() = "AlembicIMat33dGeomParam_getArrayExtent";
function Boolean AlembicIMat33dGeomParam.isIndexed() = "AlembicIMat33dGeomParam_isIndexed";
function AlembicGeometryScope AlembicIMat33dGeomParam.getScope() = "AlembicIMat33dGeomParam_getScope";
function AlembicTimeSampling AlembicIMat33dGeomParam.getTimeSampling() = "AlembicIMat33dGeomParam_getTimeSampling";
function String AlembicIMat33dGeomParam.getName() = "AlembicIMat33dGeomParam_getName";
function AlembicICompoundProperty AlembicIMat33dGeomParam.getParent() = "AlembicIMat33dGeomParam_getParent";
function Boolean AlembicIMat33dGeomParam.isConstant() = "AlembicIMat33dGeomParam_isConstant";
function AlembicIArrayProperty AlembicIMat33dGeomParam.getValueProperty() = "AlembicIMat33dGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIMat33dGeomParam.getIndexProperty() = "AlembicIMat33dGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOMat33dGeomParam {
  Data handle;
};

function AlembicOMat33dGeomParam() = "AlembicOMat33dGeomParam_construct";
function ~AlembicOMat33dGeomParam() = "AlembicOMat33dGeomParam_free";
function Boolean AlembicOMat33dGeomParam.valid() = "AlembicOMat33dGeomParam_valid";
function AlembicOMat33dGeomParam.reset!() = "AlembicOMat33dGeomParam_free";

function AlembicOMat33dGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOMat33dGeomParam_construct5Args";

function Boolean AlembicOMat33dGeomParam.matches(AlembicPropertyHeader header) = "AlembicOMat33dGeomParam_matches";
function AlembicOMat33dGeomParam.set!(AlembicOMat33dGeomParamSample sample) = "AlembicOMat33dGeomParam_set";
function AlembicOMat33dGeomParam.setFromPrevious!() = "AlembicOMat33dGeomParam_setFromPrevious";
function AlembicOMat33dGeomParam.setTimeSampling!(UInt32 index) = "AlembicOMat33dGeomParam_setTimeSampling";
function UInt32 AlembicOMat33dGeomParam.getNumSamples() = "AlembicOMat33dGeomParam_getNumSamples";
function AlembicDataType AlembicOMat33dGeomParam.getDataType() = "AlembicOMat33dGeomParam_getDataType";
function Boolean AlembicOMat33dGeomParam.isIndexed() = "AlembicOMat33dGeomParam_isIndexed";
function AlembicGeometryScope AlembicOMat33dGeomParam.getScope() = "AlembicOMat33dGeomParam_getScope";
function String AlembicOMat33dGeomParam.getName() = "AlembicOMat33dGeomParam_getName";
function AlembicOArrayProperty AlembicOMat33dGeomParam.getValueProperty() = "AlembicOMat33dGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOMat33dGeomParam.getIndexProperty() = "AlembicOMat33dGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIMat44fGeomParamSample {
  Data handle;
};

function AlembicIMat44fGeomParamSample() = "AlembicIMat44fGeomParamSample_construct";
function ~AlembicIMat44fGeomParamSample() = "AlembicIMat44fGeomParamSample_free";

function Mat44[] AlembicIMat44fGeomParamSample.getVals() = "AlembicIMat44fGeomParamSample_getVals";
function UInt32<> AlembicIMat44fGeomParamSample.getIndices() = "AlembicIMat44fGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIMat44fGeomParamSample.getScope() = "AlembicIMat44fGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOMat44fGeomParamSample {
  Data handle;
};

function AlembicOMat44fGeomParamSample() = "AlembicOMat44fGeomParamSample_construct";
function ~AlembicOMat44fGeomParamSample() = "AlembicOMat44fGeomParamSample_free";

function AlembicOMat44fGeomParamSample(Mat44 values<>, AlembicGeometryScope scope) = "AlembicOMat44fGeomParamSample_constructFromValuesAndScope";
function AlembicOMat44fGeomParamSample(Mat44 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOMat44fGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOMat44fGeomParamSample.setVals!(Mat44 values<>) = "AlembicOMat44fGeomParamSample_setVals";
function Mat44[] AlembicOMat44fGeomParamSample.getVals() = "AlembicOMat44fGeomParamSample_getVals";
function AlembicOMat44fGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOMat44fGeomParamSample_setIndices";
function UInt32<> AlembicOMat44fGeomParamSample.getIndices() = "AlembicOMat44fGeomParamSample_getIndices";
function AlembicOMat44fGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOMat44fGeomParamSample_setScope";
function AlembicGeometryScope AlembicOMat44fGeomParamSample.getScope() = "AlembicOMat44fGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIMat44fGeomParam {
  Data handle;
};

function AlembicIMat44fGeomParam() = "AlembicIMat44fGeomParam_construct";
function ~AlembicIMat44fGeomParam() = "AlembicIMat44fGeomParam_free";
function Boolean AlembicIMat44fGeomParam.valid() = "AlembicIMat44fGeomParam_valid";
function AlembicIMat44fGeomParam.reset!() = "AlembicIMat44fGeomParam_free";

function AlembicIMat44fGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIMat44fGeomParam_construct2Args";

function Boolean AlembicIMat44fGeomParam.matches(AlembicPropertyHeader header) = "AlembicIMat44fGeomParam_matches";
function AlembicIMat44fGeomParamSample AlembicIMat44fGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIMat44fGeomParam_getIndexed";
function AlembicIMat44fGeomParamSample AlembicIMat44fGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIMat44fGeomParamSample AlembicIMat44fGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIMat44fGeomParam_getExpanded";
function AlembicIMat44fGeomParamSample AlembicIMat44fGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIMat44fGeomParam.getNumSamples() = "AlembicIMat44fGeomParam_getNumSamples";
function AlembicDataType AlembicIMat44fGeomParam.getDataType() = "AlembicIMat44fGeomParam_getDataType";
function UInt32 AlembicIMat44fGeomParam.getArrayExtent() = "AlembicIMat44fGeomParam_getArrayExtent";
function Boolean AlembicIMat44fGeomParam.isIndexed() = "AlembicIMat44fGeomParam_isIndexed";
function AlembicGeometryScope AlembicIMat44fGeomParam.getScope() = "AlembicIMat44fGeomParam_getScope";
function AlembicTimeSampling AlembicIMat44fGeomParam.getTimeSampling() = "AlembicIMat44fGeomParam_getTimeSampling";
function String AlembicIMat44fGeomParam.getName() = "AlembicIMat44fGeomParam_getName";
function AlembicICompoundProperty AlembicIMat44fGeomParam.getParent() = "AlembicIMat44fGeomParam_getParent";
function Boolean AlembicIMat44fGeomParam.isConstant() = "AlembicIMat44fGeomParam_isConstant";
function AlembicIArrayProperty AlembicIMat44fGeomParam.getValueProperty() = "AlembicIMat44fGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIMat44fGeomParam.getIndexProperty() = "AlembicIMat44fGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOMat44fGeomParam {
  Data handle;
};

function AlembicOMat44fGeomParam() = "AlembicOMat44fGeomParam_construct";
function ~AlembicOMat44fGeomParam() = "AlembicOMat44fGeomParam_free";
function Boolean AlembicOMat44fGeomParam.valid() = "AlembicOMat44fGeomParam_valid";
function AlembicOMat44fGeomParam.reset!() = "AlembicOMat44fGeomParam_free";

function AlembicOMat44fGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOMat44fGeomParam_construct5Args";

function Boolean AlembicOMat44fGeomParam.matches(AlembicPropertyHeader header) = "AlembicOMat44fGeomParam_matches";
function AlembicOMat44fGeomParam.set!(AlembicOMat44fGeomParamSample sample) = "AlembicOMat44fGeomParam_set";
function AlembicOMat44fGeomParam.setFromPrevious!() = "AlembicOMat44fGeomParam_setFromPrevious";
function AlembicOMat44fGeomParam.setTimeSampling!(UInt32 index) = "AlembicOMat44fGeomParam_setTimeSampling";
function UInt32 AlembicOMat44fGeomParam.getNumSamples() = "AlembicOMat44fGeomParam_getNumSamples";
function AlembicDataType AlembicOMat44fGeomParam.getDataType() = "AlembicOMat44fGeomParam_getDataType";
function Boolean AlembicOMat44fGeomParam.isIndexed() = "AlembicOMat44fGeomParam_isIndexed";
function AlembicGeometryScope AlembicOMat44fGeomParam.getScope() = "AlembicOMat44fGeomParam_getScope";
function String AlembicOMat44fGeomParam.getName() = "AlembicOMat44fGeomParam_getName";
function AlembicOArrayProperty AlembicOMat44fGeomParam.getValueProperty() = "AlembicOMat44fGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOMat44fGeomParam.getIndexProperty() = "AlembicOMat44fGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIMat44dGeomParamSample {
  Data handle;
};

function AlembicIMat44dGeomParamSample() = "AlembicIMat44dGeomParamSample_construct";
function ~AlembicIMat44dGeomParamSample() = "AlembicIMat44dGeomParamSample_free";

function Mat44[] AlembicIMat44dGeomParamSample.getVals() = "AlembicIMat44dGeomParamSample_getVals";
function UInt32<> AlembicIMat44dGeomParamSample.getIndices() = "AlembicIMat44dGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIMat44dGeomParamSample.getScope() = "AlembicIMat44dGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOMat44dGeomParamSample {
  Data handle;
};

function AlembicOMat44dGeomParamSample() = "AlembicOMat44dGeomParamSample_construct";
function ~AlembicOMat44dGeomParamSample() = "AlembicOMat44dGeomParamSample_free";

function AlembicOMat44dGeomParamSample(Mat44 values<>, AlembicGeometryScope scope) = "AlembicOMat44dGeomParamSample_constructFromValuesAndScope";
function AlembicOMat44dGeomParamSample(Mat44 values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOMat44dGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOMat44dGeomParamSample.setVals!(Mat44 values<>) = "AlembicOMat44dGeomParamSample_setVals";
function Mat44[] AlembicOMat44dGeomParamSample.getVals() = "AlembicOMat44dGeomParamSample_getVals";
function AlembicOMat44dGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOMat44dGeomParamSample_setIndices";
function UInt32<> AlembicOMat44dGeomParamSample.getIndices() = "AlembicOMat44dGeomParamSample_getIndices";
function AlembicOMat44dGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOMat44dGeomParamSample_setScope";
function AlembicGeometryScope AlembicOMat44dGeomParamSample.getScope() = "AlembicOMat44dGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIMat44dGeomParam {
  Data handle;
};

function AlembicIMat44dGeomParam() = "AlembicIMat44dGeomParam_construct";
function ~AlembicIMat44dGeomParam() = "AlembicIMat44dGeomParam_free";
function Boolean AlembicIMat44dGeomParam.valid() = "AlembicIMat44dGeomParam_valid";
function AlembicIMat44dGeomParam.reset!() = "AlembicIMat44dGeomParam_free";

function AlembicIMat44dGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIMat44dGeomParam_construct2Args";

function Boolean AlembicIMat44dGeomParam.matches(AlembicPropertyHeader header) = "AlembicIMat44dGeomParam_matches";
function AlembicIMat44dGeomParamSample AlembicIMat44dGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIMat44dGeomParam_getIndexed";
function AlembicIMat44dGeomParamSample AlembicIMat44dGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIMat44dGeomParamSample AlembicIMat44dGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIMat44dGeomParam_getExpanded";
function AlembicIMat44dGeomParamSample AlembicIMat44dGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIMat44dGeomParam.getNumSamples() = "AlembicIMat44dGeomParam_getNumSamples";
function AlembicDataType AlembicIMat44dGeomParam.getDataType() = "AlembicIMat44dGeomParam_getDataType";
function UInt32 AlembicIMat44dGeomParam.getArrayExtent() = "AlembicIMat44dGeomParam_getArrayExtent";
function Boolean AlembicIMat44dGeomParam.isIndexed() = "AlembicIMat44dGeomParam_isIndexed";
function AlembicGeometryScope AlembicIMat44dGeomParam.getScope() = "AlembicIMat44dGeomParam_getScope";
function AlembicTimeSampling AlembicIMat44dGeomParam.getTimeSampling() = "AlembicIMat44dGeomParam_getTimeSampling";
function String AlembicIMat44dGeomParam.getName() = "AlembicIMat44dGeomParam_getName";
function AlembicICompoundProperty AlembicIMat44dGeomParam.getParent() = "AlembicIMat44dGeomParam_getParent";
function Boolean AlembicIMat44dGeomParam.isConstant() = "AlembicIMat44dGeomParam_isConstant";
function AlembicIArrayProperty AlembicIMat44dGeomParam.getValueProperty() = "AlembicIMat44dGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIMat44dGeomParam.getIndexProperty() = "AlembicIMat44dGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOMat44dGeomParam {
  Data handle;
};

function AlembicOMat44dGeomParam() = "AlembicOMat44dGeomParam_construct";
function ~AlembicOMat44dGeomParam() = "AlembicOMat44dGeomParam_free";
function Boolean AlembicOMat44dGeomParam.valid() = "AlembicOMat44dGeomParam_valid";
function AlembicOMat44dGeomParam.reset!() = "AlembicOMat44dGeomParam_free";

function AlembicOMat44dGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOMat44dGeomParam_construct5Args";

function Boolean AlembicOMat44dGeomParam.matches(AlembicPropertyHeader header) = "AlembicOMat44dGeomParam_matches";
function AlembicOMat44dGeomParam.set!(AlembicOMat44dGeomParamSample sample) = "AlembicOMat44dGeomParam_set";
function AlembicOMat44dGeomParam.setFromPrevious!() = "AlembicOMat44dGeomParam_setFromPrevious";
function AlembicOMat44dGeomParam.setTimeSampling!(UInt32 index) = "AlembicOMat44dGeomParam_setTimeSampling";
function UInt32 AlembicOMat44dGeomParam.getNumSamples() = "AlembicOMat44dGeomParam_getNumSamples";
function AlembicDataType AlembicOMat44dGeomParam.getDataType() = "AlembicOMat44dGeomParam_getDataType";
function Boolean AlembicOMat44dGeomParam.isIndexed() = "AlembicOMat44dGeomParam_isIndexed";
function AlembicGeometryScope AlembicOMat44dGeomParam.getScope() = "AlembicOMat44dGeomParam_getScope";
function String AlembicOMat44dGeomParam.getName() = "AlembicOMat44dGeomParam_getName";
function AlembicOArrayProperty AlembicOMat44dGeomParam.getValueProperty() = "AlembicOMat44dGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOMat44dGeomParam.getIndexProperty() = "AlembicOMat44dGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIColorhGeomParamSample {
  Data handle;
};

function AlembicIColorhGeomParamSample() = "AlembicIColorhGeomParamSample_construct";
function ~AlembicIColorhGeomParamSample() = "AlembicIColorhGeomParamSample_free";

function Color[] AlembicIColorhGeomParamSample.getVals() = "AlembicIColorhGeomParamSample_getVals";
function UInt32<> AlembicIColorhGeomParamSample.getIndices() = "AlembicIColorhGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIColorhGeomParamSample.getScope() = "AlembicIColorhGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOColorhGeomParamSample {
  Data handle;
};

function AlembicOColorhGeomParamSample() = "AlembicOColorhGeomParamSample_construct";
function ~AlembicOColorhGeomParamSample() = "AlembicOColorhGeomParamSample_free";

function AlembicOColorhGeomParamSample(Color values<>, AlembicGeometryScope scope) = "AlembicOColorhGeomParamSample_constructFromValuesAndScope";
function AlembicOColorhGeomParamSample(Color values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOColorhGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOColorhGeomParamSample.setVals!(Color values<>) = "AlembicOColorhGeomParamSample_setVals";
function Color[] AlembicOColorhGeomParamSample.getVals() = "AlembicOColorhGeomParamSample_getVals";
function AlembicOColorhGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOColorhGeomParamSample_setIndices";
function UInt32<> AlembicOColorhGeomParamSample.getIndices() = "AlembicOColorhGeomParamSample_getIndices";
function AlembicOColorhGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOColorhGeomParamSample_setScope";
function AlembicGeometryScope AlembicOColorhGeomParamSample.getScope() = "AlembicOColorhGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIColorhGeomParam {
  Data handle;
};

function AlembicIColorhGeomParam() = "AlembicIColorhGeomParam_construct";
function ~AlembicIColorhGeomParam() = "AlembicIColorhGeomParam_free";
function Boolean AlembicIColorhGeomParam.valid() = "AlembicIColorhGeomParam_valid";
function AlembicIColorhGeomParam.reset!() = "AlembicIColorhGeomParam_free";

function AlembicIColorhGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIColorhGeomParam_construct2Args";

function Boolean AlembicIColorhGeomParam.matches(AlembicPropertyHeader header) = "AlembicIColorhGeomParam_matches";
function AlembicIColorhGeomParamSample AlembicIColorhGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIColorhGeomParam_getIndexed";
function AlembicIColorhGeomParamSample AlembicIColorhGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIColorhGeomParamSample AlembicIColorhGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIColorhGeomParam_getExpanded";
function AlembicIColorhGeomParamSample AlembicIColorhGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIColorhGeomParam.getNumSamples() = "AlembicIColorhGeomParam_getNumSamples";
function AlembicDataType AlembicIColorhGeomParam.getDataType() = "AlembicIColorhGeomParam_getDataType";
function UInt32 AlembicIColorhGeomParam.getArrayExtent() = "AlembicIColorhGeomParam_getArrayExtent";
function Boolean AlembicIColorhGeomParam.isIndexed() = "AlembicIColorhGeomParam_isIndexed";
function AlembicGeometryScope AlembicIColorhGeomParam.getScope() = "AlembicIColorhGeomParam_getScope";
function AlembicTimeSampling AlembicIColorhGeomParam.getTimeSampling() = "AlembicIColorhGeomParam_getTimeSampling";
function String AlembicIColorhGeomParam.getName() = "AlembicIColorhGeomParam_getName";
function AlembicICompoundProperty AlembicIColorhGeomParam.getParent() = "AlembicIColorhGeomParam_getParent";
function Boolean AlembicIColorhGeomParam.isConstant() = "AlembicIColorhGeomParam_isConstant";
function AlembicIArrayProperty AlembicIColorhGeomParam.getValueProperty() = "AlembicIColorhGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIColorhGeomParam.getIndexProperty() = "AlembicIColorhGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOColorhGeomParam {
  Data handle;
};

function AlembicOColorhGeomParam() = "AlembicOColorhGeomParam_construct";
function ~AlembicOColorhGeomParam() = "AlembicOColorhGeomParam_free";
function Boolean AlembicOColorhGeomParam.valid() = "AlembicOColorhGeomParam_valid";
function AlembicOColorhGeomParam.reset!() = "AlembicOColorhGeomParam_free";

function AlembicOColorhGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOColorhGeomParam_construct5Args";

function Boolean AlembicOColorhGeomParam.matches(AlembicPropertyHeader header) = "AlembicOColorhGeomParam_matches";
function AlembicOColorhGeomParam.set!(AlembicOColorhGeomParamSample sample) = "AlembicOColorhGeomParam_set";
function AlembicOColorhGeomParam.setFromPrevious!() = "AlembicOColorhGeomParam_setFromPrevious";
function AlembicOColorhGeomParam.setTimeSampling!(UInt32 index) = "AlembicOColorhGeomParam_setTimeSampling";
function UInt32 AlembicOColorhGeomParam.getNumSamples() = "AlembicOColorhGeomParam_getNumSamples";
function AlembicDataType AlembicOColorhGeomParam.getDataType() = "AlembicOColorhGeomParam_getDataType";
function Boolean AlembicOColorhGeomParam.isIndexed() = "AlembicOColorhGeomParam_isIndexed";
function AlembicGeometryScope AlembicOColorhGeomParam.getScope() = "AlembicOColorhGeomParam_getScope";
function String AlembicOColorhGeomParam.getName() = "AlembicOColorhGeomParam_getName";
function AlembicOArrayProperty AlembicOColorhGeomParam.getValueProperty() = "AlembicOColorhGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOColorhGeomParam.getIndexProperty() = "AlembicOColorhGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIColorfGeomParamSample {
  Data handle;
};

function AlembicIColorfGeomParamSample() = "AlembicIColorfGeomParamSample_construct";
function ~AlembicIColorfGeomParamSample() = "AlembicIColorfGeomParamSample_free";

function Color[] AlembicIColorfGeomParamSample.getVals() = "AlembicIColorfGeomParamSample_getVals";
function UInt32<> AlembicIColorfGeomParamSample.getIndices() = "AlembicIColorfGeomParamSample_getIndices";
function AlembicGeometryScope AlembicIColorfGeomParamSample.getScope() = "AlembicIColorfGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOColorfGeomParamSample {
  Data handle;
};

function AlembicOColorfGeomParamSample() = "AlembicOColorfGeomParamSample_construct";
function ~AlembicOColorfGeomParamSample() = "AlembicOColorfGeomParamSample_free";

function AlembicOColorfGeomParamSample(Color values<>, AlembicGeometryScope scope) = "AlembicOColorfGeomParamSample_constructFromValuesAndScope";
function AlembicOColorfGeomParamSample(Color values<>, UInt32 indices<>, AlembicGeometryScope scope) = "AlembicOColorfGeomParamSample_constructFromValuesIndicesAndScope";

function AlembicOColorfGeomParamSample.setVals!(Color values<>) = "AlembicOColorfGeomParamSample_setVals";
function Color[] AlembicOColorfGeomParamSample.getVals() = "AlembicOColorfGeomParamSample_getVals";
function AlembicOColorfGeomParamSample.setIndices!(UInt32 indices<>) = "AlembicOColorfGeomParamSample_setIndices";
function UInt32<> AlembicOColorfGeomParamSample.getIndices() = "AlembicOColorfGeomParamSample_getIndices";
function AlembicOColorfGeomParamSample.setScope!(AlembicGeometryScope scope) = "AlembicOColorfGeomParamSample_setScope";
function AlembicGeometryScope AlembicOColorfGeomParamSample.getScope() = "AlembicOColorfGeomParamSample_getScope";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicIColorfGeomParam {
  Data handle;
};

function AlembicIColorfGeomParam() = "AlembicIColorfGeomParam_construct";
function ~AlembicIColorfGeomParam() = "AlembicIColorfGeomParam_free";
function Boolean AlembicIColorfGeomParam.valid() = "AlembicIColorfGeomParam_valid";
function AlembicIColorfGeomParam.reset!() = "AlembicIColorfGeomParam_free";

function AlembicIColorfGeomParam(AlembicICompoundProperty parent, String name) = "AlembicIColorfGeomParam_construct2Args";

function Boolean AlembicIColorfGeomParam.matches(AlembicPropertyHeader header) = "AlembicIColorfGeomParam_matches";
function AlembicIColorfGeomParamSample AlembicIColorfGeomParam.getIndexed(AlembicISampleSelector ss) = "AlembicIColorfGeomParam_getIndexed";
function AlembicIColorfGeomParamSample AlembicIColorfGeomParam.getIndexed() { return this.getIndexed(AlembicISampleSelector(0)); }
function AlembicIColorfGeomParamSample AlembicIColorfGeomParam.getExpanded(AlembicISampleSelector ss) = "AlembicIColorfGeomParam_getExpanded";
function AlembicIColorfGeomParamSample AlembicIColorfGeomParam.getExpanded() { return this.getExpanded(AlembicISampleSelector(0)); }
function UInt32 AlembicIColorfGeomParam.getNumSamples() = "AlembicIColorfGeomParam_getNumSamples";
function AlembicDataType AlembicIColorfGeomParam.getDataType() = "AlembicIColorfGeomParam_getDataType";
function UInt32 AlembicIColorfGeomParam.getArrayExtent() = "AlembicIColorfGeomParam_getArrayExtent";
function Boolean AlembicIColorfGeomParam.isIndexed() = "AlembicIColorfGeomParam_isIndexed";
function AlembicGeometryScope AlembicIColorfGeomParam.getScope() = "AlembicIColorfGeomParam_getScope";
function AlembicTimeSampling AlembicIColorfGeomParam.getTimeSampling() = "AlembicIColorfGeomParam_getTimeSampling";
function String AlembicIColorfGeomParam.getName() = "AlembicIColorfGeomParam_getName";
function AlembicICompoundProperty AlembicIColorfGeomParam.getParent() = "AlembicIColorfGeomParam_getParent";
function Boolean AlembicIColorfGeomParam.isConstant() = "AlembicIColorfGeomParam_isConstant";
function AlembicIArrayProperty AlembicIColorfGeomParam.getValueProperty() = "AlembicIColorfGeomParam_getValueProperty";
function AlembicIArrayProperty AlembicIColorfGeomParam.getIndexProperty() = "AlembicIColorfGeomParam_getIndexProperty";
/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

object AlembicOColorfGeomParam {
  Data handle;
};

function AlembicOColorfGeomParam() = "AlembicOColorfGeomParam_construct";
function ~AlembicOColorfGeomParam() = "AlembicOColorfGeomParam_free";
function Boolean AlembicOColorfGeomParam.valid() = "AlembicOColorfGeomParam_valid";
function AlembicOColorfGeomParam.reset!() = "AlembicOColorfGeomParam_free";

function AlembicOColorfGeomParam(AlembicOCompoundProperty parent, String name, Boolean isIndexed, AlembicGeometryScope scope, UInt32 extent) = "AlembicOColorfGeomParam_construct5Args";

function Boolean AlembicOColorfGeomParam.matches(AlembicPropertyHeader header) = "AlembicOColorfGeomParam_matches";
function AlembicOColorfGeomParam.set!(AlembicOColorfGeomParamSample sample) = "AlembicOColorfGeomParam_set";
function AlembicOColorfGeomParam.setFromPrevious!() = "AlembicOColorfGeomParam_setFromPrevious";
function AlembicOColorfGeomParam.setTimeSampling!(UInt32 index) = "AlembicOColorfGeomParam_setTimeSampling";
function UInt32 AlembicOColorfGeomParam.getNumSamples() = "AlembicOColorfGeomParam_getNumSamples";
function AlembicDataType AlembicOColorfGeomParam.getDataType() = "AlembicOColorfGeomParam_getDataType";
function Boolean AlembicOColorfGeomParam.isIndexed() = "AlembicOColorfGeomParam_isIndexed";
function AlembicGeometryScope AlembicOColorfGeomParam.getScope() = "AlembicOColorfGeomParam_getScope";
function String AlembicOColorfGeomParam.getName() = "AlembicOColorfGeomParam_getName";
function AlembicOArrayProperty AlembicOColorfGeomParam.getValueProperty() = "AlembicOColorfGeomParam_getValueProperty";
function AlembicOArrayProperty AlembicOColorfGeomParam.getIndexProperty() = "AlembicOColorfGeomParam_getIndexProperty";
