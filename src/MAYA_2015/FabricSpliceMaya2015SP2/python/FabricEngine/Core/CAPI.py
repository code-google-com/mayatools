# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CAPI', [dirname(__file__)])
        except ImportError:
            import _CAPI
            return _CAPI
        if fp is not None:
            try:
                _mod = imp.load_module('_CAPI', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CAPI = swig_import_helper()
    del swig_import_helper
else:
    import _CAPI
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import Util

def _wrapSceneGraphObject(fabricClient, obj):
  obj._fc = fabricClient

  if 'getName' in dir(obj) and obj.isValid():
    name = obj.getName()
    if name not in obj._fc.userData:
      obj._fc.userData[name] = {}

  return obj


def FEC_Initialize():
  return _CAPI.FEC_Initialize()
FEC_Initialize = _CAPI.FEC_Initialize

def FEC_Finalize():
  return _CAPI.FEC_Finalize()
FEC_Finalize = _CAPI.FEC_Finalize

def FEC_EnableDebug(*args):
  return _CAPI.FEC_EnableDebug(*args)
FEC_EnableDebug = _CAPI.FEC_EnableDebug

def FEC_RefRetain(*args):
  return _CAPI.FEC_RefRetain(*args)
FEC_RefRetain = _CAPI.FEC_RefRetain

def FEC_RefRelease(*args):
  return _CAPI.FEC_RefRelease(*args)
FEC_RefRelease = _CAPI.FEC_RefRelease

def FEC_RefIsNull(*args):
  return _CAPI.FEC_RefIsNull(*args)
FEC_RefIsNull = _CAPI.FEC_RefIsNull
FEC_VARIANT_SIZE = _CAPI.FEC_VARIANT_SIZE
FEC_VARIANT_DICT_ITER_SIZE = _CAPI.FEC_VARIANT_DICT_ITER_SIZE
class FEC_Variant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEC_Variant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FEC_Variant, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_opaque_"] = _CAPI.FEC_Variant__opaque__set
    __swig_getmethods__["_opaque_"] = _CAPI.FEC_Variant__opaque__get
    if _newclass:_opaque_ = _swig_property(_CAPI.FEC_Variant__opaque__get, _CAPI.FEC_Variant__opaque__set)
    def __init__(self): 
        this = _CAPI.new_FEC_Variant()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CAPI.delete_FEC_Variant
    __del__ = lambda self : None;
FEC_Variant_swigregister = _CAPI.FEC_Variant_swigregister
FEC_Variant_swigregister(FEC_Variant)

class FEC_VariantDictIter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEC_VariantDictIter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FEC_VariantDictIter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_opaque_"] = _CAPI.FEC_VariantDictIter__opaque__set
    __swig_getmethods__["_opaque_"] = _CAPI.FEC_VariantDictIter__opaque__get
    if _newclass:_opaque_ = _swig_property(_CAPI.FEC_VariantDictIter__opaque__get, _CAPI.FEC_VariantDictIter__opaque__set)
    def __init__(self): 
        this = _CAPI.new_FEC_VariantDictIter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CAPI.delete_FEC_VariantDictIter
    __del__ = lambda self : None;
FEC_VariantDictIter_swigregister = _CAPI.FEC_VariantDictIter_swigregister
FEC_VariantDictIter_swigregister(FEC_VariantDictIter)


def FEC_GetLastExceptionCString():
  return _CAPI.FEC_GetLastExceptionCString()
FEC_GetLastExceptionCString = _CAPI.FEC_GetLastExceptionCString

def FEC_GetLastExceptionLength():
  return _CAPI.FEC_GetLastExceptionLength()
FEC_GetLastExceptionLength = _CAPI.FEC_GetLastExceptionLength

def FEC_ClearLastException():
  return _CAPI.FEC_ClearLastException()
FEC_ClearLastException = _CAPI.FEC_ClearLastException

def FEC_AllocVariants(*args):
  return _CAPI.FEC_AllocVariants(*args)
FEC_AllocVariants = _CAPI.FEC_AllocVariants
FEC_VT_NULL = _CAPI.FEC_VT_NULL
FEC_VT_BOOLEAN = _CAPI.FEC_VT_BOOLEAN
FEC_VT_UINT8 = _CAPI.FEC_VT_UINT8
FEC_VT_SINT8 = _CAPI.FEC_VT_SINT8
FEC_VT_UINT16 = _CAPI.FEC_VT_UINT16
FEC_VT_SINT16 = _CAPI.FEC_VT_SINT16
FEC_VT_UINT32 = _CAPI.FEC_VT_UINT32
FEC_VT_SINT32 = _CAPI.FEC_VT_SINT32
FEC_VT_UINT64 = _CAPI.FEC_VT_UINT64
FEC_VT_SINT64 = _CAPI.FEC_VT_SINT64
FEC_VT_FLOAT32 = _CAPI.FEC_VT_FLOAT32
FEC_VT_FLOAT64 = _CAPI.FEC_VT_FLOAT64
FEC_VT_STRING = _CAPI.FEC_VT_STRING
FEC_VT_ARRAY = _CAPI.FEC_VT_ARRAY
FEC_VT_DICT = _CAPI.FEC_VT_DICT

def FEC_VariantGetType(*args):
  return _CAPI.FEC_VariantGetType(*args)
FEC_VariantGetType = _CAPI.FEC_VariantGetType

def FEC_VariantInitCopy(*args):
  return _CAPI.FEC_VariantInitCopy(*args)
FEC_VariantInitCopy = _CAPI.FEC_VariantInitCopy

def FEC_VariantSetCopy(*args):
  return _CAPI.FEC_VariantSetCopy(*args)
FEC_VariantSetCopy = _CAPI.FEC_VariantSetCopy

def FEC_VariantInitTake(*args):
  return _CAPI.FEC_VariantInitTake(*args)
FEC_VariantInitTake = _CAPI.FEC_VariantInitTake

def FEC_VariantSetTake(*args):
  return _CAPI.FEC_VariantSetTake(*args)
FEC_VariantSetTake = _CAPI.FEC_VariantSetTake

def FEC_VariantInitNull(*args):
  return _CAPI.FEC_VariantInitNull(*args)
FEC_VariantInitNull = _CAPI.FEC_VariantInitNull

def FEC_VariantIsNull(*args):
  return _CAPI.FEC_VariantIsNull(*args)
FEC_VariantIsNull = _CAPI.FEC_VariantIsNull

def FEC_VariantInitBoolean(*args):
  return _CAPI.FEC_VariantInitBoolean(*args)
FEC_VariantInitBoolean = _CAPI.FEC_VariantInitBoolean

def FEC_VariantIsBoolean(*args):
  return _CAPI.FEC_VariantIsBoolean(*args)
FEC_VariantIsBoolean = _CAPI.FEC_VariantIsBoolean

def FEC_VariantGetBoolean(*args):
  return _CAPI.FEC_VariantGetBoolean(*args)
FEC_VariantGetBoolean = _CAPI.FEC_VariantGetBoolean

def FEC_VariantSetBoolean(*args):
  return _CAPI.FEC_VariantSetBoolean(*args)
FEC_VariantSetBoolean = _CAPI.FEC_VariantSetBoolean

def FEC_VariantInitUInt8(*args):
  return _CAPI.FEC_VariantInitUInt8(*args)
FEC_VariantInitUInt8 = _CAPI.FEC_VariantInitUInt8

def FEC_VariantIsUInt8(*args):
  return _CAPI.FEC_VariantIsUInt8(*args)
FEC_VariantIsUInt8 = _CAPI.FEC_VariantIsUInt8

def FEC_VariantGetUInt8(*args):
  return _CAPI.FEC_VariantGetUInt8(*args)
FEC_VariantGetUInt8 = _CAPI.FEC_VariantGetUInt8

def FEC_VariantSetUInt8(*args):
  return _CAPI.FEC_VariantSetUInt8(*args)
FEC_VariantSetUInt8 = _CAPI.FEC_VariantSetUInt8

def FEC_VariantInitSInt8(*args):
  return _CAPI.FEC_VariantInitSInt8(*args)
FEC_VariantInitSInt8 = _CAPI.FEC_VariantInitSInt8

def FEC_VariantIsSInt8(*args):
  return _CAPI.FEC_VariantIsSInt8(*args)
FEC_VariantIsSInt8 = _CAPI.FEC_VariantIsSInt8

def FEC_VariantGetSInt8(*args):
  return _CAPI.FEC_VariantGetSInt8(*args)
FEC_VariantGetSInt8 = _CAPI.FEC_VariantGetSInt8

def FEC_VariantSetSInt8(*args):
  return _CAPI.FEC_VariantSetSInt8(*args)
FEC_VariantSetSInt8 = _CAPI.FEC_VariantSetSInt8

def FEC_VariantInitUInt16(*args):
  return _CAPI.FEC_VariantInitUInt16(*args)
FEC_VariantInitUInt16 = _CAPI.FEC_VariantInitUInt16

def FEC_VariantIsUInt16(*args):
  return _CAPI.FEC_VariantIsUInt16(*args)
FEC_VariantIsUInt16 = _CAPI.FEC_VariantIsUInt16

def FEC_VariantGetUInt16(*args):
  return _CAPI.FEC_VariantGetUInt16(*args)
FEC_VariantGetUInt16 = _CAPI.FEC_VariantGetUInt16

def FEC_VariantSetUInt16(*args):
  return _CAPI.FEC_VariantSetUInt16(*args)
FEC_VariantSetUInt16 = _CAPI.FEC_VariantSetUInt16

def FEC_VariantInitSInt16(*args):
  return _CAPI.FEC_VariantInitSInt16(*args)
FEC_VariantInitSInt16 = _CAPI.FEC_VariantInitSInt16

def FEC_VariantIsSInt16(*args):
  return _CAPI.FEC_VariantIsSInt16(*args)
FEC_VariantIsSInt16 = _CAPI.FEC_VariantIsSInt16

def FEC_VariantGetSInt16(*args):
  return _CAPI.FEC_VariantGetSInt16(*args)
FEC_VariantGetSInt16 = _CAPI.FEC_VariantGetSInt16

def FEC_VariantSetSInt16(*args):
  return _CAPI.FEC_VariantSetSInt16(*args)
FEC_VariantSetSInt16 = _CAPI.FEC_VariantSetSInt16

def FEC_VariantInitUInt32(*args):
  return _CAPI.FEC_VariantInitUInt32(*args)
FEC_VariantInitUInt32 = _CAPI.FEC_VariantInitUInt32

def FEC_VariantIsUInt32(*args):
  return _CAPI.FEC_VariantIsUInt32(*args)
FEC_VariantIsUInt32 = _CAPI.FEC_VariantIsUInt32

def FEC_VariantGetUInt32(*args):
  return _CAPI.FEC_VariantGetUInt32(*args)
FEC_VariantGetUInt32 = _CAPI.FEC_VariantGetUInt32

def FEC_VariantSetUInt32(*args):
  return _CAPI.FEC_VariantSetUInt32(*args)
FEC_VariantSetUInt32 = _CAPI.FEC_VariantSetUInt32

def FEC_VariantInitSInt32(*args):
  return _CAPI.FEC_VariantInitSInt32(*args)
FEC_VariantInitSInt32 = _CAPI.FEC_VariantInitSInt32

def FEC_VariantIsSInt32(*args):
  return _CAPI.FEC_VariantIsSInt32(*args)
FEC_VariantIsSInt32 = _CAPI.FEC_VariantIsSInt32

def FEC_VariantGetSInt32(*args):
  return _CAPI.FEC_VariantGetSInt32(*args)
FEC_VariantGetSInt32 = _CAPI.FEC_VariantGetSInt32

def FEC_VariantSetSInt32(*args):
  return _CAPI.FEC_VariantSetSInt32(*args)
FEC_VariantSetSInt32 = _CAPI.FEC_VariantSetSInt32

def FEC_VariantInitUInt64(*args):
  return _CAPI.FEC_VariantInitUInt64(*args)
FEC_VariantInitUInt64 = _CAPI.FEC_VariantInitUInt64

def FEC_VariantIsUInt64(*args):
  return _CAPI.FEC_VariantIsUInt64(*args)
FEC_VariantIsUInt64 = _CAPI.FEC_VariantIsUInt64

def FEC_VariantGetUInt64(*args):
  return _CAPI.FEC_VariantGetUInt64(*args)
FEC_VariantGetUInt64 = _CAPI.FEC_VariantGetUInt64

def FEC_VariantSetUInt64(*args):
  return _CAPI.FEC_VariantSetUInt64(*args)
FEC_VariantSetUInt64 = _CAPI.FEC_VariantSetUInt64

def FEC_VariantInitSInt64(*args):
  return _CAPI.FEC_VariantInitSInt64(*args)
FEC_VariantInitSInt64 = _CAPI.FEC_VariantInitSInt64

def FEC_VariantIsSInt64(*args):
  return _CAPI.FEC_VariantIsSInt64(*args)
FEC_VariantIsSInt64 = _CAPI.FEC_VariantIsSInt64

def FEC_VariantGetSInt64(*args):
  return _CAPI.FEC_VariantGetSInt64(*args)
FEC_VariantGetSInt64 = _CAPI.FEC_VariantGetSInt64

def FEC_VariantSetSInt64(*args):
  return _CAPI.FEC_VariantSetSInt64(*args)
FEC_VariantSetSInt64 = _CAPI.FEC_VariantSetSInt64

def FEC_VariantInitFloat32(*args):
  return _CAPI.FEC_VariantInitFloat32(*args)
FEC_VariantInitFloat32 = _CAPI.FEC_VariantInitFloat32

def FEC_VariantIsFloat32(*args):
  return _CAPI.FEC_VariantIsFloat32(*args)
FEC_VariantIsFloat32 = _CAPI.FEC_VariantIsFloat32

def FEC_VariantGetFloat32(*args):
  return _CAPI.FEC_VariantGetFloat32(*args)
FEC_VariantGetFloat32 = _CAPI.FEC_VariantGetFloat32

def FEC_VariantSetFloat32(*args):
  return _CAPI.FEC_VariantSetFloat32(*args)
FEC_VariantSetFloat32 = _CAPI.FEC_VariantSetFloat32

def FEC_VariantInitFloat64(*args):
  return _CAPI.FEC_VariantInitFloat64(*args)
FEC_VariantInitFloat64 = _CAPI.FEC_VariantInitFloat64

def FEC_VariantIsFloat64(*args):
  return _CAPI.FEC_VariantIsFloat64(*args)
FEC_VariantIsFloat64 = _CAPI.FEC_VariantIsFloat64

def FEC_VariantGetFloat64(*args):
  return _CAPI.FEC_VariantGetFloat64(*args)
FEC_VariantGetFloat64 = _CAPI.FEC_VariantGetFloat64

def FEC_VariantSetFloat64(*args):
  return _CAPI.FEC_VariantSetFloat64(*args)
FEC_VariantSetFloat64 = _CAPI.FEC_VariantSetFloat64

def FEC_VariantIsString(*args):
  return _CAPI.FEC_VariantIsString(*args)
FEC_VariantIsString = _CAPI.FEC_VariantIsString

def FEC_VariantInitStringEmpty(*args):
  return _CAPI.FEC_VariantInitStringEmpty(*args)
FEC_VariantInitStringEmpty = _CAPI.FEC_VariantInitStringEmpty

def FEC_VariantInitStringCopy(*args):
  return _CAPI.FEC_VariantInitStringCopy(*args)
FEC_VariantInitStringCopy = _CAPI.FEC_VariantInitStringCopy

def FEC_VariantInitStringCopy_cstr(*args):
  return _CAPI.FEC_VariantInitStringCopy_cstr(*args)
FEC_VariantInitStringCopy_cstr = _CAPI.FEC_VariantInitStringCopy_cstr

def FEC_VariantInitStringTake(*args):
  return _CAPI.FEC_VariantInitStringTake(*args)
FEC_VariantInitStringTake = _CAPI.FEC_VariantInitStringTake

def FEC_VariantInitStringTake_cstr(*args):
  return _CAPI.FEC_VariantInitStringTake_cstr(*args)
FEC_VariantInitStringTake_cstr = _CAPI.FEC_VariantInitStringTake_cstr

def FEC_VariantGetStringData(*args):
  return _CAPI.FEC_VariantGetStringData(*args)
FEC_VariantGetStringData = _CAPI.FEC_VariantGetStringData

def FEC_VariantGetStringLength(*args):
  return _CAPI.FEC_VariantGetStringLength(*args)
FEC_VariantGetStringLength = _CAPI.FEC_VariantGetStringLength

def FEC_VariantGetString_cstr(*args):
  return _CAPI.FEC_VariantGetString_cstr(*args)
FEC_VariantGetString_cstr = _CAPI.FEC_VariantGetString_cstr

def FEC_VariantSetStringCopy(*args):
  return _CAPI.FEC_VariantSetStringCopy(*args)
FEC_VariantSetStringCopy = _CAPI.FEC_VariantSetStringCopy

def FEC_VariantSetStringCopy_cstr(*args):
  return _CAPI.FEC_VariantSetStringCopy_cstr(*args)
FEC_VariantSetStringCopy_cstr = _CAPI.FEC_VariantSetStringCopy_cstr

def FEC_VariantSetStringTake(*args):
  return _CAPI.FEC_VariantSetStringTake(*args)
FEC_VariantSetStringTake = _CAPI.FEC_VariantSetStringTake

def FEC_VariantSetStringTake_cstr(*args):
  return _CAPI.FEC_VariantSetStringTake_cstr(*args)
FEC_VariantSetStringTake_cstr = _CAPI.FEC_VariantSetStringTake_cstr

def FEC_VariantIsArray(*args):
  return _CAPI.FEC_VariantIsArray(*args)
FEC_VariantIsArray = _CAPI.FEC_VariantIsArray

def FEC_VariantInitArrayEmpty(*args):
  return _CAPI.FEC_VariantInitArrayEmpty(*args)
FEC_VariantInitArrayEmpty = _CAPI.FEC_VariantInitArrayEmpty

def FEC_VariantInitArrayEmptyWithSize(*args):
  return _CAPI.FEC_VariantInitArrayEmptyWithSize(*args)
FEC_VariantInitArrayEmptyWithSize = _CAPI.FEC_VariantInitArrayEmptyWithSize

def FEC_VariantInitArrayCopy(*args):
  return _CAPI.FEC_VariantInitArrayCopy(*args)
FEC_VariantInitArrayCopy = _CAPI.FEC_VariantInitArrayCopy

def FEC_VariantInitArrayTake(*args):
  return _CAPI.FEC_VariantInitArrayTake(*args)
FEC_VariantInitArrayTake = _CAPI.FEC_VariantInitArrayTake

def FEC_VariantGetArraySize(*args):
  return _CAPI.FEC_VariantGetArraySize(*args)
FEC_VariantGetArraySize = _CAPI.FEC_VariantGetArraySize

def FEC_VariantGetArrayElement(*args):
  return _CAPI.FEC_VariantGetArrayElement(*args)
FEC_VariantGetArrayElement = _CAPI.FEC_VariantGetArrayElement

def FEC_VariantArrayAppendCopy(*args):
  return _CAPI.FEC_VariantArrayAppendCopy(*args)
FEC_VariantArrayAppendCopy = _CAPI.FEC_VariantArrayAppendCopy

def FEC_VariantArrayAppendTake(*args):
  return _CAPI.FEC_VariantArrayAppendTake(*args)
FEC_VariantArrayAppendTake = _CAPI.FEC_VariantArrayAppendTake

def FEC_VariantSetArrayElementCopy(*args):
  return _CAPI.FEC_VariantSetArrayElementCopy(*args)
FEC_VariantSetArrayElementCopy = _CAPI.FEC_VariantSetArrayElementCopy

def FEC_VariantSetArrayElementTake(*args):
  return _CAPI.FEC_VariantSetArrayElementTake(*args)
FEC_VariantSetArrayElementTake = _CAPI.FEC_VariantSetArrayElementTake

def FEC_VariantIsDict(*args):
  return _CAPI.FEC_VariantIsDict(*args)
FEC_VariantIsDict = _CAPI.FEC_VariantIsDict

def FEC_VariantInitDictEmpty(*args):
  return _CAPI.FEC_VariantInitDictEmpty(*args)
FEC_VariantInitDictEmpty = _CAPI.FEC_VariantInitDictEmpty

def FEC_VariantGetDictKeyValue(*args):
  return _CAPI.FEC_VariantGetDictKeyValue(*args)
FEC_VariantGetDictKeyValue = _CAPI.FEC_VariantGetDictKeyValue

def FEC_VariantGetDictKeyValue_str(*args):
  return _CAPI.FEC_VariantGetDictKeyValue_str(*args)
FEC_VariantGetDictKeyValue_str = _CAPI.FEC_VariantGetDictKeyValue_str

def FEC_VariantGetDictKeyValue_cstr(*args):
  return _CAPI.FEC_VariantGetDictKeyValue_cstr(*args)
FEC_VariantGetDictKeyValue_cstr = _CAPI.FEC_VariantGetDictKeyValue_cstr

def FEC_VariantSetDictKeyCopyValueCopy(*args):
  return _CAPI.FEC_VariantSetDictKeyCopyValueCopy(*args)
FEC_VariantSetDictKeyCopyValueCopy = _CAPI.FEC_VariantSetDictKeyCopyValueCopy

def FEC_VariantSetDictKeyTakeValueCopy(*args):
  return _CAPI.FEC_VariantSetDictKeyTakeValueCopy(*args)
FEC_VariantSetDictKeyTakeValueCopy = _CAPI.FEC_VariantSetDictKeyTakeValueCopy

def FEC_VariantSetDictKeyTakeValueTake(*args):
  return _CAPI.FEC_VariantSetDictKeyTakeValueTake(*args)
FEC_VariantSetDictKeyTakeValueTake = _CAPI.FEC_VariantSetDictKeyTakeValueTake

def FEC_VariantDictIterInit(*args):
  return _CAPI.FEC_VariantDictIterInit(*args)
FEC_VariantDictIterInit = _CAPI.FEC_VariantDictIterInit

def FEC_VariantDictIterIsDone(*args):
  return _CAPI.FEC_VariantDictIterIsDone(*args)
FEC_VariantDictIterIsDone = _CAPI.FEC_VariantDictIterIsDone

def FEC_VariantDictIterGetKey(*args):
  return _CAPI.FEC_VariantDictIterGetKey(*args)
FEC_VariantDictIterGetKey = _CAPI.FEC_VariantDictIterGetKey

def FEC_VariantDictIterGetValue(*args):
  return _CAPI.FEC_VariantDictIterGetValue(*args)
FEC_VariantDictIterGetValue = _CAPI.FEC_VariantDictIterGetValue

def FEC_VariantDictIterNext(*args):
  return _CAPI.FEC_VariantDictIterNext(*args)
FEC_VariantDictIterNext = _CAPI.FEC_VariantDictIterNext

def FEC_VariantDictIterDispose(*args):
  return _CAPI.FEC_VariantDictIterDispose(*args)
FEC_VariantDictIterDispose = _CAPI.FEC_VariantDictIterDispose

def FEC_VariantInitWithVariantDesc(*args):
  return _CAPI.FEC_VariantInitWithVariantDesc(*args)
FEC_VariantInitWithVariantDesc = _CAPI.FEC_VariantInitWithVariantDesc

def FEC_VariantInitFromJSON(*args):
  return _CAPI.FEC_VariantInitFromJSON(*args)
FEC_VariantInitFromJSON = _CAPI.FEC_VariantInitFromJSON

def FEC_VariantInitWithVariantJSONEncoding(*args):
  return _CAPI.FEC_VariantInitWithVariantJSONEncoding(*args)
FEC_VariantInitWithVariantJSONEncoding = _CAPI.FEC_VariantInitWithVariantJSONEncoding

def FEC_VariantDispose(*args):
  return _CAPI.FEC_VariantDispose(*args)
FEC_VariantDispose = _CAPI.FEC_VariantDispose

def FEC_KLTool(*args):
  return _CAPI.FEC_KLTool(*args)
FEC_KLTool = _CAPI.FEC_KLTool

def FEC_KL2EDK(*args):
  return _CAPI.FEC_KL2EDK(*args)
FEC_KL2EDK = _CAPI.FEC_KL2EDK
FEC_ClientOptimizationType_Background = _CAPI.FEC_ClientOptimizationType_Background
FEC_ClientOptimizationType_Synchronous = _CAPI.FEC_ClientOptimizationType_Synchronous
FEC_ClientOptimizationType_None = _CAPI.FEC_ClientOptimizationType_None
class FEC_ClientCreateOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEC_ClientCreateOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FEC_ClientCreateOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["guarded"] = _CAPI.FEC_ClientCreateOptions_guarded_set
    __swig_getmethods__["guarded"] = _CAPI.FEC_ClientCreateOptions_guarded_get
    if _newclass:guarded = _swig_property(_CAPI.FEC_ClientCreateOptions_guarded_get, _CAPI.FEC_ClientCreateOptions_guarded_set)
    __swig_setmethods__["traceOperators"] = _CAPI.FEC_ClientCreateOptions_traceOperators_set
    __swig_getmethods__["traceOperators"] = _CAPI.FEC_ClientCreateOptions_traceOperators_get
    if _newclass:traceOperators = _swig_property(_CAPI.FEC_ClientCreateOptions_traceOperators_get, _CAPI.FEC_ClientCreateOptions_traceOperators_set)
    __swig_setmethods__["optimizationType"] = _CAPI.FEC_ClientCreateOptions_optimizationType_set
    __swig_getmethods__["optimizationType"] = _CAPI.FEC_ClientCreateOptions_optimizationType_get
    if _newclass:optimizationType = _swig_property(_CAPI.FEC_ClientCreateOptions_optimizationType_get, _CAPI.FEC_ClientCreateOptions_optimizationType_set)
    __swig_setmethods__["numExtPaths"] = _CAPI.FEC_ClientCreateOptions_numExtPaths_set
    __swig_getmethods__["numExtPaths"] = _CAPI.FEC_ClientCreateOptions_numExtPaths_get
    if _newclass:numExtPaths = _swig_property(_CAPI.FEC_ClientCreateOptions_numExtPaths_get, _CAPI.FEC_ClientCreateOptions_numExtPaths_set)
    __swig_setmethods__["extPaths"] = _CAPI.FEC_ClientCreateOptions_extPaths_set
    __swig_getmethods__["extPaths"] = _CAPI.FEC_ClientCreateOptions_extPaths_get
    if _newclass:extPaths = _swig_property(_CAPI.FEC_ClientCreateOptions_extPaths_get, _CAPI.FEC_ClientCreateOptions_extPaths_set)
    __swig_setmethods__["numExtsToLoad"] = _CAPI.FEC_ClientCreateOptions_numExtsToLoad_set
    __swig_getmethods__["numExtsToLoad"] = _CAPI.FEC_ClientCreateOptions_numExtsToLoad_get
    if _newclass:numExtsToLoad = _swig_property(_CAPI.FEC_ClientCreateOptions_numExtsToLoad_get, _CAPI.FEC_ClientCreateOptions_numExtsToLoad_set)
    __swig_setmethods__["extsToLoad"] = _CAPI.FEC_ClientCreateOptions_extsToLoad_set
    __swig_getmethods__["extsToLoad"] = _CAPI.FEC_ClientCreateOptions_extsToLoad_get
    if _newclass:extsToLoad = _swig_property(_CAPI.FEC_ClientCreateOptions_extsToLoad_get, _CAPI.FEC_ClientCreateOptions_extsToLoad_set)
    def __init__(self): 
        this = _CAPI.new_FEC_ClientCreateOptions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CAPI.delete_FEC_ClientCreateOptions
    __del__ = lambda self : None;
FEC_ClientCreateOptions_swigregister = _CAPI.FEC_ClientCreateOptions_swigregister
FEC_ClientCreateOptions_swigregister(FEC_ClientCreateOptions)


def FEC_ClientCreate(*args):
  return _CAPI.FEC_ClientCreate(*args)
FEC_ClientCreate = _CAPI.FEC_ClientCreate

def FEC_ClientBind(*args):
  return _CAPI.FEC_ClientBind(*args)
FEC_ClientBind = _CAPI.FEC_ClientBind

def FEC_ClientSetReportCallback(*args):
  return _CAPI.FEC_ClientSetReportCallback(*args)
FEC_ClientSetReportCallback = _CAPI.FEC_ClientSetReportCallback

def FEC_ClientEnableRuntimeLogging(*args):
  return _CAPI.FEC_ClientEnableRuntimeLogging(*args)
FEC_ClientEnableRuntimeLogging = _CAPI.FEC_ClientEnableRuntimeLogging

def FEC_ClientDisableRuntimeLogging(*args):
  return _CAPI.FEC_ClientDisableRuntimeLogging(*args)
FEC_ClientDisableRuntimeLogging = _CAPI.FEC_ClientDisableRuntimeLogging

def FEC_ClientEnableSimpleStackTracing(*args):
  return _CAPI.FEC_ClientEnableSimpleStackTracing(*args)
FEC_ClientEnableSimpleStackTracing = _CAPI.FEC_ClientEnableSimpleStackTracing

def FEC_ClientGetContextID(*args):
  return _CAPI.FEC_ClientGetContextID(*args)
FEC_ClientGetContextID = _CAPI.FEC_ClientGetContextID

def FEC_ClientGetMemoryUsage_Variant(*args):
  return _CAPI.FEC_ClientGetMemoryUsage_Variant(*args)
FEC_ClientGetMemoryUsage_Variant = _CAPI.FEC_ClientGetMemoryUsage_Variant

def FEC_ClientStartInstrumentation(*args):
  return _CAPI.FEC_ClientStartInstrumentation(*args)
FEC_ClientStartInstrumentation = _CAPI.FEC_ClientStartInstrumentation

def FEC_ClientStopInstrumentation_Variant(*args):
  return _CAPI.FEC_ClientStopInstrumentation_Variant(*args)
FEC_ClientStopInstrumentation_Variant = _CAPI.FEC_ClientStopInstrumentation_Variant

def FEC_ClientLoadExtension(*args):
  return _CAPI.FEC_ClientLoadExtension(*args)
FEC_ClientLoadExtension = _CAPI.FEC_ClientLoadExtension

def FEC_ClientSetLogWarnings(*args):
  return _CAPI.FEC_ClientSetLogWarnings(*args)
FEC_ClientSetLogWarnings = _CAPI.FEC_ClientSetLogWarnings

def FEC_ClientSetStatusCallback(*args):
  return _CAPI.FEC_ClientSetStatusCallback(*args)
FEC_ClientSetStatusCallback = _CAPI.FEC_ClientSetStatusCallback

def FEC_ClientGetStatusUserdata(*args):
  return _CAPI.FEC_ClientGetStatusUserdata(*args)
FEC_ClientGetStatusUserdata = _CAPI.FEC_ClientGetStatusUserdata

def FEC_ClientQueueStatusMessage(*args):
  return _CAPI.FEC_ClientQueueStatusMessage(*args)
FEC_ClientQueueStatusMessage = _CAPI.FEC_ClientQueueStatusMessage

def FEC_ClientIsLicenseValid(*args):
  return _CAPI.FEC_ClientIsLicenseValid(*args)
FEC_ClientIsLicenseValid = _CAPI.FEC_ClientIsLicenseValid

def FEC_ClientValidateLicense(*args):
  return _CAPI.FEC_ClientValidateLicense(*args)
FEC_ClientValidateLicense = _CAPI.FEC_ClientValidateLicense

def FEC_ClientSetLicenseServer(*args):
  return _CAPI.FEC_ClientSetLicenseServer(*args)
FEC_ClientSetLicenseServer = _CAPI.FEC_ClientSetLicenseServer

def FEC_ClientSetStandaloneLicense(*args):
  return _CAPI.FEC_ClientSetStandaloneLicense(*args)
FEC_ClientSetStandaloneLicense = _CAPI.FEC_ClientSetStandaloneLicense

def FEC_ClientEnableBackgroundTasks(*args):
  return _CAPI.FEC_ClientEnableBackgroundTasks(*args)
FEC_ClientEnableBackgroundTasks = _CAPI.FEC_ClientEnableBackgroundTasks

def FEC_ClientIsBackgroundOptimizationInProgress(*args):
  return _CAPI.FEC_ClientIsBackgroundOptimizationInProgress(*args)
FEC_ClientIsBackgroundOptimizationInProgress = _CAPI.FEC_ClientIsBackgroundOptimizationInProgress

def FEC_ClientAdoptCurrentGLContext(*args):
  return _CAPI.FEC_ClientAdoptCurrentGLContext(*args)
FEC_ClientAdoptCurrentGLContext = _CAPI.FEC_ClientAdoptCurrentGLContext

def FEC_ClientIdle(*args):
  return _CAPI.FEC_ClientIdle(*args)
FEC_ClientIdle = _CAPI.FEC_ClientIdle

def FEC_ClientSupportsGPUCompute(*args):
  return _CAPI.FEC_ClientSupportsGPUCompute(*args)
FEC_ClientSupportsGPUCompute = _CAPI.FEC_ClientSupportsGPUCompute

def FEC_ClientGetContext(*args):
  return _CAPI.FEC_ClientGetContext(*args)
FEC_ClientGetContext = _CAPI.FEC_ClientGetContext

def FEC_RTConstructValue(*args):
  return _CAPI.FEC_RTConstructValue(*args)
FEC_RTConstructValue = _CAPI.FEC_RTConstructValue

def FEC_RTConstructValueFromBoolean(*args):
  return _CAPI.FEC_RTConstructValueFromBoolean(*args)
FEC_RTConstructValueFromBoolean = _CAPI.FEC_RTConstructValueFromBoolean

def FEC_RTConstructValueFromSInt8(*args):
  return _CAPI.FEC_RTConstructValueFromSInt8(*args)
FEC_RTConstructValueFromSInt8 = _CAPI.FEC_RTConstructValueFromSInt8

def FEC_RTConstructValueFromSInt16(*args):
  return _CAPI.FEC_RTConstructValueFromSInt16(*args)
FEC_RTConstructValueFromSInt16 = _CAPI.FEC_RTConstructValueFromSInt16

def FEC_RTConstructValueFromSInt32(*args):
  return _CAPI.FEC_RTConstructValueFromSInt32(*args)
FEC_RTConstructValueFromSInt32 = _CAPI.FEC_RTConstructValueFromSInt32

def FEC_RTConstructValueFromSInt64(*args):
  return _CAPI.FEC_RTConstructValueFromSInt64(*args)
FEC_RTConstructValueFromSInt64 = _CAPI.FEC_RTConstructValueFromSInt64

def FEC_RTConstructValueFromUInt8(*args):
  return _CAPI.FEC_RTConstructValueFromUInt8(*args)
FEC_RTConstructValueFromUInt8 = _CAPI.FEC_RTConstructValueFromUInt8

def FEC_RTConstructValueFromUInt16(*args):
  return _CAPI.FEC_RTConstructValueFromUInt16(*args)
FEC_RTConstructValueFromUInt16 = _CAPI.FEC_RTConstructValueFromUInt16

def FEC_RTConstructValueFromUInt32(*args):
  return _CAPI.FEC_RTConstructValueFromUInt32(*args)
FEC_RTConstructValueFromUInt32 = _CAPI.FEC_RTConstructValueFromUInt32

def FEC_RTConstructValueFromUInt64(*args):
  return _CAPI.FEC_RTConstructValueFromUInt64(*args)
FEC_RTConstructValueFromUInt64 = _CAPI.FEC_RTConstructValueFromUInt64

def FEC_RTConstructValueFromFloat32(*args):
  return _CAPI.FEC_RTConstructValueFromFloat32(*args)
FEC_RTConstructValueFromFloat32 = _CAPI.FEC_RTConstructValueFromFloat32

def FEC_RTConstructValueFromFloat64(*args):
  return _CAPI.FEC_RTConstructValueFromFloat64(*args)
FEC_RTConstructValueFromFloat64 = _CAPI.FEC_RTConstructValueFromFloat64

def FEC_RTConstructValueFromData(*args):
  return _CAPI.FEC_RTConstructValueFromData(*args)
FEC_RTConstructValueFromData = _CAPI.FEC_RTConstructValueFromData

def FEC_RTConstructValueFromString(*args):
  return _CAPI.FEC_RTConstructValueFromString(*args)
FEC_RTConstructValueFromString = _CAPI.FEC_RTConstructValueFromString

def FEC_RTConstructValueFromCString(*args):
  return _CAPI.FEC_RTConstructValueFromCString(*args)
FEC_RTConstructValueFromCString = _CAPI.FEC_RTConstructValueFromCString

def FEC_RTConstructFixedArrayValue(*args):
  return _CAPI.FEC_RTConstructFixedArrayValue(*args)
FEC_RTConstructFixedArrayValue = _CAPI.FEC_RTConstructFixedArrayValue

def FEC_RTConstructVariableArrayValue(*args):
  return _CAPI.FEC_RTConstructVariableArrayValue(*args)
FEC_RTConstructVariableArrayValue = _CAPI.FEC_RTConstructVariableArrayValue

def FEC_RTConstructExternalArrayValue(*args):
  return _CAPI.FEC_RTConstructExternalArrayValue(*args)
FEC_RTConstructExternalArrayValue = _CAPI.FEC_RTConstructExternalArrayValue

def FEC_RTConstructDictValue(*args):
  return _CAPI.FEC_RTConstructDictValue(*args)
FEC_RTConstructDictValue = _CAPI.FEC_RTConstructDictValue

def FEC_RTCreateValue(*args):
  return _CAPI.FEC_RTCreateValue(*args)
FEC_RTCreateValue = _CAPI.FEC_RTCreateValue

def FEC_RTValGetBoolean(*args):
  return _CAPI.FEC_RTValGetBoolean(*args)
FEC_RTValGetBoolean = _CAPI.FEC_RTValGetBoolean

def FEC_RTValGetUInt8(*args):
  return _CAPI.FEC_RTValGetUInt8(*args)
FEC_RTValGetUInt8 = _CAPI.FEC_RTValGetUInt8

def FEC_RTValGetUInt16(*args):
  return _CAPI.FEC_RTValGetUInt16(*args)
FEC_RTValGetUInt16 = _CAPI.FEC_RTValGetUInt16

def FEC_RTValGetUInt32(*args):
  return _CAPI.FEC_RTValGetUInt32(*args)
FEC_RTValGetUInt32 = _CAPI.FEC_RTValGetUInt32

def FEC_RTValGetUInt64(*args):
  return _CAPI.FEC_RTValGetUInt64(*args)
FEC_RTValGetUInt64 = _CAPI.FEC_RTValGetUInt64

def FEC_RTValGetSInt8(*args):
  return _CAPI.FEC_RTValGetSInt8(*args)
FEC_RTValGetSInt8 = _CAPI.FEC_RTValGetSInt8

def FEC_RTValGetSInt16(*args):
  return _CAPI.FEC_RTValGetSInt16(*args)
FEC_RTValGetSInt16 = _CAPI.FEC_RTValGetSInt16

def FEC_RTValGetSInt32(*args):
  return _CAPI.FEC_RTValGetSInt32(*args)
FEC_RTValGetSInt32 = _CAPI.FEC_RTValGetSInt32

def FEC_RTValGetSInt64(*args):
  return _CAPI.FEC_RTValGetSInt64(*args)
FEC_RTValGetSInt64 = _CAPI.FEC_RTValGetSInt64

def FEC_RTValGetFloat32(*args):
  return _CAPI.FEC_RTValGetFloat32(*args)
FEC_RTValGetFloat32 = _CAPI.FEC_RTValGetFloat32

def FEC_RTValSetFloat32(*args):
  return _CAPI.FEC_RTValSetFloat32(*args)
FEC_RTValSetFloat32 = _CAPI.FEC_RTValSetFloat32

def FEC_RTValGetFloat64(*args):
  return _CAPI.FEC_RTValGetFloat64(*args)
FEC_RTValGetFloat64 = _CAPI.FEC_RTValGetFloat64

def FEC_RTValGetData(*args):
  return _CAPI.FEC_RTValGetData(*args)
FEC_RTValGetData = _CAPI.FEC_RTValGetData

def FEC_RTValSetData(*args):
  return _CAPI.FEC_RTValSetData(*args)
FEC_RTValSetData = _CAPI.FEC_RTValSetData

def FEC_RTValGetStringCString(*args):
  return _CAPI.FEC_RTValGetStringCString(*args)
FEC_RTValGetStringCString = _CAPI.FEC_RTValGetStringCString

def FEC_RTValGetStringLength(*args):
  return _CAPI.FEC_RTValGetStringLength(*args)
FEC_RTValGetStringLength = _CAPI.FEC_RTValGetStringLength
FEC_RTVAL_SIMPLE_TYPE_BOOLEAN = _CAPI.FEC_RTVAL_SIMPLE_TYPE_BOOLEAN
FEC_RTVAL_SIMPLE_TYPE_UINT8 = _CAPI.FEC_RTVAL_SIMPLE_TYPE_UINT8
FEC_RTVAL_SIMPLE_TYPE_UINT16 = _CAPI.FEC_RTVAL_SIMPLE_TYPE_UINT16
FEC_RTVAL_SIMPLE_TYPE_UINT32 = _CAPI.FEC_RTVAL_SIMPLE_TYPE_UINT32
FEC_RTVAL_SIMPLE_TYPE_UINT64 = _CAPI.FEC_RTVAL_SIMPLE_TYPE_UINT64
FEC_RTVAL_SIMPLE_TYPE_SINT8 = _CAPI.FEC_RTVAL_SIMPLE_TYPE_SINT8
FEC_RTVAL_SIMPLE_TYPE_SINT16 = _CAPI.FEC_RTVAL_SIMPLE_TYPE_SINT16
FEC_RTVAL_SIMPLE_TYPE_SINT32 = _CAPI.FEC_RTVAL_SIMPLE_TYPE_SINT32
FEC_RTVAL_SIMPLE_TYPE_SINT64 = _CAPI.FEC_RTVAL_SIMPLE_TYPE_SINT64
FEC_RTVAL_SIMPLE_TYPE_FLOAT32 = _CAPI.FEC_RTVAL_SIMPLE_TYPE_FLOAT32
FEC_RTVAL_SIMPLE_TYPE_FLOAT64 = _CAPI.FEC_RTVAL_SIMPLE_TYPE_FLOAT64
FEC_RTVAL_SIMPLE_TYPE_STRING = _CAPI.FEC_RTVAL_SIMPLE_TYPE_STRING
class FEC_RTValSimpleData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEC_RTValSimpleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FEC_RTValSimpleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _CAPI.FEC_RTValSimpleData_type_set
    __swig_getmethods__["type"] = _CAPI.FEC_RTValSimpleData_type_get
    if _newclass:type = _swig_property(_CAPI.FEC_RTValSimpleData_type_get, _CAPI.FEC_RTValSimpleData_type_set)
    def __init__(self): 
        this = _CAPI.new_FEC_RTValSimpleData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CAPI.delete_FEC_RTValSimpleData
    __del__ = lambda self : None;
FEC_RTValSimpleData_swigregister = _CAPI.FEC_RTValSimpleData_swigregister
FEC_RTValSimpleData_swigregister(FEC_RTValSimpleData)


def FEC_RTValMaybeGetSimpleData(*args):
  return _CAPI.FEC_RTValMaybeGetSimpleData(*args)
FEC_RTValMaybeGetSimpleData = _CAPI.FEC_RTValMaybeGetSimpleData

def FEC_RTValGetArraySize(*args):
  return _CAPI.FEC_RTValGetArraySize(*args)
FEC_RTValGetArraySize = _CAPI.FEC_RTValGetArraySize

def FEC_RTValSetArraySize(*args):
  return _CAPI.FEC_RTValSetArraySize(*args)
FEC_RTValSetArraySize = _CAPI.FEC_RTValSetArraySize

def FEC_RTValGetArrayElement(*args):
  return _CAPI.FEC_RTValGetArrayElement(*args)
FEC_RTValGetArrayElement = _CAPI.FEC_RTValGetArrayElement

def FEC_RTValSetArrayElement(*args):
  return _CAPI.FEC_RTValSetArrayElement(*args)
FEC_RTValSetArrayElement = _CAPI.FEC_RTValSetArrayElement

def FEC_RTValGetDictSize(*args):
  return _CAPI.FEC_RTValGetDictSize(*args)
FEC_RTValGetDictSize = _CAPI.FEC_RTValGetDictSize

def FEC_RTValGetDictElement(*args):
  return _CAPI.FEC_RTValGetDictElement(*args)
FEC_RTValGetDictElement = _CAPI.FEC_RTValGetDictElement

def FEC_RTValSetDictElement(*args):
  return _CAPI.FEC_RTValSetDictElement(*args)
FEC_RTValSetDictElement = _CAPI.FEC_RTValSetDictElement

def FEC_RTValIsNullObject(*args):
  return _CAPI.FEC_RTValIsNullObject(*args)
FEC_RTValIsNullObject = _CAPI.FEC_RTValIsNullObject

def FEC_RTValIsArray(*args):
  return _CAPI.FEC_RTValIsArray(*args)
FEC_RTValIsArray = _CAPI.FEC_RTValIsArray

def FEC_RTValIsDict(*args):
  return _CAPI.FEC_RTValIsDict(*args)
FEC_RTValIsDict = _CAPI.FEC_RTValIsDict

def FEC_RTValIsStruct(*args):
  return _CAPI.FEC_RTValIsStruct(*args)
FEC_RTValIsStruct = _CAPI.FEC_RTValIsStruct

def FEC_RTValIsObject(*args):
  return _CAPI.FEC_RTValIsObject(*args)
FEC_RTValIsObject = _CAPI.FEC_RTValIsObject

def FEC_RTValIsData(*args):
  return _CAPI.FEC_RTValIsData(*args)
FEC_RTValIsData = _CAPI.FEC_RTValIsData

def FEC_RTValIsInterface(*args):
  return _CAPI.FEC_RTValIsInterface(*args)
FEC_RTValIsInterface = _CAPI.FEC_RTValIsInterface

def FEC_RTValMaybeGetMember(*args):
  return _CAPI.FEC_RTValMaybeGetMember(*args)
FEC_RTValMaybeGetMember = _CAPI.FEC_RTValMaybeGetMember

def FEC_RTValMaybeGetMemberRef(*args):
  return _CAPI.FEC_RTValMaybeGetMemberRef(*args)
FEC_RTValMaybeGetMemberRef = _CAPI.FEC_RTValMaybeGetMemberRef

def FEC_RTValSetMember(*args):
  return _CAPI.FEC_RTValSetMember(*args)
FEC_RTValSetMember = _CAPI.FEC_RTValSetMember

def FEC_RTValCallMethod(*args):
  return _CAPI.FEC_RTValCallMethod(*args)
FEC_RTValCallMethod = _CAPI.FEC_RTValCallMethod

def FEC_RTValGetDesc(*args):
  return _CAPI.FEC_RTValGetDesc(*args)
FEC_RTValGetDesc = _CAPI.FEC_RTValGetDesc

def FEC_RTValGetTypeName(*args):
  return _CAPI.FEC_RTValGetTypeName(*args)
FEC_RTValGetTypeName = _CAPI.FEC_RTValGetTypeName

def FEC_RTValGetJSON(*args):
  return _CAPI.FEC_RTValGetJSON(*args)
FEC_RTValGetJSON = _CAPI.FEC_RTValGetJSON

def FEC_RTValSetJSON(*args):
  return _CAPI.FEC_RTValSetJSON(*args)
FEC_RTValSetJSON = _CAPI.FEC_RTValSetJSON

def FEC_RTGetRTSize(*args):
  return _CAPI.FEC_RTGetRTSize(*args)
FEC_RTGetRTSize = _CAPI.FEC_RTGetRTSize

def FEC_RTGetRTIsShallow(*args):
  return _CAPI.FEC_RTGetRTIsShallow(*args)
FEC_RTGetRTIsShallow = _CAPI.FEC_RTGetRTIsShallow

def FEC_RTGetRTIsStruct(*args):
  return _CAPI.FEC_RTGetRTIsStruct(*args)
FEC_RTGetRTIsStruct = _CAPI.FEC_RTGetRTIsStruct

def FEC_RTGetRTIsObject(*args):
  return _CAPI.FEC_RTGetRTIsObject(*args)
FEC_RTGetRTIsObject = _CAPI.FEC_RTGetRTIsObject

def FEC_RTGetRTIsInterface(*args):
  return _CAPI.FEC_RTGetRTIsInterface(*args)
FEC_RTGetRTIsInterface = _CAPI.FEC_RTGetRTIsInterface

def FEC_RTGetRTExtName(*args):
  return _CAPI.FEC_RTGetRTExtName(*args)
FEC_RTGetRTExtName = _CAPI.FEC_RTGetRTExtName

def FEC_RTGetRegisteredTypes_Variant(*args):
  return _CAPI.FEC_RTGetRegisteredTypes_Variant(*args)
FEC_RTGetRegisteredTypes_Variant = _CAPI.FEC_RTGetRegisteredTypes_Variant

def FEC_RTGetAggregateMemberInfo_Variant(*args):
  return _CAPI.FEC_RTGetAggregateMemberInfo_Variant(*args)
FEC_RTGetAggregateMemberInfo_Variant = _CAPI.FEC_RTGetAggregateMemberInfo_Variant

def FEC_RTGetTypeNames(*args):
  return _CAPI.FEC_RTGetTypeNames(*args)
FEC_RTGetTypeNames = _CAPI.FEC_RTGetTypeNames
class FEC_KLSourceFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEC_KLSourceFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FEC_KLSourceFile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filenameCStr"] = _CAPI.FEC_KLSourceFile_filenameCStr_set
    __swig_getmethods__["filenameCStr"] = _CAPI.FEC_KLSourceFile_filenameCStr_get
    if _newclass:filenameCStr = _swig_property(_CAPI.FEC_KLSourceFile_filenameCStr_get, _CAPI.FEC_KLSourceFile_filenameCStr_set)
    __swig_setmethods__["sourceCodeCStr"] = _CAPI.FEC_KLSourceFile_sourceCodeCStr_set
    __swig_getmethods__["sourceCodeCStr"] = _CAPI.FEC_KLSourceFile_sourceCodeCStr_get
    if _newclass:sourceCodeCStr = _swig_property(_CAPI.FEC_KLSourceFile_sourceCodeCStr_get, _CAPI.FEC_KLSourceFile_sourceCodeCStr_set)
    def __init__(self): 
        this = _CAPI.new_FEC_KLSourceFile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CAPI.delete_FEC_KLSourceFile
    __del__ = lambda self : None;
FEC_KLSourceFile_swigregister = _CAPI.FEC_KLSourceFile_swigregister
FEC_KLSourceFile_swigregister(FEC_KLSourceFile)


def FEC_RegisterKLExtension(*args):
  return _CAPI.FEC_RegisterKLExtension(*args)
FEC_RegisterKLExtension = _CAPI.FEC_RegisterKLExtension

def FEC_DGCompiledObjectGetContext(*args):
  return _CAPI.FEC_DGCompiledObjectGetContext(*args)
FEC_DGCompiledObjectGetContext = _CAPI.FEC_DGCompiledObjectGetContext

def FEC_DGCompiledObjectPrepareForExecution(*args):
  return _CAPI.FEC_DGCompiledObjectPrepareForExecution(*args)
FEC_DGCompiledObjectPrepareForExecution = _CAPI.FEC_DGCompiledObjectPrepareForExecution

def FEC_DGCompiledObjectGetErrors_Variant(*args):
  return _CAPI.FEC_DGCompiledObjectGetErrors_Variant(*args)
FEC_DGCompiledObjectGetErrors_Variant = _CAPI.FEC_DGCompiledObjectGetErrors_Variant

def FEC_DGBindingCreateEmpty(*args):
  return _CAPI.FEC_DGBindingCreateEmpty(*args)
FEC_DGBindingCreateEmpty = _CAPI.FEC_DGBindingCreateEmpty

def FEC_DGBindingCreate(*args):
  return _CAPI.FEC_DGBindingCreate(*args)
FEC_DGBindingCreate = _CAPI.FEC_DGBindingCreate

def FEC_DGBindingSetOperator(*args):
  return _CAPI.FEC_DGBindingSetOperator(*args)
FEC_DGBindingSetOperator = _CAPI.FEC_DGBindingSetOperator

def FEC_DGBindingGetOperator(*args):
  return _CAPI.FEC_DGBindingGetOperator(*args)
FEC_DGBindingGetOperator = _CAPI.FEC_DGBindingGetOperator

def FEC_DGBindingSetParameterLayout(*args):
  return _CAPI.FEC_DGBindingSetParameterLayout(*args)
FEC_DGBindingSetParameterLayout = _CAPI.FEC_DGBindingSetParameterLayout

def FEC_DGBindingGetParameterLayout_Variant(*args):
  return _CAPI.FEC_DGBindingGetParameterLayout_Variant(*args)
FEC_DGBindingGetParameterLayout_Variant = _CAPI.FEC_DGBindingGetParameterLayout_Variant

def FEC_DGNamedObjectDestroy(*args):
  return _CAPI.FEC_DGNamedObjectDestroy(*args)
FEC_DGNamedObjectDestroy = _CAPI.FEC_DGNamedObjectDestroy

def FEC_DGNamedObjectGetName(*args):
  return _CAPI.FEC_DGNamedObjectGetName(*args)
FEC_DGNamedObjectGetName = _CAPI.FEC_DGNamedObjectGetName

def FEC_DGNamedObjectGetByName(*args):
  return _CAPI.FEC_DGNamedObjectGetByName(*args)
FEC_DGNamedObjectGetByName = _CAPI.FEC_DGNamedObjectGetByName

def FEC_DGContainerAddMember_Variant(*args):
  return _CAPI.FEC_DGContainerAddMember_Variant(*args)
FEC_DGContainerAddMember_Variant = _CAPI.FEC_DGContainerAddMember_Variant

def FEC_DGContainerRemoveMember(*args):
  return _CAPI.FEC_DGContainerRemoveMember(*args)
FEC_DGContainerRemoveMember = _CAPI.FEC_DGContainerRemoveMember

def FEC_VariantInitWithDGContainerGetMembers(*args):
  return _CAPI.FEC_VariantInitWithDGContainerGetMembers(*args)
FEC_VariantInitWithDGContainerGetMembers = _CAPI.FEC_VariantInitWithDGContainerGetMembers

def FEC_DGContainerGetMemberType_cstr(*args):
  return _CAPI.FEC_DGContainerGetMemberType_cstr(*args)
FEC_DGContainerGetMemberType_cstr = _CAPI.FEC_DGContainerGetMemberType_cstr

def FEC_DGContainerGetMemberSize(*args):
  return _CAPI.FEC_DGContainerGetMemberSize(*args)
FEC_DGContainerGetMemberSize = _CAPI.FEC_DGContainerGetMemberSize

def FEC_DGContainerGetMemberIsShallow(*args):
  return _CAPI.FEC_DGContainerGetMemberIsShallow(*args)
FEC_DGContainerGetMemberIsShallow = _CAPI.FEC_DGContainerGetMemberIsShallow

def FEC_VariantInitWithDGContainerGetMemberDefaultData(*args):
  return _CAPI.FEC_VariantInitWithDGContainerGetMemberDefaultData(*args)
FEC_VariantInitWithDGContainerGetMemberDefaultData = _CAPI.FEC_VariantInitWithDGContainerGetMemberDefaultData

def FEC_DGContainerGetSize(*args):
  return _CAPI.FEC_DGContainerGetSize(*args)
FEC_DGContainerGetSize = _CAPI.FEC_DGContainerGetSize

def FEC_DGContainerSetSize(*args):
  return _CAPI.FEC_DGContainerSetSize(*args)
FEC_DGContainerSetSize = _CAPI.FEC_DGContainerSetSize

def FEC_DGContainerGetMemberAllSlicesData(*args):
  return _CAPI.FEC_DGContainerGetMemberAllSlicesData(*args)
FEC_DGContainerGetMemberAllSlicesData = _CAPI.FEC_DGContainerGetMemberAllSlicesData

def FEC_DGContainerSetMemberAllSlicesData(*args):
  return _CAPI.FEC_DGContainerSetMemberAllSlicesData(*args)
FEC_DGContainerSetMemberAllSlicesData = _CAPI.FEC_DGContainerSetMemberAllSlicesData

def FEC_DGContainerGetMemberSliceData(*args):
  return _CAPI.FEC_DGContainerGetMemberSliceData(*args)
FEC_DGContainerGetMemberSliceData = _CAPI.FEC_DGContainerGetMemberSliceData

def FEC_DGContainerSetMemberSliceData(*args):
  return _CAPI.FEC_DGContainerSetMemberSliceData(*args)
FEC_DGContainerSetMemberSliceData = _CAPI.FEC_DGContainerSetMemberSliceData

def FEC_DGContainerGetMemberSliceArraySize(*args):
  return _CAPI.FEC_DGContainerGetMemberSliceArraySize(*args)
FEC_DGContainerGetMemberSliceArraySize = _CAPI.FEC_DGContainerGetMemberSliceArraySize

def FEC_DGContainerSetMemberSliceArraySize(*args):
  return _CAPI.FEC_DGContainerSetMemberSliceArraySize(*args)
FEC_DGContainerSetMemberSliceArraySize = _CAPI.FEC_DGContainerSetMemberSliceArraySize

def FEC_DGContainerGetMemberSliceArrayData(*args):
  return _CAPI.FEC_DGContainerGetMemberSliceArrayData(*args)
FEC_DGContainerGetMemberSliceArrayData = _CAPI.FEC_DGContainerGetMemberSliceArrayData

def FEC_DGContainerSetMemberSliceArrayData(*args):
  return _CAPI.FEC_DGContainerSetMemberSliceArrayData(*args)
FEC_DGContainerSetMemberSliceArrayData = _CAPI.FEC_DGContainerSetMemberSliceArrayData

def FEC_DGContainerGetMemberSliceData_Float32(*args):
  return _CAPI.FEC_DGContainerGetMemberSliceData_Float32(*args)
FEC_DGContainerGetMemberSliceData_Float32 = _CAPI.FEC_DGContainerGetMemberSliceData_Float32

def FEC_DGContainerSetMemberSliceData_Float32(*args):
  return _CAPI.FEC_DGContainerSetMemberSliceData_Float32(*args)
FEC_DGContainerSetMemberSliceData_Float32 = _CAPI.FEC_DGContainerSetMemberSliceData_Float32

def FEC_VariantInitWithDGContainerGetMemberSlice(*args):
  return _CAPI.FEC_VariantInitWithDGContainerGetMemberSlice(*args)
FEC_VariantInitWithDGContainerGetMemberSlice = _CAPI.FEC_VariantInitWithDGContainerGetMemberSlice

def FEC_DGContainerSetMemberSlice_Variant(*args):
  return _CAPI.FEC_DGContainerSetMemberSlice_Variant(*args)
FEC_DGContainerSetMemberSlice_Variant = _CAPI.FEC_DGContainerSetMemberSlice_Variant

def FEC_DGContainerSetSlice_Variant(*args):
  return _CAPI.FEC_DGContainerSetSlice_Variant(*args)
FEC_DGContainerSetSlice_Variant = _CAPI.FEC_DGContainerSetSlice_Variant

def FEC_DGContainerGetMemberSliceValue(*args):
  return _CAPI.FEC_DGContainerGetMemberSliceValue(*args)
FEC_DGContainerGetMemberSliceValue = _CAPI.FEC_DGContainerGetMemberSliceValue

def FEC_DGContainerSetMemberSliceValue(*args):
  return _CAPI.FEC_DGContainerSetMemberSliceValue(*args)
FEC_DGContainerSetMemberSliceValue = _CAPI.FEC_DGContainerSetMemberSliceValue

def FEC_DGContainerGetJSONStringValue(*args):
  return _CAPI.FEC_DGContainerGetJSONStringValue(*args)
FEC_DGContainerGetJSONStringValue = _CAPI.FEC_DGContainerGetJSONStringValue

def FEC_DGContainerSetJSONStringValue(*args):
  return _CAPI.FEC_DGContainerSetJSONStringValue(*args)
FEC_DGContainerSetJSONStringValue = _CAPI.FEC_DGContainerSetJSONStringValue

def FEC_DGOperatorCreate(*args):
  return _CAPI.FEC_DGOperatorCreate(*args)
FEC_DGOperatorCreate = _CAPI.FEC_DGOperatorCreate

def FEC_DGOperatorCreateEmpty(*args):
  return _CAPI.FEC_DGOperatorCreateEmpty(*args)
FEC_DGOperatorCreateEmpty = _CAPI.FEC_DGOperatorCreateEmpty

def FEC_DGOperatorSetFilename(*args):
  return _CAPI.FEC_DGOperatorSetFilename(*args)
FEC_DGOperatorSetFilename = _CAPI.FEC_DGOperatorSetFilename

def FEC_DGOperatorGetFilename_cstr(*args):
  return _CAPI.FEC_DGOperatorGetFilename_cstr(*args)
FEC_DGOperatorGetFilename_cstr = _CAPI.FEC_DGOperatorGetFilename_cstr

def FEC_DGOperatorSetSourceCode(*args):
  return _CAPI.FEC_DGOperatorSetSourceCode(*args)
FEC_DGOperatorSetSourceCode = _CAPI.FEC_DGOperatorSetSourceCode

def FEC_DGOperatorGetSourceCode_cstr(*args):
  return _CAPI.FEC_DGOperatorGetSourceCode_cstr(*args)
FEC_DGOperatorGetSourceCode_cstr = _CAPI.FEC_DGOperatorGetSourceCode_cstr

def FEC_DGOperatorSetEntryPoint(*args):
  return _CAPI.FEC_DGOperatorSetEntryPoint(*args)
FEC_DGOperatorSetEntryPoint = _CAPI.FEC_DGOperatorSetEntryPoint

def FEC_DGOperatorGetEntryPoint_cstr(*args):
  return _CAPI.FEC_DGOperatorGetEntryPoint_cstr(*args)
FEC_DGOperatorGetEntryPoint_cstr = _CAPI.FEC_DGOperatorGetEntryPoint_cstr

def FEC_DGOperatorSetMainThreadOnly(*args):
  return _CAPI.FEC_DGOperatorSetMainThreadOnly(*args)
FEC_DGOperatorSetMainThreadOnly = _CAPI.FEC_DGOperatorSetMainThreadOnly

def FEC_DGOperatorGetMainThreadOnly(*args):
  return _CAPI.FEC_DGOperatorGetMainThreadOnly(*args)
FEC_DGOperatorGetMainThreadOnly = _CAPI.FEC_DGOperatorGetMainThreadOnly

def FEC_VariantInitWithDGOperatorGetDiagnostics(*args):
  return _CAPI.FEC_VariantInitWithDGOperatorGetDiagnostics(*args)
FEC_VariantInitWithDGOperatorGetDiagnostics = _CAPI.FEC_VariantInitWithDGOperatorGetDiagnostics

def FEC_DGNodeCreate(*args):
  return _CAPI.FEC_DGNodeCreate(*args)
FEC_DGNodeCreate = _CAPI.FEC_DGNodeCreate

def FEC_DGNodeAppendBinding(*args):
  return _CAPI.FEC_DGNodeAppendBinding(*args)
FEC_DGNodeAppendBinding = _CAPI.FEC_DGNodeAppendBinding

def FEC_DGNodeGetBindingList(*args):
  return _CAPI.FEC_DGNodeGetBindingList(*args)
FEC_DGNodeGetBindingList = _CAPI.FEC_DGNodeGetBindingList

def FEC_DGNodeEvaluate(*args):
  return _CAPI.FEC_DGNodeEvaluate(*args)
FEC_DGNodeEvaluate = _CAPI.FEC_DGNodeEvaluate

def FEC_DGNodeSetDependency(*args):
  return _CAPI.FEC_DGNodeSetDependency(*args)
FEC_DGNodeSetDependency = _CAPI.FEC_DGNodeSetDependency

def FEC_DGNodeRemoveDependency(*args):
  return _CAPI.FEC_DGNodeRemoveDependency(*args)
FEC_DGNodeRemoveDependency = _CAPI.FEC_DGNodeRemoveDependency

def FEC_DGNodeGetDependencies_Variant(*args):
  return _CAPI.FEC_DGNodeGetDependencies_Variant(*args)
FEC_DGNodeGetDependencies_Variant = _CAPI.FEC_DGNodeGetDependencies_Variant

def FEC_DGNodeGetDependency(*args):
  return _CAPI.FEC_DGNodeGetDependency(*args)
FEC_DGNodeGetDependency = _CAPI.FEC_DGNodeGetDependency

def FEC_DGBindingListAppend(*args):
  return _CAPI.FEC_DGBindingListAppend(*args)
FEC_DGBindingListAppend = _CAPI.FEC_DGBindingListAppend

def FEC_DGBindingListInsert(*args):
  return _CAPI.FEC_DGBindingListInsert(*args)
FEC_DGBindingListInsert = _CAPI.FEC_DGBindingListInsert

def FEC_DGBindingListRemove(*args):
  return _CAPI.FEC_DGBindingListRemove(*args)
FEC_DGBindingListRemove = _CAPI.FEC_DGBindingListRemove

def FEC_DGBindingListGetBinding(*args):
  return _CAPI.FEC_DGBindingListGetBinding(*args)
FEC_DGBindingListGetBinding = _CAPI.FEC_DGBindingListGetBinding

def FEC_DGBindingListGetLength(*args):
  return _CAPI.FEC_DGBindingListGetLength(*args)
FEC_DGBindingListGetLength = _CAPI.FEC_DGBindingListGetLength

def FEC_DGEventCreate(*args):
  return _CAPI.FEC_DGEventCreate(*args)
FEC_DGEventCreate = _CAPI.FEC_DGEventCreate

def FEC_DGEventRemoveEventHandler(*args):
  return _CAPI.FEC_DGEventRemoveEventHandler(*args)
FEC_DGEventRemoveEventHandler = _CAPI.FEC_DGEventRemoveEventHandler

def FEC_DGEventAppendEventHandler(*args):
  return _CAPI.FEC_DGEventAppendEventHandler(*args)
FEC_DGEventAppendEventHandler = _CAPI.FEC_DGEventAppendEventHandler

def FEC_DGEventFire(*args):
  return _CAPI.FEC_DGEventFire(*args)
FEC_DGEventFire = _CAPI.FEC_DGEventFire

def FEC_DGEventSetSelectType(*args):
  return _CAPI.FEC_DGEventSetSelectType(*args)
FEC_DGEventSetSelectType = _CAPI.FEC_DGEventSetSelectType

def FEC_DGEventGetSelectType(*args):
  return _CAPI.FEC_DGEventGetSelectType(*args)
FEC_DGEventGetSelectType = _CAPI.FEC_DGEventGetSelectType

def FEC_VariantInitWithDGEventSelect(*args):
  return _CAPI.FEC_VariantInitWithDGEventSelect(*args)
FEC_VariantInitWithDGEventSelect = _CAPI.FEC_VariantInitWithDGEventSelect

def FEC_DGEventGetEventHandlers_Variant(*args):
  return _CAPI.FEC_DGEventGetEventHandlers_Variant(*args)
FEC_DGEventGetEventHandlers_Variant = _CAPI.FEC_DGEventGetEventHandlers_Variant

def FEC_DGEventHandlerCreate(*args):
  return _CAPI.FEC_DGEventHandlerCreate(*args)
FEC_DGEventHandlerCreate = _CAPI.FEC_DGEventHandlerCreate

def FEC_DGEventHandlerAppendChildEventHandler(*args):
  return _CAPI.FEC_DGEventHandlerAppendChildEventHandler(*args)
FEC_DGEventHandlerAppendChildEventHandler = _CAPI.FEC_DGEventHandlerAppendChildEventHandler

def FEC_DGEventHandlerRemoveChildEventHandler(*args):
  return _CAPI.FEC_DGEventHandlerRemoveChildEventHandler(*args)
FEC_DGEventHandlerRemoveChildEventHandler = _CAPI.FEC_DGEventHandlerRemoveChildEventHandler

def FEC_DGEventHandlerAppendPreDescendBinding(*args):
  return _CAPI.FEC_DGEventHandlerAppendPreDescendBinding(*args)
FEC_DGEventHandlerAppendPreDescendBinding = _CAPI.FEC_DGEventHandlerAppendPreDescendBinding

def FEC_DGEventHandlerGetPreDescendBindingList(*args):
  return _CAPI.FEC_DGEventHandlerGetPreDescendBindingList(*args)
FEC_DGEventHandlerGetPreDescendBindingList = _CAPI.FEC_DGEventHandlerGetPreDescendBindingList

def FEC_DGEventHandlerAppendPostDescendBinding(*args):
  return _CAPI.FEC_DGEventHandlerAppendPostDescendBinding(*args)
FEC_DGEventHandlerAppendPostDescendBinding = _CAPI.FEC_DGEventHandlerAppendPostDescendBinding

def FEC_DGEventHandlerGetPostDescendBindingList(*args):
  return _CAPI.FEC_DGEventHandlerGetPostDescendBindingList(*args)
FEC_DGEventHandlerGetPostDescendBindingList = _CAPI.FEC_DGEventHandlerGetPostDescendBindingList

def FEC_DGEventHandlerSetScopeName(*args):
  return _CAPI.FEC_DGEventHandlerSetScopeName(*args)
FEC_DGEventHandlerSetScopeName = _CAPI.FEC_DGEventHandlerSetScopeName

def FEC_DGEventHandlerGetScopeName_cstr(*args):
  return _CAPI.FEC_DGEventHandlerGetScopeName_cstr(*args)
FEC_DGEventHandlerGetScopeName_cstr = _CAPI.FEC_DGEventHandlerGetScopeName_cstr

def FEC_DGEventHandlerSetScope(*args):
  return _CAPI.FEC_DGEventHandlerSetScope(*args)
FEC_DGEventHandlerSetScope = _CAPI.FEC_DGEventHandlerSetScope

def FEC_DGEventHandlerRemoveScope(*args):
  return _CAPI.FEC_DGEventHandlerRemoveScope(*args)
FEC_DGEventHandlerRemoveScope = _CAPI.FEC_DGEventHandlerRemoveScope

def FEC_DGEventHandlerSetSelector(*args):
  return _CAPI.FEC_DGEventHandlerSetSelector(*args)
FEC_DGEventHandlerSetSelector = _CAPI.FEC_DGEventHandlerSetSelector

def FEC_DGEventHandlerGetChildEventHandlers_Variant(*args):
  return _CAPI.FEC_DGEventHandlerGetChildEventHandlers_Variant(*args)
FEC_DGEventHandlerGetChildEventHandlers_Variant = _CAPI.FEC_DGEventHandlerGetChildEventHandlers_Variant

def FEC_DGEventHandlerGetScopes_Variant(*args):
  return _CAPI.FEC_DGEventHandlerGetScopes_Variant(*args)
FEC_DGEventHandlerGetScopes_Variant = _CAPI.FEC_DGEventHandlerGetScopes_Variant

def Initialize():
  return _CAPI.Initialize()
Initialize = _CAPI.Initialize

def Finalize():
  return _CAPI.Finalize()
Finalize = _CAPI.Finalize
class Exception(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_Exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CAPI.delete_Exception
    __del__ = lambda self : None;
    def getDescData(self): return _CAPI.Exception_getDescData(self)
    def getDescLength(self): return _CAPI.Exception_getDescLength(self)
    def getDesc_cstr(self): return _CAPI.Exception_getDesc_cstr(self)
    def getDesc_stl(self): return _CAPI.Exception_getDesc_stl(self)
    __swig_getmethods__["ClearLastException"] = lambda x: _CAPI.Exception_ClearLastException
    if _newclass:ClearLastException = staticmethod(_CAPI.Exception_ClearLastException)
    __swig_getmethods__["MaybeThrowLastException"] = lambda x: _CAPI.Exception_MaybeThrowLastException
    if _newclass:MaybeThrowLastException = staticmethod(_CAPI.Exception_MaybeThrowLastException)
    __swig_getmethods__["Throw"] = lambda x: _CAPI.Exception_Throw
    if _newclass:Throw = staticmethod(_CAPI.Exception_Throw)
Exception_swigregister = _CAPI.Exception_swigregister
Exception_swigregister(Exception)

def Exception_ClearLastException():
  return _CAPI.Exception_ClearLastException()
Exception_ClearLastException = _CAPI.Exception_ClearLastException

def Exception_MaybeThrowLastException():
  return _CAPI.Exception_MaybeThrowLastException()
Exception_MaybeThrowLastException = _CAPI.Exception_MaybeThrowLastException

def Exception_Throw(*args):
  return _CAPI.Exception_Throw(*args)
Exception_Throw = _CAPI.Exception_Throw


def EnableDebug(*args):
  return _CAPI.EnableDebug(*args)
EnableDebug = _CAPI.EnableDebug
class Variant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Variant, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_Variant(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFECVariant(self): return _CAPI.Variant_getFECVariant(self)
    def clone(self, *args): return _CAPI.Variant_clone(self, *args)
    def take(self, *args): return _CAPI.Variant_take(self, *args)
    __swig_destroy__ = _CAPI.delete_Variant
    __del__ = lambda self : None;
    __swig_getmethods__["CreateNull"] = lambda x: _CAPI.Variant_CreateNull
    if _newclass:CreateNull = staticmethod(_CAPI.Variant_CreateNull)
    def isNull(self): return _CAPI.Variant_isNull(self)
    __swig_getmethods__["CreateBoolean"] = lambda x: _CAPI.Variant_CreateBoolean
    if _newclass:CreateBoolean = staticmethod(_CAPI.Variant_CreateBoolean)
    def isBoolean(self): return _CAPI.Variant_isBoolean(self)
    def getBoolean(self): return _CAPI.Variant_getBoolean(self)
    def setBoolean(self, *args): return _CAPI.Variant_setBoolean(self, *args)
    __swig_getmethods__["CreateUInt8"] = lambda x: _CAPI.Variant_CreateUInt8
    if _newclass:CreateUInt8 = staticmethod(_CAPI.Variant_CreateUInt8)
    def isUInt8(self): return _CAPI.Variant_isUInt8(self)
    def getUInt8(self): return _CAPI.Variant_getUInt8(self)
    def setUInt8(self, *args): return _CAPI.Variant_setUInt8(self, *args)
    __swig_getmethods__["CreateSInt8"] = lambda x: _CAPI.Variant_CreateSInt8
    if _newclass:CreateSInt8 = staticmethod(_CAPI.Variant_CreateSInt8)
    def isSInt8(self): return _CAPI.Variant_isSInt8(self)
    def getSInt8(self): return _CAPI.Variant_getSInt8(self)
    def setSInt8(self, *args): return _CAPI.Variant_setSInt8(self, *args)
    __swig_getmethods__["CreateUInt16"] = lambda x: _CAPI.Variant_CreateUInt16
    if _newclass:CreateUInt16 = staticmethod(_CAPI.Variant_CreateUInt16)
    def isUInt16(self): return _CAPI.Variant_isUInt16(self)
    def getUInt16(self): return _CAPI.Variant_getUInt16(self)
    def setUInt16(self, *args): return _CAPI.Variant_setUInt16(self, *args)
    __swig_getmethods__["CreateSInt16"] = lambda x: _CAPI.Variant_CreateSInt16
    if _newclass:CreateSInt16 = staticmethod(_CAPI.Variant_CreateSInt16)
    def isSInt16(self): return _CAPI.Variant_isSInt16(self)
    def getSInt16(self): return _CAPI.Variant_getSInt16(self)
    def setSInt16(self, *args): return _CAPI.Variant_setSInt16(self, *args)
    __swig_getmethods__["CreateUInt32"] = lambda x: _CAPI.Variant_CreateUInt32
    if _newclass:CreateUInt32 = staticmethod(_CAPI.Variant_CreateUInt32)
    def isUInt32(self): return _CAPI.Variant_isUInt32(self)
    def getUInt32(self): return _CAPI.Variant_getUInt32(self)
    def setUInt32(self, *args): return _CAPI.Variant_setUInt32(self, *args)
    __swig_getmethods__["CreateSInt32"] = lambda x: _CAPI.Variant_CreateSInt32
    if _newclass:CreateSInt32 = staticmethod(_CAPI.Variant_CreateSInt32)
    def isSInt32(self): return _CAPI.Variant_isSInt32(self)
    def getSInt32(self): return _CAPI.Variant_getSInt32(self)
    def setSInt32(self, *args): return _CAPI.Variant_setSInt32(self, *args)
    __swig_getmethods__["CreateUInt64"] = lambda x: _CAPI.Variant_CreateUInt64
    if _newclass:CreateUInt64 = staticmethod(_CAPI.Variant_CreateUInt64)
    def isUInt64(self): return _CAPI.Variant_isUInt64(self)
    def getUInt64(self): return _CAPI.Variant_getUInt64(self)
    def setUInt64(self, *args): return _CAPI.Variant_setUInt64(self, *args)
    __swig_getmethods__["CreateSInt64"] = lambda x: _CAPI.Variant_CreateSInt64
    if _newclass:CreateSInt64 = staticmethod(_CAPI.Variant_CreateSInt64)
    def isSInt64(self): return _CAPI.Variant_isSInt64(self)
    def getSInt64(self): return _CAPI.Variant_getSInt64(self)
    def setSInt64(self, *args): return _CAPI.Variant_setSInt64(self, *args)
    __swig_getmethods__["CreateFloat32"] = lambda x: _CAPI.Variant_CreateFloat32
    if _newclass:CreateFloat32 = staticmethod(_CAPI.Variant_CreateFloat32)
    def isFloat32(self): return _CAPI.Variant_isFloat32(self)
    def getFloat32(self): return _CAPI.Variant_getFloat32(self)
    def setFloat32(self, *args): return _CAPI.Variant_setFloat32(self, *args)
    __swig_getmethods__["CreateFloat64"] = lambda x: _CAPI.Variant_CreateFloat64
    if _newclass:CreateFloat64 = staticmethod(_CAPI.Variant_CreateFloat64)
    def isFloat64(self): return _CAPI.Variant_isFloat64(self)
    def getFloat64(self): return _CAPI.Variant_getFloat64(self)
    def setFloat64(self, *args): return _CAPI.Variant_setFloat64(self, *args)
    __swig_getmethods__["CreateString_Take"] = lambda x: _CAPI.Variant_CreateString_Take
    if _newclass:CreateString_Take = staticmethod(_CAPI.Variant_CreateString_Take)
    __swig_getmethods__["CreateString"] = lambda x: _CAPI.Variant_CreateString
    if _newclass:CreateString = staticmethod(_CAPI.Variant_CreateString)
    def isString(self): return _CAPI.Variant_isString(self)
    def getStringData(self): return _CAPI.Variant_getStringData(self)
    def getStringLength(self): return _CAPI.Variant_getStringLength(self)
    def getString_cstr(self): return _CAPI.Variant_getString_cstr(self)
    def getString_stl(self): return _CAPI.Variant_getString_stl(self)
    def setString(self, *args): return _CAPI.Variant_setString(self, *args)
    __swig_getmethods__["CreateArray"] = lambda x: _CAPI.Variant_CreateArray
    if _newclass:CreateArray = staticmethod(_CAPI.Variant_CreateArray)
    def isArray(self): return _CAPI.Variant_isArray(self)
    def getArraySize(self): return _CAPI.Variant_getArraySize(self)
    def getArrayElement(self, *args): return _CAPI.Variant_getArrayElement(self, *args)
    def arrayAppend(self, *args): return _CAPI.Variant_arrayAppend(self, *args)
    def arrayAppendTake(self, *args): return _CAPI.Variant_arrayAppendTake(self, *args)
    def setElementCopy(self, *args): return _CAPI.Variant_setElementCopy(self, *args)
    def setElementTake(self, *args): return _CAPI.Variant_setElementTake(self, *args)
    __swig_getmethods__["CreateDict"] = lambda x: _CAPI.Variant_CreateDict
    if _newclass:CreateDict = staticmethod(_CAPI.Variant_CreateDict)
    def isDict(self): return _CAPI.Variant_isDict(self)
    def getDictValue(self, *args): return _CAPI.Variant_getDictValue(self, *args)
    def setDictValue(self, *args): return _CAPI.Variant_setDictValue(self, *args)
    def getDesc(self, includeTypeDescs=False): return _CAPI.Variant_getDesc(self, includeTypeDescs)
    def getDesc_stl(self, includeTypeDescs=False): return _CAPI.Variant_getDesc_stl(self, includeTypeDescs)
    __swig_getmethods__["CreateFromJSON"] = lambda x: _CAPI.Variant_CreateFromJSON
    if _newclass:CreateFromJSON = staticmethod(_CAPI.Variant_CreateFromJSON)
    def getJSONEncoding(self): return _CAPI.Variant_getJSONEncoding(self)
    def getJSONEncoding_stl(self): return _CAPI.Variant_getJSONEncoding_stl(self)
Variant_swigregister = _CAPI.Variant_swigregister
Variant_swigregister(Variant)

def Variant_CreateNull():
  return _CAPI.Variant_CreateNull()
Variant_CreateNull = _CAPI.Variant_CreateNull

def Variant_CreateBoolean(*args):
  return _CAPI.Variant_CreateBoolean(*args)
Variant_CreateBoolean = _CAPI.Variant_CreateBoolean

def Variant_CreateUInt8(*args):
  return _CAPI.Variant_CreateUInt8(*args)
Variant_CreateUInt8 = _CAPI.Variant_CreateUInt8

def Variant_CreateSInt8(*args):
  return _CAPI.Variant_CreateSInt8(*args)
Variant_CreateSInt8 = _CAPI.Variant_CreateSInt8

def Variant_CreateUInt16(*args):
  return _CAPI.Variant_CreateUInt16(*args)
Variant_CreateUInt16 = _CAPI.Variant_CreateUInt16

def Variant_CreateSInt16(*args):
  return _CAPI.Variant_CreateSInt16(*args)
Variant_CreateSInt16 = _CAPI.Variant_CreateSInt16

def Variant_CreateUInt32(*args):
  return _CAPI.Variant_CreateUInt32(*args)
Variant_CreateUInt32 = _CAPI.Variant_CreateUInt32

def Variant_CreateSInt32(*args):
  return _CAPI.Variant_CreateSInt32(*args)
Variant_CreateSInt32 = _CAPI.Variant_CreateSInt32

def Variant_CreateUInt64(*args):
  return _CAPI.Variant_CreateUInt64(*args)
Variant_CreateUInt64 = _CAPI.Variant_CreateUInt64

def Variant_CreateSInt64(*args):
  return _CAPI.Variant_CreateSInt64(*args)
Variant_CreateSInt64 = _CAPI.Variant_CreateSInt64

def Variant_CreateFloat32(*args):
  return _CAPI.Variant_CreateFloat32(*args)
Variant_CreateFloat32 = _CAPI.Variant_CreateFloat32

def Variant_CreateFloat64(*args):
  return _CAPI.Variant_CreateFloat64(*args)
Variant_CreateFloat64 = _CAPI.Variant_CreateFloat64

def Variant_CreateString_Take(*args):
  return _CAPI.Variant_CreateString_Take(*args)
Variant_CreateString_Take = _CAPI.Variant_CreateString_Take

def Variant_CreateString(*args):
  return _CAPI.Variant_CreateString(*args)
Variant_CreateString = _CAPI.Variant_CreateString

def Variant_CreateArray(size=0):
  return _CAPI.Variant_CreateArray(size)
Variant_CreateArray = _CAPI.Variant_CreateArray

def Variant_CreateDict():
  return _CAPI.Variant_CreateDict()
Variant_CreateDict = _CAPI.Variant_CreateDict

def Variant_CreateFromJSON(*args):
  return _CAPI.Variant_CreateFromJSON(*args)
Variant_CreateFromJSON = _CAPI.Variant_CreateFromJSON


def KLTool(*args):
  return _CAPI.KLTool(*args)
KLTool = _CAPI.KLTool

def KL2EDK(*args):
  return _CAPI.KL2EDK(*args)
KL2EDK = _CAPI.KL2EDK
class Ref(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ref, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_Ref(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CAPI.delete_Ref
    __del__ = lambda self : None;
    def getFECRef(self): return _CAPI.Ref_getFECRef(self)
    def invalidate(self): return _CAPI.Ref_invalidate(self)
    def isValid(self): return _CAPI.Ref_isValid(self)
    def __nonzero__(self):
        return _CAPI.Ref___nonzero__(self)
    __bool__ = __nonzero__


Ref_swigregister = _CAPI.Ref_swigregister
Ref_swigregister(Ref)

class Context(Ref):
    __swig_setmethods__ = {}
    for _s in [Ref]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    for _s in [Ref]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_Context(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFECContextRef(self): return _CAPI.Context_getFECContextRef(self)
    __swig_destroy__ = _CAPI.delete_Context
    __del__ = lambda self : None;
Context_swigregister = _CAPI.Context_swigregister
Context_swigregister(Context)

class Client(Ref):
    __swig_setmethods__ = {}
    for _s in [Ref]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Client, name, value)
    __swig_getmethods__ = {}
    for _s in [Ref]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Client, name)
    __repr__ = _swig_repr
    def getFECClientRef(self): return _CAPI.Client_getFECClientRef(self)
    def __init__(self, *args): 
        this = _CAPI.new_Client(*args)
        try: self.this.append(this)
        except: self.this = this
    def getContext(self): return _CAPI.Client_getContext(self)
    def setReportCallback(self, *args): return _CAPI.Client_setReportCallback(self, *args)
    def disableRuntimeLogging(self): return _CAPI.Client_disableRuntimeLogging(self)
    def enableRuntimeLogging(self): return _CAPI.Client_enableRuntimeLogging(self)
    def enableSimpleStackTracing(self): return _CAPI.Client_enableSimpleStackTracing(self)
    def getContextID(self): return _CAPI.Client_getContextID(self)
    def getMemoryUsage_Variant(self): return _CAPI.Client_getMemoryUsage_Variant(self)
    def startInstrumentation(self): return _CAPI.Client_startInstrumentation(self)
    def stopInstrumentation_Variant(self, resultTypeCString="raw"): return _CAPI.Client_stopInstrumentation_Variant(self, resultTypeCString)
    def setLogWarnings(self, *args): return _CAPI.Client_setLogWarnings(self, *args)
    def loadExtension(self, *args): return _CAPI.Client_loadExtension(self, *args)
    def getStatusUserdata(self): return _CAPI.Client_getStatusUserdata(self)
    def queueStatusMessage(self, *args): return _CAPI.Client_queueStatusMessage(self, *args)
    def isLicenseValid(self): return _CAPI.Client_isLicenseValid(self)
    def validateLicense(self): return _CAPI.Client_validateLicense(self)
    def setLicenseServer(self, *args): return _CAPI.Client_setLicenseServer(self, *args)
    def setStandaloneLicense(self, *args): return _CAPI.Client_setStandaloneLicense(self, *args)
    def enableBackgroundTasks(self): return _CAPI.Client_enableBackgroundTasks(self)
    def isBackgroundOptimizationInProgress(self): return _CAPI.Client_isBackgroundOptimizationInProgress(self)
    def adoptCurrentGLContext(self): return _CAPI.Client_adoptCurrentGLContext(self)
    def idle(self): return _CAPI.Client_idle(self)
    def supportsGPUCompute(self): return _CAPI.Client_supportsGPUCompute(self)
    __swig_getmethods__["Create"] = lambda x: _CAPI.Client_Create
    if _newclass:Create = staticmethod(_CAPI.Client_Create)
    def setStatusCallback(self, *args): return _CAPI.Client_setStatusCallback(self, *args)
    __swig_destroy__ = _CAPI.delete_Client
    __del__ = lambda self : None;
Client_swigregister = _CAPI.Client_swigregister
Client_swigregister(Client)
cvar = _CAPI.cvar
ClientOptimizationType_Background = cvar.ClientOptimizationType_Background
ClientOptimizationType_Synchronous = cvar.ClientOptimizationType_Synchronous
ClientOptimizationType_None = cvar.ClientOptimizationType_None

def Client_Create(*args):
  return _CAPI.Client_Create(*args)
Client_Create = _CAPI.Client_Create


def GetRegisteredTypes_Variant(*args):
  return _CAPI.GetRegisteredTypes_Variant(*args)
GetRegisteredTypes_Variant = _CAPI.GetRegisteredTypes_Variant

def GetAggregateMemberInfo_Variant(*args):
  return _CAPI.GetAggregateMemberInfo_Variant(*args)
GetAggregateMemberInfo_Variant = _CAPI.GetAggregateMemberInfo_Variant

def GetRegisteredTypeSize(*args):
  return _CAPI.GetRegisteredTypeSize(*args)
GetRegisteredTypeSize = _CAPI.GetRegisteredTypeSize

def GetRegisteredTypeIsShallow(*args):
  return _CAPI.GetRegisteredTypeIsShallow(*args)
GetRegisteredTypeIsShallow = _CAPI.GetRegisteredTypeIsShallow

def GetRegisteredTypeIsStruct(*args):
  return _CAPI.GetRegisteredTypeIsStruct(*args)
GetRegisteredTypeIsStruct = _CAPI.GetRegisteredTypeIsStruct

def GetRegisteredTypeIsObject(*args):
  return _CAPI.GetRegisteredTypeIsObject(*args)
GetRegisteredTypeIsObject = _CAPI.GetRegisteredTypeIsObject

def GetRegisteredTypeIsInterface(*args):
  return _CAPI.GetRegisteredTypeIsInterface(*args)
GetRegisteredTypeIsInterface = _CAPI.GetRegisteredTypeIsInterface

def GetRegisteredTypeExtName(*args):
  return _CAPI.GetRegisteredTypeExtName(*args)
GetRegisteredTypeExtName = _CAPI.GetRegisteredTypeExtName
class RTVal(Ref):
    __swig_setmethods__ = {}
    for _s in [Ref]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RTVal, name, value)
    __swig_getmethods__ = {}
    for _s in [Ref]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RTVal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_RTVal(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFECRTValRef(self): return _CAPI.RTVal_getFECRTValRef(self)
    __swig_getmethods__["Construct"] = lambda x: _CAPI.RTVal_Construct
    if _newclass:Construct = staticmethod(_CAPI.RTVal_Construct)
    __swig_getmethods__["ConstructBoolean"] = lambda x: _CAPI.RTVal_ConstructBoolean
    if _newclass:ConstructBoolean = staticmethod(_CAPI.RTVal_ConstructBoolean)
    __swig_getmethods__["ConstructSInt8"] = lambda x: _CAPI.RTVal_ConstructSInt8
    if _newclass:ConstructSInt8 = staticmethod(_CAPI.RTVal_ConstructSInt8)
    __swig_getmethods__["ConstructSInt16"] = lambda x: _CAPI.RTVal_ConstructSInt16
    if _newclass:ConstructSInt16 = staticmethod(_CAPI.RTVal_ConstructSInt16)
    __swig_getmethods__["ConstructSInt32"] = lambda x: _CAPI.RTVal_ConstructSInt32
    if _newclass:ConstructSInt32 = staticmethod(_CAPI.RTVal_ConstructSInt32)
    __swig_getmethods__["ConstructSInt64"] = lambda x: _CAPI.RTVal_ConstructSInt64
    if _newclass:ConstructSInt64 = staticmethod(_CAPI.RTVal_ConstructSInt64)
    __swig_getmethods__["ConstructUInt8"] = lambda x: _CAPI.RTVal_ConstructUInt8
    if _newclass:ConstructUInt8 = staticmethod(_CAPI.RTVal_ConstructUInt8)
    __swig_getmethods__["ConstructUInt16"] = lambda x: _CAPI.RTVal_ConstructUInt16
    if _newclass:ConstructUInt16 = staticmethod(_CAPI.RTVal_ConstructUInt16)
    __swig_getmethods__["ConstructUInt32"] = lambda x: _CAPI.RTVal_ConstructUInt32
    if _newclass:ConstructUInt32 = staticmethod(_CAPI.RTVal_ConstructUInt32)
    __swig_getmethods__["ConstructUInt64"] = lambda x: _CAPI.RTVal_ConstructUInt64
    if _newclass:ConstructUInt64 = staticmethod(_CAPI.RTVal_ConstructUInt64)
    __swig_getmethods__["ConstructFloat32"] = lambda x: _CAPI.RTVal_ConstructFloat32
    if _newclass:ConstructFloat32 = staticmethod(_CAPI.RTVal_ConstructFloat32)
    __swig_getmethods__["ConstructFloat64"] = lambda x: _CAPI.RTVal_ConstructFloat64
    if _newclass:ConstructFloat64 = staticmethod(_CAPI.RTVal_ConstructFloat64)
    __swig_getmethods__["ConstructString"] = lambda x: _CAPI.RTVal_ConstructString
    if _newclass:ConstructString = staticmethod(_CAPI.RTVal_ConstructString)
    __swig_getmethods__["ConstructData"] = lambda x: _CAPI.RTVal_ConstructData
    if _newclass:ConstructData = staticmethod(_CAPI.RTVal_ConstructData)
    __swig_getmethods__["ConstructFixedArray"] = lambda x: _CAPI.RTVal_ConstructFixedArray
    if _newclass:ConstructFixedArray = staticmethod(_CAPI.RTVal_ConstructFixedArray)
    __swig_getmethods__["ConstructVariableArray"] = lambda x: _CAPI.RTVal_ConstructVariableArray
    if _newclass:ConstructVariableArray = staticmethod(_CAPI.RTVal_ConstructVariableArray)
    __swig_getmethods__["ConstructExternalArray"] = lambda x: _CAPI.RTVal_ConstructExternalArray
    if _newclass:ConstructExternalArray = staticmethod(_CAPI.RTVal_ConstructExternalArray)
    __swig_getmethods__["ConstructDict"] = lambda x: _CAPI.RTVal_ConstructDict
    if _newclass:ConstructDict = staticmethod(_CAPI.RTVal_ConstructDict)
    __swig_getmethods__["Create"] = lambda x: _CAPI.RTVal_Create
    if _newclass:Create = staticmethod(_CAPI.RTVal_Create)
    def getBoolean(self): return _CAPI.RTVal_getBoolean(self)
    def getUInt8(self): return _CAPI.RTVal_getUInt8(self)
    def getUInt16(self): return _CAPI.RTVal_getUInt16(self)
    def getUInt32(self): return _CAPI.RTVal_getUInt32(self)
    def getUInt64(self): return _CAPI.RTVal_getUInt64(self)
    def getSInt8(self): return _CAPI.RTVal_getSInt8(self)
    def getSInt16(self): return _CAPI.RTVal_getSInt16(self)
    def getSInt32(self): return _CAPI.RTVal_getSInt32(self)
    def getSInt64(self): return _CAPI.RTVal_getSInt64(self)
    def getFloat32(self): return _CAPI.RTVal_getFloat32(self)
    def setFloat32(self, *args): return _CAPI.RTVal_setFloat32(self, *args)
    def getFloat64(self): return _CAPI.RTVal_getFloat64(self)
    def getStringCString(self): return _CAPI.RTVal_getStringCString(self)
    def getStringLength(self): return _CAPI.RTVal_getStringLength(self)
    def getData(self): return _CAPI.RTVal_getData(self)
    def setData(self, *args): return _CAPI.RTVal_setData(self, *args)
    def maybeGetSimpleData(self, *args): return _CAPI.RTVal_maybeGetSimpleData(self, *args)
    def isNullObject(self): return _CAPI.RTVal_isNullObject(self)
    def isArray(self): return _CAPI.RTVal_isArray(self)
    def isDict(self): return _CAPI.RTVal_isDict(self)
    def isStruct(self): return _CAPI.RTVal_isStruct(self)
    def isObject(self): return _CAPI.RTVal_isObject(self)
    def isData(self): return _CAPI.RTVal_isData(self)
    def isInterface(self): return _CAPI.RTVal_isInterface(self)
    def getArraySize(self): return _CAPI.RTVal_getArraySize(self)
    def setArraySize(self, *args): return _CAPI.RTVal_setArraySize(self, *args)
    def getArrayElement(self, *args): return _CAPI.RTVal_getArrayElement(self, *args)
    def setArrayElement(self, *args): return _CAPI.RTVal_setArrayElement(self, *args)
    def getDictSize(self): return _CAPI.RTVal_getDictSize(self)
    def getDictElement(self, *args): return _CAPI.RTVal_getDictElement(self, *args)
    def setDictElement(self, *args): return _CAPI.RTVal_setDictElement(self, *args)
    def maybeGetMember(self, *args): return _CAPI.RTVal_maybeGetMember(self, *args)
    def maybeGetMemberRef(self, *args): return _CAPI.RTVal_maybeGetMemberRef(self, *args)
    def setMember(self, *args): return _CAPI.RTVal_setMember(self, *args)
    def callMethod(self, *args): return _CAPI.RTVal_callMethod(self, *args)
    def getDesc(self): return _CAPI.RTVal_getDesc(self)
    def getTypeName(self): return _CAPI.RTVal_getTypeName(self)
    def getJSON(self): return _CAPI.RTVal_getJSON(self)
    def setJSON(self, *args): return _CAPI.RTVal_setJSON(self, *args)
    __swig_destroy__ = _CAPI.delete_RTVal
    __del__ = lambda self : None;
RTVal_swigregister = _CAPI.RTVal_swigregister
RTVal_swigregister(RTVal)

def RTVal_Construct(*args):
  return _CAPI.RTVal_Construct(*args)
RTVal_Construct = _CAPI.RTVal_Construct

def RTVal_ConstructBoolean(*args):
  return _CAPI.RTVal_ConstructBoolean(*args)
RTVal_ConstructBoolean = _CAPI.RTVal_ConstructBoolean

def RTVal_ConstructSInt8(*args):
  return _CAPI.RTVal_ConstructSInt8(*args)
RTVal_ConstructSInt8 = _CAPI.RTVal_ConstructSInt8

def RTVal_ConstructSInt16(*args):
  return _CAPI.RTVal_ConstructSInt16(*args)
RTVal_ConstructSInt16 = _CAPI.RTVal_ConstructSInt16

def RTVal_ConstructSInt32(*args):
  return _CAPI.RTVal_ConstructSInt32(*args)
RTVal_ConstructSInt32 = _CAPI.RTVal_ConstructSInt32

def RTVal_ConstructSInt64(*args):
  return _CAPI.RTVal_ConstructSInt64(*args)
RTVal_ConstructSInt64 = _CAPI.RTVal_ConstructSInt64

def RTVal_ConstructUInt8(*args):
  return _CAPI.RTVal_ConstructUInt8(*args)
RTVal_ConstructUInt8 = _CAPI.RTVal_ConstructUInt8

def RTVal_ConstructUInt16(*args):
  return _CAPI.RTVal_ConstructUInt16(*args)
RTVal_ConstructUInt16 = _CAPI.RTVal_ConstructUInt16

def RTVal_ConstructUInt32(*args):
  return _CAPI.RTVal_ConstructUInt32(*args)
RTVal_ConstructUInt32 = _CAPI.RTVal_ConstructUInt32

def RTVal_ConstructUInt64(*args):
  return _CAPI.RTVal_ConstructUInt64(*args)
RTVal_ConstructUInt64 = _CAPI.RTVal_ConstructUInt64

def RTVal_ConstructFloat32(*args):
  return _CAPI.RTVal_ConstructFloat32(*args)
RTVal_ConstructFloat32 = _CAPI.RTVal_ConstructFloat32

def RTVal_ConstructFloat64(*args):
  return _CAPI.RTVal_ConstructFloat64(*args)
RTVal_ConstructFloat64 = _CAPI.RTVal_ConstructFloat64

def RTVal_ConstructString(*args):
  return _CAPI.RTVal_ConstructString(*args)
RTVal_ConstructString = _CAPI.RTVal_ConstructString

def RTVal_ConstructData(*args):
  return _CAPI.RTVal_ConstructData(*args)
RTVal_ConstructData = _CAPI.RTVal_ConstructData

def RTVal_ConstructFixedArray(*args):
  return _CAPI.RTVal_ConstructFixedArray(*args)
RTVal_ConstructFixedArray = _CAPI.RTVal_ConstructFixedArray

def RTVal_ConstructVariableArray(*args):
  return _CAPI.RTVal_ConstructVariableArray(*args)
RTVal_ConstructVariableArray = _CAPI.RTVal_ConstructVariableArray

def RTVal_ConstructExternalArray(*args):
  return _CAPI.RTVal_ConstructExternalArray(*args)
RTVal_ConstructExternalArray = _CAPI.RTVal_ConstructExternalArray

def RTVal_ConstructDict(*args):
  return _CAPI.RTVal_ConstructDict(*args)
RTVal_ConstructDict = _CAPI.RTVal_ConstructDict

def RTVal_Create(*args):
  return _CAPI.RTVal_Create(*args)
RTVal_Create = _CAPI.RTVal_Create


def RegisterKLExtension(*args):
  return _CAPI.RegisterKLExtension(*args)
RegisterKLExtension = _CAPI.RegisterKLExtension
class DGCompiledObject(Ref):
    __swig_setmethods__ = {}
    for _s in [Ref]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGCompiledObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Ref]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGCompiledObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_DGCompiledObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def getContext(self): return _CAPI.DGCompiledObject_getContext(self)
    def getErrors_Variant(self): return _CAPI.DGCompiledObject_getErrors_Variant(self)
    def getErrors(self):
      v = self.getErrors_Variant()
      if v.isNull():
        return []
      return Util.variantToPyObject(v)

    __swig_destroy__ = _CAPI.delete_DGCompiledObject
    __del__ = lambda self : None;
DGCompiledObject_swigregister = _CAPI.DGCompiledObject_swigregister
DGCompiledObject_swigregister(DGCompiledObject)

class DGBinding(DGCompiledObject):
    __swig_setmethods__ = {}
    for _s in [DGCompiledObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGBinding, name, value)
    __swig_getmethods__ = {}
    for _s in [DGCompiledObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGBinding, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_DGBinding(*args)
        try: self.this.append(this)
        except: self.this = this
    def setOperator(self, *args): return _CAPI.DGBinding_setOperator(self, *args)
    def getOperator_needswrap(self): return _CAPI.DGBinding_getOperator_needswrap(self)
    def setParameterLayout(self, *args): return _CAPI.DGBinding_setParameterLayout(self, *args)
    def getParameterLayout_Variant(self): return _CAPI.DGBinding_getParameterLayout_Variant(self)
    def getParameterLayout(self):
      v = self.getParameterLayout_Variant()
      return Util.variantToPyObject(v)

    def getOperator(self):
      return _wrapSceneGraphObject(self._fc, self.getOperator_needswrap())

    def __eq__(self, other):
      return (
        self.getOperator() == other.getOperator() and
        self.getParameterLayout() == other.getParameterLayout()
        )

    def __ne__(self, other):
      return not self.__eq__(other)

    __swig_destroy__ = _CAPI.delete_DGBinding
    __del__ = lambda self : None;
DGBinding_swigregister = _CAPI.DGBinding_swigregister
DGBinding_swigregister(DGBinding)

class DGBindingList(DGCompiledObject):
    __swig_setmethods__ = {}
    for _s in [DGCompiledObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGBindingList, name, value)
    __swig_getmethods__ = {}
    for _s in [DGCompiledObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGBindingList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_DGBindingList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(self, *args): return _CAPI.DGBindingList_append(self, *args)
    def insert(self, *args): return _CAPI.DGBindingList_insert(self, *args)
    def remove(self, *args): return _CAPI.DGBindingList_remove(self, *args)
    def getBinding_needswrap(self, *args): return _CAPI.DGBindingList_getBinding_needswrap(self, *args)
    def getCount(self): return _CAPI.DGBindingList_getCount(self)
    def getBinding(self, index):
      return _wrapSceneGraphObject(self._fc, self.getBinding_needswrap(index))

    __swig_destroy__ = _CAPI.delete_DGBindingList
    __del__ = lambda self : None;
DGBindingList_swigregister = _CAPI.DGBindingList_swigregister
DGBindingList_swigregister(DGBindingList)

class DGNamedObject(DGCompiledObject):
    __swig_setmethods__ = {}
    for _s in [DGCompiledObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGNamedObject, name, value)
    __swig_getmethods__ = {}
    for _s in [DGCompiledObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGNamedObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_DGNamedObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def destroy(self): return _CAPI.DGNamedObject_destroy(self)
    def getName(self): return _CAPI.DGNamedObject_getName(self)
    def getName_stl(self): return _CAPI.DGNamedObject_getName_stl(self)
    def setUserData(self, key, value):
      self._fc.userData[self.getName()][key] = value

    def getUserData(self, key):
      return self._fc.userData[self.getName()][key]

    __swig_destroy__ = _CAPI.delete_DGNamedObject
    __del__ = lambda self : None;
DGNamedObject_swigregister = _CAPI.DGNamedObject_swigregister
DGNamedObject_swigregister(DGNamedObject)

class DGContainer(DGNamedObject):
    __swig_setmethods__ = {}
    for _s in [DGNamedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [DGNamedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGContainer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_DGContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def addMember_nodefault(self, *args): return _CAPI.DGContainer_addMember_nodefault(self, *args)
    def addMember_Variant(self, *args): return _CAPI.DGContainer_addMember_Variant(self, *args)
    def removeMember(self, *args): return _CAPI.DGContainer_removeMember(self, *args)
    def getMembers_Variant(self): return _CAPI.DGContainer_getMembers_Variant(self)
    def getMemberType(self, *args): return _CAPI.DGContainer_getMemberType(self, *args)
    def getMemberSize(self, *args): return _CAPI.DGContainer_getMemberSize(self, *args)
    def getMemberIsShallow(self, *args): return _CAPI.DGContainer_getMemberIsShallow(self, *args)
    def getMemberDefaultData_Variant(self, *args): return _CAPI.DGContainer_getMemberDefaultData_Variant(self, *args)
    def size(self): return _CAPI.DGContainer_size(self)
    def resize(self, *args): return _CAPI.DGContainer_resize(self, *args)
    def getMemberSliceData(self, *args): return _CAPI.DGContainer_getMemberSliceData(self, *args)
    def getMemberSliceArraySize(self, *args): return _CAPI.DGContainer_getMemberSliceArraySize(self, *args)
    def getMemberSliceArrayData(self, *args): return _CAPI.DGContainer_getMemberSliceArrayData(self, *args)
    def setMemberSliceData(self, *args): return _CAPI.DGContainer_setMemberSliceData(self, *args)
    def setMemberSliceArraySize(self, *args): return _CAPI.DGContainer_setMemberSliceArraySize(self, *args)
    def setMemberSliceArrayData(self, *args): return _CAPI.DGContainer_setMemberSliceArrayData(self, *args)
    def getMemberAllSlicesData(self, *args): return _CAPI.DGContainer_getMemberAllSlicesData(self, *args)
    def setMemberAllSlicesData(self, *args): return _CAPI.DGContainer_setMemberAllSlicesData(self, *args)
    def getMemberSliceData_Float32(self, *args): return _CAPI.DGContainer_getMemberSliceData_Float32(self, *args)
    def setMemberSliceData_Float32(self, *args): return _CAPI.DGContainer_setMemberSliceData_Float32(self, *args)
    def getMemberSliceData_Variant(self, *args): return _CAPI.DGContainer_getMemberSliceData_Variant(self, *args)
    def setMemberSliceData_Variant(self, *args): return _CAPI.DGContainer_setMemberSliceData_Variant(self, *args)
    def setSliceData_Variant(self, *args): return _CAPI.DGContainer_setSliceData_Variant(self, *args)
    def getMemberSliceValue(self, *args): return _CAPI.DGContainer_getMemberSliceValue(self, *args)
    def setMemberSliceValue(self, *args): return _CAPI.DGContainer_setMemberSliceValue(self, *args)
    def getJSONStringValue(self): return _CAPI.DGContainer_getJSONStringValue(self)
    def setJSONStringValue(self, *args): return _CAPI.DGContainer_setJSONStringValue(self, *args)
    def setData(self, name, index, data = None):
      if data is None:
        data = index
        index = 0
      v = Util.typeToVariant(data)
      self.setMemberSliceData_Variant(name, index, v)

    def setDataNone(self, name, index):
      v = Util.typeToVariant(None)
      self.setMemberSliceData_Variant(name, index, v)

    def getJSON(self):
      rtVal = self.getJSONStringValue()
      return Util.rtValToPyObject(self.getContext(), rtVal)

    def setJSON(self, string):
      stringRTVal = Util.pyObjectToRTVal(self.getContext(), string)
      self.setJSONStringValue(stringRTVal)

    def getValue(self, name, index):
      rtVal = self.getMemberSliceValue(name, index)
      return Util.rtValToPyObject(self.getContext(), rtVal)

    def setValue(self, name, index, value):
      self.setMemberSliceValue(
        name, index, Util.pyObjectToRTVal(self.getContext(), value)
        )

    def getData(self, name, index = 0, dictonly = False):
      v = self.getMemberSliceData_Variant(name, index)
      data = Util.variantToPyObject(v)
      if dictonly:
        return data
      return self._fc.RT._assignPrototypes(data, self.getMemberType(name))

    def getDefaultData(self, name, dictonly = False):
      v = self.getMemberDefaultData_Variant(name)
      data = Util.variantToPyObject(v)
      if dictonly:
        return data
      if data is None:
        return data
      return self._fc.RT._assignPrototypes(data, self.getMemberType(name))

    def setSliceData(self, index, data):
      v = Util.typeToVariant(data)
      self.setSliceData_Variant(index, v)

    def getMembers(self):
      v = self.getMembers_Variant()
      return Util.variantToPyObject(v)

    def addMember(self, name, typeName, defaultValue = None):
      v = None
      if defaultValue is not None:
        v = Util.typeToVariant(defaultValue)
      else:
        v = Variant.CreateNull()
      self.addMember_Variant(name, typeName, v)

    __swig_destroy__ = _CAPI.delete_DGContainer
    __del__ = lambda self : None;
DGContainer_swigregister = _CAPI.DGContainer_swigregister
DGContainer_swigregister(DGContainer)

class DGNode(DGContainer):
    __swig_setmethods__ = {}
    for _s in [DGContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGNode, name, value)
    __swig_getmethods__ = {}
    for _s in [DGContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_DGNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def evaluate(self): return _CAPI.DGNode_evaluate(self)
    def setDependency_real(self, *args): return _CAPI.DGNode_setDependency_real(self, *args)
    def removeDependency(self, *args): return _CAPI.DGNode_removeDependency(self, *args)
    def appendBinding(self, *args): return _CAPI.DGNode_appendBinding(self, *args)
    def getBindingList_needswrap(self): return _CAPI.DGNode_getBindingList_needswrap(self)
    def getDependencies_Variant(self): return _CAPI.DGNode_getDependencies_Variant(self)
    def getDependency(self, *args): return _CAPI.DGNode_getDependency(self, *args)
    __swig_getmethods__["GetByName"] = lambda x: _CAPI.DGNode_GetByName
    if _newclass:GetByName = staticmethod(_CAPI.DGNode_GetByName)
    def getBindingList(self):
      return _wrapSceneGraphObject(self._fc, self.getBindingList_needswrap())

    def setDependency(self, name, node):
      if type(name) is DGNode and ( type(node) is str or type(node) is unicode ):
        print "WARNING: setDependency(): Passing parameters in reverse order (node, name) is deprecated and will be removed in a future version."
        return self.setDependency_real(node, name)
      return self.setDependency_real(name, node)

    def getDependencies(self):
      v = self.getDependencies_Variant()
      dependencies = Util.variantToPyObject(v)
      result = {}
      for key in dependencies:
        result[key] = _wrapSceneGraphObject(self._fc, DGNode.GetByName(self._fc._client, dependencies[key]))
      return result

    def getCount(self):
      return self.size()

    def setCount(self, count):
      self.resize(count)

    def __eq__(self, other):
      return (
        self.getName() == other.getName()
        )

    def __ne__(self, other):
      return not self.__eq__(other)

    __swig_getmethods__["bindings"] = getBindingList
    if _newclass: bindings = property(getBindingList)

    __swig_destroy__ = _CAPI.delete_DGNode
    __del__ = lambda self : None;
DGNode_swigregister = _CAPI.DGNode_swigregister
DGNode_swigregister(DGNode)

def DGNode_GetByName(*args):
  return _CAPI.DGNode_GetByName(*args)
DGNode_GetByName = _CAPI.DGNode_GetByName

class DGOperator(DGContainer):
    __swig_setmethods__ = {}
    for _s in [DGContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [DGContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGOperator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_DGOperator(*args)
        try: self.this.append(this)
        except: self.this = this
    def setFilename(self, *args): return _CAPI.DGOperator_setFilename(self, *args)
    def getFilename(self): return _CAPI.DGOperator_getFilename(self)
    def setSourceCode(self, *args): return _CAPI.DGOperator_setSourceCode(self, *args)
    def getSourceCode(self): return _CAPI.DGOperator_getSourceCode(self)
    def setEntryPoint(self, *args): return _CAPI.DGOperator_setEntryPoint(self, *args)
    def getEntryPoint(self): return _CAPI.DGOperator_getEntryPoint(self)
    def setMainThreadOnly(self, *args): return _CAPI.DGOperator_setMainThreadOnly(self, *args)
    def getMainThreadOnly(self): return _CAPI.DGOperator_getMainThreadOnly(self)
    def getDiagnostics_Variant(self): return _CAPI.DGOperator_getDiagnostics_Variant(self)
    __swig_getmethods__["GetByName"] = lambda x: _CAPI.DGOperator_GetByName
    if _newclass:GetByName = staticmethod(_CAPI.DGOperator_GetByName)
    def getDiagnostics(self):
      v = self.getDiagnostics_Variant()
      if v.isNull():
        return []
      return Util.variantToPyObject(v)

    def __eq__(self, other):
      return (
        self.getName() == other.getName() and
        self.getSourceCode() == other.getSourceCode() and
        self.getFilename() == other.getFilename() and
        self.getEntryPoint() == other.getEntryPoint()
        )

    def __ne__(self, other):
      return not self.__eq__(other)

    __swig_destroy__ = _CAPI.delete_DGOperator
    __del__ = lambda self : None;
DGOperator_swigregister = _CAPI.DGOperator_swigregister
DGOperator_swigregister(DGOperator)

def DGOperator_GetByName(*args):
  return _CAPI.DGOperator_GetByName(*args)
DGOperator_GetByName = _CAPI.DGOperator_GetByName

class DGEventHandler(DGContainer):
    __swig_setmethods__ = {}
    for _s in [DGContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGEventHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [DGContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGEventHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_DGEventHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    def appendChildEventHandler(self, *args): return _CAPI.DGEventHandler_appendChildEventHandler(self, *args)
    def removeChildEventHandler(self, *args): return _CAPI.DGEventHandler_removeChildEventHandler(self, *args)
    def appendPreDescendBinding(self, *args): return _CAPI.DGEventHandler_appendPreDescendBinding(self, *args)
    def getPreDescendBindingList_needswrap(self): return _CAPI.DGEventHandler_getPreDescendBindingList_needswrap(self)
    def appendPostDescendBinding(self, *args): return _CAPI.DGEventHandler_appendPostDescendBinding(self, *args)
    def getPostDescendBindingList_needswrap(self): return _CAPI.DGEventHandler_getPostDescendBindingList_needswrap(self)
    def setScope(self, *args): return _CAPI.DGEventHandler_setScope(self, *args)
    def setScopeName(self, *args): return _CAPI.DGEventHandler_setScopeName(self, *args)
    def getScopeName(self): return _CAPI.DGEventHandler_getScopeName(self)
    def setSelector(self, *args): return _CAPI.DGEventHandler_setSelector(self, *args)
    __swig_getmethods__["GetByName"] = lambda x: _CAPI.DGEventHandler_GetByName
    if _newclass:GetByName = staticmethod(_CAPI.DGEventHandler_GetByName)
    def getChildEventHandlers_Variant(self): return _CAPI.DGEventHandler_getChildEventHandlers_Variant(self)
    def getScopes_Variant(self): return _CAPI.DGEventHandler_getScopes_Variant(self)
    def removeScope(self, *args): return _CAPI.DGEventHandler_removeScope(self, *args)
    def getPreDescendBindingList(self):
      return _wrapSceneGraphObject(self._fc, self.getPreDescendBindingList_needswrap())

    def getPostDescendBindingList(self):
      return _wrapSceneGraphObject(self._fc, self.getPostDescendBindingList_needswrap())

    def getChildEventHandlers(self):
      v = self.getChildEventHandlers_Variant()
      handlers = Util.variantToPyObject(v)
      result = []
      for i in range(0, len(handlers)):
        result.append(_wrapSceneGraphObject(self._fc, DGEventHandler.GetByName(self._fc._client, handlers[i])))
      return result

    def getScopes(self):
      v = self.getScopes_Variant()
      scopes = Util.variantToPyObject(v)
      result = {}
      for key in scopes:
        result[key] = _wrapSceneGraphObject(self._fc, DGNode.GetByName(self._fc._client, scopes[key]))
      return result

    __swig_getmethods__["preDescendBindings"] = getPreDescendBindingList
    if _newclass: preDescendBindings = property(getPreDescendBindingList)
    __swig_getmethods__["postDescendBindings"] = getPostDescendBindingList
    if _newclass: postDescendBindings = property(getPostDescendBindingList)

    __swig_destroy__ = _CAPI.delete_DGEventHandler
    __del__ = lambda self : None;
DGEventHandler_swigregister = _CAPI.DGEventHandler_swigregister
DGEventHandler_swigregister(DGEventHandler)

def DGEventHandler_GetByName(*args):
  return _CAPI.DGEventHandler_GetByName(*args)
DGEventHandler_GetByName = _CAPI.DGEventHandler_GetByName

class DGEvent(DGContainer):
    __swig_setmethods__ = {}
    for _s in [DGContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [DGContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CAPI.new_DGEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    def removeEventHandler(self, *args): return _CAPI.DGEvent_removeEventHandler(self, *args)
    def appendEventHandler(self, *args): return _CAPI.DGEvent_appendEventHandler(self, *args)
    def fire(self): return _CAPI.DGEvent_fire(self)
    def setSelectType(self, *args): return _CAPI.DGEvent_setSelectType(self, *args)
    def getSelectType(self): return _CAPI.DGEvent_getSelectType(self)
    def select_Variant(self): return _CAPI.DGEvent_select_Variant(self)
    def getEventHandlers_Variant(self): return _CAPI.DGEvent_getEventHandlers_Variant(self)
    __swig_getmethods__["GetByName"] = lambda x: _CAPI.DGEvent_GetByName
    if _newclass:GetByName = staticmethod(_CAPI.DGEvent_GetByName)
    def select(self, dictonly = False):
      v = self.select_Variant()
      results = Util.variantToPyObject(v)
      data = []
      for i in range(0, len(results)):
        result = results[i]
        value = result['data']
        if not dictonly:
          value = self._fc.RT._assignPrototypes(result['data'], self.getSelectType())

        data.append( {
          'node': _wrapSceneGraphObject(self._fc, DGNode.GetByName(self._fc._client, result['node'])),
          'value': value
        })
      return data

    def getEventHandlers(self):
      v = self.getEventHandlers_Variant()
      handlers = Util.variantToPyObject(v)
      result = []
      for i in range(0, len(handlers)):
        result.append(_wrapSceneGraphObject(self._fc, DGEventHandler.GetByName(self._fc._client, handlers[i])))
      return result

    __swig_destroy__ = _CAPI.delete_DGEvent
    __del__ = lambda self : None;
DGEvent_swigregister = _CAPI.DGEvent_swigregister
DGEvent_swigregister(DGEvent)

def DGEvent_GetByName(*args):
  return _CAPI.DGEvent_GetByName(*args)
DGEvent_GetByName = _CAPI.DGEvent_GetByName


def PyObjectToVariant(*args):
  return _CAPI.PyObjectToVariant(*args)
PyObjectToVariant = _CAPI.PyObjectToVariant

def VariantToPyObject(*args):
  return _CAPI.VariantToPyObject(*args)
VariantToPyObject = _CAPI.VariantToPyObject

def RTValToPyObject(*args):
  return _CAPI.RTValToPyObject(*args)
RTValToPyObject = _CAPI.RTValToPyObject

def PyObjectToRTVal(*args):
  return _CAPI.PyObjectToRTVal(*args)
PyObjectToRTVal = _CAPI.PyObjectToRTVal

def PythonReportCallback(*args):
  return _CAPI.PythonReportCallback(*args)
PythonReportCallback = _CAPI.PythonReportCallback

def PythonStatusCallback(*args):
  return _CAPI.PythonStatusCallback(*args)
PythonStatusCallback = _CAPI.PythonStatusCallback

def CreatePyRTTypesObject(*args):
  return _CAPI.CreatePyRTTypesObject(*args)
CreatePyRTTypesObject = _CAPI.CreatePyRTTypesObject
# This file is compatible with both classic and new-style classes.


