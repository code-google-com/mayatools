////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		Nightshade Calculator 1.0
//		This script creates a simple and user-friendly calculator in Maya
// 		Made by Martin (Nightshade) Dahlin - martin.dahlin@live.com
//
//		Special thanks to:
//		Chris Zurbrigg and David Johnson from CGTalk for all the coding help.
//
//		Script downloaded from Creative Crash
//
///////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////// Variables //////////////////

// Define memory optionVar if it does NOT exist and set to zero if it does
if (!`optionVar -exists "memOptVar"`) optionVar -stringValue "memOptVar" ""; 

// Necessary?
global string $inputField;


global proc string processString(string $field)
{
	print ("processString ran \n");
	string $return_string, $split_string;
	string $field = `textField -q -text $field`;
	
	// Separate the numbers and the operators
	string $numbers[];
	string $operators[];
	int $numNumbers = `tokenize $field "+-*/()" $numbers`;
	int $numOperators = `tokenize $field "0123456789." $operators`;

	// First number prepared and converted to string. Needed for eval expression
	$finalExpression = "float(" + $numbers[0] + ")";

	// Assembly the remaining characters. Convert numeric characters to (float) strings
	for ($i = 0; $i < $numOperators; $i++) 
	{
		$finalExpression += $operators[$i];
		$finalExpression += "float(" + $numbers[$i+1] + ")";
	}

	float $calcSum = eval("float $temp = " + $finalExpression);

	return $calcSum;
}



////////////////// Calculator procedures //////////////////

global proc calcClear(string $field)
{
	textField -e -text "" $field;
}

global proc calcCE(string $field)
{
	string $fieldString = `textField -q -text $field`;
	int $count;
	$count = `size($fieldString)`;
	$count -= 1;
	$subString = `substring $fieldString 1 $count`;
	
	textField -e -text $subString $field;
}

global proc storeField(string $field)
{
	if (!`optionVar -exists "fieldOptVar"`) optionVar -stringValue "fieldOptVar" ""; 
	optionVar -stringValue "fieldOptVar" `textField -q -text $field`;
}


global proc calcEquals(string $field)
{
	// Replace comma with dot in case the user is using numpad for entry
	string $temp = substituteAllString(`textField -q -text $field`, ",", ".");

	string $calcSum = processString($field);
	textField -e -text $calcSum $field;
}


// Operations
  
global proc calcRoot(string $field)
{
	float $num;
	$num = `textField -q -text $field`;
	if ($num > 0)
	{
		float $calcSum = eval("float $temp = " + "sqrt(" + `textField -q -text $field` + ")");
		textField -e -text $calcSum $field;
	}
}
  
global proc calcSquare(string $field)
{
	float $calcSum = eval("float $temp = " + "pow(" + `textField -q -text $field` + ",2)");
	textField -e -text $calcSum $field;
}

	global proc calcReciprocal(string $field)
{
	float $calcSum = eval("float $temp = " + "1.0/(" + `textField -q -text $field` + ")");
	textField -e -text $calcSum $field;
}    

global proc calcInverse(string $field)
{
	float $calcSum = eval("float $temp = " + "-1.0*(" + `textField -q -text $field` + ")");
	textField -e -text $calcSum $field;
}    


// Memory

global proc memoryClr(string $field)
{	
	optionVar -stringValue "memOptVar" `textField -q -text $field`;
}

global proc memoryStore(string $field)
{
	// Check if user tries to store null value
	if(`textField -q -text $field` == "")
	{
		// Clear memory
		optionVar -stringValue "memOptVar" "";
	} else {
		// Store
		string $evalString = eval("float $temp = " + `textField -q -text $field`);
		optionVar -stringValue "memOptVar" $evalString;
	}
}

global proc memoryRead(string $field)
{
	string $readMem = `optionVar -q "memOptVar"`;	
	textField -e -text $readMem $field;
}

global proc memoryAdd(string $field)
{
	// Check if user tries to store null value
	if(`textField -q -text $field` == "")
	{
		// Clear memory
		optionVar -stringValue "memOptVar" "";
		
	} else {
		// Memory add
		float $evalString = eval("float $temp = " + `optionVar -q memOptVar`);
		float $evalString2 = eval("float $temp = " + `textField -q -text $field`);
		
		$evalString += $evalString2;
		optionVar -stringValue "memOptVar" $evalString;
	}
}

global proc memorySub(string $field)
{
	// Check if user tries to store null value
	if(`textField -q -text $field` == "")
	{
		// Clear memory
		optionVar -stringValue "memOptVar" "";
		
	} else {
		// Memory subtract
		float $evalString = eval("float $temp = " + `optionVar -q memOptVar`);
		float $evalString2 = eval("float $temp = " + `textField -q -text $field`);

		$evalString -= $evalString2;
		optionVar -stringValue "memOptVar" $evalString;
	}
}


////////////////// Main procedure //////////////////

global proc NS_calc()
{ 	
	// Vars
	global string $inputField;
	string $cButton[24];
	
	// Define calcField optionVar if it does NOT exist and set to zero if it does
	if (!`optionVar -exists "calcField"`) optionVar -stringValue "calcField" ""; 
	
	// Simple input commands - store into array positions
	$cButton[0] = "textField -e -insertText 0 $inputField";
	$cButton[1] = "textField -e -insertText 1 $inputField";
	$cButton[2] = "textField -e -insertText 2 $inputField";
	$cButton[3] = "textField -e -insertText 3 $inputField";
	$cButton[4] = "textField -e -insertText 4 $inputField";
	$cButton[5] = "textField -e -insertText 5 $inputField";
	$cButton[6] = "textField -e -insertText 6 $inputField";
	$cButton[7] = "textField -e -insertText 7 $inputField";
	$cButton[8] = "textField -e -insertText 8 $inputField";
	$cButton[9] = "textField -e -insertText 9 $inputField";
	$cButton[10] = "textField -e -insertText \"+\" $inputField"; 
	$cButton[11] = "textField -e -insertText \"-\" $inputField"; 
	$cButton[12] = "textField -e -insertText \"*\" $inputField"; 
	$cButton[13] = "textField -e -insertText \"/\" $inputField"; 
	$cButton[14] = "textField -e -insertText \".\" $inputField"; 
	
	// Prevent clones
	if (`window -exists calcWindow`) deleteUI calcWindow;

////////////////// User-interface //////////////////
	window 
		-sizeable false 
		-title "Nightshade Calculator 1.0" 
		-titleBarMenu false
		-width 497  
		calcWindow;	
 
	columnLayout 
		-columnOffset "left" 0 
		;

		separator 
			-height 8 
			-style "none"
			;
			
	setParent..;
			
	formLayout -height 207 calcLayout;
	
	// Input field		
	$inputField = `
		textField 
			-alwaysInvokeEnterCommandOnReturn true
			-backgroundColor 0.0 0.0 0.0
			-changeCommand "storeField($inputField)"
			-enableBackground true
			-enterCommand "calcEquals($inputField)" 
			-font "boldLabelFont" 
			-height 30 
			-insertionPosition 0
			-width 180 
	`; 	

	// Memory buttons
	iconTextButton 
		-annotation "Memory: Clear" 
		-command "memoryClr($inputField)" 
		-commandRepeatable false 
		-image "NS_buttonMC.bmp" 
		-label "Memory: Clear" 
		buttonMC;
		
	iconTextButton 
		-annotation "Memory: Read" 
		-command "memoryRead($inputField)" 
		-commandRepeatable false 
		-image "NS_buttonMR.bmp" 
		-label "Memory: Read" 
		buttonMR;

	iconTextButton 
		-annotation "Memory: Store" 
		-command "memoryStore($inputField)" 
		-commandRepeatable false 
		-image "NS_buttonMS.bmp" 
		-label "Memory: Store" 
		buttonMS;	

	iconTextButton 
		-annotation "Memory: Add" 
		-command "memoryAdd($inputField)" 
		-commandRepeatable false 
		-image "NS_buttonMAdd.bmp" 
		-label "Memory: Add" 
		buttonMAdd;
		
	iconTextButton 
		-annotation "Memory: Subtract" 
		-command "memorySub($inputField)" 
		-commandRepeatable false 
		-image "NS_buttonMSub.bmp" 
		-label "Memory: Subtract" 
		buttonMSub;

	// Operation buttons
	iconTextButton 
		-annotation "Clear entry" 
		-command "calcCE($inputField)" 
		-commandRepeatable false 
		-image "NS_buttonCE.bmp" 
		-label "Clear entry" 
		buttonCE;			
		
	iconTextButton 
		-annotation "Clear" 
		-command "calcClear($inputField)" 
		-commandRepeatable false 
		-image "NS_buttonClr.bmp" 
		-label "Clear" 
		buttonClr;
		
	iconTextButton 
		-annotation "Inverse" 
		-command "calcInverse($inputField)" 
		-commandRepeatable false 
		-image "NS_buttonInv.bmp" 
		-label "Inverse" 
		buttonInv;			
		
	iconTextButton 
		-annotation "Add" 
		-command $cButton[10] 
		-commandRepeatable false 
		-image "NS_buttonAdd.bmp" 
		-label "Add" 
		buttonAdd;

	iconTextButton 
		-annotation "Subtract" 
		-command $cButton[11] 
		-commandRepeatable false 
		-image "NS_buttonSub.bmp" 
		-label "Subtract" 
		buttonSub;	

	iconTextButton 
		-annotation "Multiply" 
		-command $cButton[12] 
		-commandRepeatable false 
		-image "NS_buttonMulti.bmp" 
		-label "Multiply" 
		buttonMulti;
		
	iconTextButton 
		-annotation "Divide" 
		-command $cButton[13] 
		-commandRepeatable false 
		-image "NS_buttonDiv.bmp" 
		-label "Divide" 
		buttonDiv;

	iconTextButton 
		-annotation "Square" 
		-command "calcSquare($inputField)" 
		-commandRepeatable false 
		-image "NS_buttonSquare.bmp" 
		-label "Square" 
		buttonSquare;
		
	iconTextButton 
		-annotation "Square root" 
		-command "calcRoot($inputField)" 
		-commandRepeatable false 
		-image "NS_buttonSqrt.bmp" 
		-label "Square root" 
		buttonSqrt;
		
	iconTextButton 
		-annotation "Reciprocal" 
		-command "calcReciprocal($inputField)" 
		-commandRepeatable false 
		-image "NS_buttonRecip.bmp" 
		-label "Reciprocal" 
		buttonRecip;

	iconTextButton 
		-annotation "," 
		-command $cButton[14] 
		-commandRepeatable false 
		-image "NS_buttonComma.bmp" 
		-label "," 
		buttonComma;
		
	iconTextButton 
		-annotation "Calculate" 
		-command "calcEquals($inputField)" 
		-commandRepeatable false 
		-image "NS_buttonEquals.bmp" 
		-label "Calculate" 
		buttonEquals;		
	
	// Digits		
	iconTextButton 
		-annotation "Zero" 
		-command $cButton[0] 
		-commandRepeatable false 
		-image "NS_buttonZero.bmp" 
		-label "Zero" 
		buttonZero;

	iconTextButton 
		-annotation "One" 
		-command $cButton[1] 
		-commandRepeatable false 
		-image "NS_buttonOne.bmp" 
		-label "One" 
		buttonOne;			
		
	iconTextButton 
		-annotation "Two" 
		-command $cButton[2] 
		-commandRepeatable false 
		-image "NS_buttonTwo.bmp" 
		-label "Two" 
		buttonTwo;
		
	iconTextButton 
		-annotation "Three" 
		-command $cButton[3] 
		-commandRepeatable false 
		-image "NS_buttonThree.bmp" 
		-label "Three" 
		buttonThree;

	iconTextButton 
		-annotation "Four" 
		-command $cButton[4] 
		-commandRepeatable false 
		-image "NS_buttonFour.bmp" 
		-label "Four" 
		buttonFour;	

	iconTextButton 
		-annotation "Five" 
		-command $cButton[5] 
		-commandRepeatable false 
		-image "NS_buttonFive.bmp" 
		-label "Five" 
		buttonFive;
		
	iconTextButton 
		-annotation "Six" 
		-command $cButton[6] 
		-commandRepeatable false 
		-image "NS_buttonSix.bmp" 
		-label "Six" 
		buttonSix;

	iconTextButton 
		-annotation "Seven" 
		-command $cButton[7] 
		-commandRepeatable false 
		-image "NS_buttonSeven.bmp" 
		-label "Seven" 
		buttonSeven;

	iconTextButton 
		-annotation "Eight" 
		-command $cButton[8] 
		-commandRepeatable false 
		-image "NS_buttonEight.bmp" 
		-label "Eight" 
		buttonEight;
		
	iconTextButton 
		-annotation "Nine" 
		-command $cButton[9] 
		-commandRepeatable false 
		-image "NS_buttonNine.bmp" 
		-label "Nine" 
		buttonNine;
		
	button 
		-label "Close" 
		-width 179 
		-command "deleteUI calcWindow"
		buttonClose; 	

	formLayout -edit 
		
		-attachForm				buttonMC			"top"		40 	
		-attachForm				buttonMC			"left"		0 	
		-attachForm				buttonMR			"top"		40 	
		-attachControl			buttonMR			"left"		-1 	buttonMC 
		-attachForm				buttonMS			"top"		40 	
		-attachControl			buttonMS			"left"		-1 	buttonMR 
		-attachForm				buttonMAdd			"top"		40 	
		-attachControl			buttonMAdd			"left"		-1 	buttonMS 
		-attachForm				buttonMSub			"top"		40 	
		-attachControl			buttonMSub			"left"		-1 	buttonMAdd 

		-attachControl			buttonClr			"top"		-1 	buttonMR
		-attachForm				buttonClr			"left"		0 			
		-attachControl			buttonCE			"top"		-1 	buttonMC
		-attachControl			buttonCE			"left"		-1 	buttonClr  	
		-attachControl			buttonInv			"top"		-1 	buttonMS
		-attachControl			buttonInv			"left"		-1 	buttonCE 
		-attachControl			buttonSqrt			"top"		-1 	buttonMAdd
		-attachControl			buttonSqrt			"left"		-1 	buttonInv 

		-attachControl			buttonSeven			"top"		-1 	buttonClr 
		-attachForm				buttonSeven			"left"		0 	
		-attachControl			buttonEight			"top"		-1 	buttonCE 
		-attachControl			buttonEight			"left"		-1 	buttonSeven 
		-attachControl			buttonNine			"top"		-1 	buttonInv 
		-attachControl			buttonNine			"left"		-1 	buttonEight 
		-attachControl			buttonDiv			"top"		-1 	buttonInv 
		-attachControl			buttonDiv			"left"		-1 	buttonNine 
		-attachControl			buttonSquare		"top"		-1 	buttonSqrt
		-attachControl			buttonSquare		"left"		-1 	buttonDiv 

		-attachControl			buttonFour			"top"		-1 	buttonSeven
		-attachForm				buttonFour			"left"		0 	
		-attachControl			buttonFive			"top"		-1 	buttonEight 
		-attachControl			buttonFive			"left"		-1 	buttonFour 
		-attachControl			buttonSix			"top"		-1 	buttonNine
		-attachControl			buttonSix			"left"		-1 	buttonFive  
		-attachControl			buttonMulti			"top"		-1 	buttonDiv
		-attachControl			buttonMulti			"left"		-1 	buttonSix 
		-attachControl			buttonRecip			"top"		-1 	buttonSquare
		-attachControl			buttonRecip			"left"		-1 	buttonMulti  		

		-attachControl			buttonOne			"top"		-1 	buttonFour
		-attachForm				buttonOne			"left"		0 	
		-attachControl			buttonTwo			"top"		-1 	buttonFive 
		-attachControl			buttonTwo			"left"		-1 	buttonOne 
		-attachControl			buttonThree			"top"		-1 	buttonSix 
		-attachControl			buttonThree			"left"		-1 	buttonTwo  
		-attachControl			buttonSub			"top"		-1 	buttonMulti
		-attachControl			buttonSub			"left"		-1 	buttonThree 
		-attachControl			buttonEquals		"top"		-1 	buttonRecip
		-attachControl			buttonEquals		"left"		-1 	buttonSub  		
		
		-attachControl			buttonZero			"top"		-1 	buttonOne
		-attachForm				buttonZero			"left"		0 	
		-attachControl			buttonComma			"top"		-1 	buttonThree 
		-attachControl			buttonComma			"left"		-1 	buttonZero 
		-attachControl			buttonAdd			"top"		-1 	buttonSub 
		-attachControl			buttonAdd			"left"		-1 	buttonComma  
		-attachControl			buttonEquals		"top"		-1 	buttonRecip
		-attachControl			buttonEquals		"left"		-1 	buttonAdd 	
		
		-attachControl			buttonClose			"top"		13 	buttonZero
		-attachForm				buttonClose			"left"		1  				
		
		calcLayout;

	setParent;

  showWindow;
 
}
// Start after source
NS_calc;
