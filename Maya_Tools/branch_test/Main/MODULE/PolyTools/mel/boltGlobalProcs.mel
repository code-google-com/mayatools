
global proc float[] boltAddFloatArrays(float $array1[], float $array2[])
//adds two float arrays and returns the result
{
	float $array3[];

	if (size($array1) != size($array2))
		{error "Arrays to add should be of same size";}
	
	int $i;
	
	for ($i = 0; $i < (size($array1)); $i++) 
		{$array3[$i] = $array1[$i] + $array2[$i];}
		

	return $array3;		
}


global proc float[] boltSubtractFloatArrays(float $array1[], float $array2[])
//subtracts array2 from array1 and returns the result
{
	float $array3[];

	if (size($array1) != size($array2))
		{error "Arrays to subtract should be of same size";}
	
	int $i;
	
	for ($i = 0; $i < (size($array1)); $i++) 
		{$array3[$i] = $array1[$i] - $array2[$i];}
		
	return $array3;		
} 



// fAppend.mel v1.0
// By Eli Enigenburg
//
// Usage: fAppend array value
// Success returns 1, failure returns 0

global proc int fAppend (float $array[], float $value)
{
	$array[`size($array)`] = $value;
	if ($array[(`size($array)` - 1)] == $value) {
		return 1;
	} 
	return 0;
}

// fDeleteItem.mel v1.0
// By Eli Enigenburg
//
// Usage: fDeleteItem array index
// If you specify an out-of-range index, the procedure will return 0

global proc int fDeleteItem (float $array[], int $index)
{
	if ($index < `size($array)`) {
		float $newArray[];
		int $i;
		for ($i = 0; $i < $index; $i++) {
			fAppend $newArray $array[$i];
		}
		for ($i = ($index + 1); $i < `size($array)`; $i++) {
			fAppend $newArray $array[$i];
		}	
		$array = $newArray;
		return 1;
	}
	return 0;
}

// fFindItem.mel v1.0
// By Eli Enigenburg
//
// Usage: fFindItem array value
// Returns the 0-based index of the first occurence of the value in the array
// If the specified value is not in the array, returns -1

global proc int fFindItem (float $array[], float $value)
{
	int $i;
	if (`size($array)` > 0) {
		for ($i = 0; $i <= `size($array)`; $i++)
		{
			if ($array[$i] == $value) {
				return $i;
			}
		}
	}
	return -1;
}


// iAppend.mel v1.0
// By Eli Enigenburg
//
// Usage: iAppend array value
// Success returns 1, failure returns 0

global proc int iAppend (int $array[], int $value)
{
	$array[`size($array)`] = $value;
	if ($array[(`size($array)` - 1)] == $value) {
		return 1;
	} 
	return 0;
}

// iDeleteItem.mel v1.0
// By Eli Enigenburg
//
// Usage: iDeleteItem array index
// If you specify an out-of-range index, the procedure will return 0

global proc int iDeleteItem (int $array[], int $index)
{
	if ($index < `size($array)`) {
		int $newArray[];
		int $i;
		for ($i = 0; $i < $index; $i++) {
			iAppend $newArray $array[$i];
		}
		for ($i = ($index + 1); $i < `size($array)`; $i++) {
			iAppend $newArray $array[$i];
		}	
		$array = $newArray;
		return 1;
	}
	return 0;
}

// Usage: iFindItem array value
// Returns the 0-based index of the first occurence of the value in the array
// If the specified value is not in the array, returns -1

global proc int iFindItem (int $array[], int $value)
{
	int $i;
	if (`size($array)` > 0) 
	{
		for ($i = 0; $i <= `size($array)`; $i++)
		{
			if ($array[$i] == $value) return $i;
		}
	}
	return -1;
}




// sAppend.mel v1.0
// By Eli Enigenburg
//
// Usage: sAppend array value
// Success returns 1, failure returns 0

global proc int sAppend (string $array[], string $value)
{
	$array[`size($array)`] = $value;
	if ($array[(`size($array)` - 1)] == $value) {
		return 1;
	} 
	return 0;
}

// sDeleteItem.mel v1.0
// By Eli Enigenburg
//
// Usage: sDeleteItem array index
// If you specify an out-of-range index, the procedure will return 0

global proc int sDeleteItem (string $array[], int $index)
{
	if ($index < `size($array)`) {
		string $newArray[];
		int $i;
		for ($i = 0; $i < $index; $i++) {
			sAppend $newArray $array[$i];
		}
		for ($i = ($index + 1); $i < `size($array)`; $i++) {
			sAppend $newArray $array[$i];
		}	
		$array = $newArray;
		return 1;
	}
	return 0;
}

// sFindItem.mel v1.0
// By Eli Enigenburg
//
// Usage: sFindItem array value
// Returns the 0-based index of the first occurence of the value in the array
// If the specified value is not in the array, returns -1

global proc int sFindItem (string $array[], string $value)
{
	int $i;
	if (`size($array)` > 0) {
		for ($i = 0; $i <= `size($array)`; $i++)
		{
			if ($array[$i] == $value) {
				return $i;
			}
		}
	}
	return -1;
}


global proc int sGmatchItem (string $array[], string $value)
//returns the first item index of the array that gmatches the supplied value / wildcard
{
	int $i;
	if (`size($array)` > 0) 
	{
		for ($i = 0; $i <= `size($array)`; $i++)
		{
			if (`gmatch $array[$i] $value`) 
			{
				return $i;
			}
		}
	}
	return -1;
}




global proc int[] sFindItems (string $array[], string $value)
//returns a list of indexes of all the found items in an array
{
	int $result[] = {};
	
	if (`size($array)` > 0) 
	{
		for ($i = 0; $i <= `size($array)`; $i++)
		{
			if ($array[$i] == $value) 
			{
				$result[size($result)] = $i;
			}
		}
	}
	return $result;
}


global proc string boltFloatToString(float $float, int $decimalPlaces)
//converts a float to a string with the specified number of decimal places.
//pads out with 0s if necessary
//now works properly for 0 decimal places
{
	string $whole = `trunc $float`;
	
	if ($decimalPlaces == 0) return $whole; 
	
	string $decimal = $float - trunc($float);
	if ($decimal != "0")
	{
		$decimal = `substring $decimal 3 ($decimalPlaces+2)`;
	}
	while (size($decimal) < $decimalPlaces)
	{
		$decimal = $decimal + "0";
	}
	
	return ($whole + "." + $decimal);
}