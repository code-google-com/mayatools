

global proc boltStoreExposure()
//saves current exposure to a global
{
	global float $g_bolt_exposure;
	float $exposure = boltGetExposure();
	//don't save if default exposure of 1 - prevents losing previous env exposure if flipping between vertex colour modes
	if ($exposure != 1) $g_bolt_exposure = $exposure; 
	print ("\nSaved Exposure: " +  $g_bolt_exposure);
}

global proc boltRestoreExposure()
//restores saved exposure from global
{
	global float $g_bolt_exposure;
	if ($g_bolt_exposure != 0) boltSetExposure($g_bolt_exposure);
}

global proc float boltGetExposure()
//returns current exposure
{
	float $expo = 1;
	
	string $gEnvNode = `AmuGetGlobalEnvironmentsNode`;
	string $env = AmuGetCurrentGlobalEnvironmentNode($gEnvNode);
	
	if (`attributeQuery -node $env -ex "Mat_float_exposure"`)
	{
		$expo = getAttr ($env+".Mat_float_exposure");
	}
	print ("\n boltGetExposure returning: " + $expo + " from Env: " + $env);
	return $expo;
}

global proc boltSetExposure(float $exposure)
//set current exposure
{
	string $atgEnvironments[] = `ls -et AtgEnvironment`;
	for ($env in $atgEnvironments)
	{
		if (`attributeQuery -node $env -ex "Mat_float_exposure"`)
		{
			setAttr ($env+".Mat_float_exposure") $exposure;
		}
	}
	print ("\nExposure set to: " +  $exposure);
}



proc boltSwitchAllDisplayColours (int $bool)
//switches mesh display colours on/off for all meshes in scene
{	
	string $allShapes[] = `ls -type mesh`;
	for ($shape in $allShapes)
	{
		setAttr ($shape + ".displayColors") $bool;
	}
}

global proc boltRestoreTechniques()
//runs the restore techniques script node if present
{
	if (`objExists "techniqueScriptNode"`)
	//only restore if there is info to use
	{
		scriptNode -ea "techniqueScriptNode";
		delete "techniqueScriptNode";
	}
}

global proc boltRemoveDebugShaders(int $restoreExposure)
//removes debug shaders
{
	if (`objExists "techniqueScriptNode"`)
	{
		boltRestoreTechniques;
		//runs the scriptnode to restore shaders
	
		if ($restoreExposure) boltRestoreExposure;
	
		if (`objExists "TEMP_DEBUG_SHADER"`) delete "TEMP_DEBUG_SHADER";
		if (`objExists "TEMP_DEBUG_SHADER2"`) delete "TEMP_DEBUG_SHADER2";
		//make sure this is deleted
	}
}

global proc boltAddDebugShader(int $type)
//switches all shaders to debug versions
{
	string $debugMaterialName = "TEMP_DEBUG_SHADER";
	string $debugMaterialPath = "M:/assets/noodle/Materials/Library/Vehicles_DC/debug.xml";
	if ($type == 2) 
	{
		boltTurnOffDoubleSided; // needs to be disabled or xray looks wrong
		$debugMaterialName = "TEMP_DEBUG_SHADER2";
		$debugMaterialPath = "M:/assets/noodle/Materials/Library/Vehicles_DC/debug2.xml";
	}
	
	boltRemoveDebugShaders(0);
	
	string $techniqueScript = "";
	string $shaders[] = `ls -materials`;
	
	//print "FOUND SHADERS:\n";
	//print $shaders;
	
		
	//string $debugShader = `shadingNode -asShader blinn -name "TEMP_DEBUG_SHADER"`;
	string $debugShader = `shadingNode -asShader ATGMaterial -name $debugMaterialName`;
	setAttr ($debugShader + ".SelectMode") 0;                                                        
	setAttr -type "string" ($debugShader + ".RawPath") $debugMaterialPath;
	//create debug shader
	
	setAttr -type "string" ($debugShader + ".Mat_colour_VertexColour1") "colorSet1";
	//force to use the default colourSet1
	
	for ($shader in $shaders) 
	{
		
		if ( ($shader != "lambert1") && ($shader != "particleCloud1") && ($shader != "shaderGlow1")&& ($shader != $debugShader) )
		//ignore maya's default shaders, and debug shader
		{
			print ("working on shader: "+$shader+"\n");
		
			string $sgs[] = `listConnections -type "shadingEngine" ($shader + ".outColor")`;
		
			print "found SGs:\n";
			print $sgs;
		
			for ($sg in $sgs)
			{
				catchQuiet(`connectAttr -f ($debugShader + ".outColor") ($sg + ".surfaceShader")`);
				$techniqueScript +=  ("catchQuiet(`connectAttr -f " + $shader + ".outColor " + $sg + ".surfaceShader`);\n");
			}
		}
	}
		
	$techniqueScript += ("delete " + $debugShader + ";\n");

	print $techniqueScript;
	if (objExists("techniqueScriptNode")) delete "techniqueScriptNode";
	scriptNode -scriptType 0 -as $techniqueScript -name "techniqueScriptNode";
	//create script node
	
}


proc boltUseCheckerboard(string $checkerPath)
//switches all evo + maya shaders to use specified texture, preserving originals in script node
{
	boltRestoreTechniques;
	//restore techniques - so techs won't be lost if button pressed twice)
	
	string $shaders[] = `ls -materials`;
	string $techniqueScript = "";
	
	if (objExists("BPTCheckerMapTexture")) delete "BPTCheckerMapTexture";
	
	string $checkerFileNode = `shadingNode -asTexture file -name "BPTCheckerMapTexture"`;
	setAttr -type "string" ($checkerFileNode + ".fileTextureName") $checkerPath;
	
	string $checkerShader = `shadingNode -asShader blinn -name ("temp_checkerboard_shader")`;
	connectAttr -force ($checkerFileNode + ".outColor") ($checkerShader + ".color");
	
	for ($shader in $shaders) 
	{
		if ( ($shader != "lambert1") && ($shader != "particleCloud1") && ($shader != "shaderGlow1") )
		//ignore maya's default shaders
		{
			string $sgs[] = `listConnections -type "shadingEngine" ($shader + ".outColor")`;
			//print "found SGs:\n";
			//print $sgs;

			for ($sg in $sgs)
			{
				catchQuiet(`connectAttr -f ($checkerShader + ".outColor") ($sg + ".surfaceShader")`);
				$techniqueScript +=  ("catchQuiet(`connectAttr -f " + $shader + ".outColor " + $sg + ".surfaceShader`);\n");
			}
		}
	}
		
	$techniqueScript += ("delete " + $checkerShader + ";\n");
	
	//print $techniqueScript;
	if (objExists("techniqueScriptNode")) delete "techniqueScriptNode";
	scriptNode -scriptType 0 -as $techniqueScript -name "techniqueScriptNode";
	//create script node
	
	boltSwitchAllDisplayColours 0;
}



global proc boltSetupDebugEnv(string $envType)
{
	boltRemoveDebugShaders(1);  
	
	string $gEnvNode = `AmuGetGlobalEnvironmentsNode`;
	
	if ($envType == "Dirt")
	{
		boltSetATGEnv "DirtDamageDebugView";
		string $envNode = `AmuGetCurrentGlobalEnvironmentNode $gEnvNode`;
		setAttr ($envNode + ".Mat_float_dirtDamageMix") 1;
	}
	if ($envType == "Damage")
	{
		boltSetATGEnv "DirtDamageDebugView";
		string $envNode = `AmuGetCurrentGlobalEnvironmentNode $gEnvNode`;
		setAttr ($envNode + ".Mat_float_dirtDamageMix") 0;
	}
	if ($envType == "Occlusion")
	{
		boltSetATGEnv "AmbientOcclusionView";
	}
	if ($envType == "Shininess")
	{
		boltSetATGEnv "ShininessView";
	}
	if ($envType == "Smoothness")
	{
		boltSetATGEnv "SmoothnessView";
	}
	if ($envType == "Albedo")
	{
		boltSetATGEnv "AlbedoView";
	}
	if ($envType == "Normal")
	{
		boltSetATGEnv "NormalView";
	}
	if ($envType == "Dent1")
	{
		boltSetATGEnv "DirectionalAndCubemapLight_Dent1";
	}
	if ($envType == "Dent2")
	{
		boltSetATGEnv "DirectionalAndCubemapLight_Dent2";
	}
	if ($envType == "Ingame")
	{
		//clean up dent envs
		if (objExists("DirectionalAndCubemapLight_Dent1")) delete "DirectionalAndCubemapLight_Dent1";
		if (objExists("DirectionalAndCubemapLight_Dent2")) delete "DirectionalAndCubemapLight_Dent2";
		if (objExists("DirectionalAndCubemapLight_Dent1_Texture")) delete "DirectionalAndCubemapLight_Dent1_Texture";
		if (objExists("DirectionalAndCubemapLight_Dent2_Texture")) delete "DirectionalAndCubemapLight_Dent2_Texture";
		
		boltSetATGEnv "DirectionalAndCubemapLight";
	}
}



global proc boltSetATGEnv(string $envName)
{

	string $gEnvNode = `AmuGetGlobalEnvironmentsNode`;

	string $nodes[];
	string $names[];		
	string $files[];		
	string $categories[];	
	string $descriptions[];

	int $plugs[];

	$plugs = `AmuGetGlobalEnvironmentsNodeEnvironments $gEnvNode $nodes $names $files $categories`;
	//gets lists of available environments (already created in scene)

	//print $names;

	for ($i=0; $i<size($plugs); $i++)
	{
		if ($names[$i] == $envName)
		{
			AmuSetCurrentGlobalEnvironmentIndex $gEnvNode $plugs[$i];
			return;
		}
		
		//finds the dent envs
		if ($nodes[$i] == $envName)
		{
			AmuSetCurrentGlobalEnvironmentIndex $gEnvNode $plugs[$i];
			return;
		}
		
		
	}
	//set to existing environment if found
	
	int $numEnvs;
	$numEnvs = `AmuGetAvailableGlobalEnvironments $gEnvNode $names $files $categories $descriptions`;
	//get lists af all available environments that can be created
	
	for ($i=0; $i<$numEnvs; $i++)
	{
		if ($names[$i] == $envName)
		{
			AmuCreateGlobalEnvironment $gEnvNode $names[$i] $categories[$i] $files[$i] 1 0;
			return;
		}
	}
	
	int $numEnvs;
	$numEnvs = `AmuGetAvailableGlobalEnvironments $gEnvNode $names $files $categories $descriptions`;
	//get lists af all available environments that can be created
	
	if ( ($envName == "DirectionalAndCubemapLight_Dent1") || ($envName == "DirectionalAndCubemapLight_Dent2") )
	{
		for ($i=0; $i<$numEnvs; $i++)
		{
			if ($names[$i] == "DirectionalAndCubemapLight")
			{
				//create env
				string $oldSelection[] = `ls -sl`;
				select -cl;
				AmuCreateGlobalEnvironment $gEnvNode $names[$i] $categories[$i] $files[$i] 1 1;
				string $newEnv[] = `ls -sl`;
				rename $newEnv[0] $envName;
			
				//create texture node
				if (objExists($envName + "_Texture")) delete ($envName + "_Texture");
				string $envFileNode = `shadingNode -asTexture file -name ($envName + "_Texture")`;
				
				if ($envName == "DirectionalAndCubemapLight_Dent1")
				{
					setAttr -type "string" ($envFileNode + ".fileTextureName") "M:/art/vehicles/GENERIC_TEXTURES/TEST/dent_removal_1_env.dds";
				}
				if ($envName == "DirectionalAndCubemapLight_Dent2")
				{
					setAttr -type "string" ($envFileNode + ".fileTextureName") "M:/art/vehicles/GENERIC_TEXTURES/TEST/dent_removal_2_env.dds";
				}
				
				connectAttr -force ($envFileNode + ".fileTextureName") ($envName + ".Mat_texture_ambientReflectTex");
			}
		}
		return;
	}
	print "\nEnv selection failed";
	
}


global proc boltUpdateUVTestScales()
//updates the UV scales in the debug shader when altered in the GUI
{
	if (`floatField -exists boltDebugShaderUVScaleField`)
	{
		float $scale  = `floatField -q -value boltDebugShaderUVScaleField`;
		float $aspect = `floatField -q -value boltDebugShaderUVAspectField`;

		if (`objExists "TEMP_DEBUG_SHADER"`)
		{
			setAttr "TEMP_DEBUG_SHADER.Mat_float_UScale" ($scale*$aspect);
			setAttr "TEMP_DEBUG_SHADER.Mat_float_VScale" $scale;
		}
	}
}



global proc boltEditDebugFloatField(string $floatField, float $adjustment)
//addjusts the specified float field by the specified amount
{
	float $currentValue = `floatField -q -value $floatField`;
	float $newValue = $currentValue + $adjustment;
	
	if ($newValue > `floatField -q -max $floatField`) $newValue = `floatField -q -max $floatField`;
	if ($newValue < `floatField -q -min $floatField`) $newValue = `floatField -q -min $floatField`;
	
	floatField -e -value $newValue $floatField;
}


global proc boltChangeShaderAttr (string $attr, string $floatField)
//searches all shaders in scene for specified attribute, and sets to value found in specified float field
{
	float $attrValue = `floatField -q -value $floatField`;
	
	string $shaders[] = `ls -materials`;
	for ($shader in $shaders)
	{
		if (`attributeExists $attr $shader`)
		{
			setAttr ($shader + "." + $attr) $attrValue;
		}
	}
}

global proc boltChangeEnvAttr (string $attr, string $floatField)
//searches all atg envs in scene for specified attribute, and sets to value found in specified float field
{
	float $attrValue = `floatField -q -value $floatField`;
	
	string $atgEnvs[] = `ls -type "AtgEnvironment"`;
	for ($env in $atgEnvs)
	{
		if (`attributeExists $attr $env`)
		{
			setAttr ($env + "." + $attr) $attrValue;
		}
	}
}


proc boltEditDebugShader(float $settings[], int $type)
// Sets the debug shader according to these settings values:
// 0 1 2 3 4         5   6   7       8        9             10            11            12      13         14        15       16 
// R G B A VertexCol UV1 UV2 Diffuse Emissive AlbedoColourR AlbedoColourG AlbedoColourB Normals Smoothness Shininess Exposure VColourSet
// type 2:
//0    1  2  3   4   5   6    7     8     9    10    11   12
//DifR DG DB EmR EmG EmB Vari FAlph EAlph EPow Smoot Shin Expo


{
	print ("\nEXPOSURE IS: " + boltGetExposure());
	
	
	boltSetATGEnv "DirectionalAndCubemapLight";
	
	float $exposure = 0.0;
	if ($type == 1) $exposure = $settings[15];
	if ($type == 2) $exposure = $settings[12];
	
	if ($exposure == 1)
	{
		print "\nStoring current exposure, and setting exposure to 1...";
		boltStoreExposure();
		boltSetExposure(1);
	}
	else
	{
		print "\nRestoring Original Exposure";
		boltRestoreExposure();
	}
	
	if ($type == 1)
	{
		if (!`objExists "TEMP_DEBUG_SHADER"`)
		{
			print "\nAdding debug shader...";
			boltAddDebugShader ($type);
		}
	}
	if ($type == 2)
	{
		if (!`objExists "TEMP_DEBUG_SHADER2"`)
		{
			print "\nAdding debug shader...";
			boltAddDebugShader ($type);
		}
	}
	
	if ($type == 1)
	{
		setAttr "TEMP_DEBUG_SHADER.Mat_float_RedAmount" 			$settings[0];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_GreenAmount" 			$settings[1];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_BlueAmount" 			$settings[2];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_AlphaAmount" 			$settings[3];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_VertexColourAmount" 	$settings[4];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_UVTestMap1Amount" 		$settings[5];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_UVTestMap2Amount" 		$settings[6];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_DiffuseAmount" 		$settings[7];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_EmissiveAmount" 		$settings[8];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_AlbedoColour0" 		$settings[9];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_AlbedoColour1" 		$settings[10];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_AlbedoColour2" 		$settings[11];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_NormalsAmount"			$settings[12];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_Smoothness"			$settings[13];
		setAttr "TEMP_DEBUG_SHADER.Mat_float_Shininess"				$settings[14];
		
		if ($settings[16] == 0) setAttr -type "string" "TEMP_DEBUG_SHADER.Mat_colour_VertexColour1" "colorSet1";
		if ($settings[16] == 1) setAttr -type "string" "TEMP_DEBUG_SHADER.Mat_colour_VertexColour1" "damageLookup_colorSet";
		if ($settings[16] == 2) setAttr -type "string" "TEMP_DEBUG_SHADER.Mat_colour_VertexColour1" "damageVector_colorSet";   
	
		boltUpdateUVTestScales;  
	}
	
	//0    1  2  3   4   5   6    7     8     9    10    11   12  
	//DifR DG DB EmR EmG EmB Vari FAlph EAlph EPow Smoot Shin Expo
	if ($type == 2)
	{
		setAttr "TEMP_DEBUG_SHADER2.Mat_float_DiffuseColour0" 			$settings[0];
		setAttr "TEMP_DEBUG_SHADER2.Mat_float_DiffuseColour1" 			$settings[1];
		setAttr "TEMP_DEBUG_SHADER2.Mat_float_DiffuseColour2" 			$settings[2];
		setAttr "TEMP_DEBUG_SHADER2.Mat_float_EmissiveColour0" 			$settings[3];
		setAttr "TEMP_DEBUG_SHADER2.Mat_float_EmissiveColour1" 			$settings[4];
		setAttr "TEMP_DEBUG_SHADER2.Mat_float_EmissiveColour2" 			$settings[5];
		setAttr "TEMP_DEBUG_SHADER2.Mat_float_PerObjectColourVariance" 	$settings[6];
		setAttr "TEMP_DEBUG_SHADER2.Mat_float_FaceAlpha" 				$settings[7];
		setAttr "TEMP_DEBUG_SHADER2.Mat_float_EdgeAlpha" 				$settings[8];
		setAttr "TEMP_DEBUG_SHADER2.Mat_float_EdgePower1" 				$settings[9];
		setAttr "TEMP_DEBUG_SHADER2.Mat_float_Smoothness"				$settings[10];
		setAttr "TEMP_DEBUG_SHADER2.Mat_float_Shininess"				$settings[11];
	}
	 
}


global proc boltEditDebugPresets (string $preset)
//defines presets for the debug shader
{
	float $settings[];
	int $type = 1;
	//                                        R   G B A VCol UV1 UV2 Dif Emis AlbR AlbG AlbB Norm Smoot Shin Expo Cols
	if ($preset == "RVertexCol") $settings = {1.0,0,0,0,0,   0,  0,  0,  1,   0,   0,   0,   0,   0,    0,	 1,	  0};
	if ($preset == "GVertexCol") $settings = {0.0,1,0,0,0,   0,  0,  0,  1,   0,   0,   0,   0,   0,    0,	 1,	  0};
	if ($preset == "BVertexCol") $settings = {0.0,0,1,0,0,   0,  0,  0,  1,   0,   0,   0,   0,   0,    0,	 1,	  0};
	if ($preset == "AVertexCol") $settings = {0.0,0,0,1,0,   0,  0,  0,  1,   0,   0,   0,   0,   0,    0,	 1,	  0};
	if ($preset == "VertexCols") $settings = {0.0,0,0,0,1,   0,  0,  0,  1,   0,   0,   0,   0,   0,    0,	 1,	  0};
	if ($preset == "UVTest1")    $settings = {0.0,0,0,0,0,   1,  0,  1,  0,   0,   0,   0,   0,   0,    0,	 0,	  0};
	if ($preset == "UVTest2")    $settings = {0.0,0,0,0,0,   0,  1,  1,  0,   0,   0,   0,   0,   0,    0,	 0,	  0};
	if ($preset == "GreyDiff")   $settings = {0.0,0,0,0,0,   0,  0,  1,  0,   0.25,0.25,0.25,0,   0,    0,	 0,	  0};
	if ($preset == "GreyShiny")  $settings = {0.0,0,0,0,0,   0,  0,  1,  0,   0.1, 0.1, 0.1, 0,   0.95, 0.45,0,	  0};
	if ($preset == "Normals")    $settings = {0.0,0,0,0,0,   0,  0,  0,  1,   0,   0,   0,   1,   0,    0,	 1,	  0};   
	if ($preset == "DiffOccl")   $settings = {0.0,0,0,1,0,   0,  0,  1,  0,   0,   0,   0,   0,   0,    0,	 0,	  0};   
	if ($preset == "DamCols1")   $settings = {0.0,0,0,0,1,   0,  0,  0,  1,   0,   0,   0,   0,   0,    0,	 1,	  1};
	if ($preset == "DamCols2")   $settings = {0.0,0,0,0,1,   0,  0,  0,  1,   0,   0,   0,   0,   0,    0,	 1,	  2};
	
	//									   DifR  DG    DB    EmR EmG EmB Vari FAlph EAlph EPow Smoot Shin Expo
	if ($preset == "XRay")    $settings = {0.0,  0,    0,    1,  1,  1,  0,   0.05, 0.5,  3,   0,    0,   1};
	if ($preset == "XRayCol") $settings = {0.25, 0.25, 0.25, 0,  0,  0,  0.5, 0.2,  0.6,  3,   0.96, 0.04,0};
	if ($preset == "XRay") $type = 2;
	if ($preset == "XRayCol") $type = 2;
	
	boltEditDebugShader $settings $type;
}

global proc boltDebugShaderGUI()
//gui for the debug shaders
{
	
	if (`window -exists boltDebugShaderWindow`) deleteUI boltDebugShaderWindow;
	//delete the window if it already exists
	
	window -height 600 -width 132 -title "Debug Shaders" -toolbox 1 boltDebugShaderWindow;
	//create window
		//scrollLayout;
			frameLayout -mw 0 -mh 0 -bv 0 -lv 0;
				columnLayout;
					
					frameLayout  -collapsable 1 -label "Debug Shader" -marginHeight 5 -marginWidth 5 -labelAlign "center" -borderStyle "etchedOut";
						columnLayout;
							rowLayout -numberOfColumns 3;
								button -height 20 -width 66 -recomputeSize 0 -backgroundColor 1 0.29 0.29	-label "Red" 		-command "boltEditDebugPresets RVertexCol";	
								button -height 20 -width 66 -recomputeSize 0 -backgroundColor 0.34 1 0.31	-label "Green"	-command "boltEditDebugPresets GVertexCol";
								button -height 20 -width 66 -recomputeSize 0 -backgroundColor 0 0.45 1		-label "Blue"		-command "boltEditDebugPresets BVertexCol";
							setParent ..;
							rowLayout -numberOfColumns 2;
								button -height 20 -width 100 -recomputeSize 0 -backgroundColor 0.64 0.64 0.64	-label "Alpha"	-command "boltEditDebugPresets AVertexCol";
								button -height 20 -width 100 -recomputeSize 0 -backgroundColor 1 0.47 0.95	-label "RGB"				-command "boltEditDebugPresets VertexCols";
							setParent ..;
							rowLayout -numberOfColumns 2;
								button -height 20 -width 100 -recomputeSize 0 -label "UV Test 1"			-command "boltEditDebugPresets UVTest1";
								button -height 20 -width 100 -recomputeSize 0 -label "UV Test 2"			-command "boltEditDebugPresets UVTest2";
							setParent ..;
							
							rowLayout -numberOfColumns 4;
								text -label "Scale:" -width 48;
								floatField -width 50 -value 2.0 -changeCommand "boltUpdateUVTestScales" boltDebugShaderUVScaleField;
								text -label "Aspect:" -width 48;
								floatField -width 50 -value 1.0 -changeCommand "boltUpdateUVTestScales" boltDebugShaderUVAspectField;
							setParent ..;

							rowLayout -numberOfColumns 2;
								button -height 20 -width 100 -recomputeSize 0 -label "Diffuse + Occlusion"	-command "boltEditDebugPresets DiffOccl";
								button -height 20 -width 100 -recomputeSize 0 -label "Grey Diffuse"		-command "boltEditDebugPresets GreyDiff";
							setParent ..;
							rowLayout -numberOfColumns 2;
								button -height 20 -width 100 -recomputeSize 0 -label "Grey Shiny"		-command "boltEditDebugPresets GreyShiny";
								button -height 20 -width 100 -recomputeSize 0 -label "Vertex Normals"	-command "boltEditDebugPresets Normals";
							setParent ..;
							rowLayout -numberOfColumns 2;
								button -height 20 -width 100 -recomputeSize 0 -label "X-Ray"			-command "boltEditDebugPresets XRay";
								button -height 20 -width 100 -recomputeSize 0 -label "X-Ray Coloured"	-command "boltEditDebugPresets XRayCol";
							setParent ..;
							rowLayout -numberOfColumns 2;
								button -height 20 -width 100 -recomputeSize 0 -label "Damage Lookup"	-command "boltEditDebugPresets DamCols1";
								button -height 20 -width 100 -recomputeSize 0 -label "Damage Vectors"	-command "boltEditDebugPresets DamCols2";
							setParent ..;
							rowLayout -numberOfColumns 1;
								button -height 20 -width 202 -recomputeSize 0 -label "Show Original"	-command "boltRemoveDebugShaders(1)";
							setParent ..;
						setParent ..;	
					setParent ..;
					
					frameLayout  -collapsable 1 -label "Debug Envs" -marginHeight 5 -marginWidth 5 -labelAlign "center" -borderStyle "etchedOut";
						columnLayout;
							
							//rowLayout -numberOfColumns 2;
							//	button -height 20 -width 100 -recomputeSize 0 -label "Mud" 		-command "boltSetupDebugEnv Dirt";	
							//	button -height 20 -width 100 -recomputeSize 0 -label "Damage"	-command "boltSetupDebugEnv Damage";
							//setParent ..;
							
							rowLayout -numberOfColumns 2;
								button -height 20 -width 100 -recomputeSize 0 -label "Dent Removal V"	-command "boltSetupDebugEnv Dent1";
								button -height 20 -width 100 -recomputeSize 0 -label "Dent Removal H"	-command "boltSetupDebugEnv Dent2";
							setParent ..;
							
							rowLayout -numberOfColumns 2;
								button -height 20 -width 100 -recomputeSize 0 -label "Occlusion"	-command "boltSetupDebugEnv Occlusion";
								button -height 20 -width 100 -recomputeSize 0 -label "Albedo"	-command "boltSetupDebugEnv Albedo";
							setParent ..;						
							rowLayout -numberOfColumns 2;
								button -height 20 -width 100 -recomputeSize 0 -label "Smoothness"	-command "boltSetupDebugEnv Smoothness";
								button -height 20 -width 100 -recomputeSize 0 -label "Shininess"	-command "boltSetupDebugEnv Shininess";
							setParent ..;
							rowLayout -numberOfColumns 2;
								button -height 20 -width 100 -recomputeSize 0 -label "Normal"	-command "boltSetupDebugEnv Normal";
								button -height 20 -width 100 -recomputeSize 0 -label "Ingame Cubemap"	-command "boltSetupDebugEnv Ingame";
							setParent ..;

							
						setParent ..;
					setParent ..;
					
					frameLayout  -collapsable 1 -label "Shader Tests" -marginHeight 5 -marginWidth 5 -labelAlign "center" -borderStyle "etchedOut";
						columnLayout;
							
								
							rowLayout -numberOfColumns 2;
	    						text -label "Lights:" -width 70;
	    						optionMenu -changeCommand "boltLightShaderTestUpdate;" -width 130 boltLightTestOption;
 									menuItem -label "All off";
 									menuItem -label "All on";
									menuItem -label "Head lights";
									menuItem -label "Side lights";
									menuItem -label "Tail lights";
									menuItem -label "Brake lights";
 									menuItem -label "Combi lights";
 									menuItem -label "Courtesy light";
									menuItem -label "Reverse light";
							setParent ..;
							
							rowLayout -numberOfColumns 2;
								text -label "Scrapes:" -width 100;
								floatSlider -w 100 -min 0 -max 1 -value 0 -step 0.01 boltDebugScrapeSlider;
								boltDebugConnectShaderControl "boltDebugScrapeSlider" ".Mat_float_damagetexturein_scrape_tester";	
							setParent ..;	
							rowLayout -numberOfColumns 2;
								text -label "Crumples:" -width 100;
								floatSlider -w 100 -min 0 -max 1 -value 0 -step 0.01 boltDebugCrumpleSlider;
								boltDebugConnectShaderControl "boltDebugCrumpleSlider" ".Mat_float_damagetexturein_crumple_tester";	
							setParent ..;
							rowLayout -numberOfColumns 2;
								text -label "Deformation:" -width 100;
								floatSlider -w 100 -min 0 -max 1 -value 0 -step 0.01 boltDebugDeformationSlider;
								boltDebugConnectShaderControl "boltDebugDeformationSlider" ".Mat_float_damagetexturein_deform_tester";	
							setParent ..;
							
							rowLayout -numberOfColumns 2;
								text -label "Front Brake Temp:" -width 100;
								floatSlider -w 100 -min 0 -max 1 -value 0 -step 0.01 boltDebugFBrakeSlider;
								boltDebugConnectShaderControl "boltDebugFBrakeSlider" ".Mat_float_CoolParamsin_frontBrakesTemp";	
							setParent ..;
							rowLayout -numberOfColumns 2;
								text -label "Rear Brake Temp:" -width 100;
								floatSlider -w 100 -min 0 -max 1 -value 0 -step 0.01 boltDebugBBrakeSlider;
								boltDebugConnectShaderControl "boltDebugBBrakeSlider" ".Mat_float_CoolParamsin_rearBrakesTemp";	
							setParent ..;
							rowLayout -numberOfColumns 2;
								text -label "Dirt Level:" -width 100;
								floatSlider -w 100 -min 0 -max 1 -value 0 -step 0.01 boltDebugDirtSlider;
								boltDebugConnectShaderControl "boltDebugDirtSlider" ".Mat_float_CoolParamsin_Dirtiness";	
							setParent ..;
								
							separator -w 200 -h 1 -style none;
						setParent ..;
					setParent ..;
					
					
					/*
					frameLayout  -collapsable 1 -collapse 1 -label "Vehicle Vars" -marginHeight 5 -marginWidth 5 -labelAlign "center" -borderStyle "etchedOut";
						columnLayout;
					
							rowLayout -numberOfColumns 4 -cw 1 40 -cw 2 15 -cw 3 30 -cw 4 15;
								text -label "Revs:" -ann "1 = max revs";
								button -height 20 -width 15 -recomputeSize 0 -label "<"	
									-command "boltEditDebugFloatField boltFloatEngineRevs -0.1; boltChangeShaderAttr Mat_float_CoolParamsin_engineSpeed boltFloatEngineRevs";
								floatField -width 30 -value 0 -min 0 -max 1 -pre 2 -step 0.01 
									-dragCommand   "boltChangeShaderAttr Mat_float_CoolParamsin_engineSpeed boltFloatEngineRevs"
									-changeCommand "boltChangeShaderAttr Mat_float_CoolParamsin_engineSpeed boltFloatEngineRevs" 
									boltFloatEngineRevs;
								button -height 20 -width 15 -recomputeSize 0 -label ">"	
									-command "boltEditDebugFloatField boltFloatEngineRevs 0.1; boltChangeShaderAttr Mat_float_CoolParamsin_engineSpeed boltFloatEngineRevs";
							setParent ..;
							
							rowLayout -numberOfColumns 4 -cw 1 40 -cw 2 15 -cw 3 30 -cw 4 15;
								text -label "Speed:" -ann "1 = approx 150mph";
								button -height 20 -width 15 -recomputeSize 0 -label "<"	
									-command "boltEditDebugFloatField boltFloatVehicleSpeed -0.1; boltChangeShaderAttr Mat_float_CoolParamsin_speed boltFloatVehicleSpeed";
								floatField -width 30 -value 0 -min 0 -max 1 -pre 2 -step 0.01 
									-dragCommand   "boltChangeShaderAttr Mat_float_CoolParamsin_speed boltFloatVehicleSpeed"
									-changeCommand "boltChangeShaderAttr Mat_float_CoolParamsin_speed boltFloatVehicleSpeed" 
									boltFloatVehicleSpeed;
								button -height 20 -width 15 -recomputeSize 0 -label ">"	
									-command "boltEditDebugFloatField boltFloatVehicleSpeed 0.1; boltChangeShaderAttr Mat_float_CoolParamsin_speed boltFloatVehicleSpeed";
							setParent ..;
							
							rowLayout -numberOfColumns 4 -cw 1 40 -cw 2 15 -cw 3 30 -cw 4 15;
								text -label "Boost:" -ann "1 = maximum boost temperature";
								button -height 20 -width 15 -recomputeSize 0 -label "<"	
									-command "boltEditDebugFloatField boltFloatBoostTemp -0.1; boltChangeShaderAttr Mat_float_CoolParamsin_boost boltFloatBoostTemp";
								floatField -width 30 -value 0 -min 0 -max 1 -pre 2 -step 0.01 
									-dragCommand   "boltChangeShaderAttr Mat_float_CoolParamsin_boost boltFloatBoostTemp"
									-changeCommand "boltChangeShaderAttr Mat_float_CoolParamsin_boost boltFloatBoostTemp" 
									boltFloatBoostTemp;
								button -height 20 -width 15 -recomputeSize 0 -label ">"	
									-command "boltEditDebugFloatField boltFloatBoostTemp 0.1; boltChangeShaderAttr Mat_float_CoolParamsin_boost boltFloatBoostTemp";
							setParent ..;

							rowLayout -numberOfColumns 4 -cw 1 40 -cw 2 15 -cw 3 30 -cw 4 15;
								text -label "BrkTmp:" -ann "1 = 650 degrees c";
								button -height 20 -width 15 -recomputeSize 0 -label "<"	
									-command "boltEditDebugFloatField boltFloatBrakeTemp -0.1; boltChangeShaderAttr Mat_float_CoolParamsin_brakeGlow boltFloatBrakeTemp";
								floatField -width 30 -value 0 -min 0 -max 1 -pre 2 -step 0.01 
									-dragCommand   "boltChangeShaderAttr Mat_float_CoolParamsin_brakeGlow boltFloatBrakeTemp"
									-changeCommand "boltChangeShaderAttr Mat_float_CoolParamsin_brakeGlow boltFloatBrakeTemp" 
									boltFloatBrakeTemp;
								button -height 20 -width 15 -recomputeSize 0 -label ">"	
									-command "boltEditDebugFloatField boltFloatBrakeTemp 0.1; boltChangeShaderAttr Mat_float_CoolParamsin_brakeGlow boltFloatBrakeTemp";
							setParent ..;
							
							rowLayout -numberOfColumns 4 -cw 1 40 -cw 2 15 -cw 3 30 -cw 4 15;
								text -label "Headlt:" -ann "Headlights + Tail lights - 1 = on";
								button -height 20 -width 15 -recomputeSize 0 -label "<"	
									-command "boltEditDebugFloatField boltFloatHeadlight -1; boltChangeShaderAttr Mat_float_LightParamsin_headLight boltFloatHeadlight";
								floatField -width 30 -value 0 -min 0 -max 1 -pre 2 -step 0.01 
									-dragCommand   "boltChangeShaderAttr Mat_float_LightParamsin_headLight boltFloatHeadlight"
									-changeCommand "boltChangeShaderAttr Mat_float_LightParamsin_headLight boltFloatHeadlight" 
									boltFloatHeadlight;
								button -height 20 -width 15 -recomputeSize 0 -label ">"	
									-command "boltEditDebugFloatField boltFloatHeadlight 1; boltChangeShaderAttr Mat_float_LightParamsin_headLight boltFloatHeadlight";
							setParent ..;
							
							rowLayout -numberOfColumns 4 -cw 1 40 -cw 2 15 -cw 3 30 -cw 4 15;
								text -label "Brakelt:" -ann "Brake lights - 1 = on";
								button -height 20 -width 15 -recomputeSize 0 -label "<"	
									-command "boltEditDebugFloatField boltFloatBrakelight -1; boltChangeShaderAttr Mat_float_LightParamsin_brakeLight boltFloatBrakelight";
								floatField -width 30 -value 0 -min 0 -max 1 -pre 2 -step 0.01 
									-dragCommand   "boltChangeShaderAttr Mat_float_LightParamsin_brakeLight boltFloatBrakelight"
									-changeCommand "boltChangeShaderAttr Mat_float_LightParamsin_brakeLight boltFloatBrakelight" 
									boltFloatBrakelight;
								button -height 20 -width 15 -recomputeSize 0 -label ">"	
									-command "boltEditDebugFloatField boltFloatBrakelight 1; boltChangeShaderAttr Mat_float_LightParamsin_brakeLight boltFloatBrakelight";
							setParent ..;
							
							rowLayout -numberOfColumns 4 -cw 1 40 -cw 2 15 -cw 3 30 -cw 4 15;
								text -label "Mud:" -ann "Mud level";
								button -height 20 -width 15 -recomputeSize 0 -label "<"	
									-command "boltEditDebugFloatField boltFloatMudLevel -0.1; boltChangeEnvAttr Mat_float_globalDirtLevel boltFloatMudLevel";
								floatField -width 30 -value 0 -min 0 -max 1 -pre 2 -step 0.01 
									-dragCommand   "boltChangeEnvAttr Mat_float_globalDirtLevel boltFloatMudLevel"
									-changeCommand "boltChangeEnvAttr Mat_float_globalDirtLevel boltFloatMudLevel" 
									boltFloatMudLevel;
								button -height 20 -width 15 -recomputeSize 0 -label ">"	
									-command "boltEditDebugFloatField boltFloatMudLevel 0.1; boltChangeEnvAttr Mat_float_globalDirtLevel boltFloatMudLevel";
							setParent ..;
							
							rowLayout -numberOfColumns 4 -cw 1 40 -cw 2 15 -cw 3 30 -cw 4 15;
								text -label "Damage:" -ann "Normal mapped damage level";
								button -height 20 -width 15 -recomputeSize 0 -label "<"	
									-command "boltEditDebugFloatField boltFloatDamageLevel -0.1; boltChangeEnvAttr Mat_float_globalDamageLevel boltFloatDamageLevel";
								floatField -width 30 -value 0 -min 0 -max 1 -pre 2 -step 0.01 
									-dragCommand   "boltChangeEnvAttr Mat_float_globalDamageLevel boltFloatDamageLevel"
									-changeCommand "boltChangeEnvAttr Mat_float_globalDamageLevel boltFloatDamageLevel" 
									boltFloatDamageLevel;
								button -height 20 -width 15 -recomputeSize 0 -label ">"	
									-command "boltEditDebugFloatField boltFloatDamageLevel 0.1; boltChangeEnvAttr Mat_float_globalDamageLevel boltFloatDamageLevel";
							setParent ..;							
							
							
						setParent ..;
					setParent ..;
					*/
					
				setParent ..;
			setParent ..;
		//setParent ..;
	setParent ..;
                
                 		                             
                 		                             
	showWindow boltDebugShaderWindow;
	//display the window
	
	window -e -height 380 boltDebugShaderWindow;
	window -e -width  220 boltDebugShaderWindow;
		
	boltUpdateUVTestScales;
	boltLightShaderTestUpdate();

}


global proc	boltDebugConnectShaderControl(string $slider, string $attr)
{
	$shaders = `ls -materials`;
	string $attrs[] = {};
	for ($mat in $shaders)
	{
		string $att = stringRemovePrefix($attr, ".");
		if (`attributeExists $att $mat`)
		{
			$attrs[size($attrs)] = ($mat + $attr);
		}
	}
	if (size($attrs)) connectControl $slider $attrs;
}
									
							
							

global proc boltDebug.ShaderTweak(string $attr, float $amount)
{
	$shaders = `ls -materials`;
	
	for ($mat in $shaders)
	{
		string $att = stringRemovePrefix($attr, ".");
		if (`attributeExists $att $mat`)
		{
			if ($amount == 0)
			{
				setAttr(($mat + $attr) , 0);
			}
			else
			{
				$value = getAttr(($mat + $attr));
				setAttr(($mat + $attr) , ($value + $amount));
			}
		}
	}
}

global proc boltDebug.ShaderSet(string $attr, float $amount)
{
	$shaders = `ls -materials`;
	for ($mat in $shaders)
	{
		string $att = stringRemovePrefix($attr, ".");
		if (`attributeExists $att $mat`)
		{
			setAttr(($mat + $attr) , $amount);
		}
	}
}

			

global proc boltLightShaderTestUpdate()
{
	int $index = `optionMenu -q -sl boltLightTestOption` -1;
	float $tester = ($index / 16.0) + (1.0/32.0);
	
	if (`objExists "light_shader"`)
	{
		setAttr "light_shader.Mat_float_LightParamsin_tester" $tester;
	}
	if (`objExists "light_shader_standard"`)
	{
		setAttr "light_shader_standard.Mat_float_LightParamsin_tester" $tester;
	}
	if (`objExists "light_shader_under_colour"`)
	{
		setAttr "light_shader_under_colour.Mat_float_LightParamsin_tester" $tester;
	}
	if (`objExists "light_shader_standard_damage"`)
	{
		setAttr "light_shader_standard_damage.Mat_float_LightParamsin_tester" $tester;
	}
	
}
