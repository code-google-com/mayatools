//all scee tools procs used by vehicle tools are duplicated here for ease of outsourcing tools. Names are changed to prevent clashes.



// flattenCombine.mel
//	by Naughty - Feb 2003 (naughty_genepool@hotmail.com)
//			- Updated Mar 2007 - added options and intergrated recursiveCombine
//
// This script is a Super-Combine function. It combines all selected polygon
// geometry into a single object. It performs the same function as the regular Maya
// "combine" command but it preserves the Name, Pivot Position and Heirarchy (DAG)
// Position of the original, initially selected object (which can even be a nul
// transform (empty group). It also removes all that awful Transform History on 
// combined objects and weld coincident vertices together, resulting in less 
// post-cleaning up and much tidier scenes.
//
// The Focus (green) is the object who's properties will be preserved. Everything 
// else selected will be combined into it. Anthing selected by parental/child
// inheritance will be combined by default and doesn't have to be explicitly
// selected. The focus selection can be a nul transform (an empty group) or 
// simply the polygon object you want to combine everything else onto. 
//
global proc string scee.doFlattenCombine(int $keep,int $attrs,int $weld,int $recurse)
{
	string $selected[] = listRelatives("-p","-f",(ls("-sl","-type","mesh","-l","-ni","-o","-dag")));
	int $amount = size($selected);
	if ($amount < 2)	error "You need at least two polygon meshes selected to combine - Aborted.";

	// as our target master object may be a group, query the master as a transform
	string $tr[] = `ls -sl -tr -tl 1`;
	string $master = (size($tr)) ? $tr[0] : $selected[$amount-1] ;
	string $array[] = `ls -l -dag -shapes $master`;
	string $mShape = $array[0];	// add the shape node to the list!

	// store all of "masters" initial properties:
	string $shortName = `match "[^|]*$" $master`;		// store it's short name
	string $DAGPos[] = `listRelatives -p -f $master` ;	// store its position in the DAG heirarchy
	float $t[3] = `getAttr ($master+".translate")` ;	// store it's translation position
	float $r[3] = `getAttr ($master+".rotate")` ;		// store it's rotation
	float $s[3] = `getAttr ($master+".scale")` ;		// store it's scale
	float $p[3] = `xform -q -ws -rp $master` ;			// store it's pivot position

	string $inputs[] = `listConnections -d 0 -s 1 -c 1 -p 1 $master`;	// store all it's input connections
	
	//dummy locator for pivot matching
	//print ("\nmaster: " + $master)
	string $masterLoc[] = `spaceLocator`;
	setAttr ($masterLoc[0] + ".t") $t[0] $t[1] $t[2];
	setAttr ($masterLoc[0] + ".r") $r[0] $r[1] $r[2];
	
	
	// if we are preserving attrs, the easiest way to do it is to apply them all to a
	// dummy node ($dagMarker) (so we don't have to set a variable type when doing a getAttr)
	// we can then re-apply them from here back to the resulting combined mesh.
	string $DAGMarker[] = `spaceLocator`;
	// insert Locator into the original heirarchy position to keep branch alive
	if (size($DAGPos[0]))	$DAGMarker = `parent -r $DAGMarker[0] $DAGPos[0]`;

	$DAGMarker = `ls -l -dag $DAGMarker[0]`;	// add the shape node to the list!

	scee.transferUserAttributes $master $DAGMarker[0] 1;	// the transforms
	scee.transferUserAttributes $mShape $DAGMarker[1] 1;	// the shapes
	// do we want to keep non-focus custom attrs (on flattened objs)..?
	if ($attrs)
	{
		for ($obj in $selected)
		{
			scee.transferUserAttributes $obj $DAGMarker[0] 1;	// the transforms
			// check if the given object has a shape
			string $shapes[] = `listRelatives -f -shapes $obj`;
			if (size($shapes))	scee.transferUserAttributes $shapes[0] $DAGMarker[1] 1;	// the shape
		}
	}

	lockNode -l 0 ;	// unlock any selected nodes
	showHidden -b ;	// script fails if any selected objects are hidden!

	string $combine;	// the name of the resulting united mesh
	string $combined[];

	int $cancelled = 0;

	if ($recurse && $amount>3)	// merge each item one-by-one (as long as there is more than 3!)
	{
		progressWindow -t "Combine and Flatten" -max $amount -isInterruptable true;
		$combined[0] = $selected[$amount-1];
		for ($i=($amount-1),$n=0 ; $i>0 ; $i--,$n++)	// go backwards as our master is the last object (and if we cancel, we want him combined)
		{
			if (`progressWindow -q -isCancelled`)	// Check if the dialog has been cancelled
			{	$cancelled = 1;	// make sure it doesn't delete remaining objects
				break;	}

			$combined = `polyUnite -ch 0 $combined[0] $selected[$i-1]`;
			progressWindow -e -progress $n -status ("combining: "+$n);
		}
		progressWindow -endProgress;	// finish
	}
	else	$combined = `polyUnite -ch 0 $selected`;	// merge everything in one go

	$combine = $combined[0];

	if ($weld)	polyMergeVertex -d 0.0001 -tx 1 $combine;	// weld the combined verts together

	delete -ch $combine;

	if (!$cancelled)	// as long as our (recursive) combine was fully successful
	{
		for ($sel in $selected)	// delete all original named objects (if they exist they will be orphaned transforms)
			if (`objExists $sel`)	delete $sel;
	}

	// Move it to the original Heirarchy position...
	if (size($DAGPos[0]))	// ...if it was in a heirarchy...
	{
		parent -a $combine $DAGPos[0] ;
		reorder -f $combine ;
	}

	//if ($keep)	scee.modifyTransformations($combine,1,1,$t[0],$t[1],$t[2],1,$r[0],$r[1],$r[2],1,$s[0],$s[1],$s[2]);	// restore the original master transformations:
	//xform -ws -piv $p[0] $p[1] $p[2] $combine;	// restore it's pivot position (always?)
	
	//use this instead to speed up attaches
	if ($keep) boltMovePivot($combine, $masterLoc[0], <<0,0,0>>);
	delete $masterLoc[0];
	

	// reconnect the connections
	for ($i=0 ; $i<size($inputs) ; $i+=2)
	{
		string $cnx = `match "\\..*$" $inputs[$i]`;	// extract the connection .attr from the end of the string
		string $newCnxStr = ($combine+$cnx);
		catch(`connectAttr -f $inputs[$i+1] $newCnxStr`);
	}

	if (`objExists $master`)
	{
		if (!size(`listRelatives -s $master`))	delete $master;
		else	warning ($shortName + " Still exists - Appending index on original Name");
	}
	string $finalName = `rename $combine $shortName` ; // rename it with the original name

	// now the master object has changed dag position we have to re-get the shape path
	string $array[] = `ls -l -dag -shapes $master`;
	string $mShape = $array[0];

	scee.transferUserAttributes $DAGMarker[0] $master 1;	// the transforms
	if (`objExists $mShape`)	scee.transferUserAttributes $DAGMarker[1] $mShape 1;	// the shape (there may not have been one!)

	if (`objExists $DAGMarker[0]`) delete $DAGMarker[0]; // Delete the locator we created earlier

	select -r $finalName ;
	return $finalName ;
}







// this proc transfers attributes from one node to another, it does this by querying the source attrs 
// and then recreating them on the target object and finally copying the values from source to target.
// All connections to and from the attribute are maintained (if desired ($doCnx)),
//
// Much of the meat in this script comes from attributeMan.mel which is the work of
//		Hamish McKenzie - www.macaronikazoo.com
//	&	David Walden - www.davidwalden.com
//
// so thanks and kudos to those two gents...


// returns true/false if the attribute is a compound type attr
proc int scee.isAttrCompoundType(string $attribute)
{
	string $type = `addAttr -q -attributeType $attribute`;

	return (($type == "reflectance") || ($type == "spectrum") || ($type == "compound") ||
			($type == "float2") || ($type == "float3") || ($type == "double2") || ($type == "double3") || 
			($type == "long2" ) || ($type == "long3" ) || ($type == "short2" ) || ($type == "short3" ));
}

//Proc transfers connections from a given object attribute to a target object attribute.
proc scee.transferConnections(string $sourceObj,string $targetObj,string $attr,int $isMulti)		//Is the attribute a multi attribute?
{
	//Get all connection to- and from- the source object attribute.
	string $sourceConnections[] = `listConnections -source 1 -destination 0 -plugs 1 ($sourceObj+"."+$attr)`;
	string $destinConnections[] = `listConnections -source 0 -destination 1 -plugs 1 ($sourceObj+"."+$attr)`;
	//If the source obj's ".message" attribute is connected to the same obj as $sourceConnections, then it is locked and we can´t transfer it.
	string $messageConnections[] = `listConnections -source 0 -destination 1 -plugs 1 ($sourceObj+".message")`;
	string $messageBuffer[];
	string $destinationBuffer[];
	int $isLockedByMessage = 0;

	if (`size $messageConnections`)
	{
		tokenize $messageConnections[0] "." $messageBuffer;
		tokenize $destinConnections[0] "." $destinationBuffer;
		for ($n=0 ; $n<`size $destinConnections` ; $n++)
		{
			if ($messageBuffer[0] == $destinationBuffer[$n])
			{
				warning ($sourceObj+"."+$attr+" is locked to "+$destinationBuffer[$n]+". Cannot transfer connections for this attribute.");
				$isLockedByMessage = 1;
			}
		}
	}
	if ($isLockedByMessage)	return;

	//SOURCE CONNECTIONS (CONNECTIONS COMING FROM OTHER OBJECTS).
	for ($s=0 ; $s<size($sourceConnections) ; $s++)
	{
		//If the attribute is multi, we have to find the indexes that are connected.
		string $ATTR = ($isMulti) ? ($attr+"["+$s+"]") : $attr;
		connectAttr -f $sourceConnections[$s] ($targetObj+"."+$ATTR);
	}
	//DESTINATION CONNECTIONS (CONNECTIONS GOING TO OTHER OBJECTS).
	for ($d=0 ; $d<size($destinConnections) ; $d++)
	{
		//If the attribute is multi, we have to find the indexes that are connected.
		string $ATTR = ($isMulti) ? ($attr+"["+$d+"]") : $attr;
		// for outgoing connections, the original source object must be disconnected, as only one object can be an input Cnx
		disconnectAttr ($sourceObj+"."+$ATTR) $destinConnections[$d];
		connectAttr -f ($targetObj+"."+$ATTR) $destinConnections[$d];
	}
}

// source and target Obj are obviously the nodes for copying from/to. $attr is the name of the attr you want to copy.
// $parent is empty ("") unless the $attr is a child of a compound, $doCnx true/false if you want to copy connections
global proc scee.doAttrTransfer(string $sourceObj,string $targetObj,string $attr,string $parent,int $doCnx)
{
	// if the attr already exists, do nothing (except connections?)
	if (`attributeQuery -exists -n $targetObj $attr`)	return;

	int $hasParent = size($parent);
	int $numberOfChildren;

	//GET ALL THE INFORMATION ABOUT THE ATTRIBUTE.
	//Get the -attributeType flag. For now we are skipping attributes that require the "-dataType" flag.
	string $type = `addAttr -q -attributeType ($sourceObj+"."+$attr)`;
	//IF THE ATTRIBUTE IS A COMPOUND ATTRIBUTE, GET ITS CHILDREN.

	string $children[];
	int $isCompoundType = `scee.isAttrCompoundType ($sourceObj+"."+$attr)`;
	if ($isCompoundType)
	{
		// Assign $numberOfChildren only if the attr is a compound type.
		$numberOfChildren = `addAttr -q -numberOfChildren ($sourceObj+"."+$attr)`;
		$children = `listAttr ($sourceObj+"."+$attr)`;	//Get list of children attrs.
		$children = `stringArrayRemove {$attr} $children`;	//Remove parent name from $children array.
	}

	string $longName = `addAttr -q -longName ($sourceObj+"."+$attr)`;
	string $shortName = `addAttr -q -shortName ($sourceObj+"."+$attr)`;
	int $keyable = `getAttr -keyable ($sourceObj+"."+$attr)`;
	int $locked = `getAttr -lock ($sourceObj+"."+$attr)`;

	// Get range information (if attr is not a string type or a vector type (double3)).
	int $hasMin; int $hasMax; float $minValue; float $maxValue; int $hasSoftMin;
	int $hasSoftMax; float $softMinValue; float $softMaxValue;
	if (($type != "typed") && ($type != "message") && ($type != "fltMatrix") && ($type != "matrix") && (!$isCompoundType))
	{
		$hasMin = `addAttr -q -hasMinValue ($sourceObj+"."+$attr)`;
		$hasMax = `addAttr -q -hasMaxValue ($sourceObj+"."+$attr)`;
		$minValue = `addAttr -q -minValue ($sourceObj+"."+$attr)`;
		$maxValue = `addAttr -q -maxValue ($sourceObj+"."+$attr)`;
		$hasSoftMin = `addAttr -q -hasSoftMinValue ($sourceObj+"."+$attr)`;
		$hasSoftMax = `addAttr -q -hasSoftMaxValue ($sourceObj+"."+$attr)`;
		$softMinValue = `addAttr -q -softMinValue ($sourceObj+"."+$attr)`;
		$softMaxValue = `addAttr -q -softMaxValue ($sourceObj+"."+$attr)`;
	}

	// Find out if the attribute is a string attribute.
	int $isString = 0;
	if ($type == "typed")
	{
		string $typedDataType[] = `addAttr -q -dataType ($sourceObj+"."+$attr)`;
		$isString = ($typedDataType[0] == "string");
	}

	//Find out if the attribute is a multi attribute.
	int $isMulti = `attributeQuery -n $sourceObj -multi $attr`;
	int $multiSize = `getAttr -size ($sourceObj+"."+$attr)`;
	int $indexMatters = `addAttr -q -indexMatters ($sourceObj+"."+$attr)`;

	//Get the -enumName value if the attribute is an "enum" type.
	string $enumName;
	if ($type == "enum")	$enumName = `addAttr -q -enumName ($sourceObj+"."+$attr)`;

	// Finally, add the attr to the destination object
	// we'll need to construct a cmd string though as there are several variations:
	string $cmd = ("addAttr -longName \""+$longName+"\" -shortName \""+$shortName+"\" -keyable "+$keyable);
	if ($hasParent)	$cmd += (" -parent "+$parent);

	$cmd += ($isString) ? (" -dataType \"string\"") : (" -attributeType \""+$type+"\"");	// add the type declaration

	if ($isCompoundType)	$cmd += (" -numberOfChildren "+$numberOfChildren);	// add the child number
	if ($isMulti)			$cmd += (" -m -indexMatters "+$indexMatters);
	if ($type == "enum")	$cmd += (" -enumName \""+$enumName+"\"");

	if (!`attributeQuery -exists -n $targetObj $attr`)
		evalEcho($cmd+" "+$targetObj);	// execute the finished addAttr command (echo it too, so we can check it)

	global string $gSetAttrTransferCmd;	// this'll hold our children's setAttr commands...

	//Now, after transferring the attr: if the attr is a compound type, transfer all its children before continuing.
	//This is a recursive part because we are calling this same procedure for each child.
	if ($isCompoundType)
	{
		for ($c in $children)
			scee.doAttrTransfer($sourceObj,$targetObj,$c,$attr,$doCnx);	//,$doCnx
	}
	//Edit attribute accordingly. Attributes of type "typed" are string attributes and do not have min-max ranges.
	if (($type != "typed") && ($type != "message") && ($type != "fltMatrix") && ($type != "matrix") && (!$isCompoundType))
	{
		if ($hasMin)		addAttr -e -minValue $minValue ($targetObj+"."+$attr);
		if ($hasMax)		addAttr -e -maxValue $maxValue ($targetObj+"."+$attr);
		if ($hasSoftMin)	addAttr -e -softMinValue $softMinValue ($targetObj+"."+$attr);
		if ($hasSoftMax)	addAttr -e -softMaxValue $softMaxValue ($targetObj+"."+$attr);

		// we can set the values of individual attrs here (non compounds) but we do it deferred 
		// so we can be sure that both they and their parents exist (have finished being created)
		for ($m=0 ; $m<$multiSize ; $m++)	// if the item is not a multi, the multiSize should be 1..?
		{
			string $ATTR = ($isMulti) ? ($attr+"["+$m+"]") : $attr;
//			int $isCnx = (`connectionInfo -is ($sourceObj+"."+$ATTR)` || `connectionInfo -id ($sourceObj+"."+$ATTR)`);
//			if ($isCnx && $doCnx)	continue;	// if the attr is connected and we'll be respecting that, don't try to apply the value
			string $setCmd = ("catchQuiet(setAttr(\""+$targetObj+"."+$ATTR+"\",getAttr(\""+$sourceObj+"."+$ATTR+"\")));");
			if (!$hasParent)	evalEcho($setCmd);	// setAttr ($targetObj+"."+$ATTR) `getAttr ($sourceObj+"."+$ATTR)`;
			// because child and parent attrs DON'T even exist until every one of them is created,
			// we have to asemble a command to set their values and run it when we know they're ready.
			// we *COULD* achieve the same result easily with evalDeferred, but that would mean you 
			// couldn't reference the attrs in question during another script, proc, fuction, etc..
			//	evalDeferred("setAttr "+$targetObj+"."+$ATTR+" `getAttr "+$sourceObj+"."+$ATTR+"`");
			else	$gSetAttrTransferCmd += $setCmd;
		}
		// that just leaves strings, matrices...
	}
	if ($isString)	setAttr ($targetObj+"."+$attr) -type "string" `getAttr ($sourceObj+"."+$attr)`;

	//TRANSFER CONNECTIONS.
	if ($doCnx)
	{
		//For compound attrib members, let´s wait until all children are transferred before we do the connections.
		//So, first check to see if the attr has a given parent, and if that parent indeed exists. If the parent exists,
		//it exists because all the children attributes have been added to the group. Only then can we proceed to
		//transfer connections to/from compound attributes and their children attributes.
		if ($hasParent && `attributeExists $parent $targetObj`)
		{
			//Get the children of the parent.
			$children = `listAttr ($targetObj+"."+$parent)`;
			//Remove parent name from $children array.
			$children = `stringArrayRemove {$parent} $children`;
			for ($c in $children)
				scee.transferConnections $sourceObj $targetObj $c $isMulti;
		}
		else if (!$hasParent)	scee.transferConnections $sourceObj $targetObj $attr $isMulti;
	}
	// the last thing we want to do is to lock the attr (if necessary)
	if ($locked)	$gSetAttrTransferCmd += ("setAttr -lock 1 "+$targetObj+"."+$attr+";");
}

global proc scee.transferUserAttributes(string $sourceObj,string $targetObj,int $doCnx)
{
	global string $gSetAttrTransferCmd;	$gSetAttrTransferCmd="";	// this holds the "deferred" setAttr commands for compound children

	// ensure names are fully DAG pathed
	string $longSrc[] = `ls -l $sourceObj`;	$sourceObj = $longSrc[0];
	string $longTgt[] = `ls -l $targetObj`;	$targetObj = $longTgt[0];
	if ($sourceObj == $targetObj)	return;	// are they the same object?

	// this lists parents AND children of every compound attr... 
	string $attrs[] = `listAttr -ud $sourceObj`;
	// ...so it *is* doing some redundant iterations, but what the heck...

	for ($attr in $attrs)
		scee.doAttrTransfer($sourceObj,$targetObj,$attr,"",$doCnx);

	if (size($gSetAttrTransferCmd))	eval($gSetAttrTransferCmd);
}



// detachSeparate.mel
//	by Naughty (naughty_genepool@hotmail.com)
//
// This script allows you to detach the selected faces from any selected objects.
// Detached faces become a new, seperate object but retain their original name,
// position, pivot, material, vtx colors, etc...
//
// Inspired by Brian Ewert and JeffD's detachSeparate but written because none
// of the other detachSeparate scripts seemed to work quite right with multiple
// objects selected...?
//
// N.B. Does not perform as you would expect with instances. 
// Best avoided on instanced objects.
//
// Usage:
//
//	detachSeparate;	// removes all selected faces to a new DAG object(s)
//
//
// goto:
//	http://www.naughtynathan.supanet.com/mel.htm
// for more detailed explanations, pictures and even more MEL scripts...

global proc string[] scee.detachSeparate()
{
	string $selFaces[] = `filterExpand -sm 34 -ex 1 -fp 1`;
	if (!size($selFaces)) error "No Polygons selected to detach";

	string $objects[] = stringArrayRemoveDuplicates(listRelatives("-p","-f",ls("-ni","-o","-l",$selFaces)));

	string $result[] = {};

	// loop through each object, dupe it, invert it's faces and delete them
	for ($obj in $objects)
	{
		string $localFaces[] = `scee.lsInSelection $selFaces {$obj}`;

		// if the selected face count is the same as the object face count, every face is selected
		// in which case we ditch this object and continue...
		if (size($localFaces) == `getAttr -s ($obj+".face")`)
			warning ($obj + " has every face selected. Skipping.");
		else
		{
			// store the face IDs
			int $faceIds[] = {};
			for ($face in $localFaces)
				$faceIds[size($faceIds)] = `scee.getComponentIndex 1 $face`;

			string $dupe[] = `duplicate $obj`;
			// all children get duplicated too, so if there were any, delete their new dupes.
			string $children[] = `listRelatives -c -type "transform" -f $dupe[0]`;
			if (size($children))	delete $children;

			delete $localFaces;	// delete the faces on the original object

			string $dupeFaces[] = {};
			for ($id in $faceIds)
				$dupeFaces[size($dupeFaces)] = ($dupe[0]+".f["+$id+"]");

			select -r ($dupe[0]+".f[*]");
			select -d $dupeFaces;
			delete;
			delete -ch $dupe[0];	// remove history on the separated chip
			string $intermediates[] = `ls -dag -io $dupe[0]`;	// intermediate history is sometimes not removed
			if (size($intermediates))	delete $intermediates;

			$result[size($result)] = $dupe[0];
		}
	}
	select -r $result;
	return $result;
}


// this proc returns a sub-set of the given selection that exists within the given object list
proc string scee.lsInSelectionGetName(string $item)
{
	// we want to get the LONGEST (SHAPE) name (no .components) so there's no mistaking which node we want
	string $longObj[] = `listRelatives -f -s -ni $item`;	// works for transform objects
	if (!size($longObj))	$longObj = `ls -r 0 -l -o -ni $item`;	// works for everything else
	if (!size($longObj))	error ("lsInSelection :: No object matches name: "+$item);
	if (size($longObj) > 1)	warning ("lsInSelection :: More than one object matches name: "+$item+". Please use -long names to avoid ambiguity.");
	return $longObj[0];
}
global proc string[] scee.lsInSelection(string $selection[],string $objects[])
{
	string $matches[];
	for ($obj in $objects)
	{
		string $objMatch = `scee.lsInSelectionGetName $obj`;
		for ($item in $selection)
		{
			string $itemMatch = `scee.lsInSelectionGetName $item`;
			if ($objMatch == $itemMatch)
				$matches[size($matches)] = $item;
		}
	}
	return $matches;
}

//
//	getComponentIndex: returns a float that corresponds to the $n.th component index
//	e.g. `getComponentIndex 1 "pCube1|pCubeShape.vtx[12]"` returns 12
//
global proc float scee.getComponentIndex(int $n,string $component)
{
	string $result[];
	int $size = `tokenize $component "[:]" $result`;
	return $result[$size-$n];
}


// rotatePivot.mel
//	by Naughty - 15/07/02 (naughty_genepool@hotmail.com)
//
// This script allows you to forcefully rotate an objects Pivot. Maya does already 
// allow you to rotate pivots but it isn't a "true" rotation, it's just adding some 
// kind of axis-rotation offset, and consequently doesn't quite cut it (for my money 
// anyway) as the object axis no longer represents the objects local axis. Besides, 
// if you are exporting data out of Maya then more likely than not you'll need true 
// pivot rotation values and not just Maya's local axis offsets.
// 
// This proc works by rotating the OBJECT and then re-aligning all its CVs/vertices 
// back to their original positions. Consequently it only works on polygon mesh objects.
//
// Select a single polyMesh object and then execute rotatePivotViaObject. Click on 
// the [Set Pivot] button when you've rotated your pivot the desired amount.
//
// Usage:
//
//	rotatePivotViaObject;	// allows pivot movement and rotation.
//
//
// goto:
//	http://www.naughtynathan.supanet.com/mel.htm
// for more detailed explanations, pictures and even more MEL scripts...

global proc scee.cancelRotatePivot(string $items[])
{
	selectPref -xns 0;	// re-enable object selecting
	setToolTo $items[size($items)-1];

	select -cl;

	for ($c=0 ; $c<(size($items)-1) ; $c+=2)
	{
		string $obj = $items[$c];
		string $pivot = $items[($c+1)];

		if (`objExists $pivot`)
			delete $pivot;

		if (`objExists $obj`)
		{
			toggle -template -state 0 $obj;
			select -add $obj;
		}
	}
}


global proc scee.rotatePivotViaObject(string $items[])
{
	for ($c=0 ; $c<(size($items)-1) ; $c+=2)
	{
		string $obj = $items[$c];
		string $pivot = $items[($c+1)];

		if (!`objExists $pivot` || !`objExists $obj`)
			warning ($obj+" or Pivot Locator "+$pivot+" cannot be found! Aborting.");

		else
		{
			int $tOn = `optionVar -q rotatePivotTransOn`;

			float $t[3]	= `xform -ws -q -rp $pivot`;	// `getAttr ($obj+".t")`;
			float $r[3]	= `xform -ws -q -ro $pivot`;	// `getAttr ($obj+".r")`;

			toggle -template -state 0 $obj;
			scee.modifyTransformations $obj 1 0 0 0 0 1 $r[0] $r[1] $r[2] 0 0 0 0;
			if ($tOn)	move -a -ws $t[0] $t[1] $t[2] ($obj+".scalePivot") ($obj+".rotatePivot");
		}
	}
	deleteUI -window "rotatePivotSetPivotWindow";	// (this will execute the scriptJob to do the "cancelRotatePivot" cleanups)
}

global proc scee.rotatePivot()
{
	string $usedPanel = `getPanel -wf`;
	string $usedTool = `currentCtx`;

	string $window = "rotatePivotSetPivotWindow";

	if (`window -exists $window`)
		error "rotatePivot is already running!";

	string $sel[] = listRelatives("-p",(listRelatives("-type","mesh","-type","nurbsCurve","-s","-ni",(ls("-l","-sl","-tr","-o")))));
	if (!`size($sel)`) error "No polyMesh or Curve object(s) Selected. Aborting";

	string $pivLocs[];

	string $buttonCmd = "{";

	for ($obj in $sel)
	{
		string $shortName = `match "[^|]*$" $obj`;
		float $t[3]	= `xform -ws -q -rp $obj`;	// `getAttr ($obj+".t")`;
		float $r[3]	= `xform -ws -q -ro $obj`;	// `getAttr ($obj+".r")`;

		toggle -template -state 1 $obj;

		string $pivLoc[] = `spaceLocator -n ($shortName+"_pivot")`;
		$pivLocs[size($pivLocs)] = $pivLoc[0];
		setAttr ($pivLoc[0]+".t") $t[0] $t[1] $t[2];
		setAttr ($pivLoc[0]+".r") $r[0] $r[1] $r[2];

		$buttonCmd += ("\""+$obj+"\",\""+$pivLoc[0]+"\",");
	}
	$buttonCmd += ("\""+$usedTool+"\"}");	//print ("\n\n"+$buttonCmd+"\n\n");

	window -s 0 -mnb 0 -mxb 0 -title "Rotate Pivot" -tlb 1 $window; 

	int $trOn = `optionVar -q rotatePivotTransOn`;

	columnLayout -rs 5 -adj 1;
	text -l "Rotate Locator pivot\nby the desired amount\nthen click [Set Pivot]" -align "center";
	checkBoxGrp -l "Include Translation" -cw2 108 20 -ct2 "left" "right" -cl2 "right" "left" -co2 4 0 -v1 $trOn -cc "optionVar -iv rotatePivotTransOn #1";
	button -h 23 -w 90 -l "Set Pivot" -al "center" -c ("scee.rotatePivotViaObject "+$buttonCmd);
	
	//had to ditch -p -rp flags to get this working in 2013:
	scriptJob -uiDeleted $window ("scee.cancelRotatePivot "+$buttonCmd);

	// force set the window size based on the global OS settings
	global int $gSceeUIPadX,$gSceeUIPadY;
	window -e -wh (122+$gSceeUIPadX) (90+$gSceeUIPadY) $window;
	showWindow $window;

	select -r $pivLocs;
	setToolTo RotateSuperContext;
	selectPref -xns 1;	// disable object selecting

	setFocus $usedPanel;
}

// this proc forcefully modifies the translation, rotation and scale 
// of a given mesh's/curve's transform WITHOUT affecting the shape itself.
// It does this by storing every vertex/CV position, then actaully moving, 
// rotating and scaling the object's transform and then moving the 
// vertices/CVs back to their original positions. It only works on 
// polyMeshes and nurbsCurves
global proc scee.modifyTransformations(
	string $transform,int $keepPiv,
	int $tOn, float $tx, float $ty, float $tz,
	int $rOn, float $rx, float $ry, float $rz,
	int $sOn, float $sx, float $sy, float $sz)
{
	if (!`objExists $transform`)
	{
		warning ("Object "+$transform+" does not exist!. Aborting");
		return;
	}
	if (!$tOn && !$rOn && !$sOn)
	{
		warning ("No Modification specified - Skipping "+$transform);
		return;
	}
	string $shape[] = `ls -l -dag -s $transform`;
	string $type = `nodeType $shape[0]`;
	int $isMesh = ($type=="mesh");
	if (!$isMesh && $type!="nurbsCurve")
	{
		warning ("Non Mesh/nurbsCurve specified - Skipping "+$transform);
		return;
	}
	
	
	//check if we need to do normal rotation
	float $oldR[] = `getAttr ($transform + ".r")`;
	int $rotateNormals = 1;
	if ( (equivalentTol($oldR[0], $rx, 0.001)) && (equivalentTol($oldR[1], $ry, 0.001)) && (equivalentTol($oldR[2], $rz, 0.001)) ) $rotateNormals = 0;
	

	string $tmpGrp;
	// first, disconnect all children so their pivots and transformations are left intact:
	string $children[]=`listRelatives -f -type "transform" $transform`;
	if (size($children))
	{
		$tmpGrp = `group -n "modTransKids" -empty`;
		parent $children $tmpGrp;
	}

	// store it's original pivot position
	float $piv[3] = `xform -q -ws -rp $transform`;

	// store initial Vertex/CV positions
	string $pnt = ($isMesh) ? "vtx" : "cv";
	string $pointList[] = `ls -fl ($transform+"."+$pnt+"[*]")`;
//	string $vtxList[] = ls("-fl",(polyListComponentConversion("-tv",$transform)));	// list of verts in object
	vector $vtxXYZPos[];	// vector array of every vertex's xyz world-space position
	float $vtxPos[3];

	for ($n=0; $n<(size($pointList)); $n++)
	{
		$vtxPos = `pointPosition -w $pointList[$n]`;
		$vtxXYZPos[$n] = << $vtxPos[0],$vtxPos[1],$vtxPos[2] >>;
	}
	
	
	//store any locked normals
	string $vfList[] = {};
	vector $normalList[] = {};
	if ($rotateNormals == 1)
	{
		if ($isMesh)
		{
			$vfList = `ls -fl ($transform+".vtxFace[*][*]")`;
			for ($n=0; $n<(size($vfList)); $n++)
			{
				$isFrozen = `polyNormalPerVertex -q -freezeNormal $vfList[$n]`;
				if ($isFrozen[0] == 1)
				{
					$normalList[$n] = `polyNormalPerVertex -q -xyz $vfList[$n]`;
					//print ($vfList[$n] + " " + $normalList[$n] + " stored! \n");
				}
				else
				{
					$normalList[$n] = <<0,0,0>>; //ignore these later
				}
			}
		}
	}
	
	//store the original transform matrix
	matrix $m1[4][4];
	$m1 = bolt.getWorldMatrix($transform,0);
	
	
	
	// set the pivot to 0 0 0 before applying translation (transl only)
	if ($tOn)	//  && $keepPiv
	{
		setAttr ($transform+".rotatePivot") 0 0 0;
		setAttr ($transform+".scalePivot") 0 0 0;
	}

	// force the transform attributes to their final destination values (t, r, s)
	if ($tOn)	setAttr ($transform+".t") $tx $ty $tz;
	if ($rOn)	setAttr ($transform+".r") $rx $ry $rz;
	if ($sOn)	setAttr ($transform+".s") $sx $sy $sz;
	// move the pivot back to it's original position
	if ($tOn && $keepPiv)	xform -ws -a -piv $piv[0] $piv[1] $piv[2] $transform;

	// move vertices back into thier original positions
	for ($n=0; $n<(size($pointList)); $n++)
	{
		vector $crap = $vtxXYZPos[$n];
		move -a ($crap.x) ($crap.y) ($crap.z) $pointList[$n];
	}
	
	
	
	
	
	//store the new transform matrix
	matrix $m2[4][4];
	matrix $m3[4][4];
	$m2 = bolt.getWorldMatrix($transform,1);
	
	$m3 = $m1 * $m2;
	float $m3List[] = bolt.MatrixToFloat($m3);
	
	if ($rotateNormals == 1)
	{
	
		//move locked normals back to original positions
		global string $gMainProgressBar;  // This is defined on maya startup
		progressBar -e -beginProgress -isInterruptable true -status "Rotating locked normals:" -maxValue (size($vfList)) $gMainProgressBar;
			
		string $hardEdges[] = boltNorms.getHardEdges($transform);
			
		for ($n=0; $n<(size($vfList)); $n++)
		{
			if ( $normalList[$n] != <<0,0,0>> )
			{
				float $norm[] = $normalList[$n];
				
				$norm = pointMatrixMult($norm,$m3List);
							
				polyNormalPerVertex -xyz ($norm[0]) ($norm[1]) ($norm[2]) $vfList[$n];
				//print ($vfList[$n] + " " + $normalList[$n] + " re-stored! \n");
			}
			progressBar -edit -step 1 $gMainProgressBar;
		}
		boltNorms.setHardEdges($transform, $hardEdges);
		
		progressBar -e -endProgress $gMainProgressBar;
	}

	// lastly, reconnect all children back to the object
	if (`objExists $tmpGrp`)
	{
		$children = `listRelatives -f -type "transform" $tmpGrp`;
		parent $children $transform;
		delete $tmpGrp;
	}
	select -r $transform;
}





global proc matrix bolt.getWorldMatrix(string $transform, int $inverse)
//returns the world / inverseWorld transform matrix for a given obj.
{
	matrix $m[4][4];
	float $mat[] = {};
	if($inverse==0)
	{
		$mat = `getAttr($transform + ".worldMatrix")`;
	}
	else
	{
		$mat = `getAttr($transform + ".worldInverseMatrix")`;
	}
	for ($i=0; $i<4; $i++)
	{
		for ($j=0; $j<4; $j++)
		{
			$index = ($i*4)+$j;
			$m[$i][$j] = $mat[$index];
		}
	}
	return $m;
}

global proc float[] bolt.MatrixToFloat(matrix $m)
//returns the matrix as a float list
{
	float $matList[] = {};
	
	for ($i=0; $i<4; $i++)
	{
		for ($j=0; $j<4; $j++)
		{
			$index = ($i*4)+$j;
			$matList[$index] = $m[$i][$j];
		}
	}
	return $matList;
}




global proc scee.centerPivotToSelection()
{
	string $v[] = `filterExpand -sm 31`;
	string $f[] = `filterExpand -sm 34`;
	string $e[] = `filterExpand -sm 32`;
	string $u[] = `filterExpand -sm 35`;
	string $y[] = `filterExpand -sm 70`;

	string $cv[] = `filterExpand -sm 28`;
	string $ep[] = `filterExpand -sm 30`;
	string $cp[] = `filterExpand -sm 39`;

	int $meshCmp = size($v)+size($f)+size($e)+size($u)+size($y);
	int $curvCmp = size($cv)+size($ep)+size($cp);
	int $components = $meshCmp+$curvCmp;

	string $sel[] = ls("-sl","-l");
	string $obj[] = listRelatives("-p","-f",(ls("-sl","-l","-o","-dag","-lf")));
	if (!size($sel))	error "You have nothing selected to center Pivot to.";

	vector $center = << 0,0,0 >>;

	if ($meshCmp)	// for meshes we can directly query the boundingbox
	{
		float $bb[6] = `polyEvaluate -bc`;
		$center = << ($bb[0]+$bb[1])/2 , ($bb[2]+$bb[3])/2 , ($bb[4]+$bb[5])/2 >>;
	}
	if ($curvCmp)
	{
		vector $XYZ = <<0,0,0>>;
		for ($p in $cv)	$XYZ += `pointPosition -w $p`;
		for ($p in $ep)	$XYZ += `pointPosition -w $p`;
		for ($p in $cp)	$XYZ += `pointPosition -w $p`;

		$center = ($XYZ / $curvCmp);
	}

	for ($o in $obj)
	{
		if (!$components)	xform -cp $o;
		else			xform -ws -piv ($center.x) ($center.y) ($center.z) $o;	// move the pivot to desired point
	}
}






//------------------------------------------------------------------------------------------
//	Dependencies: sceeGenericProcs.mel >> for use of the getComponentIndex proc.
//------------------------------------------------------------------------------------------

// polySplitByVertex.mel
//	by Naughty (naughty_genepool@hotmail.com)
//
// This proc splits faces between selected vertices (though not over existing edges)
// It saves you having to use edge/vtx snap while using the polySplit tool and
// allows continuous unbroken splitting across vertex junctions, something impossible 
// to do with the polySplit tool.
//
// Usage:
//
//	polySplitByVertex;	// creates a split across faces from (selected) vertex to vertex 
//
// There is an interactive version of this script "splitByVertexCtx.mel", which allows 
// you to continuously select vertices and have them split in real time as you go.
//

//
//	getComponentIndex: returns a float that corresponds to the $n.th component index
//	e.g. `getComponentIndex 1 "pCube1|pCubeShape.vtx[12]"` returns 12
//
global proc float scee.getComponentIndex(int $n,string $component)
{
	string $result[];
	int $size = `tokenize $component "[:]" $result`;
	return $result[$size-$n];
}


proc string scee.getMatchFromArrays(string $A[],string $B[])
{
	for ($a in $A)
		for ($b in $B)
			if ($a == $b)
				return $a;
	return "";
}

proc int scee.isFaceHoled(string $face)
{
	string $orig[] = `ls -sl -l`;
	select -r $face;
	polySelectConstraint -t 0x0008 -m 2 -h 1;
	string $sel[] = `filterExpand -sm 34`;
	polySelectConstraint -m 0;
	select -r $orig;
	return size($sel);
}

/*	non-selection method.. much better not to use selections, but this method isn't very accurate
proc int isFaceHoled(string $face)
{
	string $vFs[] = ls("-fl",(polyListComponentConversion("-ff","-tvf",$face)));
	string $lastEdge[] = ls("-fl",(polyListComponentConversion("-fvf","-te",$vFs[size($vFs)-1])));	// Last VtxFace's edge
	string $vFsFromEdge[] = ls("-fl",(polyListComponentConversion("-fe","-tvf",$lastEdge[0])));

	string $edge = `getMatchFromArrays $vFsFromEdge $vFs`;

	if ($edge == $vFs[0])	return 0;
	else	return 1;
}
*/

global proc int scee.splitFaceByVertex(string $vtxA, string $vtxB)
{
	if ($vtxA == $vtxB)
	{	warning "Start and End vertices are the same - Skipping.";
		return false;}
	if (size(`polyListComponentConversion -fv -te -in $vtxA $vtxB`))
		return false;	// Existing edge found - Skipping

	string $vAFaces[] = ls("-fl",(polyListComponentConversion("-fv","-tf",$vtxA)));
	string $vBFaces[] = ls("-fl",(polyListComponentConversion("-fv","-tf",$vtxB)));
	string $vFaces[]  = ls("-fl",(polyListComponentConversion("-fv","-tf",$vtxA,$vtxB)));
	if ( (size($vAFaces)+size($vBFaces)) == size($vFaces))
	{	warning "Vertices do not share a face - Skipping.";
		return false;}

	string $splitFace = `scee.getMatchFromArrays $vAFaces $vBFaces`;
	if (!size($splitFace))	error ("No shared Face found between vertices "+$vtxA+" and "+$vtxB+" - Aborting.");
	if (`scee.isFaceHoled $splitFace`)
	{	warning "Face is 'HOLED' - Splitting this face will produce undesirable results and unstable meshes - Skipping.";
		return false;}

	string $vAEdges[] = ls("-fl",(polyListComponentConversion("-fv","-te",$vtxA)));
	string $vBEdges[] = ls("-fl",(polyListComponentConversion("-fv","-te",$vtxB)));
	string $fEdges[]  = ls("-fl",(polyListComponentConversion("-ff","-te",$splitFace)));

	string $edgeA = `scee.getMatchFromArrays $vAEdges $fEdges`;
	if (!size($edgeA))	error ($vtxA+" and "+$splitFace+" don't appear to share an edge! Aborting.");
	string $edgeB = `scee.getMatchFromArrays $vBEdges $fEdges`;
	if (!size($edgeB))	error ($vtxB+" and "+$splitFace+" don't appear to share an edge! Aborting.");

	string $output[];
	string $edgePoints[] = `polyInfo -ev $edgeA $edgeB`;
	tokenize $edgePoints[0] $output;
	int $start = (int($output[2]) == `scee.getComponentIndex 1 $vtxA`) ? 0 : 1;
	tokenize $edgePoints[1] $output;
	int $end = (int($output[2]) == `scee.getComponentIndex 1 $vtxB`) ? 0 : 1;

	int $edgeAIndex = `scee.getComponentIndex 1 $edgeA`;
	int $edgeBIndex = `scee.getComponentIndex 1 $edgeB`;

	polySplit -ch 0 -sma 180 -s 1 -ep $edgeAIndex $start -ep $edgeBIndex $end $splitFace;

	return true;
}

global proc scee.polySplitByVertex()
{
	string $selVtx[] = `filterExpand -sm 31 -fp 1 -ex 1`;
	int $size = size($selVtx);
	if (!$size)	error "You need at least TWO [face-sharing] vertices selected to split";
/*
	if ($size > 128)
	{
		string $reply = `confirmDialog -t "Memory Warning!" -ma center -m ("You are about to attempt a recursive split of "+$size+" Vertices.\nThis is a very memory intense operation with this number\nof vertices, especially if you want to UNDO the result.\n\n It would be advisable to cancel this operation and\nsave your work if you haven't already done so.\n")
			-b "Just DO IT!" -b "Cancel" -db "Cancel" -cb "Cancel" -ds "Cancel"`;
		if ($reply == "Cancel")	return;
	}
//*/

	// construction history can increase the execution time by a factor of four or more..
	delete -ch `ls -o -sl -l`;
	for ($vtx in $selVtx)
	{
		string $cnxFaces[] = ls("-fl",(polyListComponentConversion("-fv","-tf",$vtx)));
		string $neighbours[] = filterExpand("-sm",31,"-fp",1,"-ex",1,(polyListComponentConversion("-ff","-tv",$cnxFaces)));
		for ($v in $neighbours)
			if ((size(`ls -l -sl $v`)) && ($v != $vtx))
				scee.splitFaceByVertex $vtx $v;
		select -d $vtx;
	}
	select -r $selVtx;
}
