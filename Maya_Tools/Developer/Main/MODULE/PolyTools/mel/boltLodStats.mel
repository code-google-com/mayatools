source boltCarData;
source boltGlobalProcs;
source boltVehicledisplayManager; //needed for shapes to transforms procs

global proc boltLodStats()
{
	
	global float $gColEmpty1[] 		;
	global float $gColEmpty2[] 		;
	global float $gColTitle[]  		;
	global float $gColRed1[]   		;
	global float $gColRed2[]   		;
	global float $gColYellow1[]		;
	global float $gColYellow2[]		; 
	global float $gColGreen1[] 		;
	global float $gColGreen2[] 		;

	$gColEmpty1 		= {0.9,0.9,0.9};
	$gColEmpty2 		= {0.85,0.85,0.85};
	$gColTitle  		= {0.612,0.824,0.906};
	$gColRed1   		= {1.0,0,0};
	$gColRed2   		= {0.9,0,0};
	$gColYellow1		= {0.906,0.831,0.475};
	$gColYellow2		= {0.816,0.745,0.424};  
	$gColGreen1 		= {0.2,0.9,0.2};
	$gColGreen2 		= {0.15,0.8,0.15};

	
	global int $gLodStatsLods = 8;
	
	if (`window -exists boltLodStatsWindow`) {deleteUI boltLodStatsWindow;} 
	//delete the window if it already exists
	
		window -title "LOD Stats" -toolbox 1 -retain boltLodStatsWindow;
	
	
			string $row = "rowColumnLayout -numberOfColumns 9 -cw 1 150 -cw 2 100 -cw 2 100 -cw 3 100 -cw 4 100 -cw 5 100 -cw 6 100 -cw 7 100 -cw 8 100 -cw 9 100 -cs 1 3 -cs 2 3 -cs 3 3 -cs 4 3 -cs 5 3 -cs 6 3 -cs 7 3 -cs 8 3 -cs 9 3";
			
			columnLayout boltLodStatsTitleColumn;
				eval($row);
					string $labels[] = {"Part type:","LOD 0","LOD 1","LOD 2","LOD 3","LOD 4","LOD 5","LOD 6","Shadow Proxy"};
					for ($l in $labels)	text -label $l -font boldLabelFont -bgc  $gColTitle[0] $gColTitle[1] $gColTitle[2];
				setParent ..;		
				eval($row);
					text -label "  Exterior" -bgc  $gColEmpty1[0] $gColEmpty1[1] $gColEmpty1[2];
					for ($i=0; $i<$gLodStatsLods; $i++) text -label "" ("lodTextExt" + $i);
				setParent ..;  
				eval($row);
					text -label "  Interior" -bgc  $gColEmpty2[0] $gColEmpty2[1] $gColEmpty2[2];
					for ($i=0; $i<$gLodStatsLods; $i++) text -label "" ("lodTextInt" + $i);
				setParent ..;
				//eval($row);
				//	text -label "  Technical" -bgc  $gColEmpty1[0] $gColEmpty1[1] $gColEmpty1[2];
				//	for ($i=0; $i<$gLodStatsLods; $i++) text -label "" ("lodTextTech" + $i);
				//setParent ..;  
				eval($row);
					text -label "  Wheels" -bgc  $gColEmpty2[0] $gColEmpty2[1] $gColEmpty2[2];
					for ($i=0; $i<$gLodStatsLods; $i++) text -label "" ("lodTextWheel" + $i);
				setParent ..;
				eval($row);
					text -label "  Unknown" -bgc  $gColEmpty1[0] $gColEmpty1[1] $gColEmpty1[2];
					for ($i=0; $i<$gLodStatsLods; $i++)
					{
						rowColumnLayout -numberOfColumns 2 -cw 1 85 -cw 2 15;						
							text -label "" ("lodTextUnk" + $i);
	   						button -width 15 -height 15 -label ">" -ann "prints list of unknown objects for this LOD to script window" -command ("boltPrintUnknownObjs " + $i);
	   					setParent ..;
					}
				setParent ..;
				separator -w 980 -style "single" -h 5;
				eval($row);
					text -label "  TOTALS" -bgc  $gColEmpty2[0] $gColEmpty2[1] $gColEmpty2[2];
					for ($i=0; $i<$gLodStatsLods; $i++) text -label "" ("lodTextTotal" + $i);
				setParent ..;	
				separator -w 980 -style "single" -h 5;
	   			eval($row);
	   				text -label "  Draw Calls" -bgc  $gColEmpty1[0] $gColEmpty1[1] $gColEmpty1[2];
					for ($i=0; $i<$gLodStatsLods; $i++) 
					{
						rowColumnLayout -numberOfColumns 2 -cw 1 85 -cw 2 15;						
							text -label "" ("lodTextDrawcalls" + $i);
	   						button -width 15 -height 15 -label ">" -ann "prints detailed drawcall information to script window" -command ("boltReportDrawCalls(" + $i + ",1)");
	   					setParent ..;
	   				}
	   			setParent ..;
	   			separator -w 980 -style "single" -h 5;
	   			eval($row);
					string $labels[] = {"Selected Object:","LOD 0","LOD 1","LOD 2","LOD 3","LOD 4","LOD 5","LOD 6","Shadow Proxy"};
					for ($l in $labels)	text -label $l -font boldLabelFont -bgc  $gColTitle[0] $gColTitle[1] $gColTitle[2];
				setParent ..;
	   			eval($row);
					text -label "" -bgc  $gColEmpty2[0] $gColEmpty2[1] $gColEmpty2[2] lodTextSelected;
					for ($i=0; $i<$gLodStatsLods; $i++) text -label "" ("lodTextSel" + $i);
				setParent ..;
	   			separator -w 980 -h 5;
	   			
	   			
	   			//bottom buttons
	    		rowLayout;
	    			button -height 20 -width 250 -label "                       Refresh Window" 	-ann "Updates numbers" 	-command "boltUpdateLodStatsWindow;"; 
	    		setParent ..;
    	    setParent ..;
    	    
    		    
    	setParent ..;
	
	boltUpdateLodStatsWindow;
	   
	showWindow boltLodStatsWindow;
	//display the window
	window -e -height 235 -width 995 boltLodStatsWindow;  
}

global proc boltUpdateLodStatsWindow()
{
	//get 1st selected, strip lods
	string $selObjs[] = `ls -sl -transforms`;
	string $selObj = $selObjs[0];
	$selObj = `substitute "_LOD." $selObj ""`;
	$selObj = `substitute "_SHADOW" $selObj ""`;
	

	
	global int $gLodStatsLods;

	global float $gColEmpty1[]; 	
	global float $gColEmpty2[]; 	
	global float $gColTitle[];  	
	global float $gColRed1[];   	
	global float $gColRed2[];   	
	global float $gColYellow1[];	
	global float $gColYellow2[];	
	global float $gColGreen1[]; 	
	global float $gColGreen2[]; 
	
	int $allPolyCounts[]   = `boltGetAllPolyCounts $selObj`;
	int $lodTargetsTotal[] = `boltGetPolyCounts_Car`;  
	int $lodTargetsExt[]   = `boltGetPolyCounts_Ext`;  
	int $lodTargetsInt[]   = `boltGetPolyCounts_Int`;  
	int $lodTargetsTech[]  = `boltGetPolyCounts_Tech`; 
	int $lodTargetsWheel[] = `boltGetPolyCounts_Wheel`;
	int $lodTargetsDrawcalls[] = `boltGetPolyCounts_Drawcalls`;
	int $lodTargetsUnknown[] = {0,0,0,0,0,0,0,0};
	int $lodTargetsSel[] = `boltGetPolyCounts_Selected ($selObj)`;
	
	for ($i=0; $i<$gLodStatsLods; $i++)
	{
	    string $textBoxes[] = {"lodTextTotal", "lodTextExt", "lodTextInt", "lodTextWheel", "lodTextUnk", "lodTextSel","lodTextDrawcalls" };
	    
	    for ($j=0; $j<size($textBoxes); $j++)
	    {
	    	int $count = $allPolyCounts[($j * $gLodStatsLods) + $i];
	 		int $maxCount;
	 		if ($j == 0) $maxCount = $lodTargetsTotal[$i];
	 		if ($j == 1) $maxCount = $lodTargetsExt[$i];
	 		if ($j == 2) $maxCount = $lodTargetsInt[$i];
	 		if ($j == 3) $maxCount = $lodTargetsWheel[$i];
	 		if ($j == 4) $maxCount = $lodTargetsUnknown[$i];
	 		if ($j == 5) $maxCount = $lodTargetsSel[$i];
	 		if ($j == 6) $maxCount = $lodTargetsDrawcalls[$i];
	 		float $col[] = boltGetColour($count, $maxCount, ($j%2) );
	 		text -e -l ("  " + $count + " / " + $maxCount) -bgc $col[0] $col[1] $col[2] ($textBoxes[$j] + $i); 
	    }
	}
	
	text -e -l ("  " + $selObj) lodTextSelected;
	
	columnLayout -e -vis 0 boltLodStatsTitleColumn;
	columnLayout -e -vis 1 boltLodStatsTitleColumn;
	//force a screen update
	
}

global proc int[] boltGetPolyCounts_Selected (string $selObj)
//returns suggested poly counts based on the lod0 count
{
	//prevent crash if non mesh selected
	if ($selObj == "") return {0,0,0,0,0,0,0};
	int $gotMesh = 0;
	if (`nodeType $selObj` == "mesh") $gotMesh = 1;
	if  (size(`listRelatives -c -type "mesh" $selObj`) >= 1) $gotMesh = 1;
	if ($gotMesh == 0) return {0,0,0,0,0,0,0};
		
	int $polyCount[] = `polyEvaluate -triangle $selObj`;	
	string $partType[] = `boltWhatIsPart $selObj`;

	int $targets[] = `boltGetPolyCounts_Car`; 
	if (`sFindItem $partType "_BODY"` != -1) $targets = `boltGetPolyCounts_Ext`;
	if (`sFindItem $partType "_INTERIOR"` != -1) $targets = `boltGetPolyCounts_Int`;
	if ((`sFindItem $partType "_TECH"` != -1) || (`sFindItem $partType "_SUSP"` != -1)) $targets = `boltGetPolyCounts_Ext`;
	if (`sFindItem $partType "_WHEELS"` != -1) $targets = `boltGetPolyCounts_Wheel`;
	
	int $selTargets[] = {};
	
	for ($i=0;$i<size($targets);$i++)
	{
		float $reduction = float($targets[$i]) / $targets[0];
		float $fpolyCount = $polyCount[0] * $reduction;
		int $ipolyCount = $fpolyCount;
		$selTargets[$i] = $ipolyCount;
	}
	
	return $selTargets;
}



global proc float[] boltGetColour(int $count, int $maxCount, int $line)
{
	global float $gColEmpty1[]; 	
	global float $gColEmpty2[]; 	
	global float $gColRed1[];   	
	global float $gColRed2[];   	
	global float $gColYellow1[];	
	global float $gColYellow2[];
	global float $gColGreen1[]; 	
	global float $gColGreen2[]; 
	
	//return grey for empty cells
	if ($count == 0)
	{
		if ($line == 1) return $gColEmpty1;
		if ($line == 0) return $gColEmpty2;
	}
	
	//return green for okay cells
	if ($count <= $maxCount)
	{
		if ($line == 1) return $gColGreen1;
		if ($line == 0) return $gColGreen2;
	}
	
	//return red for zero target cells - avoid /0
	if ($maxCount == 0)
	{
		if ($line == 1) return $gColRed1;
		if ($line == 0) return $gColRed2;
	}
	
	
	//return variable yellow>red for over budget cells
	float $percentageOver = (($count - $maxCount) / float($maxCount))*100;
	
	int $minPC = 0;
	int $maxPC = 100;
			
	float $yellow[] = {1.0,1.0,0.0};
	float $red[] 	= {1.0,0.0,0.0};
	float $colour[] 	= {0.0,0.0,0.0};
						
	if ($percentageOver <= $minPC) $percentageOver = $minPC;
	if ($percentageOver >= $maxPC) $percentageOver = $maxPC;
	//clamp the range

	for ($c=0; $c<3; $c++)
	{				
		$colour[$c] = `boltMapLinearRange $minPC $maxPC $percentageOver $yellow[$c] $red[$c]`;
		if ($line == 0) $colour[$c] = $colour[$c]*0.9;
	}
	
	return $colour;
}
	

global proc int boltPolyCount(string $obj)
//returns poly count of given object. Returns 0 if obj not found
{
	//print ("\n" + $obj);
	if (!(`objExists $obj`)) return 0;
	int $count[] = `polyEvaluate -triangle $obj`;	
	return $count[0];
}

global proc float boltMapLinearRange(float $start1, float $end1, float $pos1, float $start2, float $end2)
//maps one range of numbers onto another, returns $pos2 from the second range, 
//equivalent of $pos1 in first range 
{
	float $range1   = $end1 - $start1;
	float $distIn1  = $pos1 - $start1;
	float $ratioIn1 = $distIn1 / $range1;
	float $range2   = $end2 - $start2;
	float $pos2     = $start2 + ($ratioIn1 * $range2);
	return $pos2;
}


global proc int[] boltGetAllPolyCounts(string $selObj)
//returns the poly count for all lods and types
{
	string $objs[] = boltShapesToTransformsNoPath(`ls -type "mesh"`);
	//may need to count locators so that wheels are added on??
	
	int $car[] = {0,0,0,0,0,0,0,0};
	int $ext[] = {0,0,0,0,0,0,0,0};
	int $int[] = {0,0,0,0,0,0,0,0};
	int $tech[] = {0,0,0,0,0,0,0,0};
	int $wheel[] = {0,0,0,0,0,0,0,0};
	int $unknown[] = {0,0,0,0,0,0,0,0};
	int $sel[] = {0,0,0,0,0,0,0,0};
	int $draws[] = {0,0,0,0,0,0,0,0};
	
	for ($obj in $objs)
	{
		string $objToCount = $obj;
		string $partType[] = `boltWhatIsPart $objToCount`;
		
		int $lod = 0;
		for ($i=1; $i<=6; $i++)
		{ 
			if (`sFindItem $partType ("_LOD" + $i)` != -1) $lod = $i;
		}
		if (`sFindItem $partType "_SHADOW"` != -1) $lod = 7;
		
				
		//check if part is in the lod / type we are counting, ignore deads, glows, col, damage
		if ((`sFindItem $partType "_DEAD"` == -1) && 
			(`sFindItem $partType "_GLOW"` == -1) &&
			(`sFindItem $partType "_COL"` == -1) &&  
			(`sFindItem $partType "_DAM"` == -1))   
		{	                                         
			int $polys[] = {0};                      
			$polys = `polyEvaluate -triangle $objToCount`;
					
			if (`sFindItem $partType "_BODY"` != -1)
			{
				$ext[$lod] = $ext[$lod] + $polys[0];
			}
			if (`sFindItem $partType "_INTERIOR"` != -1)
			{
				if ($lod == 0)
				{					
					$int[$lod] = $int[$lod] + $polys[0]; 
				}
				else //count lod interior parts as part of the exterior budget
				{
					$ext[$lod] = $ext[$lod] + $polys[0];
				} 
			}
			if ((`sFindItem $partType "_TECH"` != -1) || (`sFindItem $partType "_SUSP"` != -1))
			{
				$ext[$lod] = $ext[$lod] + $polys[0];   
				//$tech[$lod] = $tech[$lod] + $polys[0];  
			}
			if (`sFindItem $partType "_WHEELS"` != -1)
			{
				$wheel[$lod] = $wheel[$lod] + $polys[0]; 
			}
			
			$strippedObj = `substitute "_LOD." $obj ""`;
			$strippedObj = `substitute "_SHADOW" $strippedObj ""`;
			if ($strippedObj == $selObj)
			{
				$sel[$lod] = $sel[$lod] + $polys[0];
			}
			
			$car[$lod] = $car[$lod] + $polys[0]; 
    	}
    }
	
	//calculate unknowns
	for ($i=0; $i<size($car); $i++)
	{
		$unknown[$i] = $car[$i] - ($ext[$i] + $int[$i] + $tech[$i] + $wheel[$i]);
	}

	//get draw calls
	for ($i=0; $i<size($car); $i++)
	{
		$draws[$i] = boltGetDrawCallsOnMesh($i);
	}

	//join arrays
	for ($i in $ext) $car[size($car)] = $i;
	for ($i in $int) $car[size($car)] = $i;
	//for ($i in $tech) $car[size($car)] = $i;
	for ($i in $wheel) $car[size($car)] = $i;
	for ($i in $unknown) $car[size($car)] = $i;
	for ($i in $sel) $car[size($car)] = $i;
	for ($i in $draws) $car[size($car)] = $i;
	
	return $car;
}



global proc boltPrintUnknownObjs(int $targetLod)
//prints the names and poly counts of all "unknown" objects
{
	string $objs[] = boltShapesToTransformsNoPath(`ls -type "mesh"`);
	//may need to count locators so that wheels are added on??
	
	print ("\nUnknown LOD" + $targetLod + " objects found:");
	int $found = 0;
	
	for ($obj in $objs)
	{
		string $objToCount = $obj;
		string $partType[] = `boltWhatIsPart $objToCount`;
		
		int $lod = 0;
		for ($i=1; $i<=6; $i++)
		{ 
			if (`sFindItem $partType ("_LOD" + $i)` != -1) $lod = $i;
		}
		if (`sFindItem $partType "_SHADOW"` != -1) $lod = 7;

		if ($lod == $targetLod)
		{
			if ((`sFindItem $partType "_DEAD"` == -1) && 
				(`sFindItem $partType "_GLOW"` == -1) &&
				(`sFindItem $partType "_COL"` == -1) &&
				(`sFindItem $partType "_BODY"` == -1) &&
				(`sFindItem $partType "_INTERIOR"` == -1) &&
				(`sFindItem $partType "_TECH"` == -1) && 
				(`sFindItem $partType "_SUSP"` == -1) && 
				(`sFindItem $partType "_WHEELS"` == -1) && 
				(`sFindItem $partType "_DAM"` == -1))   
			{	                                         
				int $polys[] = {0};                      
				$polys = `polyEvaluate -triangle $objToCount`;
				
				$found = 1;
				print ("\n   " + $objToCount + "    Polys: " + $polys[0]);
			}
		}
	}
	if ($found==0) print "\n    None";		
}






global proc int boltGetDrawCallsOnMesh(int $lod)
//returns no of draw calls on specified lod - combines mergeable parts
{
	int $drawcalls = 0;
	$meshes = `ls -type "mesh"`;
	
	string $mergedObjs[] = {};
	//work out auto merged objs	
	if ($lod >= 1)
	{
		string $mergedObjsTemp[] = {"BODY", "BONNET", "BOOT", "BUMPER_B", "BUMPER_F"};
	
		//add lod + shape names
		for ($i=0; $i<size($mergedObjsTemp); $i++)
		{
			if ($lod >= 1)
			{
				$lodName = ($mergedObjsTemp[$i] + "_LOD" + $lod);
				if (objExists($lodName))
				{
					string $s[] = `listRelatives -children -type "mesh" $lodName`;
					$mergedObjs[size($mergedObjs)] = $s[0];
				}
			}
		}
		
		//calc merged drawcalls
		string $mergedsgs[] = {};
		for ($obj in $mergedObjs)
		{
			$sgs = getSGsFromShape($obj);
			$mergedsgs = stringArrayCatenate($mergedsgs,$sgs);
		}
		$mergedsgs = stringArrayRemoveDuplicates($mergedsgs);
		for ($sg in $mergedsgs)
		{
			$mat = getMaterialFromSG($sg);
			if ($mat != "") $drawcalls ++;
		}
	}
	
	
	for ($mesh in $meshes)
	{
		$p = `listRelatives -parent $mesh`;
		string $partType[] = `boltWhatIsPart $p[0]`;
		if ( (`sFindItem $partType ("_LOD"+$lod)` != -1) && (`sFindItem $partType ("_DAM")` == -1) &&(`sFindItem $mergedObjs $mesh` == -1) )
		{
			$sgs = getSGsFromShape($mesh);
			for ($sg in $sgs)
			{
				$mat = getMaterialFromSG($sg);
				if ($mat != "") $drawcalls ++;
			}
		}
	}
	return $drawcalls;
}




//draw calls report
global proc boltReportDrawCalls(int $lod, int $fullDetails)
{
	$drawcalls = 0;
	$meshes = `ls -type "mesh"`;
	$noCounted = 0;
	string $mats[] = {};
	
	
	string $mergedObjs[] = {};

	//work out auto merged objs	
	if ($lod >= 1)
	{
		string $mergedObjsTemp[] = {"BODY", "BONNET", "BOOT", "BUMPER_B", "BUMPER_F"};
	
		//add lod + shape names
		for ($i=0; $i<size($mergedObjsTemp); $i++)
		{
			if ($lod >= 1)
			{
				$lodName = ($mergedObjsTemp[$i] + "_LOD" + $lod);
				if (objExists($lodName))
				{
					string $s[] = `listRelatives -children -type "mesh" $lodName`;
					$mergedObjs[size($mergedObjs)] = $s[0];
				}
			}
		}
		
		//calc merged drawcalls
		$noCounted ++;
		string $mergedsgs[] = {};
		for ($obj in $mergedObjs)
		{
			$sgs = getSGsFromShape($obj);
			$mergedsgs = stringArrayCatenate($mergedsgs,$sgs);
		}
		$mergedsgs = stringArrayRemoveDuplicates($mergedsgs);
		$calls = 0;
		$printMats = "";
		for ($sg in $mergedsgs)
		{
			$mat = getMaterialFromSG($sg);
			if ($mat != "")
			{
				$mats[size($mats)]= $mat;
				$calls ++;
				$printMats = $printMats + " " + $mat;
			}
		}
		$drawcalls += $calls;
		if ($fullDetails == 1) print ("\n  " + $calls + " drawcalls on BODY/BUMPERS/BONNET/BOOT merged obj. --- " + $printMats);
	}
	
	for ($m in $meshes)
	{
		$p = `listRelatives -parent $m`;
		string $partType[] = `boltWhatIsPart $p[0]`;
		//only count correct lod, and parts not already counted as merged parts.
		
		if ( (`sFindItem $partType ("_LOD"+$lod)` != -1) && (`sFindItem $partType ("_DAM")` == -1) && (`sFindItem $mergedObjs $m` == -1) )
		{
			$noCounted ++;
			$sgs = getSGsFromShape($m);
			$calls = 0;
			$printMats = "";
			for ($sg in $sgs)
			{
				$mat = getMaterialFromSG($sg);
				if ($mat != "")
				{
					$mats[size($mats)]= $mat;
					$calls ++;
					$printMats = $printMats + " " + $mat;
				}
			}
			$drawcalls += $calls;
			if ($fullDetails == 1) print ("\n  " + $calls + " drawcalls on " + $m + ". --- " + $printMats);
		}
	}
	$mats = stringArrayRemoveDuplicates($mats);
	$noMats = size($mats); //size(`ls -materials`); $noMats -= 3;
	float $fnoCounted = $noCounted;
	print ("\nLOD" + $lod + ": " + $drawcalls + " drawcalls on " + $noCounted + " meshes. Average " + ($drawcalls/$fnoCounted) + " calls per mesh. " + $noMats + " unique shaders");
}
