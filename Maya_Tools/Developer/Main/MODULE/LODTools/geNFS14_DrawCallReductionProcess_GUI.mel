source "geNFS14_MiniHypershade_GUI";

proc loadSwatchesList() {
    python ("import geNFS14_ParseMaterialSwatches");    
	python ("materialSwatches = geNFS14_ParseMaterialSwatches.ParseMaterialSwatches('D:/NFS14prod/Data/Raw/Vehicles/Tools/Maya/Mel/UI/materialSwatches.xml')");
	$numSwatches = `python ("materialSwatches.getNumber()")`;
	for ($i=0; $i<$numSwatches; $i++)
	    textScrollList -e -append (`python ("materialSwatches.getName(" + $i + ")")`) listMatSwatches ;
}

global proc geNFS14_DrawCallReductionProcess_GUI () {	
	if (`window -exists scaleToMaterialSwatch_window`) { deleteUI -window scaleToMaterialSwatch_window; }
	
	window -title "DrawCallReductionProcess" -widthHeight 280 430 -s 0 scaleToMaterialSwatch_window;
	columnLayout -adjustableColumn true;
		text -label "\nChoose a Material Swatch:" -align "left";
		textScrollList -numberOfRows 18 -allowMultiSelection false listMatSwatches;
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
	
		button -al "center" -w 255 -h 30 -label "Select UVs then PRESS to scale to selected swatch" -command("geNFS14_ScaleToMaterialSwatch");
		
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
	
		button -al "center" -w 255 -h 30 -label "Select 'Opaque/Glass' Objs --> SCALE map2 to swatch " -command("geNFS14_ScaleObjsToMaterialSwatch_Map2");
		
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
	
		button -al "center" -w 255 -h 30 -label "Select 'GlassColor' Objs --> SCALE map1 to swatch " -command("geNFS14_ScaleObjsToMaterialSwatch_Map1") -enable false;
		
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
		
		button -al "center" -w 255 -h 30 -label "Select Interior Objs --> ScaleV 1/2, pivot [0,1]" -command("geNFS14_ScaleInteriorObjs");
		
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
		
		button -al "center" -w 255 -h 30 -label "Select Engine Objs --> ScaleV 1/2, pivot [0,0]" -command("geNFS14_ScaleEngineObjs");
		
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
	
		button -al "center" -w 255 -h 30 -label "Step 1. Convert CGFXs To DrawCall_CGFXs" -command("geNFS14_ConvertTo_DrawCallCgfxs");
		
		setParent..;
		rowLayout -numberOfColumns 1 -cw1 255;
	
		button -al "center" -w 255 -h 30 -label "Step 1-bis. Optimize 'General' Cgfxs" -command("geNFS14_Optimize_GeneralDCCgfxs");
		
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
	
		button -al "center" -w 255 -h 30 -label "Step 2. Check scene very CAREFULLY!" -command("") -enable 0;
		
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
	
		button -al "center" -w 255 -h 30 -label "Step 3. Select 'MainPaint' + 'MainGrille' + 'ToMainPaint'" -command("") -enable 0;
		
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
	
		button -al "center" -w 255 -h 30 -label "Step 4. Create Shader Lods" -command("geNFS14_CreateShaderLods");
		
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
	
		button -al "center" -w 255 -h 30 -label "Step 5. Manually procced for '*_ToOther_*'" -command("") -enable 0;
		
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
	
		button -al "center" -w 255 -h 30 -label "Step 6. Scale Swatches" -command("") -enable 0;
		
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
	
		button -al "center" -w 255 -h 30 -label "Step 7. Check, Select and Delete '*_DeleteLater'" -command("") -enable 0;
		
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
	
		button -al "center" -w 255 -h 30 -label "Rename 'export_meshes' with assigned material" -command("geNFS14_RenameMeshesByMaterial") -enable 1;
		
		setParent..;
		
		rowLayout -numberOfColumns 1 -cw1 255;
	
		button -al "center" -w 255 -h 30 -label "Trying assign correct DC's material (after fixing FB)" -command("geNFS14_ReassignToCorrectDCMat") -enable 0;
		
		setParent..;
		
				
		setParent..;
	
	loadSwatchesList();
	
	showWindow scaleToMaterialSwatch_window;
	window -edit -wh 350 250 scaleToMaterialSwatch_window;
}

global proc geNFS14_ScaleToMaterialSwatch() {
    python ("import geNFS14_ParseMaterialSwatches");    
	python ("materialSwatches = geNFS14_ParseMaterialSwatches.ParseMaterialSwatches('D:/NFS14prod/Data/Raw/Vehicles/Tools/Maya/Mel/UI/materialSwatches.xml')");
	int $selIdx[] = `textScrollList -q -sii listMatSwatches`;
	python ("materialSwatches.doScaleToSelectedSwatch(" + ($selIdx[0] - 1) + ")");//doScaleSelUVsToSelectedSwatch
}

proc int sFindItem (string $array[], string $value)
{
	int $i;
	if (`size($array)` > 0) {
		for ($i = 0; $i <= `size($array)`; $i++)
		{
			if ($array[$i] == $value) {
				return $i;
			}
		}
	}
	return -1;
}

proc geNFS14_ScaleGeneralMatUVsToSwatch(string $aUVSet) {
    string $selObjs[] = `ls -sl -l`;    
	if (!size($selObjs)) return;
	
	python ("import geNFS14_ParseMaterialSwatches");    
	python ("materialSwatches = geNFS14_ParseMaterialSwatches.ParseMaterialSwatches('D:/NFS14prod/Data/Raw/Vehicles/Tools/Maya/Mel/UI/materialSwatches.xml')");
	int $selIdx[] = `textScrollList -q -sii listMatSwatches`;
	
	for ($obj in $selObjs) {
	    select $obj;
	    
	    // create map2 if needed
	    string $objUVSets[] = `polyUVSet -q -allUVSets $obj`;
	    if (sFindItem($objUVSets, $aUVSet) == -1) {
	        polyUVSet -create -uvSet $aUVSet $obj;	        
	    }
	    polyUVSet -currentUVSet -uvSet $aUVSet $obj;
	    
	    //auto planar
	    //int $numFaces[] = `polyEvaluate -face $obj`;
	    //polyProjection -ch 0 -type Planar -ibd off -md b ($obj + ".f[0:" + ($numFaces[0]-1) + "]");
	    polyProjection -ch 0 -type Planar -ibd off -md b ($obj + ".f[*]");
	    
	    //$selection = `polyListComponentConversion -tuv $obj`;
	    select ($obj + ".map[*]");
	    
	    // scale to swatch
	    python ("materialSwatches.doScaleToSelectedSwatch(" + ($selIdx[0] - 1) + ")");
	}
	
	select $selObjs;
}

global proc geNFS14_ScaleObjsToMaterialSwatch_Map2() {
    geNFS14_ScaleGeneralMatUVsToSwatch("map2");
	python("from UVDeluxe import uvdeluxe");
	python("uvdeluxe.createUI()");
}

global proc geNFS14_ScaleObjsToMaterialSwatch_Map1() {
    geNFS14_ScaleGeneralMatUVsToSwatch("map1");
	python("from UVDeluxe import uvdeluxe");
	python("uvdeluxe.createUI()");
}

proc scaleHalfVWithPivot(float $uPivot, float $vPivot) {
    string $selObjs[] = `ls -sl -l`;
    string $allUVs[] = {};
    for ($obj in $selObjs) {
        polyUVSet -currentUVSet -uvSet "map1" $obj;
        select ($obj + ".map[*]");
        string $selUVs[] = `ls -sl -l -fl`;
        $allUVs = `stringArrayCatenate $allUVs $selUVs`;
    }
    select $allUVs;
    
    polyEditUV -pu $uPivot -pv $vPivot -su 1 -sv 0.5;
}

global proc geNFS14_ScaleInteriorObjs() {
    scaleHalfVWithPivot(0, 1);
}
global proc geNFS14_ScaleEngineObjs() {
    scaleHalfVWithPivot(0, 0);
}

proc string[] getDrawCallCgfxCoreName(string $cgfxName) {
    string $result[] = {"doNothing", ""};
    
    string $lowerName = `tolower $cgfxName`;
    switch ($lowerName) {
        case "carnfs14_glass.cgfx":
        case "carnfs14_glasssurround.cgfx":
        case "carnfs14_mirror.cgfx":
        case "carnfs14_lightglass.cgfx":
            $result = {"doConversion_Swatches", "CarNFS14_CS_General_Glass", "M_General_Glass"};
            break;
        
        case "carnfs14_lightglassinner.cgfx":
            $result = {"doConversion_Swatches", "CarNFS14_CS_General_GlassColor", "M_General_GlassColor"};
            break;
            
        case "carnfs14_alloy_rough.cgfx":
        case "carnfs14_alloy_smooth.cgfx":
        case "carnfs14_chrome.cgfx":
        case "carnfs14_exhaust.cgfx":
        case "carnfs14_plastic_rough.cgfx":
        case "carnfs14_plastic_smooth.cgfx":
        case "carnfs14_rubber_rough.cgfx":
        case "carnfs14_rubber_smooth.cgfx":
            $result = {"doConversion_Swatches", "CarNFS14_CS_General_Opaque", "M_General_Opaque"};
            break;
            
                
        case "carnfs14_grille.cgfx":
            $result = {"doConversion", "CarNFS14_CS_Grille"};
            break;        
            
        case "carnfs14_paint.cgfx":
        case "carnfs14_paintlivery.cgfx":
            $result = {"doConversion", "CarNFS14_CS_CarPaint"};
            break;
            
            
            
        case "carnfs14_badges.cgfx":
            $result = {"doConversion", "CarNFS14_CS_Badges"};
            break;
            
        case "carnfs14_brakedisc.cgfx":
            $result = {"doConversion", "CarNFS14_CS_BrakeDisc"};
            break;
            
        case "carnfs14_caliper.cgfx":
            $result = {"doConversion", "CarNFS14_CS_Caliper"};
            break;
            
        case "carnfs14_rim.cgfx":
            $result = {"doConversion", "CarNFS14_CS_Rim"};
            break;
            
        case "carnfs14_tire.cgfx":
            $result = {"doConversion", "CarNFS14_CS_Tire"};
            break;
            
        case "carnfs14_carbon.cgfx":
            $result = {"doConversion", "CarNFS14_CS_Carbon"};
            break;
            
        case "carnfs14_licenseplate.cgfx":
            $result = {"doConversion", "CarNFS14_CS_LicensePlate"};
            break;
            
        case "carnfs14_light.cgfx":
            $result = {"doConversion", "CarNFS14_CS_Light"};
            break;
            
        case "carnfs14_light_refracted.cgfx":
            $result = {"doConversion", "CarNFS14_CS_LightRefracted"};
            break;
            
        case "carnfs14_chassis.cgfx":
            $result = {"doConversion", "CarNFS14_CS_Chassis"};
            break;
        
        case "carnfs14_driver.cgfx":
            $result = {"doConversion", "CarNFS14_CS_Driver"};
            break;
            
            
        case "carnfs14_interior.cgfx":
        case "carnfs14_engine.cgfx":
            $result ={"doConversion_Internal", "CarNFS14_CS_Internal", "M_Internal"};
            break;
            
        case "carnfs14_interiortiling.cgfx":
            $result = {"doConversion", "CarNFS14_CS_InternalTiled"};
            break;
            
            
            
        case "carnfs14_grille_noalpha.cgfx":
        case "carnfs14_exhaust_withtexture.cgfx":
            $result = {"notMatch", ""};
            break;
    }
    
    return $result;
}

proc copyShaderAttrs(string $fromCgfx, string $toDcCgfx) {
    select -r $fromCgfx ;
    select -tgl $toDcCgfx ;  
    python ("import geNFS14_CgfxTweak");
    //python ($command);
    python ("geNFS14_CgfxTweak.forceCopyCGFX_KeyableAttributes_1()");
    
    // try to assign texture maps    
    string $mapSamplers[] = {".diffuseMapSampler", ".specColorMapSampler", ".ssoMapSampler", ".normalMapSampler", ".emissiveMapSampler", ".envCubeMapSampler"};
    $mapSamplers = `stringArrayCatenate $mapSamplers {".extNormalMapSampler", ".intNormalMapSampler", ".ssadMapSampler"}`; // for Light_Refracted
    for ($sampler in $mapSamplers) {
        if (`objExists ($fromCgfx + $sampler)`) {
            $conn2Texture = `listConnections -d off -s on ($fromCgfx + $sampler)`;
            if (size($conn2Texture))
                catch (`connectAttr -force ($conn2Texture[0] + ".outColor") ($toDcCgfx + $sampler)`);
        }
    }  
}

proc convertSomeMapsToCorrectNaming()
{
  undoInfo -stateWithoutFlush off;
  
    string $sel[] = `ls -type file`;
    int $i = 0;
    while ($sel[$i]!="")
    {
        string $fnode = $sel[$i];
        $i += 1;
        string $path = `getAttr ($fnode+".fileTextureName")`;
        if($path!="")
        {
            if (`gmatch $path "*_SSO.*"`)
                setAttr -type "string" ($fnode+".fileTextureName") (`substitute "_SSO." $path "_Material."`);
            else if (`gmatch $path "*_ClearcoatSmoothness.*"`)
                setAttr -type "string" ($fnode+".fileTextureName") (`substitute "_ClearcoatSmoothness." $path "_Material."`);
            else if (`gmatch $path "*_Normal.*"`)
                setAttr -type "string" ($fnode+".fileTextureName") (`substitute "_Normal." $path "_N."`);
            else if (`gmatch $path "*_Diffuse.*"`)
                setAttr -type "string" ($fnode+".fileTextureName") (`substitute "_Diffuse." $path "_D."`);
        }
    }
    
    undoInfo -stateWithoutFlush on;
}

proc breakConnectionsToUnfoundMaps()
{
    string $mapSamplers[] = {".diffuseMapSampler", ".specColorMapSampler", ".ssoMapSampler", ".normalMapSampler", ".emissiveMapSampler", ".envCubeMapSampler"};
    string $flags[] = {".useDiffuseMap", ".useSpecColorMap", ".useSSOMap", ".useNormalMap", ".useGlowTexture", ".useReflCube"};
    
    string $allCgfxs[] = `ls -type cgfxShader`;
    for ($cgfx in $allCgfxs) {
        for ($i=0; $i<size($mapSamplers); $i++) {
            if (`objExists ($cgfx + $mapSamplers[$i])`) {
                $conn2Texture = `listConnections -d off -s on ($cgfx + $mapSamplers[$i])`;
                if (size($conn2Texture)) {
                    $fNode = $conn2Texture[0];
                    string $path = `getAttr ($fNode+".fileTextureName")`;
                     if (! `filetest -f $path`) {
                         delete $fNode;
                         setAttr ($cgfx + $flags[$i]) 0;
                     }
                }
            }
        }
    }
}

global proc geNFS14_ConvertTo_DrawCallCgfxs() {
    // auto-scale swatches
    
    // standarize names of old cgfxs
    geNFS14_FixCgfxName();
    
    // trying to change texture name: _SSO --> _Material
    convertSomeMapsToCorrectNaming();
    
    // break connections for 6 general map sampler if  texture map doesnot exist
    breakConnectionsToUnfoundMaps();
    
    string $dcCgfxPath = "d:/NFS14PROD/Data/Raw/Vehicles/Tools/DrawCall_CGFXs/";
    string $allCgfxs[] = `ls -type cgfxShader`;
    for ($cgfx in $allCgfxs) {
        $conn2Blinn = `listConnections -d on -s off ($cgfx + ".outColor")`;
        if (size($conn2Blinn)) {
            string $cgfxPath = `getAttr ($cgfx+".shader")`;
            string $buffer[];
            int $numTok = `tokenize $cgfxPath "/" $buffer`;
            if ($numTok) {
                string $dcCgfxList[] = getDrawCallCgfxCoreName($buffer[$numTok-1]);
                string $dcCgfxName = $dcCgfxList[1];
                if (($dcCgfxList[0]) == "doConversion") {
                    //if (`objExists ($dcCgfxName + "_DCcgfx")`)
                    //    delete ($dcCgfxName + "_DCcgfx");
                    string $dcCgfx = `shadingNode -asShader cgfxShader -name ($cgfx + "_DC")`;
                    
                    cgfxShader -e -fx ($dcCgfxPath + $dcCgfxName + ".cgfx") $dcCgfx;
                    
                    // vertex data
                    setAttr ($dcCgfx + ".vertexAttributeSource") -type stringArray 9 "uv:map1" "uv:map2" "uv:map3" "uv:map4" "color:colorSet1" "position" "normal"  "binormal:map1" "tangent:map1";
                    
                    // other attributes
                    copyShaderAttrs($cgfx, $dcCgfx);
                    
                    // connections                    
                    connectAttr -f ($dcCgfx+".outColor") ($conn2Blinn[0]+".hardwareShader");
                    
                    // delete old cgfx
                    delete $cgfx;
                }
                else if (($dcCgfxList[0]) == "doConversion_Swatches") {
                    if (`objExists ($dcCgfxList[2] + "_cgfx_DC")`) {
                        // only need to establish the connection
                        connectAttr -f (($dcCgfxList[2] + "_cgfx_DC")+".outColor") ($conn2Blinn[0]+".hardwareShader");
                        
                        // delete old cgfx
                        delete $cgfx;
                    }
                    else {
                        string $dcCgfx = `shadingNode -asShader cgfxShader -name ($dcCgfxList[2] + "_cgfx_DC")`;
                        
                        cgfxShader -e -fx ($dcCgfxPath + $dcCgfxName + ".cgfx") $dcCgfx;
                        
                        // vertex data
                        setAttr ($dcCgfx + ".vertexAttributeSource") -type stringArray 9 "uv:map1" "uv:map2" "uv:map3" "uv:map4" "color:colorSet1" "position" "normal"  "binormal:map1" "tangent:map1";
                        
    
                        // connections                    
                        connectAttr -f ($dcCgfx+".outColor") ($conn2Blinn[0]+".hardwareShader");
                        
                        // assign maps
                        geNFS14_ConnectMapsTo_DCCgfx($dcCgfx, $dcCgfxName);
                        
                        // delete old cgfx
                        delete $cgfx;
                    }
                }
                else if (($dcCgfxList[0]) == "doConversion_Internal") {
                    if (`objExists ($dcCgfxList[2] + "_cgfx_DC")`) {
                        // only need to establish the connection
                        connectAttr -f (($dcCgfxList[2] + "_cgfx_DC")+".outColor") ($conn2Blinn[0]+".hardwareShader");
                        
                        // delete old cgfx
                        delete $cgfx;
                    }
                    else {
                        string $dcCgfx = `shadingNode -asShader cgfxShader -name ($dcCgfxList[2] + "_cgfx_DC")`;
                        
                        cgfxShader -e -fx ($dcCgfxPath + $dcCgfxName + ".cgfx") $dcCgfx;
                        
                        // vertex data
                        setAttr ($dcCgfx + ".vertexAttributeSource") -type stringArray 9 "uv:map1" "uv:map2" "uv:map3" "uv:map4" "color:colorSet1" "position" "normal"  "binormal:map1" "tangent:map1";
                        
    
                        // connections                    
                        connectAttr -f ($dcCgfx+".outColor") ($conn2Blinn[0]+".hardwareShader");
                        
                        // assign maps
                        geNFS14_ConnectMapsTo_DCCgfx($dcCgfx, $dcCgfxName);
                        
                        // delete old cgfx
                        delete $cgfx;
                    }
                }
            }
        }
    }
}

global proc geNFS14_Optimize_GeneralDCCgfxs()
{
    string $opaqueCgfx = "";
    string $glassCgfx = "";
    string $glassColorCgfx = "";
    
    string $opaqueBlinns[] = {};
    string $glassBlinns[] = {};
    string $glassColorBlinns[] = {};
    
    string $allCgfxs[] = `ls -type cgfxShader`;
    for ($cgfx in $allCgfxs) {
        $conn2Blinn = `listConnections -d on -s off ($cgfx + ".outColor")`;
        if (size($conn2Blinn)) {
            string $cgfxPath = `getAttr ($cgfx+".shader")`;
            string $buffer[];
            int $numTok = `tokenize $cgfxPath "/" $buffer`;
            if ($numTok) {
                if ($buffer[$numTok-1] == "CarNFS14_CS_General_Opaque.cgfx") {
                    $opaqueBlinns[size($opaqueBlinns)] = $conn2Blinn[0];
                    if ($opaqueCgfx == "")
                        $opaqueCgfx = $cgfx;
                    else {
                        connectAttr -f ($opaqueCgfx+".outColor") ($conn2Blinn[0]+".hardwareShader");
                        // disconnectAttr ($cgfx+".outColor") ($conn2Blinn[0]+".hardwareShader");
                        delete $cgfx;
                    }
                }
                if ($buffer[$numTok-1] == "CarNFS14_CS_General_Glass.cgfx") {
                    $glassBlinns[size($glassBlinns)] = $conn2Blinn[0];
                    if ($glassCgfx == "")
                        $glassCgfx = $cgfx;
                    else {
                        connectAttr -f ($glassCgfx+".outColor") ($conn2Blinn[0]+".hardwareShader");
                        // disconnectAttr ($cgfx+".outColor") ($conn2Blinn[0]+".hardwareShader");
                        delete $cgfx;
                    }
                }
                if ($buffer[$numTok-1] == "CarNFS14_CS_General_GlassColor.cgfx") {
                    $glassColorBlinns[size($glassColorBlinns)] = $conn2Blinn[0];
                    if ($glassColorCgfx == "")
                        $glassColorCgfx = $cgfx;
                    else {
                        connectAttr -f ($glassColorCgfx+".outColor") ($conn2Blinn[0]+".hardwareShader");
                        // disconnectAttr ($cgfx+".outColor") ($conn2Blinn[0]+".hardwareShader");
                        delete $cgfx;
                    }
                }
            }
        }
    }
    
    if ($opaqueCgfx != "")
        rename $opaqueCgfx "M_General_Opaque_cgfx_DC";
    if ($glassCgfx != "")
        rename $glassCgfx "M_General_Glass_cgfx_DC";    
    if ($glassColorCgfx != "")
        rename $glassColorCgfx "M_General_GlassColor_cgfx_DC";
}

proc string rootNode( string $object )
// Description: Strips the dot-suffix of the specified string.
{
  string $buffer[];
  tokenize $object "." $buffer;
  return $buffer[0];
}

proc string[] selectFacesInGroupsByMaterial(string $inGroups[], string $aMat) {
    //get list of objects  
    string $grpObjects[] = {};
    $k = 0;    
    for ($aGrp in $inGroups) {
        string $grpMeshes[] = `listRelatives -f -ad -type mesh $aGrp`;
        for ($aMesh in $grpMeshes) {
            string $transNode[] = `listRelatives -f -p $aMesh`;
            $grpObjects[$k++] = $transNode[0];
        }
    }
    
    // select material
    select $aMat;
    
    // do select faces assigned by the material
    string $result[] = {};
    $k = 0;
    hyperShade -objects "";
    string $curSelection[] = `ls -sl -fl -l`;
    for ($item in $curSelection) {        
        if ((sFindItem($grpObjects, rootNode($item))) != -1) {
            $result[$k++] = $item;
        }
    }
    select $result;
    
    return $result;
}

proc string[] getSceneCgfxMaterialsInfo() {
    string $blinnNames[];
    string $cgfxNames[];
    string $cgfxFiles[];
    int $k = 0;
    
    string $allCgfxs[] = `ls -type cgfxShader`;
    for ($cgfx in $allCgfxs) {
        $conn2Blinn = `listConnections -d on -s off ($cgfx + ".outColor")`;
        if (size($conn2Blinn)) {
            string $cgfxPath = `getAttr ($cgfx+".shader")`;
            string $buffer[];
            int $numTok = `tokenize $cgfxPath "/" $buffer`;
            if ($numTok) {
                $blinnNames[$k] = $conn2Blinn[0];
                $cgfxNames[$k] = $cgfx;
                $cgfxFiles[$k] = $buffer[$numTok-1];
                $k++;
            }
        }
    }
    
    return { (stringArrayToString($blinnNames, ",")), (stringArrayToString($cgfxNames, ",")), (stringArrayToString($cgfxFiles, ",")) };
}

proc string[] getMaterialsListOnAGroup(string $inGroup) {
    string $grpMeshes[] = `listRelatives -f -ad -type mesh $inGroup`;
    
    string $mats[] = {};
    if (`size $grpMeshes`) {
        
        for ($aMesh in $grpMeshes) {
            string $usedMats[] = geNFS14_GetMaterialsOnShape ($aMesh);
            $mats = `stringArrayCatenate $mats $usedMats`;
        }
        $mats = `stringArrayRemoveDuplicates $mats`;
        $mats = `sort $mats`;
    }
    
    return $mats;
}

proc string getOpaqueCgfx(string $cgfxNames[], string $cgfxFiles[]) {
    string $result = "";
    
    int $opaqugeCgfxIdx = sFindItem($cgfxFiles, "CarNFS14_CS_General_Opaque.cgfx");
    if ($opaqugeCgfxIdx != -1)
        $result = $cgfxNames[$opaqugeCgfxIdx];
        
    return $result;
}

proc string getInternalCgfx(string $cgfxNames[], string $cgfxFiles[]) {
    string $result = "";
    
    int $internalCgfxIdx = sFindItem($cgfxFiles, "CarNFS14_CS_Internal.cgfx");
    if ($internalCgfxIdx != -1)
        $result = $cgfxNames[$internalCgfxIdx];
        
    return $result;
}

proc string getMainPaintCgfx(string $cgfxNames[], string $cgfxFiles[]) {
    string $result = "";
    
    for ($k=0; $k<size($cgfxNames); $k++) {
        if ($cgfxFiles[$k] == "CarNFS14_CS_CarPaint.cgfx") {
            if (`gmatch $cgfxNames[$k] "*_MainPaint*"`) {
                $result = $cgfxNames[$k];
                break;
            }
        }
    }
        
    return $result;
}

proc string[] getOtherPaintsCgfx(string $cgfxNames[], string $cgfxFiles[]) {
    string $result[] = {};
    $idx = 0;
    
    for ($k=0; $k<size($cgfxNames); $k++) {
        if ($cgfxFiles[$k] == "CarNFS14_CS_CarPaint.cgfx") {
            if (! `gmatch $cgfxNames[$k] "*_MainPaint*"`) {
                $result[$idx++] = $cgfxNames[$k];
            }
        }
        else if ($cgfxFiles[$k] == "CarNFS14_CS_CarPaint_Normalmap.cgfx") {
            $result[$idx++] = $cgfxNames[$k];
        }
    }
        
    return $result;
}

proc string getMainGrilleCgfx(string $cgfxNames[], string $cgfxFiles[]) {
    string $result = "";
    
    for ($k=0; $k<size($cgfxNames); $k++) {
        if ($cgfxFiles[$k] == "CarNFS14_CS_Grille.cgfx") {
            if (`gmatch $cgfxNames[$k] "*_MainGrille*"`) {
                $result = $cgfxNames[$k];
                break;
            }
        }
    }
        
    return $result;
}

proc string[] getOtherGrillesCgfx(string $cgfxNames[], string $cgfxFiles[]) {
    string $result[] = {};
    $idx = 0;
    
    for ($k=0; $k<size($cgfxNames); $k++) {
        if ($cgfxFiles[$k] == "CarNFS14_CS_Grille.cgfx") {
            if (! `gmatch $cgfxNames[$k] "*_MainGrille*"`) {
                $result[$idx++] = $cgfxNames[$k];
            }
        }
    }
        
    return $result;
}

proc string getOtherCgfx(string $cgfxNames[], string $cgfxFiles[], string $cgfxFileName) {
    string $result = "";
    
    int $internalCgfxIdx = sFindItem($cgfxFiles, $cgfxFileName);
    if ($internalCgfxIdx != -1)
        $result = $cgfxNames[$internalCgfxIdx];
        
    return $result;
}

proc string getBlinnFromCgfx(string $cgfx) {
    string $conns2Blinn[] = `listConnections -d on -s off ($cgfx + ".outColor")`;
    
    return $conns2Blinn[0];
}

proc string getCgfxFileFromBlinn(string $blinn) {
    string $result = "";
    string $conns2Cgfx[] = `listConnections -d off -s on ($blinn + ".hardwareShader")`;
    //print $conns2Cgfx;
    if (size($conns2Cgfx) == 1) {
        if (`objExists ($conns2Cgfx[0]+".shader")`) {
            string $cgfxPath = `getAttr ($conns2Cgfx[0]+".shader")`;
            
            string $buffers[];
            $numTok = `tokenize $cgfxPath "/" $buffers`;
            
            $result = $buffers[$numTok-1];
        }
    }
    
    return $result;
}

proc assignMaterialToFaces(string $theMat, string $theFaces[]) {
    string $theSG;
    
    string $SGs[] = `listConnections -d on -s off ($theMat +  ".outColor")`;
    if (size($SGs)) {
        $theSG = $SGs[0];
        rename $theSG ($theMat+"SG");
    }
    else {
        $theSG = `sets -renderable true -noSurfaceShader true -empty -name ($theMat+"SG")`;
        connectAttr -f ($theMat+".outColor") ($theSG+".surfaceShader");
    }
    sets -fe initialShadingGroup $theFaces;
    sets -fe $theSG $theFaces;
}

global proc geNFS14_CreateShaderLods() {
    CG_killTextureEditor();
    
    string $sceneCgfxMatsInfo[] = getSceneCgfxMaterialsInfo();   
    string $blinnNames[] = stringToStringArray($sceneCgfxMatsInfo[0], ",");
    string $cgfxNames[] = stringToStringArray($sceneCgfxMatsInfo[1], ",");
    string $cgfxFiles[] = stringToStringArray($sceneCgfxMatsInfo[2], ",");
    
    string $opaqueCgfx = getOpaqueCgfx($cgfxNames, $cgfxFiles);
    string $internalCgfx = getInternalCgfx($cgfxNames, $cgfxFiles);
    string $mainPaintCgfx = getMainPaintCgfx($cgfxNames, $cgfxFiles);
    string $mainGrilleCgfx = getMainGrilleCgfx($cgfxNames, $cgfxFiles);
    
    if ( ($opaqueCgfx=="") || ($internalCgfx=="") || ($mainPaintCgfx=="") || ($mainGrilleCgfx=="") ) {
        print "Error! Scene MUST exist opaqueCgfx, internalCgfx, mainPaintCgfx, mainGrilleCgfx! \n";
    }
    else {
        // Opaque: Create DrawCall-Blinns and create connections
        string $blinnConns[] = `listConnections -d on -s off ($opaqueCgfx + ".outColor")`;
        for ($k=0; $k<size($blinnConns); $k++) {
            $orgBlinn = $blinnConns[$k];
            $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
            $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
            $lowBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Low")`;
            connectAttr -f ($opaqueCgfx+".outColor") ($highBlinn+".hardwareShader");
            connectAttr -f ($opaqueCgfx+".outColor") ($mediumBlinn+".hardwareShader");
            connectAttr -f ($opaqueCgfx+".outColor") ($lowBlinn+".hardwareShader");
            $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
            
            // assign new 'Blinn'
            $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
            assignMaterialToFaces($highBlinn, $selFaces);
            $selFaces = selectFacesInGroupsByMaterial({"export|lod2", "export|lod3"}, $orgBlinn);
            assignMaterialToFaces($mediumBlinn, $selFaces);
            $selFaces = selectFacesInGroupsByMaterial({"export|lod4", "export|lod5"}, $orgBlinn);
            assignMaterialToFaces($lowBlinn, $selFaces);
        }
        
        // Internal: Create DrawCall-Blinns and create connections
        $blinnConns = `listConnections -d on -s off ($internalCgfx + ".outColor")`;
        for ($k=0; $k<size($blinnConns); $k++) {
            $orgBlinn = $blinnConns[$k];
                $toInternalName = `substitute "M_" $orgBlinn "M_Internal_"`;;
            $highBlinn = `shadingNode -asShader blinn -name ($toInternalName + "_High")`;
            $mediumBlinn = `shadingNode -asShader blinn -name ($toInternalName + "_Medium")`;
                $toOpaqueName = `substitute "M_" $orgBlinn "M_Opaque_"`;
            $lowOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Low")`;
            connectAttr -f ($internalCgfx+".outColor") ($highBlinn+".hardwareShader");
            connectAttr -f ($internalCgfx+".outColor") ($mediumBlinn+".hardwareShader");
            connectAttr -f ($opaqueCgfx+".outColor") ($lowOpaqueBlinn+".hardwareShader");
            $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
            
            // assign new 'Blinn'
            $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
            assignMaterialToFaces($highBlinn, $selFaces);
            $selFaces = selectFacesInGroupsByMaterial({"export|lod2", "export|lod3"}, $orgBlinn);
            assignMaterialToFaces($mediumBlinn, $selFaces);
            $selFaces = selectFacesInGroupsByMaterial({"export|lod4", "export|lod5"}, $orgBlinn);
            assignMaterialToFaces($lowOpaqueBlinn, $selFaces);
        }
        
        // Main Paint: Create  DrawCall-Blinns and create connections
        $blinnConns = `listConnections -d on -s off ($mainPaintCgfx + ".outColor")`;
        for ($k=0; $k<size($blinnConns); $k++) {
            $orgBlinn = $blinnConns[$k];
            $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
            $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
            $lowBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Low")`;
            connectAttr -f ($mainPaintCgfx+".outColor") ($highBlinn+".hardwareShader");
            connectAttr -f ($mainPaintCgfx+".outColor") ($mediumBlinn+".hardwareShader");
            connectAttr -f ($mainPaintCgfx+".outColor") ($lowBlinn+".hardwareShader");
            $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
            
            // assign new 'Blinn'
            $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
            assignMaterialToFaces($highBlinn, $selFaces);
            $selFaces = selectFacesInGroupsByMaterial({"export|lod2", "export|lod3"}, $orgBlinn);
            assignMaterialToFaces($mediumBlinn, $selFaces);
            $selFaces = selectFacesInGroupsByMaterial({"export|lod4", "export|lod5"}, $orgBlinn);
            assignMaterialToFaces($lowBlinn, $selFaces);
        }
        
        // Main Grille: Create DrawCall-Blinns and create connections
        $blinnConns = `listConnections -d on -s off ($mainGrilleCgfx + ".outColor")`;
        for ($k=0; $k<size($blinnConns); $k++) {
            $orgBlinn = $blinnConns[$k];
            $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
            $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                $toOpaqueName = `substitute "M_" $orgBlinn "M_Opaque_"`;
            $mediumOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Medium")`;
            $lowOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Low")`;
            connectAttr -f ($mainGrilleCgfx+".outColor") ($highBlinn+".hardwareShader");
            connectAttr -f ($mainGrilleCgfx+".outColor") ($mediumBlinn+".hardwareShader");
            connectAttr -f ($opaqueCgfx+".outColor") ($mediumOpaqueBlinn+".hardwareShader");
            connectAttr -f ($opaqueCgfx+".outColor") ($lowOpaqueBlinn+".hardwareShader");
            $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
            
            // assign new 'Blinn'
            $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
            assignMaterialToFaces($highBlinn, $selFaces);
            $selFaces = selectFacesInGroupsByMaterial({"export|lod2"}, $orgBlinn);
            assignMaterialToFaces($mediumBlinn, $selFaces);
            $selFaces = selectFacesInGroupsByMaterial({"export|lod3"}, $orgBlinn);
            assignMaterialToFaces($mediumOpaqueBlinn, $selFaces);
            $selFaces = selectFacesInGroupsByMaterial({"export|lod4", "export|lod5"}, $orgBlinn);
            assignMaterialToFaces($lowOpaqueBlinn, $selFaces);
        }
        
        
        // Carbon: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_Carbon.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                    $toOpaqueName = `substitute "M_" $orgBlinn "M_Opaque_"`;
                $mediumOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Medium")`;                
                $lowOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Low")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($opaqueCgfx+".outColor") ($mediumOpaqueBlinn+".hardwareShader");
                connectAttr -f ($opaqueCgfx+".outColor") ($lowOpaqueBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod2", "export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumOpaqueBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod4", "export|lod5"}, $orgBlinn);
                assignMaterialToFaces($lowOpaqueBlinn, $selFaces);
            }
        }
        
        // Chassis: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_Chassis.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                    $toOpaqueName = `substitute "M_" $orgBlinn "M_Opaque_"`;
                $lowOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Low")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($otherCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                connectAttr -f ($opaqueCgfx+".outColor") ($lowOpaqueBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod2", "export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod4", "export|lod5"}, $orgBlinn);
                assignMaterialToFaces($lowOpaqueBlinn, $selFaces);
            }
        }
        
        // General Glass: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_General_Glass.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                    $toOpaqueName = `substitute "M_" $orgBlinn "M_Opaque_"`;
                $lowOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Low")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($otherCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                connectAttr -f ($opaqueCgfx+".outColor") ($lowOpaqueBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod2", "export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod4", "export|lod5"}, $orgBlinn);
                assignMaterialToFaces($lowOpaqueBlinn, $selFaces);
            }
        }
        
        // General Glass Color: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_General_GlassColor.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                    $toOpaqueName = `substitute "M_" $orgBlinn "M_Opaque_"`;
                $lowOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Low")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($opaqueCgfx+".outColor") ($lowOpaqueBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1", "export|lod2", "export|lod3"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod4", "export|lod5"}, $orgBlinn);
                assignMaterialToFaces($lowOpaqueBlinn, $selFaces);
            }
        }
        
        // Badges: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_Badges.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($otherCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod2", "export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumBlinn, $selFaces);
            }
        }
        
        // Driver: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_Driver.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($otherCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod2", "export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumBlinn, $selFaces);
            }
        }
        
        // Lights: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_Light.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($otherCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod2", "export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumBlinn, $selFaces);
            }
        }
        
        // Cop Lights: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_CopLight.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($otherCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod2", "export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumBlinn, $selFaces);
            }
        }
        
        // Lights Refracted: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_LightRefracted.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($otherCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1", "export|lod2"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumBlinn, $selFaces);
            }
        }
        
        // Caliper: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_Caliper.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                    $toOpaqueName = `substitute "M_" $orgBlinn "M_Opaque_"`;
                $mediumOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Medium")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($otherCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                connectAttr -f ($opaqueCgfx+".outColor") ($mediumOpaqueBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod2"}, $orgBlinn);
                assignMaterialToFaces($mediumBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumOpaqueBlinn, $selFaces);
            }
        }
        
        // Brake Disc: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_BrakeDisc.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                    $toOpaqueName = `substitute "M_" $orgBlinn "M_Opaque_"`;
                $mediumOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Medium")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($otherCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                connectAttr -f ($opaqueCgfx+".outColor") ($mediumOpaqueBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod2"}, $orgBlinn);
                assignMaterialToFaces($mediumBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumOpaqueBlinn, $selFaces);
            }
        }
        
        // Licese Plate: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_LicensePlate.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                    $toOpaqueName = `substitute "M_" $orgBlinn "M_Opaque_"`;
                $lowOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Low")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($otherCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                connectAttr -f ($opaqueCgfx+".outColor") ($lowOpaqueBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod2", "export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod4"}, $orgBlinn);
                assignMaterialToFaces($lowOpaqueBlinn, $selFaces);
            }
        }
        
        // Rim: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_Rim.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                $lowBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Low")`;
                    $toOpaqueName = `substitute "M_" $orgBlinn "M_Opaque_"`;
                $lowOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Low")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($otherCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                connectAttr -f ($otherCgfx+".outColor") ($lowBlinn+".hardwareShader");
                connectAttr -f ($opaqueCgfx+".outColor") ($lowOpaqueBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod2", "export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod4"}, $orgBlinn);
                assignMaterialToFaces($lowBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod5"}, $orgBlinn);
                assignMaterialToFaces($lowOpaqueBlinn, $selFaces);
            }
        }
        
        // Tire: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_Tire.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                //$mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                    $toOpaqueName = `substitute "M_" $orgBlinn "M_Opaque_"`;
                $mediumOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Medium")`;
                $lowOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Low")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                //connectAttr -f ($otherCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                connectAttr -f ($opaqueCgfx+".outColor") ($mediumOpaqueBlinn+".hardwareShader");
                connectAttr -f ($opaqueCgfx+".outColor") ($lowOpaqueBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1", "export|lod2"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                //$selFaces = selectFacesInGroupsByMaterial({"export|lod2"}, $orgBlinn);
                //assignMaterialToFaces($mediumBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumOpaqueBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod4", "export|lod5"}, $orgBlinn);
                assignMaterialToFaces($lowOpaqueBlinn, $selFaces);
            }
        }
        
        
        
        
        // InternalTiled: Create DrawCall-Blinns and create connections
        $otherCgfx = getOtherCgfx($cgfxNames, $cgfxFiles, "CarNFS14_CS_InternalTiled.cgfx");
        if ($otherCgfx != "") {
            $blinnConns = `listConnections -d on -s off ($otherCgfx + ".outColor")`;
            for ($k=0; $k<size($blinnConns); $k++) {
                $orgBlinn = $blinnConns[$k];
                $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                    $toInternalName = $orgBlinn + "_ToOther_Internal";
                $mediumInternalBlinn = `shadingNode -asShader blinn -name ($toInternalName + "_Medium" + "_DeleteLater")`;
                     $toOpaqueName = $orgBlinn + "_ToOther_Opaque";
                $lowOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Low" + "_DeleteLater")`;
                connectAttr -f ($otherCgfx+".outColor") ($highBlinn+".hardwareShader");
                connectAttr -f ($internalCgfx+".outColor") ($mediumInternalBlinn+".hardwareShader");
                connectAttr -f ($opaqueCgfx+".outColor") ($lowOpaqueBlinn+".hardwareShader");
                $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                
                // assign new 'Blinn'
                $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                assignMaterialToFaces($highBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod2", "export|lod3"}, $orgBlinn);
                assignMaterialToFaces($mediumInternalBlinn, $selFaces);
                $selFaces = selectFacesInGroupsByMaterial({"export|lod4", "export|lod5"}, $orgBlinn);
                assignMaterialToFaces($lowOpaqueBlinn, $selFaces);
            }
        }
        
        // OtherGrille: Create DrawCall-Blinns and create connections
        $otherGrilles = getOtherGrillesCgfx($cgfxNames, $cgfxFiles);
        if (size($otherGrilles)) {
            for ($aGrilleCgfx in $otherGrilles) {
                $blinnConns = `listConnections -d on -s off ($aGrilleCgfx + ".outColor")`;
                for ($k=0; $k<size($blinnConns); $k++) {
                    $orgBlinn = $blinnConns[$k];
                    $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                        $toMainGrilleName = $orgBlinn + "_ToOther_MainGrille";
                    $mediumMainGrilleBlinn = `shadingNode -asShader blinn -name ($toMainGrilleName + "_Medium" + "_DeleteLater")`;
                        $toOpaqueName = $orgBlinn + "_ToOther_Opaque";
                    $mediumOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Medium" + "_DeleteLater")`;
                    $lowOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Low" + "_DeleteLater")`;
                    connectAttr -f ($aGrilleCgfx+".outColor") ($highBlinn+".hardwareShader");
                    connectAttr -f ($mainGrilleCgfx+".outColor") ($mediumMainGrilleBlinn+".hardwareShader");
                    connectAttr -f ($opaqueCgfx+".outColor") ($mediumOpaqueBlinn+".hardwareShader");
                    connectAttr -f ($opaqueCgfx+".outColor") ($lowOpaqueBlinn+".hardwareShader");
                    $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                    
                    // assign new 'Blinn'
                    $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                    assignMaterialToFaces($highBlinn, $selFaces);
                    $selFaces = selectFacesInGroupsByMaterial({"export|lod2"}, $orgBlinn);
                    assignMaterialToFaces($mediumMainGrilleBlinn, $selFaces);
                    $selFaces = selectFacesInGroupsByMaterial({"export|lod3"}, $orgBlinn);
                    assignMaterialToFaces($mediumOpaqueBlinn, $selFaces);
                    $selFaces = selectFacesInGroupsByMaterial({"export|lod4", "export|lod5"}, $orgBlinn);
                    assignMaterialToFaces($lowOpaqueBlinn, $selFaces);
                }
            }            
        }
        
        // OtherPaints: Create DrawCall-Blinns and create connections
        $otherPaints = getOtherPaintsCgfx($cgfxNames, $cgfxFiles);
        if (size($otherPaints)) {
            for ($aPaintCgfx in $otherPaints) {
                if (`gmatch $cgfxNames[$k] "*_ToMainPaint_*"`) {
                    $blinnConns = `listConnections -d on -s off ($aPaintCgfx + ".outColor")`;
                    for ($k=0; $k<size($blinnConns); $k++) {
                        $orgBlinn = $blinnConns[$k];
                        $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                        $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                            $toMainPaintName = $orgBlinn + "_ToOther_MainPaint";
                        $mediumMainPaintBlinn = `shadingNode -asShader blinn -name ($toMainPaintName + "_Medium" +  "_DeleteLater")`;
                        $lowMainPaintBlinn = `shadingNode -asShader blinn -name ($toMainPaintName + "_Low" + "_DeleteLater")`;
                        connectAttr -f ($aPaintCgfx+".outColor") ($highBlinn+".hardwareShader");
                        connectAttr -f ($aPaintCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                        connectAttr -f ($mainPaintCgfx+".outColor") ($mediumMainPaintBlinn+".hardwareShader");
                        connectAttr -f ($mainPaintCgfx+".outColor") ($lowMainPaintBlinn+".hardwareShader");
                        $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                        
                        // assign new 'Blinn'
                        $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                        assignMaterialToFaces($highBlinn, $selFaces);
                        $selFaces = selectFacesInGroupsByMaterial({"export|lod2"}, $orgBlinn);
                        assignMaterialToFaces($mediumBlinn, $selFaces);
                        $selFaces = selectFacesInGroupsByMaterial({"export|lod3"}, $orgBlinn);
                        assignMaterialToFaces($mediumMainPaintBlinn, $selFaces);
                        $selFaces = selectFacesInGroupsByMaterial({"export|lod4", "export|lod5"}, $orgBlinn);
                        assignMaterialToFaces($lowMainPaintBlinn, $selFaces);
                    }
                }
                else {
                    $blinnConns = `listConnections -d on -s off ($aPaintCgfx + ".outColor")`;
                    for ($k=0; $k<size($blinnConns); $k++) {
                        $orgBlinn = $blinnConns[$k];
                        $highBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_High")`;
                        $mediumBlinn = `shadingNode -asShader blinn -name ($orgBlinn + "_Medium")`;
                            $toOpaqueName = $orgBlinn + "ToOther_Opaque";
                        $mediumOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Medium" + "_DeleteLater")`;
                        $lowOpaqueBlinn = `shadingNode -asShader blinn -name ($toOpaqueName + "_Low" + "_DeleteLater")`;
                        connectAttr -f ($aPaintCgfx+".outColor") ($highBlinn+".hardwareShader");
                        connectAttr -f ($aPaintCgfx+".outColor") ($mediumBlinn+".hardwareShader");
                        connectAttr -f ($opaqueCgfx+".outColor") ($mediumOpaqueBlinn+".hardwareShader");
                        connectAttr -f ($opaqueCgfx+".outColor") ($lowOpaqueBlinn+".hardwareShader");
                        $orgBlinn = `rename $orgBlinn ($orgBlinn + "_Org_DeleteLater")`;
                        
                        // assign new 'Blinn'
                        $selFaces = selectFacesInGroupsByMaterial({"export|lod0", "export|lod1"}, $orgBlinn);
                        assignMaterialToFaces($highBlinn, $selFaces);
                        $selFaces = selectFacesInGroupsByMaterial({"export|lod2"}, $orgBlinn);
                        assignMaterialToFaces($mediumBlinn, $selFaces);
                        $selFaces = selectFacesInGroupsByMaterial({"export|lod3"}, $orgBlinn);
                        assignMaterialToFaces($mediumOpaqueBlinn, $selFaces);
                        $selFaces = selectFacesInGroupsByMaterial({"export|lod4", "export|lod5"}, $orgBlinn);
                        assignMaterialToFaces($lowOpaqueBlinn, $selFaces);
                    }
                }
            }            
        }
    }
}

global proc geNFS14_RenameMeshesByMaterial() {
    string $grpObjects[] = {};
    $k = 0; 
    
    string $grpMeshes[] = `listRelatives -f -ad -type mesh "export"`;
    for ($aMesh in $grpMeshes) {
        if (!size(`listConnections -s 1 -d 1 $aMesh`)){
		   // Delete "isolate" meshNode
			delete $aMesh;
	    }
	    else {
            string $transNode[] = `listRelatives -f -p $aMesh`;
            $grpObjects[$k++] = $transNode[0];
        }
    }
    
    
    // rename to default
    for ($i=0; $i<size($grpObjects); $i++) {
        string $parentNode[] = `listRelatives -f -p $grpObjects[$i]`;
        string $defaultName;
        if (catch ($defaultName = `rename $grpObjects[$i] "geDefault"`)) {
            //do nothing
            continue;
        }
        else {
            string $buffers[];
            $numTok = `tokenize $defaultName "|" $buffers`;
            $grpObjects[$i] = $parentNode[0] + "|" +$buffers[$numTok-1];
        }
    }
    
    
    // rename to material's name
    for ($obj in $grpObjects) {
        string $objMats[];
        if ( catch ($objMats = geNFS14_GetMaterialsOnObj($obj)) ) {
            // do nothing
            continue;
        }
        if (size($objMats))
            catch (`rename $obj $objMats[0]`);
    }
}

proc int reassignCorrectDCMaterial(string $obj, int $objLodIdx, string $objBlinn, string $objCgfxFile) {
    
    return 0;
}
global proc geNFS14_ReassignToCorrectDCMat() {
    string $grpObjects[] = {};
    $k = 0; 
    
    string $grpMeshes[] = `listRelatives -f -ad -type mesh "export"`;
    for ($aMesh in $grpMeshes) {
        if (!size(`listConnections -s 1 -d 1 $aMesh`)){
		   // Delete "isolate" meshNode
			delete $aMesh;
	    }
	    else {
            string $transNode[] = `listRelatives -f -p $aMesh`;
            $grpObjects[$k++] = $transNode[0];
        }
    }
    
    string $sceneCgfxMatsInfo[] = getSceneCgfxMaterialsInfo();   
    string $blinnNames[] = stringToStringArray($sceneCgfxMatsInfo[0], ",");
    string $cgfxNames[] = stringToStringArray($sceneCgfxMatsInfo[1], ",");
    string $cgfxFiles[] = stringToStringArray($sceneCgfxMatsInfo[2], ",");
    
    string $errorObjs[] = {};
    int $e = 0;
    
    string $allLods[] = {"lod0", "lod1", "lod2", "lod3", "lod4", "lod5"};
    for ($obj in $grpObjects) {
        int $errFlag = false;
        
        string $buffers[];
        $numTok = `tokenize $obj "|" $buffers`;
        if ($numTok < 4) {
            print ("Error: " + $obj + " is not a `export|lod` mesh!"); print "\n";
            $errFlag = true;
        }
        
        int $objLodIdx;
        if (($objLodIdx = sFindItem($allLods, $buffers[1])) == -1) {
            print ("Error: " + $obj + " is not a `export|lod` mesh !"); print "\n";
            $errFlag = true;
        }
        
        string $objMats[] = geNFS14_GetMaterialsOnObj($obj);
        if (size($objMats) != 1) {
            print ("Error: " + $obj + " is assigned zero material or more than 1 material!"); print "\n";
            $errFlag = true;
        }
        
        string $objBlinn = $objMats[0];
        //print $objBlinn;
        string $objCgfxFile = getCgfxFileFromBlinn($objBlinn);
        if ($objCgfxFile == "") {
            print ("Error: " + $obj + " is not assigned a 'cgfx-blinn' material!"); print "\n";
            $errFlag = true;
        }
        
        
        if ($errFlag) {
            $errorObjs[$e++] = $obj;
        }
        else {
            //print ($obj); print "\t";
            //print ($objLodIdx); print "\t";
            //print ($objBlinn); print "\t";
            //print ($objCgfxFile); print "\t";  print "\n";
            print "..........WIP.............\n";
            reassignCorrectDCMaterial($obj, $objLodIdx, $objBlinn, $objCgfxFile);    
        }
    }
}

// source "geNFS14_MiniHypershade_GUI";
//nfs14_miniHyp_ConvertSelectedFacesToObjects();

geNFS14_DrawCallReductionProcess_GUI;
