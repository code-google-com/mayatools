//requires boltHierarchy, boltShaderTools, sceeProcs

source boltHierarchy;
source boltShadertools;
source sceeProcs;

global proc boltShatter.OptionVars(int $mode)
//0 = create, 1 = reset, 2 = save, 3 = setup gui
{
	if ( (!`optionVar -exists "boltShatter_Orientation"`) || ($mode == 1) )
		optionVar -intValue "boltShatter_Orientation" 3;
	if ( (!`optionVar -exists "boltShatter_Sides"`) || ($mode == 1) )
		optionVar -intValue "boltShatter_Sides" 20;
	if ( (!`optionVar -exists "boltShatter_Scale"`) || ($mode == 1) )
		optionVar -floatValue "boltShatter_Scale" 1.0;
	if ( (!`optionVar -exists "boltShatter_Bias"`) || ($mode == 1) )
		optionVar -floatValue "boltShatter_Bias" -0.5;
	if ( (!`optionVar -exists "boltShatter_Square"`) || ($mode == 1) )
		optionVar -intValue "boltShatter_Square" 0;
	if ( (!`optionVar -exists "boltShatter_Cutout"`) || ($mode == 1) )
		optionVar -intValue "boltShatter_Cutout" 1;
	if ( (!`optionVar -exists "boltShatter_Weld"`) || ($mode == 1) )
		optionVar -intValue "boltShatter_Weld" 1;
	if ( (!`optionVar -exists "boltShatter_Smooth"`) || ($mode == 1) )
		optionVar -intValue "boltShatter_Smooth" 1;
	if ( (!`optionVar -exists "boltShatter_Border"`) || ($mode == 1) )
		optionVar -intValue "boltShatter_Border" 1;
	if ( (!`optionVar -exists "boltShatter_Collapse"`) || ($mode == 1) )
		optionVar -intValue "boltShatter_Collapse" 1;
	if ( (!`optionVar -exists "boltShatter_Length"`) || ($mode == 1) )
		optionVar -floatValue "boltShatter_Length" 0.01;
	if ( (!`optionVar -exists "boltShatter_Preserve"`) || ($mode == 1) )
		optionVar -intValue "boltShatter_Preserve" 0;
		
	if ($mode == 2)
	{
		optionVar -intValue "boltShatter_Orientation" `radioButtonGrp -q -sl boltShatter_RadioButtonGrp_Direction`;
		optionVar -intValue "boltShatter_Sides" `intSliderGrp -q -value boltShatter_IntSlider_Sides`;
		optionVar -floatValue "boltShatter_Scale" `floatSliderGrp -q -value boltShatter_FloatSlider_Scale`;
		optionVar -floatValue "boltShatter_Bias" `floatSliderGrp -q -value boltShatter_FloatSlider_Bias`;
		optionVar -intValue "boltShatter_Square" `checkBox -q -value boltShatter_CheckBox_Square`;
		optionVar -intValue "boltShatter_Cutout" `radioButtonGrp -q -sl boltShatter_RadioButtonGrp_CutoutMode`;
		optionVar -intValue "boltShatter_Weld" `checkBox -q -value boltShatter_CheckBox_Weld`;
		optionVar -intValue "boltShatter_Smooth" `checkBox -q -value boltShatter_CheckBox_Smooth`;
		optionVar -intValue "boltShatter_Border" `checkBox -q -value boltShatter_CheckBox_Border`;
		optionVar -intValue "boltShatter_Collapse" `checkBox -q -value boltShatter_CheckBox_Short`;
		optionVar -floatValue "boltShatter_Length" `floatField -q -value boltShatter_Float_Short`;
		optionVar -intValue "boltShatter_Preserve" `checkBox -q -value boltShatter_CheckBox_Cutter`;
	}
	
	if (($mode == 3)||($mode == 1))
	{
		radioButtonGrp -e -sl `optionVar -q "boltShatter_Orientation"` boltShatter_RadioButtonGrp_Direction;
		intSliderGrp -e -value `optionVar -q "boltShatter_Sides"` boltShatter_IntSlider_Sides;
		floatSliderGrp -e -value `optionVar -q "boltShatter_Scale"` boltShatter_FloatSlider_Scale;
		floatSliderGrp -e -value `optionVar -q "boltShatter_Bias"` boltShatter_FloatSlider_Bias;
		checkBox -e -value `optionVar -q "boltShatter_Square"` boltShatter_CheckBox_Square;
		radioButtonGrp -e -sl `optionVar -q "boltShatter_Cutout"` boltShatter_RadioButtonGrp_CutoutMode;
		checkBox -e -value `optionVar -q "boltShatter_Weld"` boltShatter_CheckBox_Weld;
		checkBox -e -value `optionVar -q "boltShatter_Smooth"` boltShatter_CheckBox_Smooth;
		checkBox -e -value `optionVar -q "boltShatter_Border"` boltShatter_CheckBox_Border;
		checkBox -e -value `optionVar -q "boltShatter_Collapse"` boltShatter_CheckBox_Short;
		floatField -e -value `optionVar -q "boltShatter_Length"` boltShatter_Float_Short;
		checkBox -e -value `optionVar -q "boltShatter_Preserve"` boltShatter_CheckBox_Cutter;
	}
}

global proc boltShatter.GUI()
{
	global string $gBoltCutter;
	$gBoltCutter = "";
	
	global string $gBoltObjToCut;
	$gBoltObjToCut = "";
	
	if (`window -exists boltPolyCutterWindow`) {deleteUI boltPolyCutterWindow;} 
	//delete the window if it already exists
	
	window -title "Poly Cutter" -menuBar true -toolbox 1 boltPolyCutterWindow;
		
		menu -label "Options" -tearOff true -allowOptionBoxes true;
			menuItem -label "Save Settings" -command "boltShatter.OptionVars(2)";
			menuItem -label "Reset to defaults" -command "boltShatter.OptionVars(1)";
		menu -label "Help" -tearOff true -allowOptionBoxes true;
			menuItem -label "SHIP Help Page" -command "showHelp -a \"http://wiki.ship.scea.com/confluence/display/NWSTUDIOWIKI/BPT_PolyCutter\"";

		
		
		//scrollLayout;
			columnLayout;
				
				frameLayout -width 400 -collapsable 1 -label "Polys To Cut" -mw 10 -mh 10 -labelAlign "center" -borderStyle "etchedOut";
					columnLayout;
						button -height 20 -width 200 -label "Select Polys to Cut" -command "boltShatter.SetupPolysToShatter()" -ann "";
					setParent ..;
				setParent ..;
				
				frameLayout -width 400 -collapsable 1 -label "Cutter Shape" -mw 10 -mh 10 -labelAlign "center" -borderStyle "etchedOut";
					columnLayout;
						button -height 20 -width 200 -label "Use Selected Object as a Cutter" -command "boltShatter.UseSelectedAsCutter" -ann "";
						button -height 20 -width 200 -label "Create Custom Shatter Cutter" -command "boltShatter.CreateShapeGUI()" -ann "";
					setParent ..;
				setParent ..;
					    		
				frameLayout -width 400 -collapsable 1 -label "Shatter Cutter Settings" -mw 10 -mh 10 -labelAlign "center" -borderStyle "etchedOut";
					columnLayout;
						radioButtonGrp -numberOfRadioButtons 4 -label "Orientation:" -labelArray4 "X" "Y" "Z" "Custom" -sl 3 -cw5 150 50 50 50 60 -changeCommand "boltShatter.ScaleAndRotateGUI()" boltShatter_RadioButtonGrp_Direction;
						intSliderGrp -label "Sides" -field true -min 3 -max 100 -value 20 -step 1 -changeCommand "boltShatter.ChangeNoSides()" boltShatter_IntSlider_Sides;
						floatSliderGrp -label "Shard Scale" -field true -min 0 -max 4 -value 1 -step 0.01 -changeCommand "boltShatter.UpdateShapeGUI()" boltShatter_FloatSlider_Scale;
						floatSliderGrp -label "Shard Bias"  -field true -min -2 -max 2 -value -0.5 -step 0.01 -changeCommand "boltShatter.UpdateShapeGUI()" boltShatter_FloatSlider_Bias;
						checkBox -label "Square Bias"  -value 0 -changeCommand "boltShatter.UpdateShapeGUI()" boltShatter_CheckBox_Square;
						button -height 20 -width 200 -label "Randomise Cutter Shape" -command "boltShatter.GenerateRandomSeed();boltShatter.UpdateShapeGUI()" -ann "";
						button -height 20 -width 200 -label "Orient Cutter To Camera" -command "boltShatter.RotateToCamera()" -ann "";
					setParent ..;
				setParent ..;
			
				frameLayout -width 400 -collapsable 1 -label "Options" -mw 10 -mh 10 -labelAlign "center" -borderStyle "etchedOut";
					columnLayout;
						checkBox -label "Weld Verts"  -value 1 boltShatter_CheckBox_Weld;
						checkBox -label "Smooth Edges"  -value 1 boltShatter_CheckBox_Smooth;
						checkBox -label "Use Only Existing Border Verts" -value 1 boltShatter_CheckBox_Border;
						rowLayout -numberOfColumns 2 -cw2 170 70;
							checkBox -label "Collapse Edges Shorter Than:" -value 1 boltShatter_CheckBox_Short;
							floatField -value 0.01 boltShatter_Float_Short;
						setParent ..;
						checkBox -label "Preserve Cutter" -value 0 boltShatter_CheckBox_Cutter;
						radioButtonGrp -numberOfRadioButtons 3 -label "Cutout Mode:" -labelArray3 "Delete" "Keep" "Stencil" -sl 1 -cw4 150 80 80 80 boltShatter_RadioButtonGrp_CutoutMode;
						
					setParent ..;
				setParent ..;
				
				frameLayout -width 400 -collapsable 1 -label "Boolean" -mw 10 -mh 10 -labelAlign "center" -borderStyle "etchedOut";
					columnLayout;
						button -height 20 -width 200 -label "Refresh Shaders" -command "boltShatter.ExitBool();boltShatter.DoBool()" -ann "";
						button -height 20 -width 200 -label "Cancel Cut" -command "boltShatter.Cancel();" -ann "";
						button -height 20 -width 200 -label "Bake Final Cut" -command "boltShatter.CommitBoolGUI()" -ann "";
					setParent ..;
				setParent ..;
				
				
				
			setParent ..;					
		//setParent ..;
	setParent ..;   
	
	showWindow boltPolyCutterWindow;
	//display the window
	
	window -e -height 600 -width 415 boltPolyCutterWindow;
	
	scriptJob -uiDeleted "boltPolyCutterWindow" "boltShatter.Cancel()";
	
	boltShatter.OptionVars(3);
	
}


global proc boltShatter.Cancel()
{
	global int $gBoltCustomCutter;
	global string $gBoltCutter;
	global string $gBoltObjToCut;
	global string $gBoltMasterObject;
	
	if (objExists($gBoltMasterObject)) showHidden $gBoltMasterObject;

	boltShatter.ExitBool();

	if ( ($gBoltCustomCutter == 0) && (objExists($gBoltCutter)) )
	{
		delete $gBoltCutter;
	}
	if (objExists($gBoltObjToCut)) delete $gBoltObjToCut;
	
	boltRestoreHierarchy;
	
}

global proc boltShatter.UseSelectedAsCutter()
{
	global int $gBoltCustomCutter;
	global string $gBoltCutter;
	global string $gBoltCutterShape;
	global string $gBoltObjToCut;
	
	if ($gBoltObjToCut == "")
	{
		confirmDialog -title "Error" -message "Please select polygons to cut first" -button "OK";
		return;
	}	
		
	string $cutter[] = `ls -sl -transforms`;
	if (size($cutter) != 1)
	{
		confirmDialog -title "Error" -message "please select a single transform object to act as a cutter" -button "OK";
		return;
	}
	
	//check cutter is valid
	
	if ( size(`polyInfo -nme -nmv -lf $cutter[0]`)>0 )
	{
		confirmDialog -title "Error" -message "non-manifold / lamina faces found on cutter" -button "OK";
		return;
	}
	
	select $cutter[0];
	polySelectConstraint -mode 3 -type 1 -where 1;
	string $sel[] = `ls -sl`;
	polySelectConstraint -mode 3 -type 1 -where 0;
	if (size($sel)>0)
	{
		confirmDialog -title "Error" -message "open border edges found on cutter" -button "OK";
		return;
	}
		
	if ($gBoltCutter != "")
	{
		if ( (objExists($gBoltCutter)) && ($gBoltCustomCutter=0) )
		{
			delete $gBoltCutter;
		}
	}
	
	$gBoltCutter = $cutter[0];
	string $shapes[] = `listRelatives -children -type "mesh" $gBoltCutter`;
	$gBoltCutterShape = $shapes[0];
	
	if (objExists("TEMP_SHATTER_RED")==0)
	{
		string $shader = `shadingNode -asShader blinn -name "TEMP_SHATTER_RED"`;
		string $sg = `sets -renderable true -noSurfaceShader true -empty`;
		connectAttr -f ($shader+".outColor") ($sg+".surfaceShader");
		setAttr ($shader +".color") -type double3 0.8 0 0;
		setAttr ($shader +".transparency") -type double3 0.6 0.6 0.6;
	}	
	string $sg[] = `listConnections -type "shadingEngine" ("TEMP_SHATTER_RED.outColor")`;
	sets -fe $sg[0] ($gBoltCutter+".f[*]");
	
	$gBoltCustomCutter = 1;
	 
	boltShatter.DoBool();
	
	
}




global proc boltShatter.RotateToCamera()
//rotates the cutter object to match the camera direction
{
	//select "custom" direction mode
	radioButtonGrp -e -sl 4 boltShatter_RadioButtonGrp_Direction;

	global string $gBoltCutterProxy;
	global string $gBoltCutter;
	
	//set up to work before or after proxies are created
	string $cutter = $gBoltCutter;
	if (objExists($gBoltCutterProxy)) $cutter = $gBoltCutterProxy;
	
	//get camera rotation
	string $panel = `getPanel -withFocus`;
	string $currentCamera = `modelEditor -q -camera $panel`;
	float $rot[] = `xform -q -ro $currentCamera`;

	setAttr ($cutter + ".r") $rot[0] $rot[1] $rot[2];
	rotate -r -os 0 90 0 $cutter;
	
}

global proc boltShatter.CommitBoolGUI()
//performs final bool and cleanup operations
{
	global string $gBoltPolysToShatter[];
	global string $gBoltMasterObject;
	global string $gBoltObjToCut;
	
	int $mode = `radioButtonGrp -q -sl boltShatter_RadioButtonGrp_CutoutMode`;
	
	showHidden $gBoltMasterObject;
		
	//Get the seam edges Doesn't work after flatten/combine
	string $seamEdges[] = `polyListComponentConversion -border -fromFace -toEdge $gBoltPolysToShatter`;
	$seamEdges = `ls -fl $seamEdges`;
	
	//this bit gets seam edges on borders
	string $edges[] = `polyListComponentConversion -fromFace -toEdge $gBoltPolysToShatter`;
	polySelectConstraint -mode 1  -type 0x8000 -pp 3;
	select $edges;
	string $seamEdges2[] = `ls -fl -sl`;
	polySelectConstraint -mode 3 -pp 0;
	$seamEdges = stringArrayCatenate($seamEdges,$seamEdges2);
	$seamEdges = stringArrayRemoveDuplicates($seamEdges);
	
	string $seamEdgesSet = `sets -edges 1 $seamEdges`;
	
	//store the default outside vert snap positions now, as the set gets wiped later
	vector $outsideVertPositions[] = {};
	string $verts[] = `polyListComponentConversion -fromEdge -toVertex $seamEdges`;
	$verts = `ls -flatten $verts`;
	for ($vert in $verts)
	{
		$outsideVertPositions[size($outsideVertPositions)] = `pointPosition -w $vert`;
	}
	
	
	int $noFaces[] = `polyEvaluate -face $gBoltMasterObject`;
	int $allFacesFlag = 0;
	if (size(`ls -fl $gBoltPolysToShatter`) == $noFaces[0]) $allFacesFlag = 1;
	
	
	//remove the faces to cut from the original mesh
	delete $gBoltPolysToShatter;
	
	//do the boolean op
	boltShatter.CommitBool();
	
	boltRemoveHierarchy;
	
	if ($mode == 3)
	{
		select {($gBoltObjToCut+"_CUTOUT"),$gBoltObjToCut};
		scee.doFlattenCombine(0,0,0,0);
	}
	
	
	//store the shattered edge and the outside edges of the shattered obj
	int $noEdges[] = `polyEvaluate -e $gBoltObjToCut`;
	int $n = $noEdges[0];
	
	string $outsideEdges[] = {};
	string $insideEdges[] = {};
	
	for ($i=0;$i<$n;$i++)
	{
		string $edge = ($gBoltObjToCut + ".e[" + $i + "]");
		
		string $polys[] = `polyListComponentConversion -fromEdge -toFace $edge`;
		$polys = `ls -fl $polys`;
		
		if (size($polys) == 2)
		{
			//identify edges
			string $mat1 = boltGetMaterialOfPoly($polys[0]);
			string $mat2 = boltGetMaterialOfPoly($polys[1]);
			int $matCount = 0;
			if ($mat1=="TEMP_SHATTER_GREEN") $matCount += 1;
			if ($mat2=="TEMP_SHATTER_GREEN") $matCount += 1;
			if ($mat1=="TEMP_SHATTER_RED")   $matCount += 10;
			if ($mat2=="TEMP_SHATTER_RED")   $matCount += 10;
			if ($matCount == 1) $outsideEdges[size($outsideEdges)] = $edge; //just 1 poly of the egde is temp green
			if ($matCount == 10) $insideEdges[size($insideEdges)] = $edge; //just 1 poly of the egde is temp red
		}
	}
	
	string $outsideEdgesSet = `sets -edges 1 $outsideEdges`;
	string $insideEdgesSet  = `sets -edges 1 $insideEdges`;
	
	//select $outsideEdgesSet; return;
	
	//remove temp shaded polygons
	select -cl;
	boltDoSelShader("TEMP_SHATTER_GREEN", {$gBoltObjToCut});
	delete;
	boltDoSelShader("TEMP_SHATTER_RED", {$gBoltObjToCut});
	delete;
		
	//remove temp shaders
	if (objExists("TEMP_SHATTER_GREEN")) delete "TEMP_SHATTER_GREEN";
	if (objExists("TEMP_SHATTER_RED")) delete "TEMP_SHATTER_RED";
	
	
	//snap outside verts to borders 
	if (`checkBox -q -value boltShatter_CheckBox_Border`==1)
	{
		//print "\noutside edges set:\n";
		//print `sets -q $outsideEdgesSet`;
		//print "\noutside vert positions:\n";
		//print $outsideVertPositions;
		
		//move points back to outside verts.
		$verts = `polyListComponentConversion -fromEdge -toVertex $outsideEdgesSet`;
		$verts = `ls -flatten $verts`;
		for ($vert in $verts)
		{
			vector $currentPos = `pointPosition -w $vert`;
			vector $nearestPos = <<0.0 , 0.0 , 0.0>>;
			float $nearestDist = 10000.0;
			
			for ($outsideVertPos in $outsideVertPositions)
			{
				float $dist = mag($currentPos-$outsideVertPos);
				if ($dist<$nearestDist) 
				{
					$nearestDist = $dist;
					$nearestPos  = $outsideVertPos;
				}
			}
			
			if ($nearestDist>0.0001)
			{
				xform -ws -t ($nearestPos.x) ($nearestPos.y) ($nearestPos.z) $vert;
			}
		}
		//weld any overlapping verts
		polyMergeVertex -d 0.0001 -ch 0 $gBoltObjToCut;
	}
		
	//collapse short edges on hole border
	if (`checkBox -q -value boltShatter_CheckBox_Short`)
	{
		//store outside edge vert positions
		//verts to snap to depends on border checkbox
		
		//if not snapping to predefined border verts, get the post boolean verts instead
		string $verts[] = {};
		if (`checkBox -q -value boltShatter_CheckBox_Border`==0)
		{
			// includes all the new verts created by the boolean 
			$verts = `polyListComponentConversion -fromEdge -toVertex $outsideEdgesSet`;
			$verts = `ls -flatten $verts`;
			for ($vert in $verts)
			{
				$outsideVertPositions[size($outsideVertPositions)] = `pointPosition -w $vert`;
			}
		}
		
		//collapse short inside edges
		float $length = `floatField -q -value boltShatter_Float_Short`;
		$shortEdgesSet = `sets -edges 1 (boltShatter.GetEdgesShorterThan($length, $gBoltObjToCut))`;
		string $edgesToDelete[] = `sets -intersection $insideEdgesSet $shortEdgesSet`;
		print ("\nDeleted " + size(`sets -q $edgesToDelete`) + " short edges.");
		if (size($edgesToDelete)>0)
		{
			polyCollapseEdge $edgesToDelete;
		}

		//triangulate mesh
		polyTriangulate -ch 0 $gBoltObjToCut; 
		
		//collapse small edges adjacent to the cut hole
		string $interiorEdges[] = `polyListComponentConversion -fromEdge -toVertex $insideEdgesSet`;
		string $interiorEdges[] = `polyListComponentConversion -fromVertex -toEdge $interiorEdges`;
		string $interiorEdgesSet = `sets -edges 1 $interiorEdges`;
		$shortEdgesSet = `sets -edges 1 (boltShatter.GetEdgesShorterThan($length, $gBoltObjToCut))`;
		string $edgesToDelete[] = `sets -intersection $interiorEdgesSet $shortEdgesSet`;
		if (size($edgesToDelete)>0)
		{
			polyCollapseEdge $edgesToDelete;
		}

		
		//move points back to outside verts.
		$verts = `polyListComponentConversion -fromEdge -toVertex $outsideEdgesSet`;
		$verts = `ls -flatten $verts`;
		for ($vert in $verts)
		{
			vector $currentPos = `pointPosition -w $vert`;
			vector $nearestPos = <<0.0 , 0.0 , 0.0>>;
			float $nearestDist = 10000.0;
			
			for ($outsideVertPos in $outsideVertPositions)
			{
				float $dist = mag($currentPos-$outsideVertPos);
				if ($dist<$nearestDist) 
				{
					$nearestDist = $dist;
					$nearestPos  = $outsideVertPos;
				}
			}
			
			if ($nearestDist>0.0001)
			{
				xform -ws -t ($nearestPos.x) ($nearestPos.y) ($nearestPos.z) $vert;
			}
		}
		//cleanup sets
		delete $interiorEdgesSet $shortEdgesSet;
	}

	//weld any overlapping verts
	polyMergeVertex -d 0.0001 -ch 0 $gBoltObjToCut;

	//get border verts for optional smoothing
	vector $outsideVertPositions[] = {};
	string $verts[] = `polyListComponentConversion -fromEdge -toVertex $seamEdgesSet`;
	$verts = `ls -flatten $verts`;
	for ($vert in $verts)
	{
		$outsideVertPositions[size($outsideVertPositions)] = `pointPosition -w $vert`;
	}
	
	
	//create the final object
	select {$gBoltObjToCut, $gBoltMasterObject};
	int $weld = `checkBox -q -value boltShatter_CheckBox_Weld`;
	scee.doFlattenCombine(0,0,$weld,0);
	
	//delete last face that is left if you selected all polys on a shape
	if ($allFacesFlag == 1)
	{
		delete ($gBoltMasterObject + ".f[" + ($noFaces[0] - 1) + "]");
	}
		
	if (objExists($gBoltObjToCut+"_CUTOUT"))
	{
		rename ($gBoltObjToCut+"_CUTOUT") ($gBoltMasterObject+"_CUTOUT");
	}
	
	//do optional smoothing of border edges
	if (`checkBox -q -value boltShatter_CheckBox_Smooth`)
	{
		int $noVerts[] = `polyEvaluate -v $gBoltMasterObject`;
		int $n = $noVerts[0];
		
		for ($i=0;$i<$n;$i++)
		{
			$vert = ($gBoltMasterObject + ".vtx[" + $i + "]");
			vector $currentPos = `pointPosition -w $vert`;
			vector $nearestPos = <<0.0 , 0.0 , 0.0>>;
			float $nearestDist = 10000.0;
			
			for ($outsideVertPos in $outsideVertPositions)
			{
				float $dist = mag($currentPos-$outsideVertPos);
				if ($dist<$nearestDist) 
				{
					$nearestDist = $dist;
				}
			}
			
			if ($nearestDist < 0.001) //smooth if within 1mm of border
			{
				polySoftEdge -angle 46 -ch 0 $vert;
			}
		}
	}
	
	boltRestoreHierarchy;
	
	//cleanup sets
	delete $seamEdgesSet $outsideEdgesSet $insideEdgesSet;
	
}

global proc boltShatter.ScaleAndRotateGUI()
{
	int $direction = `radioButtonGrp -q -sl boltShatter_RadioButtonGrp_Direction`; 
	boltShatter.ScaleAndRotate($direction);
}

global proc boltShatter.ScaleAndRotate(int $direction)
{
	global string $gBoltObjToCutProxy;  
	global string $gBoltCutterProxy;
	global string $gBoltObjToCut;  
	global string $gBoltCutter;
	
	//set up to work before or after proxies are created
	string $cutter = $gBoltCutter;
	string $objToCut = $gBoltObjToCut; 
	if (objExists($gBoltCutterProxy)) $cutter = $gBoltCutterProxy;
	if (objExists($gBoltObjToCutProxy)) $objToCut = $gBoltObjToCutProxy;
	
		
	float $bb[] = `xform -q -ws -bb $objToCut`;
	
	if ($direction != 4)
	{
		setAttr ($cutter + ".t") (0.5*($bb[0]+$bb[3])) (0.5*($bb[1]+$bb[4])) (0.5*($bb[2]+$bb[5]));
	}
	
	if ($direction == 1)
	{
		setAttr ($cutter + ".r") 0 0 0;
		setAttr ($cutter + ".sx") (2*($bb[3]-$bb[0]));
		setAttr ($cutter + ".sy") ($bb[4]-$bb[1]);  
		setAttr ($cutter + ".sz") ($bb[5]-$bb[2]);  
	}
	if ($direction == 3)
	{
		setAttr ($cutter + ".r") 0 90 0;
		setAttr ($cutter + ".sx") (2*($bb[5]-$bb[2]));
		setAttr ($cutter + ".sy") ($bb[4]-$bb[1]);  
		setAttr ($cutter + ".sz") ($bb[3]-$bb[0]);  
	}
	if ($direction == 2)
	{
		setAttr ($cutter + ".r") 0 0 90;
		setAttr ($cutter + ".sx") (2*($bb[4]-$bb[1]));
		setAttr ($cutter + ".sy") ($bb[3]-$bb[0]);  
		setAttr ($cutter + ".sz") ($bb[5]-$bb[2]);  
	}
}


global proc boltShatter.SetupPolysToShatter()
//select the polygons we want shatter. 
//Extract and prepare them for the boolean operation
{
	//boltRemoveHierarchy;
	
	global string $gBoltPolysToShatter[];
	$gBoltPolysToShatter = boltShatter.GetPolysToShatter();
	
	if (size($gBoltPolysToShatter) < 1) return;
	
	global string $gBoltMasterObject;
	$gBoltMasterObject = `match "^[^\.]*" $gBoltPolysToShatter[0]`;
	
	polyChipOff -ch 0 -kft 1 -dup 1 -off 0;
	scee.detachSeparate;
	
	string $objs[] = `ls -sl -transforms`;
	
	global string $gBoltObjToCut;
	$gBoltObjToCut = $objs[0];
	
	if ( size(`polyInfo -nme -nmv -lf $gBoltObjToCut`)>0 )
	{
		delete $gBoltObjToCut;	
		confirmDialog -title "Error" -message "non-manifold / lamina faces found on polygon selection" -button "OK";
		return;
	}
	
	hide $gBoltMasterObject;
	
	//determine max size, so extrusion is relative to obj size	
	float $bb[] = `xform -q -ws -bb $gBoltObjToCut`;
	float $maxSize = ($bb[3]-$bb[0]);
	if ( ($bb[4]-$bb[1]) > $maxSize) $maxSize = ($bb[4]-$bb[1]);
	if ( ($bb[5]-$bb[2]) > $maxSize) $maxSize = ($bb[5]-$bb[2]); 

	select ($gBoltObjToCut+".f[*]");
	
	polyExtrudeFacet -constructionHistory 0 -ltz (-1 * $maxSize * 0.02);

	string $faces[] = `ls -sl`;
	string $verts[] = `polyListComponentConversion -fromFace -toVertex $faces`;
	string $faces[] = `polyListComponentConversion -fromVertex -toFace $verts`;
	
	//apply shader	
	if (objExists("TEMP_SHATTER_GREEN")==0)
	{
		string $shader = `shadingNode -asShader blinn -name "TEMP_SHATTER_GREEN"`;
		string $sg = `sets -renderable true -noSurfaceShader true -empty`;
		connectAttr -f ($shader+".outColor") ($sg+".surfaceShader");
		setAttr ($shader +".color") -type double3 0 0.8 0;
		setAttr ($shader +".transparency") -type double3 0.9 0.9 0.9;
	}	
	string $sg[] = `listConnections -type "shadingEngine" ("TEMP_SHATTER_GREEN.outColor")`;
	sets -fe $sg[0] $faces;
	
	//flip normals - extrude produces flipped faces 
	polyNormal -normalMode 0 -userNormalMode 0 -ch 0 $gBoltObjToCut;
	
}



global proc string[] boltShatter.GetPolysToShatter()
//returns the poly selection if it is valid
{
	string $polys[] = `ls -sl`;
	string $baseObj = `match "^[^\.]*" $polys[0]`;
	
	if (size($polys)==0)
	{
		confirmDialog -title "Error" -message "Please select the polygon faces you wish to cut" -button "OK";
		return {};
	}
	
	for ($poly in $polys)
	{
		if (`gmatch $poly "*.f\\[*\\]"` != 1)
		{
			confirmDialog -title "Error" -message "please select only faces to cut" -button "OK";
			return {};
		}
		if (`match "^[^\.]*" $poly` != $baseObj)
		{
			confirmDialog -title "Error" -message "this tool only works with faces from a single object" -button "OK";
			return {};
		}
	}
	
	return $polys;
}

global proc boltShatter.ChangeNoSides()
{
	//ignore custom cutters
	global int $gBoltCustomCutter;
	if ($gBoltCustomCutter==1) return;
	
	global string $gBoltCutter;
	global string $gBoltCutterProxy;
	
	if (objExists($gBoltCutter))
	{
		boltShatter.ExitBool();
		
		float $sc[] = `getAttr ($gBoltCutter + ".s")`;
		float $ro[] = `getAttr ($gBoltCutter + ".r")`;
		float $tr[] = `getAttr ($gBoltCutter + ".t")`;
		
		delete $gBoltCutter;
		boltShatter.CreateShapeGUI();
		
		setAttr ($gBoltCutterProxy + ".r") $ro[0] $ro[1] $ro[2];
		setAttr ($gBoltCutterProxy + ".s") $sc[0] $sc[1] $sc[2];
		setAttr ($gBoltCutterProxy + ".t") $tr[0] $tr[1] $tr[2];
		
	}
}



	
	
global proc boltShatter.CreateShapeGUI()
{
	global string $gBoltCutter;
	global string $gBoltCutterShape;
	global string $gBoltObjToCut;
	global int $gBoltCustomCutter;
	
	if ($gBoltObjToCut == "")
	{
		confirmDialog -title "Error" -message "please select polygons to cut first" -button "OK";
		return;
	}	
	
	if ($gBoltCutter != "")
	{
		if (objExists($gBoltCutter)) delete $gBoltCutter;
	}
	else
	{
		boltShatter.GenerateRandomSeed();
	}
	int $sides = `intSliderGrp -q -value boltShatter_IntSlider_Sides`;
	$gBoltCutter = boltShatter.CreateShape($sides);
	string $shapes[] = `listRelatives -children -type "mesh" $gBoltCutter`;
	$gBoltCutterShape = $shapes[0];
		
	if (objExists("TEMP_SHATTER_RED")==0)
	{
		string $shader = `shadingNode -asShader blinn -name "TEMP_SHATTER_RED"`;
		string $sg = `sets -renderable true -noSurfaceShader true -empty`;
		connectAttr -f ($shader+".outColor") ($sg+".surfaceShader");
		setAttr ($shader +".color") -type double3 0.8 0 0;
		setAttr ($shader +".transparency") -type double3 0.6 0.6 0.6;
	}	
	string $sg[] = `listConnections -type "shadingEngine" ("TEMP_SHATTER_RED.outColor")`;
	sets -fe $sg[0] ($gBoltCutter+".f[*]");
	
	$gBoltCustomCutter = 0;
	 
	boltShatter.StoreOriginalPoints();
	boltShatter.ScaleAndRotateGUI();
	boltShatter.UpdateShapeGUI();

	boltShatter.DoBool();   
	
	    
	
}

global proc boltShatter.UpdateShapeGUI()
{
	//ignore custom cutters
	global int $gBoltCustomCutter;
	if ($gBoltCustomCutter==1) return;
	
	boltShatter.RandomPointRotation();
	
	if (`checkBox -q -value boltShatter_CheckBox_Square` == 1)
	{	
		boltShatter.MakeSquare();
	}
	
	float $scale = `floatSliderGrp -q -value boltShatter_FloatSlider_Scale`;
	float $bias  = `floatSliderGrp -q -value boltShatter_FloatSlider_Bias`;
	boltShatter.Shardify($scale, $bias);
	
}

global proc string boltShatter.CreateShape(int $sides)
//creates and returns the initial shatter shape to manipulate
{
	string $cyls[] = `polyCylinder -axis 1 0 0 -r 0.5 -h 1 -sx $sides -sy 1 -sz 1 -ch 0`;
	return $cyls[0];
}


global proc boltShatter.GenerateRandomSeed()
//regenerates the random seed used for the shatter cyl.
{
	global float $gBoltShatterSeed[];
	$gBoltShatterSeed = {};
	for ($i=0;$i<200;$i++)
	{
		$gBoltShatterSeed[$i] = rand(1);
	}
}


global proc boltShatter.StoreOriginalPoints()
//stores the original cylindrical points in local space
{
	global vector $gBoltShatterOriginalPoints[];
	global string $gBoltCutterShape;
	
	$gBoltShatterOriginalPoints = {};
	
	int $numVerts[] = `polyEvaluate -v $gBoltCutterShape`;
	
	for ($i=0;$i<$numVerts[0];$i++)
	{
		$gBoltShatterOriginalPoints[$i] = `pointPosition -local ($gBoltCutterShape + ".vtx[" + $i + "]")`;
	}
}


global proc boltShatter.RandomPointRotation()
{
	global vector $gBoltShatterOriginalPoints[];
	global float $gBoltShatterSeed[];
	global string $gBoltCutterShape;
	global string $gBoltCutterProxy;
	
	//set up to work before or after proxies are created
	string $cutter = $gBoltCutterShape;
	if (objExists($gBoltCutterProxy)) $cutter = $gBoltCutterProxy;
	
	int $sides = boltShatter.GetSides();
	
	
	for ($i=0; $i<$sides; $i++)
	{ 
		int $i2 = $i + $sides;
		
		float $rotation = (360/$sides) -0.5;
		$rotation = $gBoltShatterSeed[$i]*$rotation;
		$rotation = deg_to_rad($rotation);		
		
		vector $pos = $gBoltShatterOriginalPoints[$i];
		vector $pos2 = $gBoltShatterOriginalPoints[$i2];
		float $y = ($pos.y * cos($rotation)) - ($pos.z * sin($rotation));
		float $z = ($pos.z * cos($rotation)) + ($pos.y * sin($rotation));
			
		xform -a -os -t ($pos.x)  $y $z ($cutter + ".vtx[" + $i + "]");
		xform -a -os -t ($pos2.x) $y $z ($cutter + ".vtx[" + $i2 + "]");
		
	}
}


global proc float[] boltShatter.getLocalYZBB()
//returns ymax, ymin, zmax, zmin in local space
{
	global string $gBoltCutterShape;
	
	int $sides = boltShatter.GetSides();
	
	float $yMax = 0.0;
	float $yMin = 0.0;
	float $zMax = 0.0;
	float $zMin = 0.0;
	
	for ($i=0; $i<$sides; $i++)
	{
		vector $pos = `pointPosition -l ($gBoltCutterShape + ".vtx[" + $i  + "]")`;
		
		if ($pos.y > $yMax) $yMax = $pos.y;
		if ($pos.y < $yMin) $yMin = $pos.y;
		if ($pos.z > $zMax) $zMax = $pos.z;
		if ($pos.z < $zMin) $zMin = $pos.z;
	}
	//get local space bounding box

	return {$yMax,$yMin,$zMax,$zMin};
}

global proc boltShatter.MakeSquare()
//makes the starting shape square rather than cylindrical
{
	global vector $gBoltShatterOriginalPoints[];
	global float $gBoltShatterSeed[];
	global string $gBoltCutterShape;
	global string $gBoltCutterProxy;
	
	//set up to work before or after proxies are created
	string $cutter = $gBoltCutterShape;
	if (objExists($gBoltCutterProxy)) $cutter = $gBoltCutterProxy;
	
	int $sides = boltShatter.GetSides();

	float $bb[] = boltShatter.getLocalYZBB();
	
	float $yMax = $bb[0];
	float $yMin = $bb[1];
	float $zMax = $bb[2];
	float $zMin = $bb[3];
		
	for ($i=0; $i<$sides; $i++)
	{ 
		int $i2 = $i + $sides;
		
		vector $pos  = `pointPosition -l ($cutter + ".vtx[" + $i  + "]")`;
		vector $pos2 = `pointPosition -l ($cutter + ".vtx[" + $i2 + "]")`;
			
		if ($pos.y >= abs($pos.z)) //top of square
			{
				$pos = <<$pos.x, $yMax,  $pos.z*($yMax/$pos.y)>>;
			}
		else if ( (-1*$pos.y) >= abs($pos.z) ) //bottom of square
			{
				$pos = <<$pos.x, $yMin,  $pos.z*($yMin/$pos.y)>>;
			}
		else if ($pos.z >= abs($pos.y)) //right of square
			{
				$pos = <<$pos.x, $pos.y*($zMax/$pos.z),  $zMax>>;
			}
		else if ( (-1*$pos.z) >= abs($pos.y)) //left of square
			{
				$pos = <<$pos.x, $pos.y*($zMin/$pos.z),  $zMin>>;
			}
		
		xform -a -os -t ($pos.x)  ($pos.y) ($pos.z) ($cutter + ".vtx[" + $i + "]");
		xform -a -os -t ($pos2.x) ($pos.y) ($pos.z) ($cutter + ".vtx[" + $i2 + "]");		
	}
}


global proc boltShatter.Shardify(float $scale, float $bias)
//creates spikes with the specified scale and ofset
{
	global float $gBoltShatterSeed[];
	global string $gBoltCutterShape;
	global string $gBoltCutterProxy;
	
	//set up to work before or after proxies are created
	string $cutter = $gBoltCutterShape;
	if (objExists($gBoltCutterProxy)) $cutter = $gBoltCutterProxy;

	int $sides = boltShatter.GetSides();
	
	float $bb[] = boltShatter.getLocalYZBB();
	float $rad = $bb[0];
	if ($bb[2] < $bb[0]) $rad = $bb[2];
	//get the shortest radius
			
	for ($i=0; $i<$sides; $i++)
	{ 
		int $i2 = $i + $sides;
		float $rand = $gBoltShatterSeed[(size($gBoltShatterSeed)-($i+1))];

		vector $pos  = `pointPosition -l ($cutter + ".vtx[" + $i  + "]")`;
		vector $pos2 = `pointPosition -l ($cutter + ".vtx[" + $i2 + "]")`;
		
		$vectorScale = ($rand*$scale*$rad)+$bias;
		
		if ($vectorScale < -0.95) $vectorScale = -0.95;
				
		float $y = $pos.y + ($pos.y * $vectorScale);
		float $z = $pos.z + ($pos.z * $vectorScale);
		
		xform -a -os -t ($pos.x)  $y $z ($cutter + ".vtx[" + $i + "]");
		xform -a -os -t ($pos2.x) $y $z ($cutter + ".vtx[" + $i2 + "]");
		
	}
}


global proc int boltShatter.GetSides()
//returns number of sides of the shatter shape
{
	global vector $gBoltShatterOriginalPoints[];
	return (size($gBoltShatterOriginalPoints)-2)/2;
}




global proc boltShatter.DoBool()
//sets up the proxies and boolean
//adapted form scee tools boolTool.mel
{
	global string $gBoltBooledObject[];
	global string $gBoltCutter;
	global string $gBoltObjToCut;
	global string $gBoltCutterProxy;
	global string $gBoltObjToCutProxy;
	global string $gBoltCutterLayer;
	global string $gBoltObjToCutLayer;
	
	string $tempArray[];
	clear $gBoltBooledObject;
	
	//delete the objects history to avoid boolean errors later on.
	delete -ch $gBoltCutter;
	delete -ch $gBoltObjToCut;
			
	//HACK:tweak the verts, so it doesn't stall when user edits mesh components
	polyMoveVertex -ch 0 -t 0 0 0 -ro 0 0 0 -s 1 1 1 -ran 0 $gBoltCutter;
	polyMoveVertex -ch 0 -t 0 0 0 -ro 0 0 0 -s 1 1 1 -ran 0 $gBoltObjToCut;
	
	//get the original layers
	$gBoltCutterLayer   = `objectLayer $gBoltCutter`;
	$gBoltObjToCutLayer = `objectLayer $gBoltObjToCut`;
	
	select -cl;
	
	//set up the proxy layer.
	if (!`objExists "PolyCutter_Proxy"`) createDisplayLayer -name "PolyCutter_Proxy";
	setAttr "PolyCutter_Proxy.shading" 0;
	setAttr "PolyCutter_Proxy.texturing" 0; 
	setAttr "PolyCutter_Proxy.color" 17;
	
	//set up the target layer.
	if (!`objExists "PolyCutter_Target"`) createDisplayLayer -name "PolyCutter_Target";
	setAttr "PolyCutter_Target.displayType" 2;
	setAttr "PolyCutter_Target.color" 20;
	  
	//duplicate the orignals for the proxys
	$tempArray = `duplicate $gBoltObjToCut`;
	$gBoltObjToCutProxy = $tempArray[0]; 
	
	$tempArray = `duplicate -rr -un $gBoltCutter`;  
	$gBoltCutterProxy = $tempArray[0];
	
	//add the proxys to their layer";
	editDisplayLayerMembers "PolyCutter_Proxy" $gBoltCutterProxy $gBoltObjToCutProxy;
	
	//hook up the connection of proxys to their respective object and cutter meshes
	//object
	connectAttr -f ($gBoltObjToCutProxy + ".translate") ($gBoltObjToCut + ".translate");
	connectAttr -f ($gBoltObjToCutProxy + ".rotate") ($gBoltObjToCut + ".rotate");
	connectAttr -f ($gBoltObjToCutProxy + ".scale") ($gBoltObjToCut + ".scale");
	connectAttr -f ($gBoltObjToCutProxy + ".outMesh") ( $gBoltObjToCut + ".inMesh");
	connectAttr -f ($gBoltObjToCutProxy + ".rotatePivot") ($gBoltObjToCut + ".rotatePivot ");
	connectAttr -f ($gBoltObjToCutProxy + ".rotatePivotTranslate") ($gBoltObjToCut + ".rotatePivotTranslate ");
	connectAttr -f ($gBoltObjToCutProxy + ".scalePivot") ($gBoltObjToCut + ".scalePivot ");
	connectAttr -f ($gBoltObjToCutProxy + ".scalePivotTranslate") ($gBoltObjToCut + ".scalePivotTranslate ");
	//cutter
	connectAttr -f ($gBoltCutterProxy + ".translate") ($gBoltCutter + ".translate");
	connectAttr -f ($gBoltCutterProxy + ".rotate") ($gBoltCutter + ".rotate");
	connectAttr -f ($gBoltCutterProxy + ".scale") ($gBoltCutter + ".scale");
	connectAttr -f ($gBoltCutterProxy + ".outMesh") ( $gBoltCutter + ".inMesh");
	connectAttr -f ($gBoltCutterProxy + ".rotatePivot") ($gBoltCutter + ".rotatePivot ");
	connectAttr -f ($gBoltCutterProxy + ".rotatePivotTranslate") ($gBoltCutter + ".rotatePivotTranslate ");
	connectAttr -f ($gBoltCutterProxy + ".scalePivot") ($gBoltCutter + ".scalePivot ");
	connectAttr -f ($gBoltCutterProxy + ".scalePivotTranslate") ($gBoltCutter + ".scalePivotTranslate ");
	
	//do the boolean and add it to it's layer..
	$gBoltBooledObject = `polyBoolOp -op 2 $gBoltObjToCut $gBoltCutter`;
	editDisplayLayerMembers "PolyCutter_Target" $gBoltBooledObject[0];
	
	//select the cutter, and set the move tool
	select -r $gBoltCutterProxy; setToolTo moveSuperContext;
}

global proc boltShatter.ExitBool()
//cancels and cleans up the boolean operation
//adapted form scee tools boolTool.mel
{ 
	global string $gBoltBooledObject[];
	global string $gBoltCutter;
	global string $gBoltObjToCut;
	global string $gBoltCutterProxy;
	global string $gBoltObjToCutProxy;
	global string $gBoltCutterLayer;
	global string $gBoltObjToCutLayer;

	//delete the booled object
	if (`objExists $gBoltBooledObject[0]`)
	{
		delete -ch $gBoltBooledObject[0];
		delete $gBoltBooledObject[0]; 
	}

	// restore "BoolProxy_Object"
	if (`objExists $gBoltObjToCutProxy`)
	{ 
	 rename $gBoltObjToCutProxy $gBoltObjToCut;
	 editDisplayLayerMembers $gBoltObjToCutLayer $gBoltObjToCut;
	}

	// restore "BoolProxy_Cutter";
	if (`objExists $gBoltCutterProxy`)
	{
	  rename $gBoltCutterProxy $gBoltCutter;
	  editDisplayLayerMembers $gBoltCutterLayer $gBoltCutter;
	}
	
	//clean up the layers
	if (`objExists "PolyCutter_Proxy"`) delete "PolyCutter_Proxy";
	if (`objExists "PolyCutter_Target"`) delete "PolyCutter_Target";
}


global proc boltShatter.CommitBool()
{ 
	global string $gBoltBooledObject[];
	global string $gBoltCutter;
	global string $gBoltObjToCut;
	global string $gBoltCutterProxy;
	global string $gBoltObjToCutProxy;
	global string $gBoltCutterLayer;
	global string $gBoltObjToCutLayer;
	  
	string $copy[];
	string $copyInverse[];
	
	int $mode = `radioButtonGrp -q -sl boltShatter_RadioButtonGrp_CutoutMode`;
	
	//store the boolean operation
	int $operation;
	$operation = `getAttr ($gBoltBooledObject[1] + ".operation")`;
	
	//delete the booled object
	delete -ch $gBoltBooledObject[0];
	delete $gBoltBooledObject[0];
	
	//create copies
	$copy = `duplicate $gBoltObjToCutProxy $gBoltCutterProxy`;
	
	//re-create the original boolean object. Needed because of a bug that was exposed whilst moving the transform
	//nodes, it messes up the shader set assignment of the resulting objects.
	$gBoltBooledObject = `polyBoolOp -op $operation -preserveColor 1 $copy[0] $copy[1]`;
	
	//delete the booled object's history
	delete -ch $gBoltBooledObject[0];  
	rename $gBoltBooledObject[0] $gBoltObjToCut;
	editDisplayLayerMembers $gBoltObjToCutLayer $gBoltObjToCut;
	
	//if needed create the intersection object?
	if (($mode == 2)||($mode == 3))
	{
		$copyInverse = `duplicate $gBoltObjToCutProxy $gBoltCutterProxy`;
		$gBoltBooledObject = `polyBoolOp -op 3 -preserveColor 1 $copyInverse[0] $copyInverse[1]`;
		delete -ch $gBoltBooledObject[0];
		editDisplayLayerMembers $gBoltObjToCutLayer $gBoltBooledObject[0];
		rename $gBoltBooledObject[0] ($gBoltObjToCut+"_CUTOUT");
	}
	
	//Clean up - delete the proxy objects
	delete $gBoltObjToCutProxy;	
	delete -ch $gBoltCutterProxy;
	
	//preserve the cutter if necessary
	if (`checkBox -q -value boltShatter_CheckBox_Cutter`)
	{
		rename $gBoltCutterProxy $gBoltCutter;
	}
	else
	{		
		delete $gBoltCutterProxy;
	}
	editDisplayLayerMembers $gBoltObjToCutLayer $gBoltObjToCut;
	select -r $gBoltObjToCut;
	
	//clean up the layers
	if (`objExists "PolyCutter_Proxy"`) delete "PolyCutter_Proxy";
	if (`objExists "PolyCutter_Target"`) delete "PolyCutter_Target";
	
}

global proc string[] boltShatter.GetEdgesShorterThan(float $length, string $obj)
{
	select -r $obj;
	polySelectConstraint -m 3 -t 0x8000 -l on -lb 0 $length;
	string $shortEdges[] = `ls -sl -flatten`;
	polySelectConstraint -l off;
	polySelectConstraint -m 0; 
	select -cl;
	return $shortEdges;
}