//------------------------------------------------------------------------------
// Desc   : Generic fake BRDF shader 
// Author : Cedric Caillaud (http://www.kjapi.com) & Brice Vandemoortele (http://www.mentalwarp.com)
// Date   : October 2007


//------------------------------------------------------------------------------
//This work is licensed under a  Creative Commons Attribution-Share Alike 3.0 Unported License
// http://creativecommons.org/licenses/by-sa/3.0/
//------------------------------------------------------------------------------

string Category    = "Generic";
string description = "Generic fake BRDF shader v1.0";

//-----------------------------------------------
// Matrices
//-----------------------------------------------
float4x4 wvpMatrix	: WorldViewProjection;
float4x4 wvMatrixIT	: worldviewinversetranspose;
float4x4 wMatrix	: World;
float4x4 wvMatrix	: Worldviewinverse;

//-----------------------------------------------
// Light position
//-----------------------------------------------
float4 LightPos : Position 
<
	string UIName	= "LightPosition";
	string Object	= "PointLight";
	//string Space	= "World";
> = {-54.0f, 50.0f, 100.0f, 1.0f};

//-----------------------------------------------
// Light color
//-----------------------------------------------
float3 LightColor
<
	string type		= "color";
	string UIName	= "LightColor";
	string UIWidget = "Color";
> = {1.0, 1.0, 1.0};

//-----------------------------------------------
// BRDF Sampler
//-----------------------------------------------
texture BRDF
<
	string Name = "brdf.tga";
	string UIName = "BRDF";
	string ResourceType = "2D";
>;
 
sampler2D BRDFSampler = sampler_state
{
	Texture = <BRDF>;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;
	WrapR = ClampToEdge;
};

half OffsetU
<
	string UIWidget = "slider";
	float UIMin = -1.0;
	float UIMax = 1.0;
	float UIStep = 0.01;
	string UIName = "Constant";
> = 0.0;

half OffsetV
<
	string UIWidget = "slider";
	float UIMin = -1.0;
	float UIMax = 1.0;
	float UIStep = 0.01;
	string UIName = "Constant";
> = 0.0;

//-----------------------------------------------
// diffuse sampler - D
//-----------------------------------------------
texture diffuseTexture	: DiffuseMap
< 
	string ResourceName = "Dummy_White.tga"; 
	string ResourceType = "2D"; 
>;
sampler2D diffuseSampler = sampler_state 
{	
	Texture = <diffuseTexture>;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	LODBias = -.5 ;
};

//-----------------------------------------------
// Alpha Translu sampler - A
//-----------------------------------------------
texture AlphaTexture	: AlphaMap
< 
	string ResourceName = "Dummy_White.tga"; 
	string ResourceType = "2D"; 
>;
sampler2D AlphaSampler = sampler_state 
{	
	Texture = <AlphaTexture>;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
};

//-----------------------------------------------
// Fake SSS color
//-----------------------------------------------
half3 SSSColor
<
	string type		= "color";
	string UIName	= "SSSColor";
	string UIWidget = "Color";
> = {0, 0, 0};

//-----------------------------------------------
// Normal sampler - N
//-----------------------------------------------
texture NormalTexture : NormalMap
< 
	string ResourceName = "Dummy_NM.tga";
	string ResourceType = "2D";
>;
sampler2D NormalSampler = sampler_state
{
	Texture = <NormalTexture>;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	LODBias = -.5 ;
};

//-----------------------------------------------
// Bump Factor
//-----------------------------------------------
half BumpFactor
<
	string UIWidget = "slider";
	float UIMin		= 0.0;
	float UIMax		= 3;
	float UIStep	= 0.1;
	string UIName	=  "Bump Scale";
> = 1.0;

//-----------------------------------------------
// specular sampler - S
//-----------------------------------------------
texture SpecularTexture	: SpecularMap
<
	string ResourceName  = "Dummy_White.tga"; 
	string ResourceType = "2D";
>;
sampler2D SpecularSampler = sampler_state
{
	Texture = <SpecularTexture>;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
};

//-----------------------------------------------
// Specular factor
//-----------------------------------------------
half SpecFactor : SpecularFactor 
<
	string UIWidget = "slider";
	float UIMin		= 0.0;
	float UIMax		= 1.0;
	float UIStep	= 0.1;
	string UIName	=  "Specular Factor";
> = 1.0;

//-----------------------------------------------
// Specular Fresnel Power
//-----------------------------------------------
half SpecularFresnelPower
<
	string UIWidget = "slider";
	float UIMin		= 0.01;
	float UIMax		= 10;
	float UIStep	= 0.1;
	string UIName	=  "Specular Fresnel Factor";
> = 0;

//-----------------------------------------------
// specular power sampler - SP
//-----------------------------------------------
texture SpecularPowerTexture	: SpecularPowerMap
<
	string ResourceName  = "Dummy_White.tga"; 
	string ResourceType = "2D";
>;
sampler2D SpecularPowerSampler = sampler_state
{
	Texture = <SpecularPowerTexture>;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
};

//-----------------------------------------------
// Gloss factor
//-----------------------------------------------
half GlossFactor : GlossinessFactor
<
	string UIWidget = "slider";
	float UIMin		= 0.0;
	float UIMax		= 1.0;
	float UIStep	= 0.1;
	string UIName	= "Gloss Factor";
> = 1.0;

//-----------------------------------------------
// emissive sampler - E
//-----------------------------------------------
texture EmissiveTexture	: EmissiveMap
<
	string ResourceName  = "Dummy_Black.tga"; 
	string ResourceType = "2D";
>;
sampler2D EmissiveSampler = sampler_state
{
	Texture = <EmissiveTexture>;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
};

//-----------------------------------------------
//emissive factor
//-----------------------------------------------
half EmissiveFactor
<
	string UIWidget = "slider";
	float UIMin		= 0.0;
	float UIMax		= 10;
	float UIStep	= 0.1;
	string UIName	=  "Emissive Factor";
> = 0;

//-----------------------------------------------
//emissive color
//-----------------------------------------------
half3 EmissiveColor
<
	string type		= "color";
	string UIName	= "EmissiveColor";
	string UIWidget = "Color";
> = {1.0, 1.0, 1.0};

//-----------------------------------------------
// Env sampler
//-----------------------------------------------
texture EnvTexture
<
	string ResourceName = "Water_MM_01.dds";
	string ResourceType = "Cube";
>;
samplerCUBE EnvSampler = sampler_state
{
	Texture = <EnvTexture>;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;
	WrapR = ClampToEdge;
};

//-----------------------------------------------
// Fresnel Power
//-----------------------------------------------
half FresnelPower
<
	string UIWidget = "slider";
	float UIMin		= 0.01;
	float UIMax		= 10;
	float UIStep	= 0.1;
	string UIName	=  "Fresnel Factor";
> = 1.5;

//-----------------------------------------------
// Reflection Blur
//-----------------------------------------------
half ReflectionBlurFactor
<
	string UIWidget = "slider";
	float UIMin		= 0.0;
	float UIMax		= 10;
	float UIStep	= 0.1;
	string UIName	=  "Reflection Blur Factor";
> = 1;

//-----------------------------------------------
//Ambient Factor
//-----------------------------------------------
half AmbientFactor
<
	string UIWidget = "slider";
	float UIMin		= 0.0;
	float UIMax		= 2;
	float UIStep	= 0.1;
	string UIName	=  "Ambient Factor";
> = 1;

//-----------------------------------------------
//Ambient Blur
//-----------------------------------------------
half AmbientBlurFactor
<
	string UIWidget = "slider";
	float UIMin		= 0.0;
	float UIMax		= 10;
	float UIStep	= 1;
	string UIName	=  "Ambient Blur Factor";
> = 3;

//---------------------------------------------
// structures 
//---------------------------------------------
struct vIN
{
	float4 Position : POSITION;
	half3 Normal 	: NORMAL;
	half4 Color		: COLOR0;
	half2 TexCoord : TEXCOORD0;
	half3 Tangent  : TEXCOORD1;
	half3 Binormal : TEXCOORD2;
};

struct vOUT2
{
	float4 Position		: POSITION;
	half4 Color			: COLOR0;
	half2 TexCoord		: TEXCOORD0;
	half3 LightDir		: TEXCOORD1;
	half3 EyeDir		: TEXCOORD2;
	half3 Tgt			: TEXCOORD3;
	half3 Bnl		 	: TEXCOORD4;
	half3 Nml		 	: TEXCOORD5;
};

//---------------------------------------------
// Vertex shader
//---------------------------------------------
vOUT2 MainVS2(vIN IN)
{
	vOUT2 OUT;

	half3 tangent  = IN.Tangent.xyz;
	half3 normal   = IN.Normal.xyz;
	half3 binormal = IN.Binormal.xyz;

	// position ,uvs
	OUT.Position	= mul(wvpMatrix,  IN.Position);
	OUT.TexCoord.xy = IN.TexCoord;

	half3 EyeDir = normalize(wvMatrixIT[3].xyz - IN.Position.xyz);
	OUT.EyeDir.xyz = mul(wMatrix, half4(EyeDir.xyz, 0.0)).xyz;

	half3 LightDir = normalize(LightPos.xyz - IN.Position.xyz);
	OUT.LightDir.xyz = mul(wMatrix, half4(LightDir.xyz, 0.0)).xyz;

	OUT.Tgt = mul(wMatrix, half4(tangent, 0)).xyz;
	OUT.Bnl = mul(wMatrix, half4(binormal, 0)).xyz;
	OUT.Nml = mul(wMatrix, half4(normal, 0)).xyz;

	OUT.Color = IN.Color;
	return OUT;
}

//---------------------------------------------
// pixel shader shader
//---------------------------------------------
float4 Gloss2PS(vOUT2 IN) : COLOR
{
	half3 diffuse		= tex2D(diffuseSampler,	IN.TexCoord.xy).rgb;
	half alpha			= tex2D(AlphaSampler,	IN.TexCoord.xy).r;
	half3 normal		= tex2D(NormalSampler,	IN.TexCoord.xy).xyz * 2.0 - 1.0;
	normal = normalize(float3(normal.x * BumpFactor, normal.y * BumpFactor, normal.z));
	half specular		= SpecFactor * tex2D(SpecularSampler,IN.TexCoord.xy).r;
	half specularPower	= tex2D(SpecularPowerSampler,IN.TexCoord.xy).r;
	half emissive		= tex2D(EmissiveSampler,IN.TexCoord.xy).r;

	clip(alpha-0.25);

	half3 wNormal;
	wNormal.xyz  = normal.x * IN.Tgt;
	wNormal.xyz += normal.y * IN.Bnl;
	wNormal.xyz += normal.z * IN.Nml;
	wNormal = normalize(wNormal);

	// normalize
	half3 wLightDir	= normalize(IN.LightDir);
	half3 wEyeDir		= normalize(IN.EyeDir);
	
	half NdotE = dot(wNormal.xyz, wEyeDir.xyz);
	half LdotN = dot(wNormal.xyz, -wLightDir.xyz);

	// reflection
	half4 wReflect;
	wReflect.xyz = 2.0 * NdotE * wNormal.xyz - wEyeDir.xyz;	
	wReflect.w = (1.0 - GlossFactor) * specularPower.r * ReflectionBlurFactor;
	half3 env = texCUBElod(EnvSampler, wReflect).rgb;

	//Fresnel effect
	half fresnel = pow(1.001-saturate(NdotE),FresnelPower);
	half specFresnel = pow(1.001-saturate(NdotE),SpecularFresnelPower);

	//BRDF
	half2 BRDF_UV = float2(saturate(NdotE+OffsetU), saturate((LdotN + 1) * 0.5) + OffsetV);
	half3 BRDF = tex2D(BRDFSampler, BRDF_UV.xy).rgb;

	// specular
	half specPower = specularPower * (50 * GlossFactor + 1);
	half3 LdotR = saturate(pow(dot(wLightDir.xyz, wReflect.xyz), specPower)) * LightColor.rgb;

	// ambient
	half3 ambient = AmbientFactor*texCUBElod(EnvSampler,  float4(wNormal.xyz,AmbientBlurFactor)).rgb;

	// Thin Surface translucence
	half3 BdotN = (1-alpha) * saturate(dot(wEyeDir.xyz, -wLightDir.xyz)) * saturate(LdotN) * LightColor.rgb;

	// diffuse
	half3 diffuseFull = diffuse.rgb * ( ambient.rgb + BRDF.rgb);

	return float4(IN.Color.xyz * (lerp(diffuseFull.rgb, env.rgb, specular*fresnel)
	+ (specular * LdotR * specFresnel))
	+ (BdotN * diffuse.xyz * SSSColor)
	+ (EmissiveFactor * emissive * EmissiveColor) , 1.0);
}


//-------------------------------------------------
//  techniques 
//-------------------------------------------------
technique Generic
{
	pass P0
	{
		CullFaceEnable=false;
		DepthTestEnable=true;
		DepthMask = true;
		DepthFunc = LEqual;

		VertexProgram   = compile arbvp1 /* vp40 */ MainVS2();
		FragmentProgram = compile fp40 Gloss2PS();
		
	}
}